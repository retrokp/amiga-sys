use core::arch::asm;

/// A function pointer with the Amiga calling convention
///
/// Parameters and the return value are passed in the CPU registers (this is not the "C"
/// calling convention). The ROM kernel manuals have documented which registers to use.
pub type FPTR = usize;

/* automatically modified by the amiga-sys tools */
/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        unsafe { ::core::slice::from_raw_parts(self.as_ptr(), len) }
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        unsafe { ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len) }
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const NULL: u32 = 0;
pub const BYTEMASK: u32 = 255;
pub const NT_UNKNOWN: u32 = 0;
pub const NT_TASK: u32 = 1;
pub const NT_INTERRUPT: u32 = 2;
pub const NT_DEVICE: u32 = 3;
pub const NT_MSGPORT: u32 = 4;
pub const NT_MESSAGE: u32 = 5;
pub const NT_FREEMSG: u32 = 6;
pub const NT_REPLYMSG: u32 = 7;
pub const NT_RESOURCE: u32 = 8;
pub const NT_LIBRARY: u32 = 9;
pub const NT_MEMORY: u32 = 10;
pub const NT_SOFTINT: u32 = 11;
pub const NT_FONT: u32 = 12;
pub const NT_PROCESS: u32 = 13;
pub const NT_SEMAPHORE: u32 = 14;
pub const NT_SIGNALSEM: u32 = 15;
pub const NT_BOOTNODE: u32 = 16;
pub const NT_KICKMEM: u32 = 17;
pub const NT_GRAPHICS: u32 = 18;
pub const NT_DEATHMESSAGE: u32 = 19;
pub const NT_USER: u32 = 254;
pub const NT_EXTENDED: u32 = 255;
pub const ACPU_BusErr: u32 = 2147483650;
pub const ACPU_AddressErr: u32 = 2147483651;
pub const ACPU_InstErr: u32 = 2147483652;
pub const ACPU_DivZero: u32 = 2147483653;
pub const ACPU_CHK: u32 = 2147483654;
pub const ACPU_TRAPV: u32 = 2147483655;
pub const ACPU_PrivErr: u32 = 2147483656;
pub const ACPU_Trace: u32 = 2147483657;
pub const ACPU_LineA: u32 = 2147483658;
pub const ACPU_LineF: u32 = 2147483659;
pub const ACPU_Format: u32 = 2147483662;
pub const ACPU_Spurious: u32 = 2147483672;
pub const ACPU_AutoVec1: u32 = 2147483673;
pub const ACPU_AutoVec2: u32 = 2147483674;
pub const ACPU_AutoVec3: u32 = 2147483675;
pub const ACPU_AutoVec4: u32 = 2147483676;
pub const ACPU_AutoVec5: u32 = 2147483677;
pub const ACPU_AutoVec6: u32 = 2147483678;
pub const ACPU_AutoVec7: u32 = 2147483679;
pub const AT_DeadEnd: u32 = 2147483648;
pub const AT_Recovery: u32 = 0;
pub const AG_NoMemory: u32 = 65536;
pub const AG_MakeLib: u32 = 131072;
pub const AG_OpenLib: u32 = 196608;
pub const AG_OpenDev: u32 = 262144;
pub const AG_OpenRes: u32 = 327680;
pub const AG_IOError: u32 = 393216;
pub const AG_NoSignal: u32 = 458752;
pub const AG_BadParm: u32 = 524288;
pub const AG_CloseLib: u32 = 589824;
pub const AG_CloseDev: u32 = 655360;
pub const AG_ProcCreate: u32 = 720896;
pub const AO_ExecLib: u32 = 32769;
pub const AO_GraphicsLib: u32 = 32770;
pub const AO_LayersLib: u32 = 32771;
pub const AO_Intuition: u32 = 32772;
pub const AO_MathLib: u32 = 32773;
pub const AO_DOSLib: u32 = 32775;
pub const AO_RAMLib: u32 = 32776;
pub const AO_IconLib: u32 = 32777;
pub const AO_ExpansionLib: u32 = 32778;
pub const AO_DiskfontLib: u32 = 32779;
pub const AO_UtilityLib: u32 = 32780;
pub const AO_KeyMapLib: u32 = 32781;
pub const AO_AudioDev: u32 = 32784;
pub const AO_ConsoleDev: u32 = 32785;
pub const AO_GamePortDev: u32 = 32786;
pub const AO_KeyboardDev: u32 = 32787;
pub const AO_TrackDiskDev: u32 = 32788;
pub const AO_TimerDev: u32 = 32789;
pub const AO_CIARsrc: u32 = 32800;
pub const AO_DiskRsrc: u32 = 32801;
pub const AO_MiscRsrc: u32 = 32802;
pub const AO_BootStrap: u32 = 32816;
pub const AO_Workbench: u32 = 32817;
pub const AO_DiskCopy: u32 = 32818;
pub const AO_GadTools: u32 = 32819;
pub const AO_Unknown: u32 = 32821;
pub const AN_ExecLib: u32 = 16777216;
pub const AN_ExcptVect: u32 = 16777217;
pub const AN_BaseChkSum: u32 = 16777218;
pub const AN_LibChkSum: u32 = 16777219;
pub const AN_MemCorrupt: u32 = 2164260869;
pub const AN_IntrMem: u32 = 2164260870;
pub const AN_InitAPtr: u32 = 16777223;
pub const AN_SemCorrupt: u32 = 16777224;
pub const AN_FreeTwice: u32 = 16777225;
pub const AN_BogusExcpt: u32 = 2164260874;
pub const AN_IOUsedTwice: u32 = 16777227;
pub const AN_MemoryInsane: u32 = 16777228;
pub const AN_IOAfterClose: u32 = 16777229;
pub const AN_StackProbe: u32 = 16777230;
pub const AN_BadFreeAddr: u32 = 16777231;
pub const AN_BadSemaphore: u32 = 16777232;
pub const AN_AVLNotImpl: u32 = 16777233;
pub const AN_TreeNotImpl: u32 = 16777234;
pub const AN_GraphicsLib: u32 = 33554432;
pub const AN_GfxNoMem: u32 = 2181103616;
pub const AN_GfxNoMemMspc: u32 = 2181103617;
pub const AN_LongFrame: u32 = 2181103622;
pub const AN_ShortFrame: u32 = 2181103623;
pub const AN_TextTmpRas: u32 = 33619977;
pub const AN_BltBitMap: u32 = 2181103626;
pub const AN_RegionMemory: u32 = 2181103627;
pub const AN_MakeVPort: u32 = 2181103664;
pub const AN_GfxNewError: u32 = 33554444;
pub const AN_GfxFreeError: u32 = 33554445;
pub const AN_GfxNoLCM: u32 = 2181108276;
pub const AN_ObsoleteFont: u32 = 33555457;
pub const AN_LayersLib: u32 = 50331648;
pub const AN_LayersNoMem: u32 = 2197880832;
pub const AN_Intuition: u32 = 67108864;
pub const AN_GadgetType: u32 = 2214592513;
pub const AN_BadGadget: u32 = 67108865;
pub const AN_CreatePort: u32 = 2214658050;
pub const AN_ItemAlloc: u32 = 67174403;
pub const AN_SubAlloc: u32 = 67174404;
pub const AN_PlaneAlloc: u32 = 2214658053;
pub const AN_ItemBoxTop: u32 = 2214592518;
pub const AN_OpenScreen: u32 = 2214658055;
pub const AN_OpenScrnRast: u32 = 2214658056;
pub const AN_SysScrnType: u32 = 2214592521;
pub const AN_AddSWGadget: u32 = 2214658058;
pub const AN_OpenWindow: u32 = 2214658059;
pub const AN_BadState: u32 = 2214592524;
pub const AN_BadMessage: u32 = 2214592525;
pub const AN_WeirdEcho: u32 = 2214592526;
pub const AN_NoConsole: u32 = 2214592527;
pub const AN_NoISem: u32 = 67108880;
pub const AN_ISemOrder: u32 = 67108881;
pub const AN_DeadIntui: u32 = 67108882;
pub const AN_MathLib: u32 = 83886080;
pub const AN_DOSLib: u32 = 117440512;
pub const AN_StartMem: u32 = 117506049;
pub const AN_EndTask: u32 = 117440514;
pub const AN_QPktFail: u32 = 117440515;
pub const AN_AsyncPkt: u32 = 117440516;
pub const AN_FreeVec: u32 = 117440517;
pub const AN_DiskBlkSeq: u32 = 117440518;
pub const AN_BitMap: u32 = 117440519;
pub const AN_KeyFree: u32 = 117440520;
pub const AN_BadChkSum: u32 = 117440521;
pub const AN_DiskError: u32 = 117440522;
pub const AN_KeyRange: u32 = 117440523;
pub const AN_BadOverlay: u32 = 117440524;
pub const AN_BadInitFunc: u32 = 117440525;
pub const AN_FileReclosed: u32 = 117440526;
pub const AN_CLIObsolete: u32 = 117440527;
pub const AN_RAMLib: u32 = 134217728;
pub const AN_BadSegList: u32 = 134217729;
pub const AN_IconLib: u32 = 150994944;
pub const AN_ExpansionLib: u32 = 167772160;
pub const AN_BadExpansionFree: u32 = 167772161;
pub const AN_DiskfontLib: u32 = 184549376;
pub const AN_AudioDev: u32 = 268435456;
pub const AN_ConsoleDev: u32 = 285212672;
pub const AN_NoWindow: u32 = 285212673;
pub const AN_GamePortDev: u32 = 301989888;
pub const AN_KeyboardDev: u32 = 318767104;
pub const AN_TrackDiskDev: u32 = 335544320;
pub const AN_TDCalibSeek: u32 = 335544321;
pub const AN_TDDelay: u32 = 335544322;
pub const AN_TimerDev: u32 = 352321536;
pub const AN_TMBadReq: u32 = 352321537;
pub const AN_TMBadSupply: u32 = 352321538;
pub const AN_CIARsrc: u32 = 536870912;
pub const AN_DiskRsrc: u32 = 553648128;
pub const AN_DRHasDisk: u32 = 553648129;
pub const AN_DRIntNoAct: u32 = 553648130;
pub const AN_MiscRsrc: u32 = 570425344;
pub const AN_BootStrap: u32 = 805306368;
pub const AN_BootError: u32 = 805306369;
pub const AN_Workbench: u32 = 822083584;
pub const AN_NoFonts: u32 = 2969567233;
pub const AN_WBBadStartupMsg1: u32 = 822083585;
pub const AN_WBBadStartupMsg2: u32 = 822083586;
pub const AN_WBBadIOMsg: u32 = 822083587;
pub const AN_WBReLayoutToolMenu: u32 = 2969632777;
pub const AN_DiskCopy: u32 = 838860800;
pub const AN_GadTools: u32 = 855638016;
pub const AN_UtilityLib: u32 = 872415232;
pub const AN_Unknown: u32 = 889192448;
pub const IOERR_OPENFAIL: i32 = -1;
pub const IOERR_ABORTED: i32 = -2;
pub const IOERR_NOCMD: i32 = -3;
pub const IOERR_BADLENGTH: i32 = -4;
pub const IOERR_BADADDRESS: i32 = -5;
pub const IOERR_UNITBUSY: i32 = -6;
pub const IOERR_SELFTEST: i32 = -7;
pub const RTC_MATCHWORD: u32 = 19196;
pub const RTF_AUTOINIT: u32 = 128;
pub const RTF_AFTERDOS: u32 = 4;
pub const RTF_SINGLETASK: u32 = 2;
pub const RTF_COLDSTART: u32 = 1;
pub const RTW_NEVER: u32 = 0;
pub const RTW_COLDSTART: u32 = 1;
pub const MEMF_ANY: u32 = 0;
pub const MEMF_PUBLIC: u32 = 1;
pub const MEMF_CHIP: u32 = 2;
pub const MEMF_FAST: u32 = 4;
pub const MEMF_LOCAL: u32 = 256;
pub const MEMF_24BITDMA: u32 = 512;
pub const MEMF_KICK: u32 = 1024;
pub const MEMF_CLEAR: u32 = 65536;
pub const MEMF_LARGEST: u32 = 131072;
pub const MEMF_REVERSE: u32 = 262144;
pub const MEMF_TOTAL: u32 = 524288;
pub const MEMF_NO_EXPUNGE: u32 = 2147483648;
pub const MEM_BLOCKSIZE: u32 = 8;
pub const MEM_BLOCKMASK: u32 = 7;
pub const MEMHF_RECYCLE: u32 = 1;
pub const MEM_DID_NOTHING: u32 = 0;
pub const MEM_ALL_DONE: i32 = -1;
pub const MEM_TRY_AGAIN: u32 = 1;
pub const TB_PROCTIME: u32 = 0;
pub const TB_STACKCHK: u32 = 4;
pub const TB_EXCEPT: u32 = 5;
pub const TB_SWITCH: u32 = 6;
pub const TB_LAUNCH: u32 = 7;
pub const TF_PROCTIME: u32 = 1;
pub const TF_ETASK: u32 = 8;
pub const TF_STACKCHK: u32 = 16;
pub const TF_EXCEPT: u32 = 32;
pub const TF_SWITCH: u32 = 64;
pub const TF_LAUNCH: u32 = 128;
pub const TS_INVALID: u32 = 0;
pub const TS_ADDED: u32 = 1;
pub const TS_RUN: u32 = 2;
pub const TS_READY: u32 = 3;
pub const TS_WAIT: u32 = 4;
pub const TS_EXCEPT: u32 = 5;
pub const TS_REMOVED: u32 = 6;
pub const SIGB_ABORT: u32 = 0;
pub const SIGB_CHILD: u32 = 1;
pub const SIGB_BLIT: u32 = 4;
pub const SIGB_SINGLE: u32 = 4;
pub const SIGB_INTUITION: u32 = 5;
pub const SIGB_NET: u32 = 7;
pub const SIGB_DOS: u32 = 8;
pub const SIGF_ABORT: u32 = 1;
pub const SIGF_CHILD: u32 = 2;
pub const SIGF_BLIT: u32 = 16;
pub const SIGF_SINGLE: u32 = 16;
pub const SIGF_INTUITION: u32 = 32;
pub const SIGF_NET: u32 = 128;
pub const SIGF_DOS: u32 = 256;
pub const PF_ACTION: u32 = 3;
pub const PA_SIGNAL: u32 = 0;
pub const PA_SOFTINT: u32 = 1;
pub const PA_IGNORE: u32 = 2;
pub const SIH_PRIMASK: u32 = 240;
pub const INTB_NMI: u32 = 15;
pub const INTF_NMI: u32 = 32768;
pub const SM_SHARED: u32 = 1;
pub const SM_EXCLUSIVE: u32 = 0;
pub const LIB_VECTSIZE: u32 = 6;
pub const LIB_RESERVED: u32 = 4;
pub const LIB_BASE: i32 = -6;
pub const LIB_USERDEF: i32 = -30;
pub const LIB_NONSTD: i32 = -30;
pub const LIB_OPEN: i32 = -6;
pub const LIB_CLOSE: i32 = -12;
pub const LIB_EXPUNGE: i32 = -18;
pub const LIB_EXTFUNC: i32 = -24;
pub const LIBF_SUMMING: u32 = 1;
pub const LIBF_CHANGED: u32 = 2;
pub const LIBF_SUMUSED: u32 = 4;
pub const LIBF_DELEXP: u32 = 8;
pub const DEV_BEGINIO: i32 = -30;
pub const DEV_ABORTIO: i32 = -36;
pub const IOB_QUICK: u32 = 0;
pub const IOF_QUICK: u32 = 1;
pub const CMD_INVALID: u32 = 0;
pub const CMD_RESET: u32 = 1;
pub const CMD_READ: u32 = 2;
pub const CMD_WRITE: u32 = 3;
pub const CMD_UPDATE: u32 = 4;
pub const CMD_CLEAR: u32 = 5;
pub const CMD_STOP: u32 = 6;
pub const CMD_START: u32 = 7;
pub const CMD_FLUSH: u32 = 8;
pub const CMD_NONSTD: u32 = 9;
pub const UNITF_ACTIVE: u32 = 1;
pub const UNITF_INTASK: u32 = 2;
pub const AFB_68010: u32 = 0;
pub const AFB_68020: u32 = 1;
pub const AFB_68030: u32 = 2;
pub const AFB_68040: u32 = 3;
pub const AFB_68881: u32 = 4;
pub const AFB_68882: u32 = 5;
pub const AFB_FPU40: u32 = 6;
pub const AFB_68060: u32 = 7;
pub const AFB_FPGA: u32 = 10;
pub const AFB_PRIVATE: u32 = 15;
pub const AFF_68010: u32 = 1;
pub const AFF_68020: u32 = 2;
pub const AFF_68030: u32 = 4;
pub const AFF_68040: u32 = 8;
pub const AFF_68881: u32 = 16;
pub const AFF_68882: u32 = 32;
pub const AFF_FPU40: u32 = 64;
pub const AFF_68060: u32 = 128;
pub const AFF_FPGA: u32 = 1024;
pub const AFF_PRIVATE: u32 = 32768;
pub const CACRF_EnableI: u32 = 1;
pub const CACRF_FreezeI: u32 = 2;
pub const CACRF_ClearI: u32 = 8;
pub const CACRF_IBE: u32 = 16;
pub const CACRF_EnableD: u32 = 256;
pub const CACRF_FreezeD: u32 = 512;
pub const CACRF_ClearD: u32 = 2048;
pub const CACRF_DBE: u32 = 4096;
pub const CACRF_WriteAllocate: u32 = 8192;
pub const CACRF_EnableE: u32 = 1073741824;
pub const CACRF_CopyBack: u32 = 2147483648;
pub const DMA_Continue: u32 = 2;
pub const DMA_NoModify: u32 = 4;
pub const DMA_ReadFromRAM: u32 = 8;
pub const DOSNAME: &[u8; 12] = b"dos.library\0";
pub const DOSTRUE: i32 = -1;
pub const DOSFALSE: u32 = 0;
pub const MODE_OLDFILE: u32 = 1005;
pub const MODE_NEWFILE: u32 = 1006;
pub const MODE_READWRITE: u32 = 1004;
pub const OFFSET_BEGINNING: i32 = -1;
pub const OFFSET_CURRENT: u32 = 0;
pub const OFFSET_END: u32 = 1;
pub const OFFSET_BEGINING: i32 = -1;
pub const BITSPERBYTE: u32 = 8;
pub const BYTESPERLONG: u32 = 4;
pub const BITSPERLONG: u32 = 32;
pub const MAXINT: u32 = 2147483647;
pub const MININT: u32 = 2147483648;
pub const SHARED_LOCK: i32 = -2;
pub const ACCESS_READ: i32 = -2;
pub const EXCLUSIVE_LOCK: i32 = -1;
pub const ACCESS_WRITE: i32 = -1;
pub const TICKS_PER_SECOND: u32 = 50;
pub const FIBB_OTR_READ: u32 = 15;
pub const FIBB_OTR_WRITE: u32 = 14;
pub const FIBB_OTR_EXECUTE: u32 = 13;
pub const FIBB_OTR_DELETE: u32 = 12;
pub const FIBB_GRP_READ: u32 = 11;
pub const FIBB_GRP_WRITE: u32 = 10;
pub const FIBB_GRP_EXECUTE: u32 = 9;
pub const FIBB_GRP_DELETE: u32 = 8;
pub const FIBB_HOLD: u32 = 7;
pub const FIBB_SCRIPT: u32 = 6;
pub const FIBB_PURE: u32 = 5;
pub const FIBB_ARCHIVE: u32 = 4;
pub const FIBB_READ: u32 = 3;
pub const FIBB_WRITE: u32 = 2;
pub const FIBB_EXECUTE: u32 = 1;
pub const FIBB_DELETE: u32 = 0;
pub const FIBF_OTR_READ: u32 = 32768;
pub const FIBF_OTR_WRITE: u32 = 16384;
pub const FIBF_OTR_EXECUTE: u32 = 8192;
pub const FIBF_OTR_DELETE: u32 = 4096;
pub const FIBF_GRP_READ: u32 = 2048;
pub const FIBF_GRP_WRITE: u32 = 1024;
pub const FIBF_GRP_EXECUTE: u32 = 512;
pub const FIBF_GRP_DELETE: u32 = 256;
pub const FIBF_HOLD: u32 = 128;
pub const FIBF_SCRIPT: u32 = 64;
pub const FIBF_PURE: u32 = 32;
pub const FIBF_ARCHIVE: u32 = 16;
pub const FIBF_READ: u32 = 8;
pub const FIBF_WRITE: u32 = 4;
pub const FIBF_EXECUTE: u32 = 2;
pub const FIBF_DELETE: u32 = 1;
pub const FAULT_MAX: u32 = 82;
pub const ID_WRITE_PROTECTED: u32 = 80;
pub const ID_VALIDATING: u32 = 81;
pub const ID_VALIDATED: u32 = 82;
pub const ID_NO_DISK_PRESENT: i32 = -1;
pub const ID_UNREADABLE_DISK: u32 = 1111573504;
pub const ID_DOS_DISK: u32 = 1146049280;
pub const ID_FFS_DISK: u32 = 1146049281;
pub const ID_INTER_DOS_DISK: u32 = 1146049282;
pub const ID_INTER_FFS_DISK: u32 = 1146049283;
pub const ID_FASTDIR_DOS_DISK: u32 = 1146049284;
pub const ID_FASTDIR_FFS_DISK: u32 = 1146049285;
pub const ID_LONG_DOS_DISK: u32 = 1146049286;
pub const ID_LONG_FFS_DISK: u32 = 1146049287;
pub const ID_COMPLONG_FFS_DISK: u32 = 1146049288;
pub const ID_NOT_REALLY_DOS: u32 = 1313099603;
pub const ID_KICKSTART_DISK: u32 = 1263092555;
pub const ID_MSDOS_DISK: u32 = 1297302528;
pub const ERROR_NO_FREE_STORE: u32 = 103;
pub const ERROR_TASK_TABLE_FULL: u32 = 105;
pub const ERROR_BAD_TEMPLATE: u32 = 114;
pub const ERROR_BAD_NUMBER: u32 = 115;
pub const ERROR_REQUIRED_ARG_MISSING: u32 = 116;
pub const ERROR_KEY_NEEDS_ARG: u32 = 117;
pub const ERROR_TOO_MANY_ARGS: u32 = 118;
pub const ERROR_UNMATCHED_QUOTES: u32 = 119;
pub const ERROR_LINE_TOO_LONG: u32 = 120;
pub const ERROR_FILE_NOT_OBJECT: u32 = 121;
pub const ERROR_INVALID_RESIDENT_LIBRARY: u32 = 122;
pub const ERROR_NO_DEFAULT_DIR: u32 = 201;
pub const ERROR_OBJECT_IN_USE: u32 = 202;
pub const ERROR_OBJECT_EXISTS: u32 = 203;
pub const ERROR_DIR_NOT_FOUND: u32 = 204;
pub const ERROR_OBJECT_NOT_FOUND: u32 = 205;
pub const ERROR_BAD_STREAM_NAME: u32 = 206;
pub const ERROR_OBJECT_TOO_LARGE: u32 = 207;
pub const ERROR_ACTION_NOT_KNOWN: u32 = 209;
pub const ERROR_INVALID_COMPONENT_NAME: u32 = 210;
pub const ERROR_INVALID_LOCK: u32 = 211;
pub const ERROR_OBJECT_WRONG_TYPE: u32 = 212;
pub const ERROR_DISK_NOT_VALIDATED: u32 = 213;
pub const ERROR_DISK_WRITE_PROTECTED: u32 = 214;
pub const ERROR_RENAME_ACROSS_DEVICES: u32 = 215;
pub const ERROR_DIRECTORY_NOT_EMPTY: u32 = 216;
pub const ERROR_TOO_MANY_LEVELS: u32 = 217;
pub const ERROR_DEVICE_NOT_MOUNTED: u32 = 218;
pub const ERROR_SEEK_ERROR: u32 = 219;
pub const ERROR_COMMENT_TOO_BIG: u32 = 220;
pub const ERROR_DISK_FULL: u32 = 221;
pub const ERROR_DELETE_PROTECTED: u32 = 222;
pub const ERROR_WRITE_PROTECTED: u32 = 223;
pub const ERROR_READ_PROTECTED: u32 = 224;
pub const ERROR_NOT_A_DOS_DISK: u32 = 225;
pub const ERROR_NO_DISK: u32 = 226;
pub const ERROR_NO_MORE_ENTRIES: u32 = 232;
pub const ERROR_IS_SOFT_LINK: u32 = 233;
pub const ERROR_OBJECT_LINKED: u32 = 234;
pub const ERROR_BAD_HUNK: u32 = 235;
pub const ERROR_NOT_IMPLEMENTED: u32 = 236;
pub const ERROR_RECORD_NOT_LOCKED: u32 = 240;
pub const ERROR_LOCK_COLLISION: u32 = 241;
pub const ERROR_LOCK_TIMEOUT: u32 = 242;
pub const ERROR_UNLOCK_ERROR: u32 = 243;
pub const RETURN_OK: u32 = 0;
pub const RETURN_WARN: u32 = 5;
pub const RETURN_ERROR: u32 = 10;
pub const RETURN_FAIL: u32 = 20;
pub const SIGBREAKB_CTRL_C: u32 = 12;
pub const SIGBREAKB_CTRL_D: u32 = 13;
pub const SIGBREAKB_CTRL_E: u32 = 14;
pub const SIGBREAKB_CTRL_F: u32 = 15;
pub const SIGBREAKF_CTRL_C: u32 = 4096;
pub const SIGBREAKF_CTRL_D: u32 = 8192;
pub const SIGBREAKF_CTRL_E: u32 = 16384;
pub const LOCK_DIFFERENT: i32 = -1;
pub const LOCK_SAME: u32 = 0;
pub const LOCK_SAME_VOLUME: u32 = 1;
pub const LOCK_SAME_HANDLER: u32 = 1;
pub const CHANGE_LOCK: u32 = 0;
pub const CHANGE_FH: u32 = 1;
pub const LINK_HARD: u32 = 0;
pub const LINK_SOFT: u32 = 1;
pub const ITEM_EQUAL: i32 = -2;
pub const ITEM_ERROR: i32 = -1;
pub const ITEM_NOTHING: u32 = 0;
pub const ITEM_UNQUOTED: u32 = 1;
pub const ITEM_QUOTED: u32 = 2;
pub const DOS_FILEHANDLE: u32 = 0;
pub const DOS_EXALLCONTROL: u32 = 1;
pub const DOS_FIB: u32 = 2;
pub const DOS_STDPKT: u32 = 3;
pub const DOS_CLI: u32 = 4;
pub const DOS_RDARGS: u32 = 5;
pub const RDAB_STDIN: u32 = 0;
pub const RDAF_STDIN: u32 = 1;
pub const RDAB_NOALLOC: u32 = 1;
pub const RDAF_NOALLOC: u32 = 2;
pub const RDAB_NOPROMPT: u32 = 2;
pub const RDAF_NOPROMPT: u32 = 4;
pub const MAX_TEMPLATE_ITEMS: u32 = 100;
pub const MAX_MULTIARGS: u32 = 128;
pub const NXADDLEN: u32 = 9;
pub const NSB_KEEP: u32 = 0;
pub const NSB_STRING: u32 = 1;
pub const NSB_NOTNUM: u32 = 2;
pub const NSB_NUMBER: u32 = 3;
pub const NSB_BINARY: u32 = 4;
pub const NSB_FLOAT: u32 = 5;
pub const NSB_EXT: u32 = 6;
pub const NSB_SOURCE: u32 = 7;
pub const NSF_KEEP: u32 = 1;
pub const NSF_STRING: u32 = 2;
pub const NSF_NOTNUM: u32 = 4;
pub const NSF_NUMBER: u32 = 8;
pub const NSF_BINARY: u32 = 16;
pub const NSF_FLOAT: u32 = 32;
pub const NSF_EXT: u32 = 64;
pub const NSF_SOURCE: u32 = 128;
pub const NSF_INTNUM: u32 = 26;
pub const NSF_DPNUM: u32 = 40;
pub const NSF_ALPHA: u32 = 6;
pub const NSF_OWNED: u32 = 193;
pub const KEEPSTR: u32 = 134;
pub const KEEPNUM: u32 = 154;
pub const MAXRMARG: u32 = 15;
pub const RXCOMM: u32 = 16777216;
pub const RXFUNC: u32 = 33554432;
pub const RXCLOSE: u32 = 50331648;
pub const RXQUERY: u32 = 67108864;
pub const RXADDFH: u32 = 117440512;
pub const RXADDLIB: u32 = 134217728;
pub const RXREMLIB: u32 = 150994944;
pub const RXADDCON: u32 = 167772160;
pub const RXREMCON: u32 = 184549376;
pub const RXTCOPN: u32 = 201326592;
pub const RXTCCLS: u32 = 218103808;
pub const RXFB_NOIO: u32 = 16;
pub const RXFB_RESULT: u32 = 17;
pub const RXFB_STRING: u32 = 18;
pub const RXFB_TOKEN: u32 = 19;
pub const RXFB_NONRET: u32 = 20;
pub const RXFB_SCRIPT: u32 = 21;
pub const RXFF_NOIO: u32 = 65536;
pub const RXFF_RESULT: u32 = 131072;
pub const RXFF_STRING: u32 = 262144;
pub const RXFF_TOKEN: u32 = 524288;
pub const RXFF_NONRET: u32 = 1048576;
pub const RXFF_SCRIPT: u32 = 2097152;
pub const RXCODEMASK: u32 = 4278190080;
pub const RXARGMASK: u32 = 15;
pub const RRT_ANY: u32 = 0;
pub const RRT_LIB: u32 = 1;
pub const RRT_PORT: u32 = 2;
pub const RRT_FILE: u32 = 3;
pub const RRT_HOST: u32 = 4;
pub const RRT_CLIP: u32 = 5;
pub const GLOBALSZ: u32 = 200;
pub const RTFB_TRACE: u32 = 0;
pub const RTFB_HALT: u32 = 1;
pub const RTFB_SUSP: u32 = 2;
pub const RTFB_TCUSE: u32 = 3;
pub const RTFB_WAIT: u32 = 6;
pub const RTFB_CLOSE: u32 = 7;
pub const MEMQUANT: u32 = 16;
pub const MEMMASK: u32 = 4294967280;
pub const MEMQUICK: u32 = 1;
pub const MEMCLEAR: u32 = 65536;
pub const RXSNAME: &[u8; 19] = b"rexxsyslib.library\0";
pub const RXSDIR: &[u8; 5] = b"REXX\0";
pub const RXSTNAME: &[u8; 6] = b"ARexx\0";
pub const RLFB_TRACE: u32 = 0;
pub const RLFB_HALT: u32 = 1;
pub const RLFB_SUSP: u32 = 2;
pub const RLFB_STOP: u32 = 6;
pub const RLFB_CLOSE: u32 = 7;
pub const RLFMASK: u32 = 7;
pub const RXSCHUNK: u32 = 1024;
pub const RXSNEST: u32 = 32;
pub const RXSTPRI: u32 = 0;
pub const RXSSTACK: u32 = 4096;
pub const CTB_SPACE: u32 = 0;
pub const CTB_DIGIT: u32 = 1;
pub const CTB_ALPHA: u32 = 2;
pub const CTB_REXXSYM: u32 = 3;
pub const CTB_REXXOPR: u32 = 4;
pub const CTB_REXXSPC: u32 = 5;
pub const CTB_UPPER: u32 = 6;
pub const CTB_LOWER: u32 = 7;
pub const CTF_SPACE: u32 = 1;
pub const CTF_DIGIT: u32 = 2;
pub const CTF_ALPHA: u32 = 4;
pub const CTF_REXXSYM: u32 = 8;
pub const CTF_REXXOPR: u32 = 16;
pub const CTF_REXXSPC: u32 = 32;
pub const CTF_UPPER: u32 = 64;
pub const CTF_LOWER: u32 = 128;
pub const ERRC_MSG: u32 = 0;
pub const ERR10_001: u32 = 1;
pub const ERR10_002: u32 = 2;
pub const ERR10_003: u32 = 3;
pub const ERR10_004: u32 = 4;
pub const ERR10_005: u32 = 5;
pub const ERR10_006: u32 = 6;
pub const ERR10_007: u32 = 7;
pub const ERR10_008: u32 = 8;
pub const ERR10_009: u32 = 9;
pub const ERR10_010: u32 = 10;
pub const ERR10_011: u32 = 11;
pub const ERR10_012: u32 = 12;
pub const ERR10_013: u32 = 13;
pub const ERR10_014: u32 = 14;
pub const ERR10_015: u32 = 15;
pub const ERR10_016: u32 = 16;
pub const ERR10_017: u32 = 17;
pub const ERR10_018: u32 = 18;
pub const ERR10_019: u32 = 19;
pub const ERR10_020: u32 = 20;
pub const ERR10_021: u32 = 21;
pub const ERR10_022: u32 = 22;
pub const ERR10_023: u32 = 23;
pub const ERR10_024: u32 = 24;
pub const ERR10_025: u32 = 25;
pub const ERR10_026: u32 = 26;
pub const ERR10_027: u32 = 27;
pub const ERR10_028: u32 = 28;
pub const ERR10_029: u32 = 29;
pub const ERR10_030: u32 = 30;
pub const ERR10_031: u32 = 31;
pub const ERR10_032: u32 = 32;
pub const ERR10_033: u32 = 33;
pub const ERR10_034: u32 = 34;
pub const ERR10_035: u32 = 35;
pub const ERR10_036: u32 = 36;
pub const ERR10_037: u32 = 37;
pub const ERR10_038: u32 = 38;
pub const ERR10_039: u32 = 39;
pub const ERR10_040: u32 = 40;
pub const ERR10_041: u32 = 41;
pub const ERR10_042: u32 = 42;
pub const ERR10_043: u32 = 43;
pub const ERR10_044: u32 = 44;
pub const ERR10_045: u32 = 45;
pub const ERR10_046: u32 = 46;
pub const ERR10_047: u32 = 47;
pub const ERR10_048: u32 = 48;
pub const RC_OK: u32 = 0;
pub const RC_WARN: u32 = 5;
pub const RC_ERROR: u32 = 10;
pub const RC_FATAL: u32 = 20;
pub const INTUITION_CLASSUSR_H: u32 = 1;
pub const ROOTCLASS: &[u8; 10] = b"rootclass\0";
pub const IMAGECLASS: &[u8; 11] = b"imageclass\0";
pub const FRAMEICLASS: &[u8; 12] = b"frameiclass\0";
pub const SYSICLASS: &[u8; 10] = b"sysiclass\0";
pub const FILLRECTCLASS: &[u8; 14] = b"fillrectclass\0";
pub const GADGETCLASS: &[u8; 12] = b"gadgetclass\0";
pub const PROPGCLASS: &[u8; 11] = b"propgclass\0";
pub const STRGCLASS: &[u8; 10] = b"strgclass\0";
pub const BUTTONGCLASS: &[u8; 13] = b"buttongclass\0";
pub const FRBUTTONCLASS: &[u8; 14] = b"frbuttonclass\0";
pub const GROUPGCLASS: &[u8; 12] = b"groupgclass\0";
pub const ICCLASS: &[u8; 8] = b"icclass\0";
pub const MODELCLASS: &[u8; 11] = b"modelclass\0";
pub const ITEXTICLASS: &[u8; 12] = b"itexticlass\0";
pub const POINTERCLASS: &[u8; 13] = b"pointerclass\0";
pub const OM_Dummy: u32 = 256;
pub const OM_NEW: u32 = 257;
pub const OM_DISPOSE: u32 = 258;
pub const OM_SET: u32 = 259;
pub const OM_GET: u32 = 260;
pub const OM_ADDTAIL: u32 = 261;
pub const OM_REMOVE: u32 = 262;
pub const OM_NOTIFY: u32 = 263;
pub const OM_UPDATE: u32 = 264;
pub const OM_ADDMEMBER: u32 = 265;
pub const OM_REMMEMBER: u32 = 266;
pub const OPUF_INTERIM: u32 = 1;
pub const CLF_INLIST: u32 = 1;
pub const TAG_DONE: u32 = 0;
pub const TAG_END: u32 = 0;
pub const TAG_IGNORE: u32 = 1;
pub const TAG_MORE: u32 = 2;
pub const TAG_SKIP: u32 = 3;
pub const TAGFILTER_AND: u32 = 0;
pub const TAGFILTER_NOT: u32 = 1;
pub const MAP_REMOVE_NOT_FOUND: u32 = 0;
pub const MAP_KEEP_NOT_FOUND: u32 = 1;
pub const RXERR_NO_COMMAND_LIST: u32 = 1;
pub const RXERR_NO_PORT_NAME: u32 = 2;
pub const RXERR_PORT_ALREADY_EXISTS: u32 = 3;
pub const RXERR_OUT_OF_MEMORY: u32 = 4;
pub const AM_HANDLEEVENT: u32 = 5832705;
pub const AM_EXECUTE: u32 = 5832706;
pub const AM_FLUSH: u32 = 5832707;
pub const RM_OPENREQ: u32 = 6619137;
pub const REQTYPE_INFO: u32 = 0;
pub const REQTYPE_INTEGER: u32 = 1;
pub const REQTYPE_STRING: u32 = 2;
pub const REQTYPE_PROGRESS: u32 = 3;
pub const WGUD_HOOK: u32 = 0;
pub const WGUD_FUNC: u32 = 1;
pub const WGUD_IGNORE: u32 = 2;
pub const WMHI_LASTMSG: u32 = 0;
pub const WMHI_IGNORE: i32 = -1;
pub const WMHI_GADGETMASK: u32 = 65535;
pub const WMHI_MENUMASK: u32 = 65535;
pub const WMHI_KEYMASK: u32 = 255;
pub const WMHI_CLASSMASK: u32 = 4294901760;
pub const WMHI_CLOSEWINDOW: u32 = 65536;
pub const WMHI_GADGETUP: u32 = 131072;
pub const WMHI_INACTIVE: u32 = 196608;
pub const WMHI_ACTIVE: u32 = 262144;
pub const WMHI_NEWSIZE: u32 = 327680;
pub const WMHI_MENUPICK: u32 = 393216;
pub const WMHI_MENUHELP: u32 = 458752;
pub const WMHI_GADGETHELP: u32 = 524288;
pub const WMHI_ICONIFY: u32 = 589824;
pub const WMHI_UNICONIFY: u32 = 655360;
pub const WMHI_RAWKEY: u32 = 720896;
pub const WMHI_VANILLAKEY: u32 = 786432;
pub const WMHI_CHANGEWINDOW: u32 = 851968;
pub const WMHI_INTUITICK: u32 = 917504;
pub const WMHI_MOUSEMOVE: u32 = 983040;
pub const WMHI_MOUSEBUTTONS: u32 = 1048576;
pub const WMHI_DISPOSEDWINDOW: u32 = 1114112;
pub const WMHI_JUMPSCREEN: u32 = 1179648;
pub const WMHI_POPUPMENU: u32 = 1245184;
pub const WMHI_GADGETDOWN: u32 = 1310720;
pub const WHOOKRSLT_IGNORE: u32 = 0;
pub const WHOOKRSLT_CLOSEWINDOW: u32 = 1;
pub const WHOOKRSLT_DISPOSEWINDOW: u32 = 2;
pub const WMF_ZOOMED: u32 = 1;
pub const WMF_ZIPWINDOW: u32 = 2;
pub const WT_FRONT: u32 = 1;
pub const WT_BACK: u32 = 0;
pub const WPOS_CENTERSCREEN: u32 = 1;
pub const WPOS_CENTERMOUSE: u32 = 2;
pub const WPOS_TOPLEFT: u32 = 3;
pub const WPOS_CENTERWINDOW: u32 = 4;
pub const WPOS_FULLSCREEN: u32 = 5;
pub const WPOS_ENTIRESCREEN: u32 = 6;
pub const WM_HANDLEINPUT: u32 = 5701633;
pub const WM_OPEN: u32 = 5701634;
pub const WM_CLOSE: u32 = 5701635;
pub const WM_NEWPREFS: u32 = 5701636;
pub const WM_ICONIFY: u32 = 5701637;
pub const WM_RETHINK: u32 = 5701638;
pub const WM_ACTIVATEGADGET: u32 = 5701639;
pub const WM_SNAPSHOT: u32 = 5701640;
pub const WM_UNSNAPSHOT: u32 = 5701641;
pub const WM_RESTORE: u32 = 5701648;
pub const CBD_POST: u32 = 9;
pub const CBD_CURRENTREADID: u32 = 10;
pub const CBD_CURRENTWRITEID: u32 = 11;
pub const CBD_CHANGEHOOK: u32 = 12;
pub const CBERR_OBSOLETEID: u32 = 1;
pub const PRIMARY_CLIP: u32 = 0;
pub const IFFF_READ: u32 = 0;
pub const IFFF_WRITE: u32 = 1;
pub const IFFF_RWBITS: u32 = 1;
pub const IFFF_FSEEK: u32 = 2;
pub const IFFF_RSEEK: u32 = 4;
pub const IFFF_RESERVED: u32 = 4294901760;
pub const IFFERR_EOF: i32 = -1;
pub const IFFERR_EOC: i32 = -2;
pub const IFFERR_NOSCOPE: i32 = -3;
pub const IFFERR_NOMEM: i32 = -4;
pub const IFFERR_READ: i32 = -5;
pub const IFFERR_WRITE: i32 = -6;
pub const IFFERR_SEEK: i32 = -7;
pub const IFFERR_MANGLED: i32 = -8;
pub const IFFERR_SYNTAX: i32 = -9;
pub const IFFERR_NOTIFF: i32 = -10;
pub const IFFERR_NOHOOK: i32 = -11;
pub const IFF_RETURN2CLIENT: i32 = -12;
pub const IFFPARSE_SCAN: u32 = 0;
pub const IFFPARSE_STEP: u32 = 1;
pub const IFFPARSE_RAWSTEP: u32 = 2;
pub const IFFSLI_ROOT: u32 = 1;
pub const IFFSLI_TOP: u32 = 2;
pub const IFFSLI_PROP: u32 = 3;
pub const IFFSIZE_UNKNOWN: i32 = -1;
pub const IFFCMD_INIT: u32 = 0;
pub const IFFCMD_CLEANUP: u32 = 1;
pub const IFFCMD_READ: u32 = 2;
pub const IFFCMD_WRITE: u32 = 3;
pub const IFFCMD_SEEK: u32 = 4;
pub const IFFCMD_ENTRY: u32 = 5;
pub const IFFCMD_EXIT: u32 = 6;
pub const IFFCMD_PURGELCI: u32 = 7;
pub const IFFSCC_INIT: u32 = 0;
pub const IFFSCC_CLEANUP: u32 = 1;
pub const IFFSCC_READ: u32 = 2;
pub const IFFSCC_WRITE: u32 = 3;
pub const IFFSCC_SEEK: u32 = 4;
pub const DTF_TYPE_MASK: u32 = 15;
pub const DTF_BINARY: u32 = 0;
pub const DTF_ASCII: u32 = 1;
pub const DTF_IFF: u32 = 2;
pub const DTF_MISC: u32 = 3;
pub const DTF_CASE: u32 = 16;
pub const DTF_SYSTEM1: u32 = 4096;
pub const TW_INFO: u32 = 1;
pub const TW_BROWSE: u32 = 2;
pub const TW_EDIT: u32 = 3;
pub const TW_PRINT: u32 = 4;
pub const TW_MAIL: u32 = 5;
pub const TF_LAUNCH_MASK: u32 = 15;
pub const TF_SHELL: u32 = 1;
pub const TF_WORKBENCH: u32 = 2;
pub const TF_RX: u32 = 3;
pub const DTERROR_UNKNOWN_DATATYPE: u32 = 2000;
pub const DTERROR_COULDNT_SAVE: u32 = 2001;
pub const DTERROR_COULDNT_OPEN: u32 = 2002;
pub const DTERROR_COULDNT_SEND_MESSAGE: u32 = 2003;
pub const DTERROR_COULDNT_OPEN_CLIPBOARD: u32 = 2004;
pub const DTERROR_Reserved: u32 = 2005;
pub const DTERROR_UNKNOWN_COMPRESSION: u32 = 2006;
pub const DTERROR_NOT_ENOUGH_DATA: u32 = 2007;
pub const DTERROR_INVALID_DATA: u32 = 2008;
pub const DTERROR_NOT_AVAILABLE: u32 = 2009;
pub const DTMSG_TYPE_OFFSET: u32 = 2100;
pub const INTUITION_INTUITION_H: u32 = 1;
pub const BITSET: u32 = 32768;
pub const BITCLR: u32 = 0;
pub const BMB_CLEAR: u32 = 0;
pub const BMB_DISPLAYABLE: u32 = 1;
pub const BMB_INTERLEAVED: u32 = 2;
pub const BMB_STANDARD: u32 = 3;
pub const BMB_MINPLANES: u32 = 4;
pub const BMB_HIJACKED: u32 = 7;
pub const BMB_RTGTAGS: u32 = 8;
pub const BMB_RTGCHECK: u32 = 9;
pub const BMB_FRIENDISTAG: u32 = 10;
pub const BMB_INVALID: u32 = 11;
pub const BMF_CLEAR: u32 = 1;
pub const BMF_DISPLAYABLE: u32 = 2;
pub const BMF_INTERLEAVED: u32 = 4;
pub const BMF_STANDARD: u32 = 8;
pub const BMF_MINPLANES: u32 = 16;
pub const BMF_HIJACKED: u32 = 128;
pub const BMF_RTGTAGS: u32 = 256;
pub const BMF_RTGCHECK: u32 = 512;
pub const BMF_FRIENDISTAG: u32 = 1024;
pub const BMF_INVALID: u32 = 2048;
pub const BMF_CHECKMASK: u32 = 3968;
pub const BMF_CHECKVALUE: u32 = 1792;
pub const BMA_HEIGHT: u32 = 0;
pub const BMA_DEPTH: u32 = 4;
pub const BMA_WIDTH: u32 = 8;
pub const BMA_FLAGS: u32 = 12;
pub const CR_USERCLIPPED: u32 = 16;
pub const CR_DAMAGECLIPPED: u32 = 32;
pub const ISLESSX: u32 = 1;
pub const ISLESSY: u32 = 2;
pub const ISGRTRX: u32 = 4;
pub const ISGRTRY: u32 = 8;
pub const COPPER_MOVE: u32 = 0;
pub const COPPER_WAIT: u32 = 1;
pub const CPRNXTBUF: u32 = 2;
pub const CPR_NT_LOF: u32 = 32768;
pub const CPR_NT_SHT: u32 = 16384;
pub const CPR_NT_SYS: u32 = 8192;
pub const EXACT_LINE: u32 = 1;
pub const HALF_LINE: u32 = 2;
pub const SS_GRAPHICS: u32 = 2;
pub const VIEW_EXTRA_TYPE: u32 = 1;
pub const VIEWPORT_EXTRA_TYPE: u32 = 2;
pub const SPECIAL_MONITOR_TYPE: u32 = 3;
pub const MONITOR_SPEC_TYPE: u32 = 4;
pub const TO_MONITOR: u32 = 0;
pub const FROM_MONITOR: u32 = 1;
pub const STANDARD_XOFFSET: u32 = 9;
pub const STANDARD_YOFFSET: u32 = 0;
pub const MSB_REQUEST_NTSC: u32 = 0;
pub const MSB_REQUEST_PAL: u32 = 1;
pub const MSB_REQUEST_SPECIAL: u32 = 2;
pub const MSB_REQUEST_A2024: u32 = 3;
pub const MSB_DOUBLE_SPRITES: u32 = 4;
pub const MSF_REQUEST_NTSC: u32 = 1;
pub const MSF_REQUEST_PAL: u32 = 2;
pub const MSF_REQUEST_SPECIAL: u32 = 4;
pub const MSF_REQUEST_A2024: u32 = 8;
pub const MSF_DOUBLE_SPRITES: u32 = 16;
pub const REQUEST_NTSC: u32 = 1;
pub const REQUEST_PAL: u32 = 2;
pub const REQUEST_SPECIAL: u32 = 4;
pub const REQUEST_A2024: u32 = 8;
pub const DEFAULT_MONITOR_NAME: &[u8; 16] = b"default.monitor\0";
pub const NTSC_MONITOR_NAME: &[u8; 13] = b"ntsc.monitor\0";
pub const PAL_MONITOR_NAME: &[u8; 12] = b"pal.monitor\0";
pub const STANDARD_MONITOR_MASK: u32 = 3;
pub const STANDARD_NTSC_ROWS: u32 = 262;
pub const STANDARD_PAL_ROWS: u32 = 312;
pub const STANDARD_COLORCLOCKS: u32 = 226;
pub const STANDARD_DENISE_MAX: u32 = 455;
pub const STANDARD_DENISE_MIN: u32 = 93;
pub const STANDARD_NTSC_BEAMCON: u32 = 0;
pub const MIN_NTSC_ROW: u32 = 21;
pub const MIN_PAL_ROW: u32 = 29;
pub const STANDARD_VIEW_X: u32 = 129;
pub const STANDARD_VIEW_Y: u32 = 44;
pub const STANDARD_HBSTRT: u32 = 6;
pub const STANDARD_HSSTRT: u32 = 11;
pub const STANDARD_HSSTOP: u32 = 28;
pub const STANDARD_HBSTOP: u32 = 44;
pub const STANDARD_VBSTRT: u32 = 290;
pub const STANDARD_VSSTRT: u32 = 678;
pub const STANDARD_VSSTOP: u32 = 938;
pub const STANDARD_VBSTOP: u32 = 4198;
pub const VGA_COLORCLOCKS: u32 = 113;
pub const VGA_TOTAL_ROWS: u32 = 524;
pub const VGA_DENISE_MIN: u32 = 59;
pub const MIN_VGA_ROW: u32 = 29;
pub const VGA_HBSTRT: u32 = 8;
pub const VGA_HSSTRT: u32 = 14;
pub const VGA_HSSTOP: u32 = 28;
pub const VGA_HBSTOP: u32 = 30;
pub const VGA_VBSTRT: u32 = 0;
pub const VGA_VSSTRT: u32 = 339;
pub const VGA_VSSTOP: u32 = 565;
pub const VGA_VBSTOP: u32 = 3277;
pub const VGA_MONITOR_NAME: &[u8; 12] = b"vga.monitor\0";
pub const VGA70_COLORCLOCKS: u32 = 113;
pub const VGA70_TOTAL_ROWS: u32 = 449;
pub const VGA70_DENISE_MIN: u32 = 59;
pub const MIN_VGA70_ROW: u32 = 35;
pub const VGA70_HBSTRT: u32 = 8;
pub const VGA70_HSSTRT: u32 = 14;
pub const VGA70_HSSTOP: u32 = 28;
pub const VGA70_HBSTOP: u32 = 30;
pub const VGA70_VBSTRT: u32 = 0;
pub const VGA70_VSSTRT: u32 = 678;
pub const VGA70_VSSTOP: u32 = 904;
pub const VGA70_VBSTOP: u32 = 3955;
pub const VGA70_MONITOR_NAME: &[u8; 14] = b"vga70.monitor\0";
pub const BROADCAST_HBSTRT: u32 = 1;
pub const BROADCAST_HSSTRT: u32 = 6;
pub const BROADCAST_HSSTOP: u32 = 23;
pub const BROADCAST_HBSTOP: u32 = 39;
pub const BROADCAST_VBSTRT: u32 = 0;
pub const BROADCAST_VSSTRT: u32 = 678;
pub const BROADCAST_VSSTOP: u32 = 1356;
pub const BROADCAST_VBSTOP: u32 = 7232;
pub const RATIO_FIXEDPART: u32 = 4;
pub const RATIO_UNITY: u32 = 16;
pub const INVALID_ID: i32 = -1;
pub const MONITOR_ID_MASK: u32 = 4294905856;
pub const DEFAULT_MONITOR_ID: u32 = 0;
pub const NTSC_MONITOR_ID: u32 = 69632;
pub const PAL_MONITOR_ID: u32 = 135168;
pub const LORES_KEY: u32 = 0;
pub const HIRES_KEY: u32 = 32768;
pub const SUPER_KEY: u32 = 32800;
pub const HAM_KEY: u32 = 2048;
pub const LORESLACE_KEY: u32 = 4;
pub const HIRESLACE_KEY: u32 = 32772;
pub const SUPERLACE_KEY: u32 = 32804;
pub const HAMLACE_KEY: u32 = 2052;
pub const LORESDPF_KEY: u32 = 1024;
pub const HIRESDPF_KEY: u32 = 33792;
pub const SUPERDPF_KEY: u32 = 33824;
pub const LORESLACEDPF_KEY: u32 = 1028;
pub const HIRESLACEDPF_KEY: u32 = 33796;
pub const SUPERLACEDPF_KEY: u32 = 33828;
pub const LORESDPF2_KEY: u32 = 1088;
pub const HIRESDPF2_KEY: u32 = 33856;
pub const SUPERDPF2_KEY: u32 = 33888;
pub const LORESLACEDPF2_KEY: u32 = 1092;
pub const HIRESLACEDPF2_KEY: u32 = 33860;
pub const SUPERLACEDPF2_KEY: u32 = 33892;
pub const EXTRAHALFBRITE_KEY: u32 = 128;
pub const EXTRAHALFBRITELACE_KEY: u32 = 132;
pub const HIRESHAM_KEY: u32 = 34816;
pub const SUPERHAM_KEY: u32 = 34848;
pub const HIRESEHB_KEY: u32 = 32896;
pub const SUPEREHB_KEY: u32 = 32928;
pub const HIRESHAMLACE_KEY: u32 = 34820;
pub const SUPERHAMLACE_KEY: u32 = 34852;
pub const HIRESEHBLACE_KEY: u32 = 32900;
pub const SUPEREHBLACE_KEY: u32 = 32932;
pub const LORESSDBL_KEY: u32 = 8;
pub const LORESHAMSDBL_KEY: u32 = 2056;
pub const LORESEHBSDBL_KEY: u32 = 136;
pub const HIRESHAMSDBL_KEY: u32 = 34824;
pub const VGA_MONITOR_ID: u32 = 200704;
pub const VGAEXTRALORES_KEY: u32 = 200708;
pub const VGALORES_KEY: u32 = 233476;
pub const VGAPRODUCT_KEY: u32 = 233508;
pub const VGAHAM_KEY: u32 = 202756;
pub const VGAEXTRALORESLACE_KEY: u32 = 200709;
pub const VGALORESLACE_KEY: u32 = 233477;
pub const VGAPRODUCTLACE_KEY: u32 = 233509;
pub const VGAHAMLACE_KEY: u32 = 202757;
pub const VGAEXTRALORESDPF_KEY: u32 = 201732;
pub const VGALORESDPF_KEY: u32 = 234500;
pub const VGAPRODUCTDPF_KEY: u32 = 234532;
pub const VGAEXTRALORESLACEDPF_KEY: u32 = 201733;
pub const VGALORESLACEDPF_KEY: u32 = 234501;
pub const VGAPRODUCTLACEDPF_KEY: u32 = 234533;
pub const VGAEXTRALORESDPF2_KEY: u32 = 201796;
pub const VGALORESDPF2_KEY: u32 = 234564;
pub const VGAPRODUCTDPF2_KEY: u32 = 234596;
pub const VGAEXTRALORESLACEDPF2_KEY: u32 = 201797;
pub const VGALORESLACEDPF2_KEY: u32 = 234565;
pub const VGAPRODUCTLACEDPF2_KEY: u32 = 234597;
pub const VGAEXTRAHALFBRITE_KEY: u32 = 200836;
pub const VGAEXTRAHALFBRITELACE_KEY: u32 = 200837;
pub const VGAPRODUCTHAM_KEY: u32 = 235556;
pub const VGALORESHAM_KEY: u32 = 235524;
pub const VGAEXTRALORESHAM_KEY: u32 = 202756;
pub const VGAPRODUCTHAMLACE_KEY: u32 = 235557;
pub const VGALORESHAMLACE_KEY: u32 = 235525;
pub const VGAEXTRALORESHAMLACE_KEY: u32 = 202757;
pub const VGAEXTRALORESEHB_KEY: u32 = 200836;
pub const VGAEXTRALORESEHBLACE_KEY: u32 = 200837;
pub const VGALORESEHB_KEY: u32 = 233604;
pub const VGALORESEHBLACE_KEY: u32 = 233605;
pub const VGAEHB_KEY: u32 = 233636;
pub const VGAEHBLACE_KEY: u32 = 233637;
pub const VGAEXTRALORESDBL_KEY: u32 = 200704;
pub const VGALORESDBL_KEY: u32 = 233472;
pub const VGAPRODUCTDBL_KEY: u32 = 233504;
pub const VGAEXTRALORESHAMDBL_KEY: u32 = 202752;
pub const VGALORESHAMDBL_KEY: u32 = 235520;
pub const VGAPRODUCTHAMDBL_KEY: u32 = 235552;
pub const VGAEXTRALORESEHBDBL_KEY: u32 = 200832;
pub const VGALORESEHBDBL_KEY: u32 = 233600;
pub const VGAPRODUCTEHBDBL_KEY: u32 = 233632;
pub const A2024_MONITOR_ID: u32 = 266240;
pub const A2024TENHERTZ_KEY: u32 = 266240;
pub const A2024FIFTEENHERTZ_KEY: u32 = 299008;
pub const PROTO_MONITOR_ID: u32 = 331776;
pub const EURO72_MONITOR_ID: u32 = 397312;
pub const EURO72EXTRALORES_KEY: u32 = 397316;
pub const EURO72LORES_KEY: u32 = 430084;
pub const EURO72PRODUCT_KEY: u32 = 430116;
pub const EURO72HAM_KEY: u32 = 399364;
pub const EURO72EXTRALORESLACE_KEY: u32 = 397317;
pub const EURO72LORESLACE_KEY: u32 = 430085;
pub const EURO72PRODUCTLACE_KEY: u32 = 430117;
pub const EURO72HAMLACE_KEY: u32 = 399365;
pub const EURO72EXTRALORESDPF_KEY: u32 = 398340;
pub const EURO72LORESDPF_KEY: u32 = 431108;
pub const EURO72PRODUCTDPF_KEY: u32 = 431140;
pub const EURO72EXTRALORESLACEDPF_KEY: u32 = 398341;
pub const EURO72LORESLACEDPF_KEY: u32 = 431109;
pub const EURO72PRODUCTLACEDPF_KEY: u32 = 431141;
pub const EURO72EXTRALORESDPF2_KEY: u32 = 398404;
pub const EURO72LORESDPF2_KEY: u32 = 431172;
pub const EURO72PRODUCTDPF2_KEY: u32 = 431204;
pub const EURO72EXTRALORESLACEDPF2_KEY: u32 = 398405;
pub const EURO72LORESLACEDPF2_KEY: u32 = 431173;
pub const EURO72PRODUCTLACEDPF2_KEY: u32 = 431205;
pub const EURO72EXTRAHALFBRITE_KEY: u32 = 397444;
pub const EURO72EXTRAHALFBRITELACE_KEY: u32 = 397445;
pub const EURO72PRODUCTHAM_KEY: u32 = 432164;
pub const EURO72PRODUCTHAMLACE_KEY: u32 = 432165;
pub const EURO72LORESHAM_KEY: u32 = 432132;
pub const EURO72LORESHAMLACE_KEY: u32 = 432133;
pub const EURO72EXTRALORESHAM_KEY: u32 = 399364;
pub const EURO72EXTRALORESHAMLACE_KEY: u32 = 399365;
pub const EURO72EXTRALORESEHB_KEY: u32 = 397444;
pub const EURO72EXTRALORESEHBLACE_KEY: u32 = 397445;
pub const EURO72LORESEHB_KEY: u32 = 430212;
pub const EURO72LORESEHBLACE_KEY: u32 = 430213;
pub const EURO72EHB_KEY: u32 = 430244;
pub const EURO72EHBLACE_KEY: u32 = 430245;
pub const EURO72EXTRALORESDBL_KEY: u32 = 397312;
pub const EURO72LORESDBL_KEY: u32 = 430080;
pub const EURO72PRODUCTDBL_KEY: u32 = 430112;
pub const EURO72EXTRALORESHAMDBL_KEY: u32 = 399360;
pub const EURO72LORESHAMDBL_KEY: u32 = 432128;
pub const EURO72PRODUCTHAMDBL_KEY: u32 = 432160;
pub const EURO72EXTRALORESEHBDBL_KEY: u32 = 397440;
pub const EURO72LORESEHBDBL_KEY: u32 = 430208;
pub const EURO72PRODUCTEHBDBL_KEY: u32 = 430240;
pub const EURO36_MONITOR_ID: u32 = 462848;
pub const SUPER72_MONITOR_ID: u32 = 528384;
pub const SUPER72LORESDBL_KEY: u32 = 528392;
pub const SUPER72HIRESDBL_KEY: u32 = 561160;
pub const SUPER72SUPERDBL_KEY: u32 = 561192;
pub const SUPER72LORESHAMDBL_KEY: u32 = 530440;
pub const SUPER72HIRESHAMDBL_KEY: u32 = 563208;
pub const SUPER72SUPERHAMDBL_KEY: u32 = 563240;
pub const SUPER72LORESEHBDBL_KEY: u32 = 528520;
pub const SUPER72HIRESEHBDBL_KEY: u32 = 561288;
pub const SUPER72SUPEREHBDBL_KEY: u32 = 561320;
pub const DBLNTSC_MONITOR_ID: u32 = 593920;
pub const DBLNTSCLORES_KEY: u32 = 593920;
pub const DBLNTSCLORESFF_KEY: u32 = 593924;
pub const DBLNTSCLORESHAM_KEY: u32 = 595968;
pub const DBLNTSCLORESHAMFF_KEY: u32 = 595972;
pub const DBLNTSCLORESEHB_KEY: u32 = 594048;
pub const DBLNTSCLORESEHBFF_KEY: u32 = 594052;
pub const DBLNTSCLORESLACE_KEY: u32 = 593925;
pub const DBLNTSCLORESHAMLACE_KEY: u32 = 595973;
pub const DBLNTSCLORESEHBLACE_KEY: u32 = 594053;
pub const DBLNTSCLORESDPF_KEY: u32 = 594944;
pub const DBLNTSCLORESDPFFF_KEY: u32 = 594948;
pub const DBLNTSCLORESDPFLACE_KEY: u32 = 594949;
pub const DBLNTSCLORESDPF2_KEY: u32 = 595008;
pub const DBLNTSCLORESDPF2FF_KEY: u32 = 595012;
pub const DBLNTSCLORESDPF2LACE_KEY: u32 = 595013;
pub const DBLNTSCHIRES_KEY: u32 = 626688;
pub const DBLNTSCHIRESFF_KEY: u32 = 626692;
pub const DBLNTSCHIRESHAM_KEY: u32 = 628736;
pub const DBLNTSCHIRESHAMFF_KEY: u32 = 628740;
pub const DBLNTSCHIRESLACE_KEY: u32 = 626693;
pub const DBLNTSCHIRESHAMLACE_KEY: u32 = 628741;
pub const DBLNTSCHIRESEHB_KEY: u32 = 626816;
pub const DBLNTSCHIRESEHBFF_KEY: u32 = 626820;
pub const DBLNTSCHIRESEHBLACE_KEY: u32 = 626821;
pub const DBLNTSCHIRESDPF_KEY: u32 = 627712;
pub const DBLNTSCHIRESDPFFF_KEY: u32 = 627716;
pub const DBLNTSCHIRESDPFLACE_KEY: u32 = 627717;
pub const DBLNTSCHIRESDPF2_KEY: u32 = 627776;
pub const DBLNTSCHIRESDPF2FF_KEY: u32 = 627780;
pub const DBLNTSCHIRESDPF2LACE_KEY: u32 = 627781;
pub const DBLNTSCEXTRALORES_KEY: u32 = 594432;
pub const DBLNTSCEXTRALORESHAM_KEY: u32 = 596480;
pub const DBLNTSCEXTRALORESEHB_KEY: u32 = 594560;
pub const DBLNTSCEXTRALORESDPF_KEY: u32 = 595456;
pub const DBLNTSCEXTRALORESDPF2_KEY: u32 = 595520;
pub const DBLNTSCEXTRALORESFF_KEY: u32 = 594436;
pub const DBLNTSCEXTRALORESHAMFF_KEY: u32 = 596484;
pub const DBLNTSCEXTRALORESEHBFF_KEY: u32 = 594564;
pub const DBLNTSCEXTRALORESDPFFF_KEY: u32 = 595460;
pub const DBLNTSCEXTRALORESDPF2FF_KEY: u32 = 595524;
pub const DBLNTSCEXTRALORESLACE_KEY: u32 = 594437;
pub const DBLNTSCEXTRALORESHAMLACE_KEY: u32 = 596485;
pub const DBLNTSCEXTRALORESEHBLACE_KEY: u32 = 594565;
pub const DBLNTSCEXTRALORESDPFLACE_KEY: u32 = 595461;
pub const DBLNTSCEXTRALORESDPF2LACE_KEY: u32 = 595525;
pub const DBLPAL_MONITOR_ID: u32 = 659456;
pub const DBLPALLORES_KEY: u32 = 659456;
pub const DBLPALLORESFF_KEY: u32 = 659460;
pub const DBLPALLORESHAM_KEY: u32 = 661504;
pub const DBLPALLORESHAMFF_KEY: u32 = 661508;
pub const DBLPALLORESEHB_KEY: u32 = 659584;
pub const DBLPALLORESEHBFF_KEY: u32 = 659588;
pub const DBLPALLORESLACE_KEY: u32 = 659461;
pub const DBLPALLORESHAMLACE_KEY: u32 = 661509;
pub const DBLPALLORESEHBLACE_KEY: u32 = 659589;
pub const DBLPALLORESDPF_KEY: u32 = 660480;
pub const DBLPALLORESDPFFF_KEY: u32 = 660484;
pub const DBLPALLORESDPFLACE_KEY: u32 = 660485;
pub const DBLPALLORESDPF2_KEY: u32 = 660544;
pub const DBLPALLORESDPF2FF_KEY: u32 = 660548;
pub const DBLPALLORESDPF2LACE_KEY: u32 = 660549;
pub const DBLPALHIRES_KEY: u32 = 692224;
pub const DBLPALHIRESFF_KEY: u32 = 692228;
pub const DBLPALHIRESHAM_KEY: u32 = 694272;
pub const DBLPALHIRESHAMFF_KEY: u32 = 694276;
pub const DBLPALHIRESLACE_KEY: u32 = 692229;
pub const DBLPALHIRESHAMLACE_KEY: u32 = 694277;
pub const DBLPALHIRESEHB_KEY: u32 = 692352;
pub const DBLPALHIRESEHBFF_KEY: u32 = 692356;
pub const DBLPALHIRESEHBLACE_KEY: u32 = 692357;
pub const DBLPALHIRESDPF_KEY: u32 = 693248;
pub const DBLPALHIRESDPFFF_KEY: u32 = 693252;
pub const DBLPALHIRESDPFLACE_KEY: u32 = 693253;
pub const DBLPALHIRESDPF2_KEY: u32 = 693312;
pub const DBLPALHIRESDPF2FF_KEY: u32 = 693316;
pub const DBLPALHIRESDPF2LACE_KEY: u32 = 693317;
pub const DBLPALEXTRALORES_KEY: u32 = 659968;
pub const DBLPALEXTRALORESHAM_KEY: u32 = 662016;
pub const DBLPALEXTRALORESEHB_KEY: u32 = 660096;
pub const DBLPALEXTRALORESDPF_KEY: u32 = 660992;
pub const DBLPALEXTRALORESDPF2_KEY: u32 = 661056;
pub const DBLPALEXTRALORESFF_KEY: u32 = 659972;
pub const DBLPALEXTRALORESHAMFF_KEY: u32 = 662020;
pub const DBLPALEXTRALORESEHBFF_KEY: u32 = 660100;
pub const DBLPALEXTRALORESDPFFF_KEY: u32 = 660996;
pub const DBLPALEXTRALORESDPF2FF_KEY: u32 = 661060;
pub const DBLPALEXTRALORESLACE_KEY: u32 = 659973;
pub const DBLPALEXTRALORESHAMLACE_KEY: u32 = 662021;
pub const DBLPALEXTRALORESEHBLACE_KEY: u32 = 660101;
pub const DBLPALEXTRALORESDPFLACE_KEY: u32 = 660997;
pub const DBLPALEXTRALORESDPF2LACE_KEY: u32 = 661061;
pub const BIDTAG_DIPFMustHave: u32 = 2147483649;
pub const BIDTAG_DIPFMustNotHave: u32 = 2147483650;
pub const BIDTAG_ViewPort: u32 = 2147483651;
pub const BIDTAG_NominalWidth: u32 = 2147483652;
pub const BIDTAG_NominalHeight: u32 = 2147483653;
pub const BIDTAG_DesiredWidth: u32 = 2147483654;
pub const BIDTAG_DesiredHeight: u32 = 2147483655;
pub const BIDTAG_Depth: u32 = 2147483656;
pub const BIDTAG_MonitorID: u32 = 2147483657;
pub const BIDTAG_SourceID: u32 = 2147483658;
pub const BIDTAG_RedBits: u32 = 2147483659;
pub const BIDTAG_BlueBits: u32 = 2147483660;
pub const BIDTAG_GreenBits: u32 = 2147483661;
pub const BIDTAG_GfxPrivate: u32 = 2147483662;
pub const DTAG_DISP: u32 = 2147483648;
pub const DTAG_DIMS: u32 = 2147487744;
pub const DTAG_MNTR: u32 = 2147491840;
pub const DTAG_NAME: u32 = 2147495936;
pub const DTAG_VEC: u32 = 2147500032;
pub const DI_AVAIL_NOCHIPS: u32 = 1;
pub const DI_AVAIL_NOMONITOR: u32 = 2;
pub const DI_AVAIL_NOTWITHGENLOCK: u32 = 4;
pub const DIPF_IS_LACE: u32 = 1;
pub const DIPF_IS_DUALPF: u32 = 2;
pub const DIPF_IS_PF2PRI: u32 = 4;
pub const DIPF_IS_HAM: u32 = 8;
pub const DIPF_IS_ECS: u32 = 16;
pub const DIPF_IS_AA: u32 = 65536;
pub const DIPF_IS_PAL: u32 = 32;
pub const DIPF_IS_SPRITES: u32 = 64;
pub const DIPF_IS_GENLOCK: u32 = 128;
pub const DIPF_IS_WB: u32 = 256;
pub const DIPF_IS_DRAGGABLE: u32 = 512;
pub const DIPF_IS_PANELLED: u32 = 1024;
pub const DIPF_IS_BEAMSYNC: u32 = 2048;
pub const DIPF_IS_EXTRAHALFBRITE: u32 = 4096;
pub const DIPF_IS_SPRITES_ATT: u32 = 8192;
pub const DIPF_IS_SPRITES_CHNG_RES: u32 = 16384;
pub const DIPF_IS_SPRITES_BORDER: u32 = 32768;
pub const DIPF_IS_SCANDBL: u32 = 131072;
pub const DIPF_IS_SPRITES_CHNG_BASE: u32 = 262144;
pub const DIPF_IS_SPRITES_CHNG_PRI: u32 = 524288;
pub const DIPF_IS_DBUFFER: u32 = 1048576;
pub const DIPF_IS_PROGBEAM: u32 = 2097152;
pub const DIPF_IS_FOREIGN: u32 = 2147483648;
pub const MCOMPAT_MIXED: u32 = 0;
pub const MCOMPAT_SELF: u32 = 1;
pub const MCOMPAT_NOBODY: i32 = -1;
pub const DISPLAYNAMELEN: u32 = 32;
pub const VARVBLANK: u32 = 4096;
pub const LOLDIS: u32 = 2048;
pub const CSCBLANKEN: u32 = 1024;
pub const VARVSYNC: u32 = 512;
pub const VARHSYNC: u32 = 256;
pub const VARBEAM: u32 = 128;
pub const DISPLAYDUAL: u32 = 64;
pub const DISPLAYPAL: u32 = 32;
pub const VARCSYNC: u32 = 16;
pub const CSBLANK: u32 = 8;
pub const CSYNCTRUE: u32 = 4;
pub const VSYNCTRUE: u32 = 2;
pub const HSYNCTRUE: u32 = 1;
pub const USE_BPLCON3: u32 = 1;
pub const BPLCON2_ZDCTEN: u32 = 1024;
pub const BPLCON2_ZDBPEN: u32 = 2048;
pub const BPLCON2_ZDBPSEL0: u32 = 4096;
pub const BPLCON2_ZDBPSEL1: u32 = 8192;
pub const BPLCON2_ZDBPSEL2: u32 = 16384;
pub const BPLCON3_EXTBLNKEN: u32 = 1;
pub const BPLCON3_EXTBLKZD: u32 = 2;
pub const BPLCON3_ZDCLKEN: u32 = 4;
pub const BPLCON3_BRDNTRAN: u32 = 16;
pub const BPLCON3_BRDNBLNK: u32 = 32;
pub const VPXB_FREE_ME: u32 = 0;
pub const VPXF_FREE_ME: u32 = 1;
pub const VPXB_LAST: u32 = 1;
pub const VPXF_LAST: u32 = 2;
pub const VPXB_STRADDLES_256: u32 = 4;
pub const VPXF_STRADDLES_256: u32 = 16;
pub const VPXB_STRADDLES_512: u32 = 5;
pub const VPXF_STRADDLES_512: u32 = 32;
pub const EXTEND_VSTRUCT: u32 = 4096;
pub const VPF_A2024: u32 = 64;
pub const VPF_TENHZ: u32 = 32;
pub const VPB_A2024: u32 = 6;
pub const VPB_TENHZ: u32 = 4;
pub const GENLOCK_VIDEO: u32 = 2;
pub const LACE: u32 = 4;
pub const DOUBLESCAN: u32 = 8;
pub const SUPERHIRES: u32 = 32;
pub const PFBA: u32 = 64;
pub const EXTRA_HALFBRITE: u32 = 128;
pub const GENLOCK_AUDIO: u32 = 256;
pub const DUALPF: u32 = 1024;
pub const HAM: u32 = 2048;
pub const EXTENDED_MODE: u32 = 4096;
pub const VP_HIDE: u32 = 8192;
pub const SPRITES: u32 = 16384;
pub const HIRES: u32 = 32768;
pub const COLORMAP_TYPE_V1_2: u32 = 0;
pub const COLORMAP_TYPE_V1_4: u32 = 1;
pub const COLORMAP_TYPE_V36: u32 = 1;
pub const COLORMAP_TYPE_V39: u32 = 2;
pub const COLORMAP_TRANSPARENCY: u32 = 1;
pub const COLORPLANE_TRANSPARENCY: u32 = 2;
pub const BORDER_BLANKING: u32 = 4;
pub const BORDER_NOTRANSPARENCY: u32 = 8;
pub const VIDEOCONTROL_BATCH: u32 = 16;
pub const USER_COPPER_CLIP: u32 = 32;
pub const BORDERSPRITES: u32 = 64;
pub const CMF_CMTRANS: u32 = 0;
pub const CMF_CPTRANS: u32 = 1;
pub const CMF_BRDRBLNK: u32 = 2;
pub const CMF_BRDNTRAN: u32 = 3;
pub const CMF_BRDRSPRT: u32 = 6;
pub const SPRITERESN_ECS: u32 = 0;
pub const SPRITERESN_140NS: u32 = 1;
pub const SPRITERESN_70NS: u32 = 2;
pub const SPRITERESN_35NS: u32 = 3;
pub const SPRITERESN_DEFAULT: i32 = -1;
pub const CMAB_FULLPALETTE: u32 = 0;
pub const CMAF_FULLPALETTE: u32 = 1;
pub const CMAB_NO_INTERMED_UPDATE: u32 = 1;
pub const CMAF_NO_INTERMED_UPDATE: u32 = 2;
pub const CMAB_NO_COLOR_LOAD: u32 = 2;
pub const CMAF_NO_COLOR_LOAD: u32 = 4;
pub const CMAB_DUALPF_DISABLE: u32 = 3;
pub const CMAF_DUALPF_DISABLE: u32 = 8;
pub const PENB_EXCLUSIVE: u32 = 0;
pub const PENB_NO_SETCOLOR: u32 = 1;
pub const PENF_EXCLUSIVE: u32 = 1;
pub const PENF_NO_SETCOLOR: u32 = 2;
pub const PEN_EXCLUSIVE: u32 = 1;
pub const PEN_NO_SETCOLOR: u32 = 2;
pub const PRECISION_EXACT: i32 = -1;
pub const PRECISION_IMAGE: u32 = 0;
pub const PRECISION_ICON: u32 = 16;
pub const PRECISION_GUI: u32 = 32;
pub const OBP_Precision: u32 = 2214592512;
pub const OBP_FailIfBad: u32 = 2214592513;
pub const MVP_OK: u32 = 0;
pub const MVP_NO_MEM: u32 = 1;
pub const MVP_NO_VPE: u32 = 2;
pub const MVP_NO_DSPINS: u32 = 3;
pub const MVP_NO_DISPLAY: u32 = 4;
pub const MVP_OFF_BOTTOM: u32 = 5;
pub const MCOP_OK: u32 = 0;
pub const MCOP_NO_MEM: u32 = 1;
pub const MCOP_NOP: u32 = 2;
pub const JAM1: u32 = 0;
pub const JAM2: u32 = 1;
pub const COMPLEMENT: u32 = 2;
pub const INVERSVID: u32 = 4;
pub const FRST_DOT: u32 = 1;
pub const ONE_DOT: u32 = 2;
pub const DBUFFER: u32 = 4;
pub const AREAOUTLINE: u32 = 8;
pub const NOCROSSFILL: u32 = 32;
pub const LAYERSIMPLE: u32 = 1;
pub const LAYERSMART: u32 = 2;
pub const LAYERSUPER: u32 = 4;
pub const LAYERUPDATING: u32 = 16;
pub const LAYERBACKDROP: u32 = 64;
pub const LAYERREFRESH: u32 = 128;
pub const LAYER_CLIPRECTS_LOST: u32 = 256;
pub const LAYERIREFRESH: u32 = 512;
pub const LAYERIREFRESH2: u32 = 1024;
pub const LAYERSAVEBACK: u32 = 2048;
pub const LAYERHIDDEN: u32 = 4096;
pub const NEWLAYERINFO_CALLED: u32 = 1;
pub const FS_NORMAL: u32 = 0;
pub const FSB_UNDERLINED: u32 = 0;
pub const FSF_UNDERLINED: u32 = 1;
pub const FSB_BOLD: u32 = 1;
pub const FSF_BOLD: u32 = 2;
pub const FSB_ITALIC: u32 = 2;
pub const FSF_ITALIC: u32 = 4;
pub const FSB_EXTENDED: u32 = 3;
pub const FSF_EXTENDED: u32 = 8;
pub const FSB_COLORFONT: u32 = 6;
pub const FSF_COLORFONT: u32 = 64;
pub const FSB_TAGGED: u32 = 7;
pub const FSF_TAGGED: u32 = 128;
pub const FPB_ROMFONT: u32 = 0;
pub const FPF_ROMFONT: u32 = 1;
pub const FPB_DISKFONT: u32 = 1;
pub const FPF_DISKFONT: u32 = 2;
pub const FPB_REVPATH: u32 = 2;
pub const FPF_REVPATH: u32 = 4;
pub const FPB_TALLDOT: u32 = 3;
pub const FPF_TALLDOT: u32 = 8;
pub const FPB_WIDEDOT: u32 = 4;
pub const FPF_WIDEDOT: u32 = 16;
pub const FPB_PROPORTIONAL: u32 = 5;
pub const FPF_PROPORTIONAL: u32 = 32;
pub const FPB_DESIGNED: u32 = 6;
pub const FPF_DESIGNED: u32 = 64;
pub const FPB_REMOVED: u32 = 7;
pub const FPF_REMOVED: u32 = 128;
pub const MAXFONTMATCHWEIGHT: u32 = 32767;
pub const TE0B_NOREMFONT: u32 = 0;
pub const TE0F_NOREMFONT: u32 = 1;
pub const CT_COLORMASK: u32 = 15;
pub const CT_COLORFONT: u32 = 1;
pub const CT_GREYFONT: u32 = 2;
pub const CT_ANTIALIAS: u32 = 4;
pub const CTB_MAPCOLOR: u32 = 0;
pub const CTF_MAPCOLOR: u32 = 1;
pub const DEVICES_TIMER_H: u32 = 1;
pub const UNIT_MICROHZ: u32 = 0;
pub const UNIT_VBLANK: u32 = 1;
pub const UNIT_ECLOCK: u32 = 2;
pub const UNIT_WAITUNTIL: u32 = 3;
pub const UNIT_WAITECLOCK: u32 = 4;
pub const TIMERNAME: &[u8; 13] = b"timer.device\0";
pub const TR_ADDREQUEST: u32 = 9;
pub const TR_GETSYSTIME: u32 = 10;
pub const TR_SETSYSTIME: u32 = 11;
pub const IECLASS_NULL: u32 = 0;
pub const IECLASS_RAWKEY: u32 = 1;
pub const IECLASS_RAWMOUSE: u32 = 2;
pub const IECLASS_EVENT: u32 = 3;
pub const IECLASS_POINTERPOS: u32 = 4;
pub const IECLASS_TIMER: u32 = 6;
pub const IECLASS_GADGETDOWN: u32 = 7;
pub const IECLASS_GADGETUP: u32 = 8;
pub const IECLASS_REQUESTER: u32 = 9;
pub const IECLASS_MENULIST: u32 = 10;
pub const IECLASS_CLOSEWINDOW: u32 = 11;
pub const IECLASS_SIZEWINDOW: u32 = 12;
pub const IECLASS_REFRESHWINDOW: u32 = 13;
pub const IECLASS_NEWPREFS: u32 = 14;
pub const IECLASS_DISKREMOVED: u32 = 15;
pub const IECLASS_DISKINSERTED: u32 = 16;
pub const IECLASS_ACTIVEWINDOW: u32 = 17;
pub const IECLASS_INACTIVEWINDOW: u32 = 18;
pub const IECLASS_NEWPOINTERPOS: u32 = 19;
pub const IECLASS_MENUHELP: u32 = 20;
pub const IECLASS_CHANGEWINDOW: u32 = 21;
pub const IECLASS_MAX: u32 = 21;
pub const IESUBCLASS_COMPATIBLE: u32 = 0;
pub const IESUBCLASS_PIXEL: u32 = 1;
pub const IESUBCLASS_TABLET: u32 = 2;
pub const IESUBCLASS_NEWTABLET: u32 = 3;
pub const IECODE_UP_PREFIX: u32 = 128;
pub const IECODE_KEY_CODE_FIRST: u32 = 0;
pub const IECODE_KEY_CODE_LAST: u32 = 119;
pub const IECODE_COMM_CODE_FIRST: u32 = 120;
pub const IECODE_COMM_CODE_LAST: u32 = 127;
pub const IECODE_C0_FIRST: u32 = 0;
pub const IECODE_C0_LAST: u32 = 31;
pub const IECODE_ASCII_FIRST: u32 = 32;
pub const IECODE_ASCII_LAST: u32 = 126;
pub const IECODE_ASCII_DEL: u32 = 127;
pub const IECODE_C1_FIRST: u32 = 128;
pub const IECODE_C1_LAST: u32 = 159;
pub const IECODE_LATIN1_FIRST: u32 = 160;
pub const IECODE_LATIN1_LAST: u32 = 255;
pub const IECODE_LBUTTON: u32 = 104;
pub const IECODE_RBUTTON: u32 = 105;
pub const IECODE_MBUTTON: u32 = 106;
pub const IECODE_NOBUTTON: u32 = 255;
pub const IECODE_NEWACTIVE: u32 = 1;
pub const IECODE_NEWSIZE: u32 = 2;
pub const IECODE_REFRESH: u32 = 3;
pub const IECODE_REQSET: u32 = 1;
pub const IECODE_REQCLEAR: u32 = 0;
pub const IEQUALIFIER_LSHIFT: u32 = 1;
pub const IEQUALIFIER_RSHIFT: u32 = 2;
pub const IEQUALIFIER_CAPSLOCK: u32 = 4;
pub const IEQUALIFIER_CONTROL: u32 = 8;
pub const IEQUALIFIER_LALT: u32 = 16;
pub const IEQUALIFIER_RALT: u32 = 32;
pub const IEQUALIFIER_LCOMMAND: u32 = 64;
pub const IEQUALIFIER_RCOMMAND: u32 = 128;
pub const IEQUALIFIER_NUMERICPAD: u32 = 256;
pub const IEQUALIFIER_REPEAT: u32 = 512;
pub const IEQUALIFIER_INTERRUPT: u32 = 1024;
pub const IEQUALIFIER_MULTIBROADCAST: u32 = 2048;
pub const IEQUALIFIER_MIDBUTTON: u32 = 4096;
pub const IEQUALIFIER_RBUTTON: u32 = 8192;
pub const IEQUALIFIER_LEFTBUTTON: u32 = 16384;
pub const IEQUALIFIER_RELATIVEMOUSE: u32 = 32768;
pub const IEQUALIFIERB_LSHIFT: u32 = 0;
pub const IEQUALIFIERB_RSHIFT: u32 = 1;
pub const IEQUALIFIERB_CAPSLOCK: u32 = 2;
pub const IEQUALIFIERB_CONTROL: u32 = 3;
pub const IEQUALIFIERB_LALT: u32 = 4;
pub const IEQUALIFIERB_RALT: u32 = 5;
pub const IEQUALIFIERB_LCOMMAND: u32 = 6;
pub const IEQUALIFIERB_RCOMMAND: u32 = 7;
pub const IEQUALIFIERB_NUMERICPAD: u32 = 8;
pub const IEQUALIFIERB_REPEAT: u32 = 9;
pub const IEQUALIFIERB_INTERRUPT: u32 = 10;
pub const IEQUALIFIERB_MULTIBROADCAST: u32 = 11;
pub const IEQUALIFIERB_MIDBUTTON: u32 = 12;
pub const IEQUALIFIERB_RBUTTON: u32 = 13;
pub const IEQUALIFIERB_LEFTBUTTON: u32 = 14;
pub const IEQUALIFIERB_RELATIVEMOUSE: u32 = 15;
pub const MENUENABLED: u32 = 1;
pub const MIDRAWN: u32 = 256;
pub const CHECKIT: u32 = 1;
pub const ITEMTEXT: u32 = 2;
pub const COMMSEQ: u32 = 4;
pub const MENUTOGGLE: u32 = 8;
pub const ITEMENABLED: u32 = 16;
pub const SUBMENU: u32 = 512;
pub const HIGHFLAGS: u32 = 192;
pub const HIGHIMAGE: u32 = 0;
pub const HIGHCOMP: u32 = 64;
pub const HIGHBOX: u32 = 128;
pub const HIGHNONE: u32 = 192;
pub const CHECKED: u32 = 256;
pub const MIF_SHIFTCOMMSEQ: u32 = 2048;
pub const MIF_EXTENDED: u32 = 32768;
pub const MIF_RESERVED: u32 = 1024;
pub const ISDRAWN: u32 = 4096;
pub const HIGHITEM: u32 = 8192;
pub const MENUTOGGLED: u32 = 16384;
pub const POINTREL: u32 = 1;
pub const PREDRAWN: u32 = 2;
pub const NOISYREQ: u32 = 4;
pub const SIMPLEREQ: u32 = 16;
pub const USEREQIMAGE: u32 = 32;
pub const NOREQBACKFILL: u32 = 64;
pub const REQOFFWINDOW: u32 = 4096;
pub const REQACTIVE: u32 = 8192;
pub const SYSREQUEST: u32 = 16384;
pub const DEFERREFRESH: u32 = 32768;
pub const GFLG_GADGHIGHBITS: u32 = 3;
pub const GFLG_GADGHCOMP: u32 = 0;
pub const GFLG_GADGHBOX: u32 = 1;
pub const GFLG_GADGHIMAGE: u32 = 2;
pub const GFLG_GADGHNONE: u32 = 3;
pub const GFLG_GADGIMAGE: u32 = 4;
pub const GFLG_RELBOTTOM: u32 = 8;
pub const GFLG_RELRIGHT: u32 = 16;
pub const GFLG_RELWIDTH: u32 = 32;
pub const GFLG_RELHEIGHT: u32 = 64;
pub const GFLG_RELSPECIAL: u32 = 16384;
pub const GFLG_SELECTED: u32 = 128;
pub const GFLG_DISABLED: u32 = 256;
pub const GFLG_LABELMASK: u32 = 12288;
pub const GFLG_LABELITEXT: u32 = 0;
pub const GFLG_LABELSTRING: u32 = 4096;
pub const GFLG_LABELIMAGE: u32 = 8192;
pub const GFLG_TABCYCLE: u32 = 512;
pub const GFLG_STRINGEXTEND: u32 = 1024;
pub const GFLG_IMAGEDISABLE: u32 = 2048;
pub const GFLG_EXTENDED: u32 = 32768;
pub const GACT_RELVERIFY: u32 = 1;
pub const GACT_IMMEDIATE: u32 = 2;
pub const GACT_ENDGADGET: u32 = 4;
pub const GACT_FOLLOWMOUSE: u32 = 8;
pub const GACT_RIGHTBORDER: u32 = 16;
pub const GACT_LEFTBORDER: u32 = 32;
pub const GACT_TOPBORDER: u32 = 64;
pub const GACT_BOTTOMBORDER: u32 = 128;
pub const GACT_BORDERSNIFF: u32 = 32768;
pub const GACT_TOGGLESELECT: u32 = 256;
pub const GACT_BOOLEXTEND: u32 = 8192;
pub const GACT_STRINGLEFT: u32 = 0;
pub const GACT_STRINGCENTER: u32 = 512;
pub const GACT_STRINGRIGHT: u32 = 1024;
pub const GACT_LONGINT: u32 = 2048;
pub const GACT_ALTKEYMAP: u32 = 4096;
pub const GACT_STRINGEXTEND: u32 = 8192;
pub const GACT_ACTIVEGADGET: u32 = 16384;
pub const GTYP_GADGETTYPE: u32 = 64512;
pub const GTYP_SCRGADGET: u32 = 16384;
pub const GTYP_GZZGADGET: u32 = 8192;
pub const GTYP_REQGADGET: u32 = 4096;
pub const GTYP_SYSGADGET: u32 = 32768;
pub const GTYP_SYSTYPEMASK: u32 = 240;
pub const GTYP_SIZING: u32 = 16;
pub const GTYP_WDRAGGING: u32 = 32;
pub const GTYP_SDRAGGING: u32 = 48;
pub const GTYP_WDEPTH: u32 = 64;
pub const GTYP_SDEPTH: u32 = 80;
pub const GTYP_WZOOM: u32 = 96;
pub const GTYP_SUNUSED: u32 = 112;
pub const GTYP_CLOSE: u32 = 128;
pub const GTYP_ICONIFY: u32 = 144;
pub const GTYP_WUPFRONT: u32 = 64;
pub const GTYP_SUPFRONT: u32 = 80;
pub const GTYP_WDOWNBACK: u32 = 96;
pub const GTYP_SDOWNBACK: u32 = 112;
pub const GTYP_GTYPEMASK: u32 = 7;
pub const GTYP_BOOLGADGET: u32 = 1;
pub const GTYP_GADGET0002: u32 = 2;
pub const GTYP_PROPGADGET: u32 = 3;
pub const GTYP_STRGADGET: u32 = 4;
pub const GTYP_CUSTOMGADGET: u32 = 5;
pub const GMORE_BOUNDS: u32 = 1;
pub const GMORE_GADGETHELP: u32 = 2;
pub const GMORE_SCROLLRASTER: u32 = 4;
pub const GMORE_HIDDEN: u32 = 16;
pub const GMORE_BOOPSIGADGET: u32 = 1024;
pub const GMORE_FREEIMAGE: u32 = 2048;
pub const GMORE_PARENTHIDDEN: u32 = 16777216;
pub const BOOLMASK: u32 = 1;
pub const AUTOKNOB: u32 = 1;
pub const FREEHORIZ: u32 = 2;
pub const FREEVERT: u32 = 4;
pub const PROPBORDERLESS: u32 = 8;
pub const KNOBHIT: u32 = 256;
pub const PROPNEWLOOK: u32 = 16;
pub const SMARTKNOBIMAGE: u32 = 32;
pub const KNOBHMIN: u32 = 6;
pub const KNOBVMIN: u32 = 4;
pub const MAXBODY: u32 = 65535;
pub const MAXPOT: u32 = 65535;
pub const INTUIWHEELDATA_VERSION: u32 = 2;
pub const IDCMP_SIZEVERIFY: u32 = 1;
pub const IDCMP_NEWSIZE: u32 = 2;
pub const IDCMP_REFRESHWINDOW: u32 = 4;
pub const IDCMP_MOUSEBUTTONS: u32 = 8;
pub const IDCMP_MOUSEMOVE: u32 = 16;
pub const IDCMP_GADGETDOWN: u32 = 32;
pub const IDCMP_GADGETUP: u32 = 64;
pub const IDCMP_REQSET: u32 = 128;
pub const IDCMP_MENUPICK: u32 = 256;
pub const IDCMP_CLOSEWINDOW: u32 = 512;
pub const IDCMP_RAWKEY: u32 = 1024;
pub const IDCMP_REQVERIFY: u32 = 2048;
pub const IDCMP_REQCLEAR: u32 = 4096;
pub const IDCMP_MENUVERIFY: u32 = 8192;
pub const IDCMP_NEWPREFS: u32 = 16384;
pub const IDCMP_DISKINSERTED: u32 = 32768;
pub const IDCMP_DISKREMOVED: u32 = 65536;
pub const IDCMP_WBENCHMESSAGE: u32 = 131072;
pub const IDCMP_ACTIVEWINDOW: u32 = 262144;
pub const IDCMP_INACTIVEWINDOW: u32 = 524288;
pub const IDCMP_DELTAMOVE: u32 = 1048576;
pub const IDCMP_VANILLAKEY: u32 = 2097152;
pub const IDCMP_INTUITICKS: u32 = 4194304;
pub const IDCMP_IDCMPUPDATE: u32 = 8388608;
pub const IDCMP_MENUHELP: u32 = 16777216;
pub const IDCMP_CHANGEWINDOW: u32 = 33554432;
pub const IDCMP_GADGETHELP: u32 = 67108864;
pub const IDCMP_EXTENDEDMOUSE: u32 = 134217728;
pub const IDCMP_LONELYMESSAGE: u32 = 2147483648;
pub const CWCODE_MOVESIZE: u32 = 0;
pub const CWCODE_DEPTH: u32 = 1;
pub const CWCODE_HIDE: u32 = 2;
pub const CWCODE_SHOW: u32 = 3;
pub const MENUHOT: u32 = 1;
pub const MENUCANCEL: u32 = 2;
pub const MENUWAITING: u32 = 3;
pub const OKOK: u32 = 1;
pub const OKABORT: u32 = 4;
pub const OKCANCEL: u32 = 2;
pub const WBENCHOPEN: u32 = 1;
pub const WBENCHCLOSE: u32 = 2;
pub const WFLG_SIZEGADGET: u32 = 1;
pub const WFLG_DRAGBAR: u32 = 2;
pub const WFLG_DEPTHGADGET: u32 = 4;
pub const WFLG_CLOSEGADGET: u32 = 8;
pub const WFLG_SIZEBRIGHT: u32 = 16;
pub const WFLG_SIZEBBOTTOM: u32 = 32;
pub const WFLG_REFRESHBITS: u32 = 192;
pub const WFLG_SMART_REFRESH: u32 = 0;
pub const WFLG_SIMPLE_REFRESH: u32 = 64;
pub const WFLG_SUPER_BITMAP: u32 = 128;
pub const WFLG_OTHER_REFRESH: u32 = 192;
pub const WFLG_BACKDROP: u32 = 256;
pub const WFLG_REPORTMOUSE: u32 = 512;
pub const WFLG_GIMMEZEROZERO: u32 = 1024;
pub const WFLG_BORDERLESS: u32 = 2048;
pub const WFLG_ACTIVATE: u32 = 4096;
pub const WFLG_RMBTRAP: u32 = 65536;
pub const WFLG_NOCAREREFRESH: u32 = 131072;
pub const WFLG_NW_EXTENDED: u32 = 262144;
pub const WFLG_NEWLOOKMENUS: u32 = 2097152;
pub const WFLG_WINDOWACTIVE: u32 = 8192;
pub const WFLG_INREQUEST: u32 = 16384;
pub const WFLG_MENUSTATE: u32 = 32768;
pub const WFLG_WINDOWREFRESH: u32 = 16777216;
pub const WFLG_WBENCHWINDOW: u32 = 33554432;
pub const WFLG_WINDOWTICKED: u32 = 67108864;
pub const WFLG_VISITOR: u32 = 134217728;
pub const WFLG_ZOOMED: u32 = 268435456;
pub const WFLG_HASZOOM: u32 = 536870912;
pub const WFLG_HASICONIFY: u32 = 1073741824;
pub const DEFAULTMOUSEQUEUE: u32 = 5;
pub const HC_GADGETHELP: u32 = 1;
pub const INTUITION_SCREENS_H: u32 = 1;
pub const DRI_VERSION: u32 = 3;
pub const DRIF_NEWLOOK: u32 = 1;
pub const DETAILPEN: u32 = 0;
pub const BLOCKPEN: u32 = 1;
pub const TEXTPEN: u32 = 2;
pub const SHINEPEN: u32 = 3;
pub const SHADOWPEN: u32 = 4;
pub const FILLPEN: u32 = 5;
pub const FILLTEXTPEN: u32 = 6;
pub const BACKGROUNDPEN: u32 = 7;
pub const HIGHLIGHTTEXTPEN: u32 = 8;
pub const BARDETAILPEN: u32 = 9;
pub const BARBLOCKPEN: u32 = 10;
pub const BARTRIMPEN: u32 = 11;
pub const BARCONTOURPEN: u32 = 12;
pub const NUMDRIPENS: u32 = 13;
pub const PEN_C3: u32 = 65276;
pub const PEN_C2: u32 = 65277;
pub const PEN_C1: u32 = 65278;
pub const PEN_C0: u32 = 65279;
pub const SCREENTYPE: u32 = 15;
pub const WBENCHSCREEN: u32 = 1;
pub const PUBLICSCREEN: u32 = 2;
pub const CUSTOMSCREEN: u32 = 15;
pub const SHOWTITLE: u32 = 16;
pub const BEEPING: u32 = 32;
pub const CUSTOMBITMAP: u32 = 64;
pub const SCREENBEHIND: u32 = 128;
pub const SCREENQUIET: u32 = 256;
pub const SCREENHIRES: u32 = 512;
pub const NS_EXTENDED: u32 = 4096;
pub const AUTOSCROLL: u32 = 16384;
pub const PENSHARED: u32 = 1024;
pub const STDSCREENHEIGHT: i32 = -1;
pub const STDSCREENWIDTH: i32 = -1;
pub const OSERR_NOMONITOR: u32 = 1;
pub const OSERR_NOCHIPS: u32 = 2;
pub const OSERR_NOMEM: u32 = 3;
pub const OSERR_NOCHIPMEM: u32 = 4;
pub const OSERR_PUBNOTUNIQUE: u32 = 5;
pub const OSERR_UNKNOWNMODE: u32 = 6;
pub const OSERR_TOODEEP: u32 = 7;
pub const OSERR_ATTACHFAIL: u32 = 8;
pub const OSERR_NOTAVAILABLE: u32 = 9;
pub const OSERR_NORTGBITMAP: u32 = 10;
pub const OSCAN_TEXT: u32 = 1;
pub const OSCAN_STANDARD: u32 = 2;
pub const OSCAN_MAX: u32 = 3;
pub const OSCAN_VIDEO: u32 = 4;
pub const PSNF_PRIVATE: u32 = 1;
pub const MAXPUBSCREENNAME: u32 = 139;
pub const SHANGHAI: u32 = 1;
pub const POPPUBSCREEN: u32 = 2;
pub const SDEPTH_TOFRONT: u32 = 0;
pub const SDEPTH_TOBACK: u32 = 1;
pub const SDEPTH_INFAMILY: u32 = 2;
pub const SDEPTH_CHILDONLY: u32 = 2;
pub const SPOS_RELATIVE: u32 = 0;
pub const SPOS_ABSOLUTE: u32 = 1;
pub const SPOS_MAKEVISIBLE: u32 = 2;
pub const SPOS_FORCEDRAG: u32 = 4;
pub const SB_SCREEN_BITMAP: u32 = 1;
pub const SB_COPY_BITMAP: u32 = 2;
pub const GADGHIGHBITS: u32 = 3;
pub const GADGHCOMP: u32 = 0;
pub const GADGHBOX: u32 = 1;
pub const GADGHIMAGE: u32 = 2;
pub const GADGHNONE: u32 = 3;
pub const GADGIMAGE: u32 = 4;
pub const GRELBOTTOM: u32 = 8;
pub const GRELRIGHT: u32 = 16;
pub const GRELWIDTH: u32 = 32;
pub const GRELHEIGHT: u32 = 64;
pub const SELECTED: u32 = 128;
pub const GADGDISABLED: u32 = 256;
pub const LABELMASK: u32 = 12288;
pub const LABELITEXT: u32 = 0;
pub const LABELSTRING: u32 = 4096;
pub const LABELIMAGE: u32 = 8192;
pub const RELVERIFY: u32 = 1;
pub const GADGIMMEDIATE: u32 = 2;
pub const ENDGADGET: u32 = 4;
pub const FOLLOWMOUSE: u32 = 8;
pub const RIGHTBORDER: u32 = 16;
pub const LEFTBORDER: u32 = 32;
pub const TOPBORDER: u32 = 64;
pub const BOTTOMBORDER: u32 = 128;
pub const BORDERSNIFF: u32 = 32768;
pub const TOGGLESELECT: u32 = 256;
pub const BOOLEXTEND: u32 = 8192;
pub const STRINGLEFT: u32 = 0;
pub const STRINGCENTER: u32 = 512;
pub const STRINGRIGHT: u32 = 1024;
pub const LONGINT: u32 = 2048;
pub const ALTKEYMAP: u32 = 4096;
pub const STRINGEXTEND: u32 = 8192;
pub const ACTIVEGADGET: u32 = 16384;
pub const GADGETTYPE: u32 = 64512;
pub const SYSGADGET: u32 = 32768;
pub const SCRGADGET: u32 = 16384;
pub const GZZGADGET: u32 = 8192;
pub const REQGADGET: u32 = 4096;
pub const SIZING: u32 = 16;
pub const WDRAGGING: u32 = 32;
pub const SDRAGGING: u32 = 48;
pub const WUPFRONT: u32 = 64;
pub const SUPFRONT: u32 = 80;
pub const WDOWNBACK: u32 = 96;
pub const SDOWNBACK: u32 = 112;
pub const CLOSE: u32 = 128;
pub const BOOLGADGET: u32 = 1;
pub const GADGET0002: u32 = 2;
pub const PROPGADGET: u32 = 3;
pub const STRGADGET: u32 = 4;
pub const CUSTOMGADGET: u32 = 5;
pub const GTYPEMASK: u32 = 7;
pub const SIZEVERIFY: u32 = 1;
pub const NEWSIZE: u32 = 2;
pub const REFRESHWINDOW: u32 = 4;
pub const MOUSEBUTTONS: u32 = 8;
pub const MOUSEMOVE: u32 = 16;
pub const GADGETDOWN: u32 = 32;
pub const GADGETUP: u32 = 64;
pub const REQSET: u32 = 128;
pub const MENUPICK: u32 = 256;
pub const CLOSEWINDOW: u32 = 512;
pub const RAWKEY: u32 = 1024;
pub const REQVERIFY: u32 = 2048;
pub const REQCLEAR: u32 = 4096;
pub const MENUVERIFY: u32 = 8192;
pub const NEWPREFS: u32 = 16384;
pub const DISKINSERTED: u32 = 32768;
pub const DISKREMOVED: u32 = 65536;
pub const WBENCHMESSAGE: u32 = 131072;
pub const ACTIVEWINDOW: u32 = 262144;
pub const INACTIVEWINDOW: u32 = 524288;
pub const DELTAMOVE: u32 = 1048576;
pub const VANILLAKEY: u32 = 2097152;
pub const INTUITICKS: u32 = 4194304;
pub const IDCMPUPDATE: u32 = 8388608;
pub const MENUHELP: u32 = 16777216;
pub const CHANGEWINDOW: u32 = 33554432;
pub const LONELYMESSAGE: u32 = 2147483648;
pub const WINDOWSIZING: u32 = 1;
pub const WINDOWDRAG: u32 = 2;
pub const WINDOWDEPTH: u32 = 4;
pub const WINDOWCLOSE: u32 = 8;
pub const SIZEBRIGHT: u32 = 16;
pub const SIZEBBOTTOM: u32 = 32;
pub const REFRESHBITS: u32 = 192;
pub const SMART_REFRESH: u32 = 0;
pub const SIMPLE_REFRESH: u32 = 64;
pub const SUPER_BITMAP: u32 = 128;
pub const OTHER_REFRESH: u32 = 192;
pub const BACKDROP: u32 = 256;
pub const REPORTMOUSE: u32 = 512;
pub const GIMMEZEROZERO: u32 = 1024;
pub const BORDERLESS: u32 = 2048;
pub const ACTIVATE: u32 = 4096;
pub const WINDOWACTIVE: u32 = 8192;
pub const INREQUEST: u32 = 16384;
pub const MENUSTATE: u32 = 32768;
pub const RMBTRAP: u32 = 65536;
pub const NOCAREREFRESH: u32 = 131072;
pub const WINDOWREFRESH: u32 = 16777216;
pub const WBENCHWINDOW: u32 = 33554432;
pub const WINDOWTICKED: u32 = 67108864;
pub const NW_EXTENDED: u32 = 262144;
pub const VISITOR: u32 = 134217728;
pub const ZOOMED: u32 = 268435456;
pub const HASZOOM: u32 = 536870912;
pub const detailPen: u32 = 0;
pub const blockPen: u32 = 1;
pub const textPen: u32 = 2;
pub const shinePen: u32 = 3;
pub const shadowPen: u32 = 4;
pub const hifillPen: u32 = 5;
pub const hifilltextPen: u32 = 6;
pub const backgroundPen: u32 = 7;
pub const hilighttextPen: u32 = 8;
pub const numDrIPens: u32 = 13;
pub const INTUITION_PREFERENCES_H: u32 = 1;
pub const FILENAME_SIZE: u32 = 30;
pub const DEVNAME_SIZE: u32 = 16;
pub const POINTERSIZE: u32 = 36;
pub const TOPAZ_EIGHTY: u32 = 8;
pub const TOPAZ_SIXTY: u32 = 9;
pub const LACEWB: u32 = 1;
pub const LW_RESERVED: u32 = 1;
pub const SCREEN_DRAG: u32 = 16384;
pub const MOUSE_ACCEL: u32 = 32768;
pub const PARALLEL_PRINTER: u32 = 0;
pub const SERIAL_PRINTER: u32 = 1;
pub const BAUD_110: u32 = 0;
pub const BAUD_300: u32 = 1;
pub const BAUD_1200: u32 = 2;
pub const BAUD_2400: u32 = 3;
pub const BAUD_4800: u32 = 4;
pub const BAUD_9600: u32 = 5;
pub const BAUD_19200: u32 = 6;
pub const BAUD_MIDI: u32 = 7;
pub const FANFOLD: u32 = 0;
pub const SINGLE: u32 = 128;
pub const PICA: u32 = 0;
pub const ELITE: u32 = 1024;
pub const FINE: u32 = 2048;
pub const DRAFT: u32 = 0;
pub const LETTER: u32 = 256;
pub const SIX_LPI: u32 = 0;
pub const EIGHT_LPI: u32 = 512;
pub const IMAGE_POSITIVE: u32 = 0;
pub const IMAGE_NEGATIVE: u32 = 1;
pub const ASPECT_HORIZ: u32 = 0;
pub const ASPECT_VERT: u32 = 1;
pub const SHADE_BW: u32 = 0;
pub const SHADE_GREYSCALE: u32 = 1;
pub const SHADE_COLOR: u32 = 2;
pub const US_LETTER: u32 = 0;
pub const US_LEGAL: u32 = 16;
pub const N_TRACTOR: u32 = 32;
pub const W_TRACTOR: u32 = 48;
pub const CUSTOM: u32 = 64;
pub const EURO_A0: u32 = 80;
pub const EURO_A1: u32 = 96;
pub const EURO_A2: u32 = 112;
pub const EURO_A3: u32 = 128;
pub const EURO_A4: u32 = 144;
pub const EURO_A5: u32 = 160;
pub const EURO_A6: u32 = 176;
pub const EURO_A7: u32 = 192;
pub const EURO_A8: u32 = 208;
pub const CUSTOM_NAME: u32 = 0;
pub const ALPHA_P_101: u32 = 1;
pub const BROTHER_15XL: u32 = 2;
pub const CBM_MPS1000: u32 = 3;
pub const DIAB_630: u32 = 4;
pub const DIAB_ADV_D25: u32 = 5;
pub const DIAB_C_150: u32 = 6;
pub const EPSON: u32 = 7;
pub const EPSON_JX_80: u32 = 8;
pub const OKIMATE_20: u32 = 9;
pub const QUME_LP_20: u32 = 10;
pub const HP_LASERJET: u32 = 11;
pub const HP_LASERJET_PLUS: u32 = 12;
pub const SBUF_512: u32 = 0;
pub const SBUF_1024: u32 = 1;
pub const SBUF_2048: u32 = 2;
pub const SBUF_4096: u32 = 3;
pub const SBUF_8000: u32 = 4;
pub const SBUF_16000: u32 = 5;
pub const SREAD_BITS: u32 = 240;
pub const SWRITE_BITS: u32 = 15;
pub const SSTOP_BITS: u32 = 240;
pub const SBUFSIZE_BITS: u32 = 15;
pub const SPARITY_BITS: u32 = 240;
pub const SHSHAKE_BITS: u32 = 15;
pub const SPARITY_NONE: u32 = 0;
pub const SPARITY_EVEN: u32 = 1;
pub const SPARITY_ODD: u32 = 2;
pub const SPARITY_MARK: u32 = 3;
pub const SPARITY_SPACE: u32 = 4;
pub const SHSHAKE_XON: u32 = 0;
pub const SHSHAKE_RTS: u32 = 1;
pub const SHSHAKE_NONE: u32 = 2;
pub const CORRECT_RED: u32 = 1;
pub const CORRECT_GREEN: u32 = 2;
pub const CORRECT_BLUE: u32 = 4;
pub const CENTER_IMAGE: u32 = 8;
pub const IGNORE_DIMENSIONS: u32 = 0;
pub const BOUNDED_DIMENSIONS: u32 = 16;
pub const ABSOLUTE_DIMENSIONS: u32 = 32;
pub const PIXEL_DIMENSIONS: u32 = 64;
pub const MULTIPLY_DIMENSIONS: u32 = 128;
pub const INTEGER_SCALING: u32 = 256;
pub const ORDERED_DITHERING: u32 = 0;
pub const HALFTONE_DITHERING: u32 = 512;
pub const FLOYD_DITHERING: u32 = 1024;
pub const ANTI_ALIAS: u32 = 2048;
pub const GREY_SCALE2: u32 = 4096;
pub const CORRECT_RGB_MASK: u32 = 7;
pub const DIMENSIONS_MASK: u32 = 240;
pub const DITHERING_MASK: u32 = 1536;
pub const NOMENU: u32 = 31;
pub const NOITEM: u32 = 63;
pub const NOSUB: u32 = 31;
pub const MENUNULL: u32 = 65535;
pub const CHECKWIDTH: u32 = 19;
pub const COMMWIDTH: u32 = 27;
pub const LOWCHECKWIDTH: u32 = 13;
pub const LOWCOMMWIDTH: u32 = 16;
pub const ALERT_TYPE: u32 = 2147483648;
pub const RECOVERY_ALERT: u32 = 0;
pub const DEADEND_ALERT: u32 = 2147483648;
pub const AUTOFRONTPEN: u32 = 0;
pub const AUTOBACKPEN: u32 = 1;
pub const AUTODRAWMODE: u32 = 1;
pub const AUTOLEFTEDGE: u32 = 6;
pub const AUTOTOPEDGE: u32 = 3;
pub const AUTOITEXTFONT: u32 = 0;
pub const AUTONEXTTEXT: u32 = 0;
pub const SELECTUP: u32 = 232;
pub const SELECTDOWN: u32 = 104;
pub const MENUUP: u32 = 233;
pub const MENUDOWN: u32 = 105;
pub const MIDDLEUP: u32 = 234;
pub const MIDDLEDOWN: u32 = 106;
pub const ALTLEFT: u32 = 16;
pub const ALTRIGHT: u32 = 32;
pub const AMIGALEFT: u32 = 64;
pub const AMIGARIGHT: u32 = 128;
pub const AMIGAKEYS: u32 = 192;
pub const CURSORUP: u32 = 76;
pub const CURSORLEFT: u32 = 79;
pub const CURSORRIGHT: u32 = 78;
pub const CURSORDOWN: u32 = 77;
pub const KEYCODE_Q: u32 = 16;
pub const KEYCODE_Z: u32 = 49;
pub const KEYCODE_X: u32 = 50;
pub const KEYCODE_V: u32 = 52;
pub const KEYCODE_B: u32 = 53;
pub const KEYCODE_N: u32 = 54;
pub const KEYCODE_M: u32 = 55;
pub const KEYCODE_LESS: u32 = 56;
pub const KEYCODE_GREATER: u32 = 57;
pub const PRD_RAWWRITE: u32 = 9;
pub const PRD_PRTCOMMAND: u32 = 10;
pub const PRD_DUMPRPORT: u32 = 11;
pub const PRD_QUERY: u32 = 12;
pub const PRD_RESETPREFS: u32 = 13;
pub const PRD_LOADPREFS: u32 = 14;
pub const PRD_USEPREFS: u32 = 15;
pub const PRD_SAVEPREFS: u32 = 16;
pub const PRD_READPREFS: u32 = 17;
pub const PRD_WRITEPREFS: u32 = 18;
pub const PRD_EDITPREFS: u32 = 19;
pub const PRD_SETERRHOOK: u32 = 20;
pub const PRD_DUMPRPORTTAGS: u32 = 21;
pub const PRD_PRIVATECMD: u32 = 22;
pub const PRD_LASTSAVEDPREFS: u32 = 23;
pub const aRIS: u32 = 0;
pub const aRIN: u32 = 1;
pub const aIND: u32 = 2;
pub const aNEL: u32 = 3;
pub const aRI: u32 = 4;
pub const aSGR0: u32 = 5;
pub const aSGR3: u32 = 6;
pub const aSGR23: u32 = 7;
pub const aSGR4: u32 = 8;
pub const aSGR24: u32 = 9;
pub const aSGR1: u32 = 10;
pub const aSGR22: u32 = 11;
pub const aSFC: u32 = 12;
pub const aSBC: u32 = 13;
pub const aSHORP0: u32 = 14;
pub const aSHORP2: u32 = 15;
pub const aSHORP1: u32 = 16;
pub const aSHORP4: u32 = 17;
pub const aSHORP3: u32 = 18;
pub const aSHORP6: u32 = 19;
pub const aSHORP5: u32 = 20;
pub const aDEN6: u32 = 21;
pub const aDEN5: u32 = 22;
pub const aDEN4: u32 = 23;
pub const aDEN3: u32 = 24;
pub const aDEN2: u32 = 25;
pub const aDEN1: u32 = 26;
pub const aSUS2: u32 = 27;
pub const aSUS1: u32 = 28;
pub const aSUS4: u32 = 29;
pub const aSUS3: u32 = 30;
pub const aSUS0: u32 = 31;
pub const aPLU: u32 = 32;
pub const aPLD: u32 = 33;
pub const aFNT0: u32 = 34;
pub const aFNT1: u32 = 35;
pub const aFNT2: u32 = 36;
pub const aFNT3: u32 = 37;
pub const aFNT4: u32 = 38;
pub const aFNT5: u32 = 39;
pub const aFNT6: u32 = 40;
pub const aFNT7: u32 = 41;
pub const aFNT8: u32 = 42;
pub const aFNT9: u32 = 43;
pub const aFNT10: u32 = 44;
pub const aPROP2: u32 = 45;
pub const aPROP1: u32 = 46;
pub const aPROP0: u32 = 47;
pub const aTSS: u32 = 48;
pub const aJFY5: u32 = 49;
pub const aJFY7: u32 = 50;
pub const aJFY6: u32 = 51;
pub const aJFY0: u32 = 52;
pub const aJFY3: u32 = 53;
pub const aJFY1: u32 = 54;
pub const aVERP0: u32 = 55;
pub const aVERP1: u32 = 56;
pub const aSLPP: u32 = 57;
pub const aPERF: u32 = 58;
pub const aPERF0: u32 = 59;
pub const aLMS: u32 = 60;
pub const aRMS: u32 = 61;
pub const aTMS: u32 = 62;
pub const aBMS: u32 = 63;
pub const aSTBM: u32 = 64;
pub const aSLRM: u32 = 65;
pub const aCAM: u32 = 66;
pub const aHTS: u32 = 67;
pub const aVTS: u32 = 68;
pub const aTBC0: u32 = 69;
pub const aTBC3: u32 = 70;
pub const aTBC1: u32 = 71;
pub const aTBC4: u32 = 72;
pub const aTBCALL: u32 = 73;
pub const aTBSALL: u32 = 74;
pub const aEXTEND: u32 = 75;
pub const aRAW: u32 = 76;
pub const SPECIAL_MILCOLS: u32 = 1;
pub const SPECIAL_MILROWS: u32 = 2;
pub const SPECIAL_FULLCOLS: u32 = 4;
pub const SPECIAL_FULLROWS: u32 = 8;
pub const SPECIAL_FRACCOLS: u32 = 16;
pub const SPECIAL_FRACROWS: u32 = 32;
pub const SPECIAL_CENTER: u32 = 64;
pub const SPECIAL_ASPECT: u32 = 128;
pub const SPECIAL_DENSITY1: u32 = 256;
pub const SPECIAL_DENSITY2: u32 = 512;
pub const SPECIAL_DENSITY3: u32 = 768;
pub const SPECIAL_DENSITY4: u32 = 1024;
pub const SPECIAL_DENSITY5: u32 = 1280;
pub const SPECIAL_DENSITY6: u32 = 1536;
pub const SPECIAL_DENSITY7: u32 = 1792;
pub const SPECIAL_NOFORMFEED: u32 = 2048;
pub const SPECIAL_TRUSTME: u32 = 4096;
pub const SPECIAL_NOPRINT: u32 = 8192;
pub const PDERR_NOERR: u32 = 0;
pub const PDERR_CANCEL: u32 = 1;
pub const PDERR_NOTGRAPHICS: u32 = 2;
pub const PDERR_INVERTHAM: u32 = 3;
pub const PDERR_BADDIMENSION: u32 = 4;
pub const PDERR_DIMENSIONOVFLOW: u32 = 5;
pub const PDERR_INTERNALMEMORY: u32 = 6;
pub const PDERR_BUFFERMEMORY: u32 = 7;
pub const PDERR_TOOKCONTROL: u32 = 8;
pub const PDERR_BADPREFERENCES: u32 = 9;
pub const PDERR_LASTSTANDARD: u32 = 31;
pub const PDERR_FIRSTCUSTOM: u32 = 32;
pub const PDERR_LASTCUSTOM: u32 = 126;
pub const SPECIAL_DENSITYMASK: u32 = 1792;
pub const SPECIAL_DIMENSIONSMASK: u32 = 191;
pub const PDHOOK_VERSION: u32 = 1;
pub const PARB_SHARED: u32 = 5;
pub const PARF_SHARED: u32 = 32;
pub const PARB_SLOWMODE: u32 = 4;
pub const PARF_SLOWMODE: u32 = 16;
pub const PARB_FASTMODE: u32 = 3;
pub const PARF_FASTMODE: u32 = 8;
pub const PARB_RAD_BOOGIE: u32 = 3;
pub const PARF_RAD_BOOGIE: u32 = 8;
pub const PARB_ACKMODE: u32 = 2;
pub const PARF_ACKMODE: u32 = 4;
pub const PARB_EOFMODE: u32 = 1;
pub const PARF_EOFMODE: u32 = 2;
pub const IOPARB_QUEUED: u32 = 6;
pub const IOPARF_QUEUED: u32 = 64;
pub const IOPARB_ABORT: u32 = 5;
pub const IOPARF_ABORT: u32 = 32;
pub const IOPARB_ACTIVE: u32 = 4;
pub const IOPARF_ACTIVE: u32 = 16;
pub const IOPTB_RWDIR: u32 = 3;
pub const IOPTF_RWDIR: u32 = 8;
pub const IOPTB_PARSEL: u32 = 2;
pub const IOPTF_PARSEL: u32 = 4;
pub const IOPTB_PAPEROUT: u32 = 1;
pub const IOPTF_PAPEROUT: u32 = 2;
pub const IOPTB_PARBUSY: u32 = 0;
pub const IOPTF_PARBUSY: u32 = 1;
pub const PARALLELNAME: &[u8; 16] = b"parallel.device\0";
pub const PDCMD_QUERY: u32 = 9;
pub const PDCMD_SETPARAMS: u32 = 10;
pub const ParErr_DevBusy: u32 = 1;
pub const ParErr_BufTooBig: u32 = 2;
pub const ParErr_InvParam: u32 = 3;
pub const ParErr_LineErr: u32 = 4;
pub const ParErr_NotOpen: u32 = 5;
pub const ParErr_PortReset: u32 = 6;
pub const ParErr_InitErr: u32 = 7;
pub const SER_DEFAULT_CTLCHAR: u32 = 286457856;
pub const SDCMD_QUERY: u32 = 9;
pub const SDCMD_BREAK: u32 = 10;
pub const SDCMD_SETPARAMS: u32 = 11;
pub const SERB_XDISABLED: u32 = 7;
pub const SERF_XDISABLED: u32 = 128;
pub const SERB_EOFMODE: u32 = 6;
pub const SERF_EOFMODE: u32 = 64;
pub const SERB_SHARED: u32 = 5;
pub const SERF_SHARED: u32 = 32;
pub const SERB_RAD_BOOGIE: u32 = 4;
pub const SERF_RAD_BOOGIE: u32 = 16;
pub const SERB_QUEUEDBRK: u32 = 3;
pub const SERF_QUEUEDBRK: u32 = 8;
pub const SERB_7WIRE: u32 = 2;
pub const SERF_7WIRE: u32 = 4;
pub const SERB_PARTY_ODD: u32 = 1;
pub const SERF_PARTY_ODD: u32 = 2;
pub const SERB_PARTY_ON: u32 = 0;
pub const SERF_PARTY_ON: u32 = 1;
pub const IO_STATB_XOFFREAD: u32 = 12;
pub const IO_STATF_XOFFREAD: u32 = 4096;
pub const IO_STATB_XOFFWRITE: u32 = 11;
pub const IO_STATF_XOFFWRITE: u32 = 2048;
pub const IO_STATB_READBREAK: u32 = 10;
pub const IO_STATF_READBREAK: u32 = 1024;
pub const IO_STATB_WROTEBREAK: u32 = 9;
pub const IO_STATF_WROTEBREAK: u32 = 512;
pub const IO_STATB_OVERRUN: u32 = 8;
pub const IO_STATF_OVERRUN: u32 = 256;
pub const SEXTB_MSPON: u32 = 1;
pub const SEXTF_MSPON: u32 = 2;
pub const SEXTB_MARK: u32 = 0;
pub const SEXTF_MARK: u32 = 1;
pub const SerErr_DevBusy: u32 = 1;
pub const SerErr_BaudMismatch: u32 = 2;
pub const SerErr_BufErr: u32 = 4;
pub const SerErr_InvParam: u32 = 5;
pub const SerErr_LineErr: u32 = 6;
pub const SerErr_ParityErr: u32 = 9;
pub const SerErr_TimerErr: u32 = 11;
pub const SerErr_BufOverflow: u32 = 12;
pub const SerErr_NoDSR: u32 = 13;
pub const SerErr_DetectedBreak: u32 = 15;
pub const SERIALNAME: &[u8; 14] = b"serial.device\0";
pub const PRB_FREESEGLIST: u32 = 0;
pub const PRF_FREESEGLIST: u32 = 1;
pub const PRB_FREECURRDIR: u32 = 1;
pub const PRF_FREECURRDIR: u32 = 2;
pub const PRB_FREECLI: u32 = 2;
pub const PRF_FREECLI: u32 = 4;
pub const PRB_CLOSEINPUT: u32 = 3;
pub const PRF_CLOSEINPUT: u32 = 8;
pub const PRB_CLOSEOUTPUT: u32 = 4;
pub const PRF_CLOSEOUTPUT: u32 = 16;
pub const PRB_FREEARGS: u32 = 5;
pub const PRF_FREEARGS: u32 = 32;
pub const PRB_CLOSEERROR: u32 = 6;
pub const PRF_CLOSEERROR: u32 = 64;
pub const ACTION_NIL: u32 = 0;
pub const ACTION_STARTUP: u32 = 0;
pub const ACTION_GET_BLOCK: u32 = 2;
pub const ACTION_SET_MAP: u32 = 4;
pub const ACTION_DIE: u32 = 5;
pub const ACTION_EVENT: u32 = 6;
pub const ACTION_CURRENT_VOLUME: u32 = 7;
pub const ACTION_LOCATE_OBJECT: u32 = 8;
pub const ACTION_RENAME_DISK: u32 = 9;
pub const ACTION_WRITE: u8 = 87u8;
pub const ACTION_READ: u8 = 82u8;
pub const ACTION_FREE_LOCK: u32 = 15;
pub const ACTION_DELETE_OBJECT: u32 = 16;
pub const ACTION_RENAME_OBJECT: u32 = 17;
pub const ACTION_MORE_CACHE: u32 = 18;
pub const ACTION_COPY_DIR: u32 = 19;
pub const ACTION_WAIT_CHAR: u32 = 20;
pub const ACTION_SET_PROTECT: u32 = 21;
pub const ACTION_CREATE_DIR: u32 = 22;
pub const ACTION_EXAMINE_OBJECT: u32 = 23;
pub const ACTION_EXAMINE_NEXT: u32 = 24;
pub const ACTION_DISK_INFO: u32 = 25;
pub const ACTION_INFO: u32 = 26;
pub const ACTION_FLUSH: u32 = 27;
pub const ACTION_SET_COMMENT: u32 = 28;
pub const ACTION_PARENT: u32 = 29;
pub const ACTION_TIMER: u32 = 30;
pub const ACTION_INHIBIT: u32 = 31;
pub const ACTION_DISK_TYPE: u32 = 32;
pub const ACTION_DISK_CHANGE: u32 = 33;
pub const ACTION_SET_DATE: u32 = 34;
pub const ACTION_UNDISK_INFO: u32 = 513;
pub const ACTION_SCREEN_MODE: u32 = 994;
pub const ACTION_READ_RETURN: u32 = 1001;
pub const ACTION_WRITE_RETURN: u32 = 1002;
pub const ACTION_SEEK: u32 = 1008;
pub const ACTION_FINDUPDATE: u32 = 1004;
pub const ACTION_FINDINPUT: u32 = 1005;
pub const ACTION_FINDOUTPUT: u32 = 1006;
pub const ACTION_END: u32 = 1007;
pub const ACTION_SET_FILE_SIZE: u32 = 1022;
pub const ACTION_WRITE_PROTECT: u32 = 1023;
pub const ACTION_SAME_LOCK: u32 = 40;
pub const ACTION_CHANGE_SIGNAL: u32 = 995;
pub const ACTION_FORMAT: u32 = 1020;
pub const ACTION_MAKE_LINK: u32 = 1021;
pub const ACTION_READ_LINK: u32 = 1024;
pub const ACTION_FH_FROM_LOCK: u32 = 1026;
pub const ACTION_IS_FILESYSTEM: u32 = 1027;
pub const ACTION_CHANGE_MODE: u32 = 1028;
pub const ACTION_COPY_DIR_FH: u32 = 1030;
pub const ACTION_PARENT_FH: u32 = 1031;
pub const ACTION_EXAMINE_ALL: u32 = 1033;
pub const ACTION_EXAMINE_FH: u32 = 1034;
pub const ACTION_LOCK_RECORD: u32 = 2008;
pub const ACTION_FREE_RECORD: u32 = 2009;
pub const ACTION_ADD_NOTIFY: u32 = 4097;
pub const ACTION_REMOVE_NOTIFY: u32 = 4098;
pub const ACTION_EXAMINE_ALL_END: u32 = 1035;
pub const ACTION_SET_OWNER: u32 = 1036;
pub const ACTION_SERIALIZE_DISK: u32 = 4200;
pub const RNB_WILDSTAR: u32 = 24;
pub const RNF_WILDSTAR: u32 = 16777216;
pub const RNB_PRIVATE1: u32 = 1;
pub const RNF_PRIVATE1: u32 = 2;
pub const CMD_SYSTEM: i32 = -1;
pub const CMD_INTERNAL: i32 = -2;
pub const CMD_DISABLED: i32 = -999;
pub const DLT_DEVICE: u32 = 0;
pub const DLT_DIRECTORY: u32 = 1;
pub const DLT_VOLUME: u32 = 2;
pub const DLT_LATE: u32 = 3;
pub const DLT_NONBINDING: u32 = 4;
pub const DLT_PRIVATE: i32 = -1;
pub const DVPB_UNLOCK: u32 = 0;
pub const DVPF_UNLOCK: u32 = 1;
pub const DVPB_ASSIGN: u32 = 1;
pub const DVPF_ASSIGN: u32 = 2;
pub const LDB_DEVICES: u32 = 2;
pub const LDF_DEVICES: u32 = 4;
pub const LDB_VOLUMES: u32 = 3;
pub const LDF_VOLUMES: u32 = 8;
pub const LDB_ASSIGNS: u32 = 4;
pub const LDF_ASSIGNS: u32 = 16;
pub const LDB_ENTRY: u32 = 5;
pub const LDF_ENTRY: u32 = 32;
pub const LDB_DELETE: u32 = 6;
pub const LDF_DELETE: u32 = 64;
pub const LDB_READ: u32 = 0;
pub const LDF_READ: u32 = 1;
pub const LDB_WRITE: u32 = 1;
pub const LDF_WRITE: u32 = 2;
pub const LDF_ALL: u32 = 28;
pub const REPORT_STREAM: u32 = 0;
pub const REPORT_TASK: u32 = 1;
pub const REPORT_LOCK: u32 = 2;
pub const REPORT_VOLUME: u32 = 3;
pub const REPORT_INSERT: u32 = 4;
pub const ABORT_DISK_ERROR: u32 = 296;
pub const ABORT_BUSY: u32 = 288;
pub const RUN_EXECUTE: i32 = -1;
pub const RUN_SYSTEM: i32 = -2;
pub const RUN_SYSTEM_ASYNCH: i32 = -3;
pub const ST_ROOT: u32 = 1;
pub const ST_USERDIR: u32 = 2;
pub const ST_SOFTLINK: u32 = 3;
pub const ST_LINKDIR: u32 = 4;
pub const ST_FILE: i32 = -3;
pub const ST_LINKFILE: i32 = -4;
pub const ST_PIPEFILE: i32 = -5;
pub const P_OLDSTKSIZE: u32 = 2048;
pub const P_STKSIZE: u32 = 4096;
pub const P_BUFSIZE: u32 = 256;
pub const P_SAFESIZE: u32 = 128;
pub const IOB_QUEUED: u32 = 4;
pub const IOB_CURRENT: u32 = 5;
pub const IOB_SERVICING: u32 = 6;
pub const IOB_DONE: u32 = 7;
pub const IOF_QUEUED: u32 = 16;
pub const IOF_CURRENT: u32 = 32;
pub const IOF_SERVICING: u32 = 64;
pub const IOF_DONE: u32 = 128;
pub const PB_IOR0: u32 = 0;
pub const PB_IOR1: u32 = 1;
pub const PB_IOOPENED: u32 = 2;
pub const PB_EXPUNGED: u32 = 7;
pub const PF_IOR0: u32 = 1;
pub const PF_IOR1: u32 = 2;
pub const PF_IOOPENDED: u32 = 4;
pub const PF_EXPUNGED: u32 = 128;
pub const DUB_STOPPED: u32 = 0;
pub const DUF_STOPPED: u32 = 1;
pub const PPCB_GFX: u32 = 0;
pub const PPCF_GFX: u32 = 1;
pub const PPCB_COLOR: u32 = 1;
pub const PPCF_COLOR: u32 = 2;
pub const PPC_BWALPHA: u32 = 0;
pub const PPC_BWGFX: u32 = 1;
pub const PPC_COLORALPHA: u32 = 2;
pub const PPC_COLORGFX: u32 = 3;
pub const PPCB_EXTENDED: u32 = 2;
pub const PPCF_EXTENDED: u32 = 4;
pub const PPCB_NOSTRIP: u32 = 3;
pub const PPCF_NOSTRIP: u32 = 8;
pub const PCC_BW: u32 = 1;
pub const PCC_YMC: u32 = 2;
pub const PCC_YMC_BW: u32 = 3;
pub const PCC_YMCB: u32 = 4;
pub const PCC_4COLOR: u32 = 4;
pub const PCC_ADDITIVE: u32 = 8;
pub const PCC_WB: u32 = 9;
pub const PCC_BGR: u32 = 10;
pub const PCC_BGR_WB: u32 = 11;
pub const PCC_BGRW: u32 = 12;
pub const PCC_MULTI_PASS: u32 = 16;
pub const DATATYPESCLASS: &[u8; 15] = b"datatypesclass\0";
pub const DTST_RAM: u32 = 1;
pub const DTST_FILE: u32 = 2;
pub const DTST_CLIPBOARD: u32 = 3;
pub const DTST_HOTLINK: u32 = 4;
pub const DTST_MEMORY: u32 = 5;
pub const DTSIF_LAYOUT: u32 = 1;
pub const DTSIF_NEWSIZE: u32 = 2;
pub const DTSIF_DRAGGING: u32 = 4;
pub const DTSIF_DRAGSELECT: u32 = 8;
pub const DTSIF_HIGHLIGHT: u32 = 16;
pub const DTSIF_PRINTING: u32 = 32;
pub const DTSIF_LAYOUTPROC: u32 = 64;
pub const DTM_Dummy: u32 = 1536;
pub const DTM_FRAMEBOX: u32 = 1537;
pub const DTM_PROCLAYOUT: u32 = 1538;
pub const DTM_ASYNCLAYOUT: u32 = 1539;
pub const DTM_REMOVEDTOBJECT: u32 = 1540;
pub const DTM_SELECT: u32 = 1541;
pub const DTM_CLEARSELECTED: u32 = 1542;
pub const DTM_COPY: u32 = 1543;
pub const DTM_PRINT: u32 = 1544;
pub const DTM_ABORTPRINT: u32 = 1545;
pub const DTM_NEWMEMBER: u32 = 1552;
pub const DTM_DISPOSEMEMBER: u32 = 1553;
pub const DTM_GOTO: u32 = 1584;
pub const DTM_TRIGGER: u32 = 1585;
pub const DTM_OBTAINDRAWINFO: u32 = 1600;
pub const DTM_DRAW: u32 = 1601;
pub const DTM_RELEASEDRAWINFO: u32 = 1602;
pub const DTM_WRITE: u32 = 1616;
pub const FIF_SCALABLE: u32 = 1;
pub const FIF_SCROLLABLE: u32 = 2;
pub const FIF_REMAPPABLE: u32 = 4;
pub const FRAMEF_SPECIFY: u32 = 1;
pub const STM_PAUSE: u32 = 1;
pub const STM_PLAY: u32 = 2;
pub const STM_CONTENTS: u32 = 3;
pub const STM_INDEX: u32 = 4;
pub const STM_RETRACE: u32 = 5;
pub const STM_BROWSE_PREV: u32 = 6;
pub const STM_BROWSE_NEXT: u32 = 7;
pub const STM_NEXT_FIELD: u32 = 8;
pub const STM_PREV_FIELD: u32 = 9;
pub const STM_ACTIVATE_FIELD: u32 = 10;
pub const STM_COMMAND: u32 = 11;
pub const STM_REWIND: u32 = 12;
pub const STM_FASTFORWARD: u32 = 13;
pub const STM_STOP: u32 = 14;
pub const STM_RESUME: u32 = 15;
pub const STM_LOCATE: u32 = 16;
pub const STM_HELP: u32 = 17;
pub const STM_SEARCH: u32 = 18;
pub const STM_SEARCH_NEXT: u32 = 19;
pub const STM_SEARCH_PREV: u32 = 20;
pub const STM_UNRETRACE: u32 = 21;
pub const STM_USER: u32 = 100;
pub const STMF_METHOD_MASK: u32 = 65535;
pub const STMF_DATA_MASK: u32 = 16711680;
pub const STMF_RESERVED_MASK: u32 = 4278190080;
pub const STMD_VOID: u32 = 65536;
pub const STMD_ULONG: u32 = 131072;
pub const STMD_STRPTR: u32 = 196608;
pub const STMD_TAGLIST: u32 = 262144;
pub const DTWM_IFF: u32 = 0;
pub const DTWM_RAW: u32 = 1;
pub const PICTUREDTCLASS: &[u8; 17] = b"picture.datatype\0";
pub const PDTANUMPICTURES_Unknown: u32 = 0;
pub const PMODE_V42: u32 = 0;
pub const PMODE_V43: u32 = 1;
pub const PDTM_Dummy: u32 = 1632;
pub const PDTM_WRITEPIXELARRAY: u32 = 1632;
pub const PDTM_READPIXELARRAY: u32 = 1633;
pub const PBPAFMT_RGB: u32 = 0;
pub const PBPAFMT_RGBA: u32 = 1;
pub const PBPAFMT_ARGB: u32 = 2;
pub const PBPAFMT_LUT8: u32 = 3;
pub const PBPAFMT_GREY8: u32 = 4;
pub const PDTM_SCALE: u32 = 1634;
pub const PDTM_OBTAINPIXELARRAY: u32 = 1639;
pub const POBAB_WRITEGREY8: u32 = 0;
pub const POPAF_WRITEGREY8: u32 = 1;
pub const mskNone: u32 = 0;
pub const mskHasMask: u32 = 1;
pub const mskHasTransparentColor: u32 = 2;
pub const mskLasso: u32 = 3;
pub const mskHasAlpha: u32 = 4;
pub const cmpNone: u32 = 0;
pub const cmpByteRun1: u32 = 1;
pub const cmpByteRun2: u32 = 2;
pub const SOUNDDTCLASS: &[u8; 15] = b"sound.datatype\0";
pub const CMP_NONE: u32 = 0;
pub const CMP_FIBDELTA: u32 = 1;
pub const Unity: u32 = 65536;
pub const SAMPLETYPE_Left: u32 = 2;
pub const SAMPLETYPE_Right: u32 = 4;
pub const SAMPLETYPE_Stereo: u32 = 6;
pub const ANIMATIONDTCLASS: &[u8; 19] = b"animation.datatype\0";
pub const ADTM_Dummy: u32 = 1792;
pub const ADTM_LOADFRAME: u32 = 1793;
pub const ADTM_UNLOADFRAME: u32 = 1794;
pub const ADTM_START: u32 = 1795;
pub const ADTM_PAUSE: u32 = 1796;
pub const ADTM_STOP: u32 = 1797;
pub const ADTM_LOCATE: u32 = 1798;
pub const ADTM_LOADNEWFORMATFRAME: u32 = 1799;
pub const ADTM_UNLOADNEWFORMATFRAME: u32 = 1800;
pub const TEXTDTCLASS: &[u8; 14] = b"text.datatype\0";
pub const LNF_LF: u32 = 1;
pub const LNF_LINK: u32 = 2;
pub const LNF_OBJECT: u32 = 4;
pub const LNF_SELECTED: u32 = 8;
pub const AUDIONAME: &[u8; 13] = b"audio.device\0";
pub const ADHARD_CHANNELS: u32 = 4;
pub const ADALLOC_MINPREC: i32 = -128;
pub const ADALLOC_MAXPREC: u32 = 127;
pub const ADCMD_FREE: u32 = 9;
pub const ADCMD_SETPREC: u32 = 10;
pub const ADCMD_FINISH: u32 = 11;
pub const ADCMD_PERVOL: u32 = 12;
pub const ADCMD_LOCK: u32 = 13;
pub const ADCMD_WAITCYCLE: u32 = 14;
pub const ADCMD_ALLOCATE: u32 = 32;
pub const ADIOB_PERVOL: u32 = 4;
pub const ADIOF_PERVOL: u32 = 16;
pub const ADIOB_SYNCCYCLE: u32 = 5;
pub const ADIOF_SYNCCYCLE: u32 = 32;
pub const ADIOB_NOWAIT: u32 = 6;
pub const ADIOF_NOWAIT: u32 = 64;
pub const ADIOB_WRITEMESSAGE: u32 = 7;
pub const ADIOF_WRITEMESSAGE: u32 = 128;
pub const ADIOERR_NOALLOCATION: i32 = -10;
pub const ADIOERR_ALLOCFAILED: i32 = -11;
pub const ADIOERR_CHANNELSTOLEN: i32 = -12;
pub const BOOTSECTS: u32 = 2;
pub const BBNAME_DOS: u32 = 1146049280;
pub const BBNAME_KICK: u32 = 1263092555;
pub const CD_RESET: u32 = 1;
pub const CD_READ: u32 = 2;
pub const CD_WRITE: u32 = 3;
pub const CD_UPDATE: u32 = 4;
pub const CD_CLEAR: u32 = 5;
pub const CD_STOP: u32 = 6;
pub const CD_START: u32 = 7;
pub const CD_FLUSH: u32 = 8;
pub const CD_MOTOR: u32 = 9;
pub const CD_SEEK: u32 = 10;
pub const CD_FORMAT: u32 = 11;
pub const CD_REMOVE: u32 = 12;
pub const CD_CHANGENUM: u32 = 13;
pub const CD_CHANGESTATE: u32 = 14;
pub const CD_PROTSTATUS: u32 = 15;
pub const CD_GETDRIVETYPE: u32 = 18;
pub const CD_GETNUMTRACKS: u32 = 19;
pub const CD_ADDCHANGEINT: u32 = 20;
pub const CD_REMCHANGEINT: u32 = 21;
pub const CD_GETGEOMETRY: u32 = 22;
pub const CD_EJECT: u32 = 23;
pub const CD_INFO: u32 = 32;
pub const CD_CONFIG: u32 = 33;
pub const CD_TOCMSF: u32 = 34;
pub const CD_TOCLSN: u32 = 35;
pub const CD_READXL: u32 = 36;
pub const CD_PLAYTRACK: u32 = 37;
pub const CD_PLAYMSF: u32 = 38;
pub const CD_PLAYLSN: u32 = 39;
pub const CD_PAUSE: u32 = 40;
pub const CD_SEARCH: u32 = 41;
pub const CD_QCODEMSF: u32 = 42;
pub const CD_QCODELSN: u32 = 43;
pub const CD_ATTENUATE: u32 = 44;
pub const CD_ADDFRAMEINT: u32 = 45;
pub const CD_REMFRAMEINT: u32 = 46;
pub const CDERR_OPENFAIL: i32 = -1;
pub const CDERR_ABORTED: i32 = -2;
pub const CDERR_NOCMD: i32 = -3;
pub const CDERR_BADLENGTH: i32 = -4;
pub const CDERR_BADADDRESS: i32 = -5;
pub const CDERR_UNITBUSY: i32 = -6;
pub const CDERR_SELFTEST: i32 = -7;
pub const CDERR_NotSpecified: u32 = 20;
pub const CDERR_NoSecHdr: u32 = 21;
pub const CDERR_BadSecPreamble: u32 = 22;
pub const CDERR_BadSecID: u32 = 23;
pub const CDERR_BadHdrSum: u32 = 24;
pub const CDERR_BadSecSum: u32 = 25;
pub const CDERR_TooFewSecs: u32 = 26;
pub const CDERR_BadSecHdr: u32 = 27;
pub const CDERR_WriteProt: u32 = 28;
pub const CDERR_NoDisk: u32 = 29;
pub const CDERR_SeekError: u32 = 30;
pub const CDERR_NoMem: u32 = 31;
pub const CDERR_BadUnitNum: u32 = 32;
pub const CDERR_BadDriveType: u32 = 33;
pub const CDERR_DriveInUse: u32 = 34;
pub const CDERR_PostReset: u32 = 35;
pub const CDERR_BadDataType: u32 = 36;
pub const CDERR_InvalidState: u32 = 37;
pub const CDERR_Phase: u32 = 42;
pub const CDERR_NoBoard: u32 = 50;
pub const TAGCD_PLAYSPEED: u32 = 1;
pub const TAGCD_READSPEED: u32 = 2;
pub const TAGCD_READXLSPEED: u32 = 3;
pub const TAGCD_SECTORSIZE: u32 = 4;
pub const TAGCD_XLECC: u32 = 5;
pub const TAGCD_EJECTRESET: u32 = 6;
pub const CDSTSB_CLOSED: u32 = 0;
pub const CDSTSB_DISK: u32 = 1;
pub const CDSTSB_SPIN: u32 = 2;
pub const CDSTSB_TOC: u32 = 3;
pub const CDSTSB_CDROM: u32 = 4;
pub const CDSTSB_PLAYING: u32 = 5;
pub const CDSTSB_PAUSED: u32 = 6;
pub const CDSTSB_SEARCH: u32 = 7;
pub const CDSTSB_DIRECTION: u32 = 8;
pub const CDSTSF_CLOSED: u32 = 1;
pub const CDSTSF_DISK: u32 = 2;
pub const CDSTSF_SPIN: u32 = 4;
pub const CDSTSF_TOC: u32 = 8;
pub const CDSTSF_CDROM: u32 = 16;
pub const CDSTSF_PLAYING: u32 = 32;
pub const CDSTSF_PAUSED: u32 = 64;
pub const CDSTSF_SEARCH: u32 = 128;
pub const CDSTSF_DIRECTION: u32 = 256;
pub const CDMODE_NORMAL: u32 = 0;
pub const CDMODE_FFWD: u32 = 1;
pub const CDMODE_FREV: u32 = 2;
pub const CTLADR_CTLMASK: u32 = 240;
pub const CTL_CTLMASK: u32 = 208;
pub const CTL_2AUD: u32 = 0;
pub const CTL_2AUDEMPH: u32 = 16;
pub const CTL_4AUD: u32 = 128;
pub const CTL_4AUDEMPH: u32 = 144;
pub const CTL_DATA: u32 = 64;
pub const CTL_COPYMASK: u32 = 32;
pub const CTL_COPY: u32 = 32;
pub const CTLADR_ADRMASK: u32 = 15;
pub const ADR_POSITION: u32 = 1;
pub const ADR_UPC: u32 = 2;
pub const ADR_ISRC: u32 = 3;
pub const ADR_HYBRID: u32 = 5;
pub const CD_ASKKEYMAP: u32 = 9;
pub const CD_SETKEYMAP: u32 = 10;
pub const CD_ASKDEFAULTKEYMAP: u32 = 11;
pub const CD_SETDEFAULTKEYMAP: u32 = 12;
pub const CD_SETUPSCROLLBACK: u32 = 13;
pub const CD_SETSCROLLBACKPOSITION: u32 = 14;
pub const SGR_PRIMARY: u32 = 0;
pub const SGR_BOLD: u32 = 1;
pub const SGR_ITALIC: u32 = 3;
pub const SGR_UNDERSCORE: u32 = 4;
pub const SGR_NEGATIVE: u32 = 7;
pub const SGR_NORMAL: u32 = 22;
pub const SGR_NOTITALIC: u32 = 23;
pub const SGR_NOTUNDERSCORE: u32 = 24;
pub const SGR_POSITIVE: u32 = 27;
pub const SGR_BLACK: u32 = 30;
pub const SGR_RED: u32 = 31;
pub const SGR_GREEN: u32 = 32;
pub const SGR_YELLOW: u32 = 33;
pub const SGR_BLUE: u32 = 34;
pub const SGR_MAGENTA: u32 = 35;
pub const SGR_CYAN: u32 = 36;
pub const SGR_WHITE: u32 = 37;
pub const SGR_DEFAULT: u32 = 39;
pub const SGR_BLACKBG: u32 = 40;
pub const SGR_REDBG: u32 = 41;
pub const SGR_GREENBG: u32 = 42;
pub const SGR_YELLOWBG: u32 = 43;
pub const SGR_BLUEBG: u32 = 44;
pub const SGR_MAGENTABG: u32 = 45;
pub const SGR_CYANBG: u32 = 46;
pub const SGR_WHITEBG: u32 = 47;
pub const SGR_DEFAULTBG: u32 = 49;
pub const SGR_CLR0: u32 = 30;
pub const SGR_CLR1: u32 = 31;
pub const SGR_CLR2: u32 = 32;
pub const SGR_CLR3: u32 = 33;
pub const SGR_CLR4: u32 = 34;
pub const SGR_CLR5: u32 = 35;
pub const SGR_CLR6: u32 = 36;
pub const SGR_CLR7: u32 = 37;
pub const SGR_CLR0BG: u32 = 40;
pub const SGR_CLR1BG: u32 = 41;
pub const SGR_CLR2BG: u32 = 42;
pub const SGR_CLR3BG: u32 = 43;
pub const SGR_CLR4BG: u32 = 44;
pub const SGR_CLR5BG: u32 = 45;
pub const SGR_CLR6BG: u32 = 46;
pub const SGR_CLR7BG: u32 = 47;
pub const DSR_CPR: u32 = 6;
pub const CTC_HSETTAB: u32 = 0;
pub const CTC_HCLRTAB: u32 = 2;
pub const CTC_HCLRTABSALL: u32 = 5;
pub const TBC_HCLRTAB: u32 = 0;
pub const TBC_HCLRTABSALL: u32 = 3;
pub const M_LNM: u32 = 20;
pub const M_ASM: &[u8; 3] = b">1\0";
pub const M_AWM: &[u8; 3] = b"?7\0";
pub const KC_NOQUAL: u32 = 0;
pub const KC_VANILLA: u32 = 7;
pub const KCB_SHIFT: u32 = 0;
pub const KCF_SHIFT: u32 = 1;
pub const KCB_ALT: u32 = 1;
pub const KCF_ALT: u32 = 2;
pub const KCB_CONTROL: u32 = 2;
pub const KCF_CONTROL: u32 = 4;
pub const KCB_DOWNUP: u32 = 3;
pub const KCF_DOWNUP: u32 = 8;
pub const KCB_DEAD: u32 = 5;
pub const KCF_DEAD: u32 = 32;
pub const KCB_STRING: u32 = 6;
pub const KCF_STRING: u32 = 64;
pub const KCB_NOP: u32 = 7;
pub const KCF_NOP: u32 = 128;
pub const DPB_MOD: u32 = 0;
pub const DPF_MOD: u32 = 1;
pub const DPB_DEAD: u32 = 3;
pub const DPF_DEAD: u32 = 8;
pub const DP_2DINDEXMASK: u32 = 15;
pub const DP_2DFACSHIFT: u32 = 4;
pub const RAWKEY_SPACE: u32 = 64;
pub const RAWKEY_BACKSPACE: u32 = 65;
pub const RAWKEY_TAB: u32 = 66;
pub const RAWKEY_ENTER: u32 = 67;
pub const RAWKEY_RETURN: u32 = 68;
pub const RAWKEY_ESC: u32 = 69;
pub const RAWKEY_DEL: u32 = 70;
pub const RAWKEY_INSERT: u32 = 71;
pub const RAWKEY_PAGEUP: u32 = 72;
pub const RAWKEY_PAGEDOWN: u32 = 73;
pub const RAWKEY_F11: u32 = 75;
pub const RAWKEY_CRSRUP: u32 = 76;
pub const RAWKEY_CRSRDOWN: u32 = 77;
pub const RAWKEY_CRSRRIGHT: u32 = 78;
pub const RAWKEY_CRSRLEFT: u32 = 79;
pub const RAWKEY_F1: u32 = 80;
pub const RAWKEY_F2: u32 = 81;
pub const RAWKEY_F3: u32 = 82;
pub const RAWKEY_F4: u32 = 83;
pub const RAWKEY_F5: u32 = 84;
pub const RAWKEY_F6: u32 = 85;
pub const RAWKEY_F7: u32 = 86;
pub const RAWKEY_F8: u32 = 87;
pub const RAWKEY_F9: u32 = 88;
pub const RAWKEY_F10: u32 = 89;
pub const RAWKEY_HELP: u32 = 95;
pub const RAWKEY_LSHIFT: u32 = 96;
pub const RAWKEY_RSHIFT: u32 = 97;
pub const RAWKEY_CAPSLOCK: u32 = 98;
pub const RAWKEY_LCTRL: u32 = 99;
pub const RAWKEY_LALT: u32 = 100;
pub const RAWKEY_RALT: u32 = 101;
pub const RAWKEY_LCOMMAND: u32 = 102;
pub const RAWKEY_RCOMMAND: u32 = 103;
pub const RAWKEY_MENU: u32 = 107;
pub const RAWKEY_PRINTSCR: u32 = 109;
pub const RAWKEY_BREAK: u32 = 110;
pub const RAWKEY_F12: u32 = 111;
pub const RAWKEY_HOME: u32 = 112;
pub const RAWKEY_END: u32 = 113;
pub const RAWKEY_MEDIA_STOP: u32 = 114;
pub const RAWKEY_MEDIA_PLAY_PAUSE: u32 = 115;
pub const RAWKEY_MEDIA_PREV_TRACK: u32 = 116;
pub const RAWKEY_MEDIA_NEXT_TRACK: u32 = 117;
pub const RAWKEY_MEDIA_SHUFFLE: u32 = 118;
pub const RAWKEY_MEDIA_REPEAT: u32 = 119;
pub const RAWKEY_WHEEL_UP: u32 = 122;
pub const RAWKEY_WHEEL_DOWN: u32 = 123;
pub const RAWKEY_WHEEL_LEFT: u32 = 124;
pub const RAWKEY_WHEEL_RIGHT: u32 = 125;
pub const CONU_LIBRARY: i32 = -1;
pub const CONU_STANDARD: u32 = 0;
pub const CONU_CHARMAP: u32 = 1;
pub const CONU_SNIPMAP: u32 = 3;
pub const CONFLAG_DEFAULT: u32 = 0;
pub const CONFLAG_NODRAW_ON_NEWSIZE: u32 = 1;
pub const PMB_ASM: u32 = 21;
pub const PMB_AWM: u32 = 22;
pub const MAXTABS: u32 = 80;
pub const GPD_READEVENT: u32 = 9;
pub const GPD_ASKCTYPE: u32 = 10;
pub const GPD_SETCTYPE: u32 = 11;
pub const GPD_ASKTRIGGER: u32 = 12;
pub const GPD_SETTRIGGER: u32 = 13;
pub const GPTB_DOWNKEYS: u32 = 0;
pub const GPTF_DOWNKEYS: u32 = 1;
pub const GPTB_UPKEYS: u32 = 1;
pub const GPTF_UPKEYS: u32 = 2;
pub const GPCT_ALLOCATED: i32 = -1;
pub const GPCT_NOCONTROLLER: u32 = 0;
pub const GPCT_MOUSE: u32 = 1;
pub const GPCT_RELJOYSTICK: u32 = 2;
pub const GPCT_ABSJOYSTICK: u32 = 3;
pub const GPDERR_SETCTYPE: u32 = 1;
pub const IDNAME_RIGIDDISK: u32 = 1380209483;
pub const RDB_LOCATION_LIMIT: u32 = 16;
pub const RDBFB_LAST: u32 = 0;
pub const RDBFF_LAST: u32 = 1;
pub const RDBFB_LASTLUN: u32 = 1;
pub const RDBFF_LASTLUN: u32 = 2;
pub const RDBFB_LASTTID: u32 = 2;
pub const RDBFF_LASTTID: u32 = 4;
pub const RDBFB_NORESELECT: u32 = 3;
pub const RDBFF_NORESELECT: u32 = 8;
pub const RDBFB_DISKID: u32 = 4;
pub const RDBFF_DISKID: u32 = 16;
pub const RDBFB_CTRLRID: u32 = 5;
pub const RDBFF_CTRLRID: u32 = 32;
pub const RDBFB_SYNCH: u32 = 6;
pub const RDBFF_SYNCH: u32 = 64;
pub const IDNAME_BADBLOCK: u32 = 1111573570;
pub const IDNAME_PARTITION: u32 = 1346458196;
pub const PBFB_BOOTABLE: u32 = 0;
pub const PBFF_BOOTABLE: u32 = 1;
pub const PBFB_NOMOUNT: u32 = 1;
pub const PBFF_NOMOUNT: u32 = 2;
pub const IDNAME_FILESYSHEADER: u32 = 1179863108;
pub const IDNAME_LOADSEG: u32 = 1280525639;
pub const IND_ADDHANDLER: u32 = 9;
pub const IND_REMHANDLER: u32 = 10;
pub const IND_WRITEEVENT: u32 = 11;
pub const IND_SETTHRESH: u32 = 12;
pub const IND_SETPERIOD: u32 = 13;
pub const IND_SETMPORT: u32 = 14;
pub const IND_SETMTYPE: u32 = 15;
pub const IND_SETMTRIG: u32 = 16;
pub const IND_ADDEVENT: u32 = 24;
pub const KBD_READEVENT: u32 = 9;
pub const KBD_READMATRIX: u32 = 10;
pub const KBD_ADDRESETHANDLER: u32 = 11;
pub const KBD_REMRESETHANDLER: u32 = 12;
pub const KBD_RESETHANDLERDONE: u32 = 13;
pub const NDB_NEWIORB: u32 = 0;
pub const NDB_WORDSYNC: u32 = 1;
pub const NDB_SYLSYNC: u32 = 2;
pub const NDF_NEWIORB: u32 = 1;
pub const NDF_WORDSYNC: u32 = 2;
pub const NDF_SYLSYNC: u32 = 4;
pub const ND_NoMem: i32 = -2;
pub const ND_NoAudLib: i32 = -3;
pub const ND_MakeBad: i32 = -4;
pub const ND_UnitErr: i32 = -5;
pub const ND_CantAlloc: i32 = -6;
pub const ND_Unimpl: i32 = -7;
pub const ND_NoWrite: i32 = -8;
pub const ND_Expunged: i32 = -9;
pub const ND_PhonErr: i32 = -20;
pub const ND_RateErr: i32 = -21;
pub const ND_PitchErr: i32 = -22;
pub const ND_SexErr: i32 = -23;
pub const ND_ModeErr: i32 = -24;
pub const ND_FreqErr: i32 = -25;
pub const ND_VolErr: i32 = -26;
pub const ND_DCentErr: i32 = -27;
pub const ND_CentPhonErr: i32 = -28;
pub const DEFPITCH: u32 = 110;
pub const DEFRATE: u32 = 150;
pub const DEFVOL: u32 = 64;
pub const DEFFREQ: u32 = 22200;
pub const MALE: u32 = 0;
pub const FEMALE: u32 = 1;
pub const NATURALF0: u32 = 0;
pub const ROBOTICF0: u32 = 1;
pub const MANUALF0: u32 = 2;
pub const DEFSEX: u32 = 0;
pub const DEFMODE: u32 = 0;
pub const DEFARTIC: u32 = 100;
pub const DEFCENTRAL: u32 = 0;
pub const DEFF0PERT: u32 = 0;
pub const DEFF0ENTHUS: u32 = 32;
pub const DEFPRIORITY: u32 = 100;
pub const MINRATE: u32 = 40;
pub const MAXRATE: u32 = 400;
pub const MINPITCH: u32 = 65;
pub const MAXPITCH: u32 = 320;
pub const MINFREQ: u32 = 5000;
pub const MAXFREQ: u32 = 28000;
pub const MINVOL: u32 = 0;
pub const MAXVOL: u32 = 64;
pub const MINCENT: u32 = 0;
pub const MAXCENT: u32 = 100;
pub const NSCMD_DEVICEQUERY: u32 = 16384;
pub const NSDEVTYPE_UNKNOWN: u32 = 0;
pub const NSDEVTYPE_GAMEPORT: u32 = 1;
pub const NSDEVTYPE_TIMER: u32 = 2;
pub const NSDEVTYPE_KEYBOARD: u32 = 3;
pub const NSDEVTYPE_INPUT: u32 = 4;
pub const NSDEVTYPE_TRACKDISK: u32 = 5;
pub const NSDEVTYPE_CONSOLE: u32 = 6;
pub const NSDEVTYPE_SANA2: u32 = 7;
pub const NSDEVTYPE_AUDIOARD: u32 = 8;
pub const NSDEVTYPE_CLIPBOARD: u32 = 9;
pub const NSDEVTYPE_PRINTER: u32 = 10;
pub const NSDEVTYPE_SERIAL: u32 = 11;
pub const NSDEVTYPE_PARALLEL: u32 = 12;
pub const NSCMD_TD_READ64: u32 = 49152;
pub const NSCMD_TD_WRITE64: u32 = 49153;
pub const NSCMD_TD_SEEK64: u32 = 49154;
pub const NSCMD_TD_FORMAT64: u32 = 49155;
pub const PCMYELLOW: u32 = 0;
pub const PCMMAGENTA: u32 = 1;
pub const PCMCYAN: u32 = 2;
pub const PCMBLACK: u32 = 3;
pub const PCMBLUE: u32 = 0;
pub const PCMGREEN: u32 = 1;
pub const PCMRED: u32 = 2;
pub const PCMWHITE: u32 = 3;
pub const HD_SCSICMD: u32 = 28;
pub const SCSIF_WRITE: u32 = 0;
pub const SCSIF_READ: u32 = 1;
pub const SCSIB_READ_WRITE: u32 = 0;
pub const SCSIF_NOSENSE: u32 = 0;
pub const SCSIF_AUTOSENSE: u32 = 2;
pub const SCSIF_OLDAUTOSENSE: u32 = 6;
pub const SCSIB_AUTOSENSE: u32 = 1;
pub const SCSIB_OLDAUTOSENSE: u32 = 2;
pub const HFERR_SelfUnit: u32 = 40;
pub const HFERR_DMA: u32 = 41;
pub const HFERR_Phase: u32 = 42;
pub const HFERR_Parity: u32 = 43;
pub const HFERR_SelTimeout: u32 = 44;
pub const HFERR_BadStatus: u32 = 45;
pub const HFERR_NoBoard: u32 = 50;
pub const NUMSECS: u32 = 11;
pub const NUMUNITS: u32 = 4;
pub const TD_SECTOR: u32 = 512;
pub const TD_SECSHIFT: u32 = 9;
pub const TD_NAME: &[u8; 17] = b"trackdisk.device\0";
pub const TDF_EXTCOM: u32 = 32768;
pub const TD_MOTOR: u32 = 9;
pub const TD_SEEK: u32 = 10;
pub const TD_FORMAT: u32 = 11;
pub const TD_REMOVE: u32 = 12;
pub const TD_CHANGENUM: u32 = 13;
pub const TD_CHANGESTATE: u32 = 14;
pub const TD_PROTSTATUS: u32 = 15;
pub const TD_RAWREAD: u32 = 16;
pub const TD_RAWWRITE: u32 = 17;
pub const TD_GETDRIVETYPE: u32 = 18;
pub const TD_GETNUMTRACKS: u32 = 19;
pub const TD_ADDCHANGEINT: u32 = 20;
pub const TD_REMCHANGEINT: u32 = 21;
pub const TD_GETGEOMETRY: u32 = 22;
pub const TD_EJECT: u32 = 23;
pub const TD_LASTCOMM: u32 = 24;
pub const TD_READ64: u32 = 24;
pub const TD_WRITE64: u32 = 25;
pub const TD_SEEK64: u32 = 26;
pub const TD_FORMAT64: u32 = 27;
pub const ETD_WRITE: u32 = 32771;
pub const ETD_READ: u32 = 32770;
pub const ETD_MOTOR: u32 = 32777;
pub const ETD_SEEK: u32 = 32778;
pub const ETD_FORMAT: u32 = 32779;
pub const ETD_UPDATE: u32 = 32772;
pub const ETD_CLEAR: u32 = 32773;
pub const ETD_RAWREAD: u32 = 32784;
pub const ETD_RAWWRITE: u32 = 32785;
pub const DG_DIRECT_ACCESS: u32 = 0;
pub const DG_SEQUENTIAL_ACCESS: u32 = 1;
pub const DG_PRINTER: u32 = 2;
pub const DG_PROCESSOR: u32 = 3;
pub const DG_WORM: u32 = 4;
pub const DG_CDROM: u32 = 5;
pub const DG_SCANNER: u32 = 6;
pub const DG_OPTICAL_DISK: u32 = 7;
pub const DG_MEDIUM_CHANGER: u32 = 8;
pub const DG_COMMUNICATION: u32 = 9;
pub const DG_UNKNOWN: u32 = 31;
pub const DGB_REMOVABLE: u32 = 0;
pub const DGF_REMOVABLE: u32 = 1;
pub const IOTDB_INDEXSYNC: u32 = 4;
pub const IOTDF_INDEXSYNC: u32 = 16;
pub const IOTDB_WORDSYNC: u32 = 5;
pub const IOTDF_WORDSYNC: u32 = 32;
pub const TD_LABELSIZE: u32 = 16;
pub const TDB_ALLOW_NON_3_5: u32 = 0;
pub const TDF_ALLOW_NON_3_5: u32 = 1;
pub const DRIVE3_5: u32 = 1;
pub const DRIVE5_25: u32 = 2;
pub const DRIVE3_5_150RPM: u32 = 3;
pub const TDERR_NotSpecified: u32 = 20;
pub const TDERR_NoSecHdr: u32 = 21;
pub const TDERR_BadSecPreamble: u32 = 22;
pub const TDERR_BadSecID: u32 = 23;
pub const TDERR_BadHdrSum: u32 = 24;
pub const TDERR_BadSecSum: u32 = 25;
pub const TDERR_TooFewSecs: u32 = 26;
pub const TDERR_BadSecHdr: u32 = 27;
pub const TDERR_WriteProt: u32 = 28;
pub const TDERR_DiskChanged: u32 = 29;
pub const TDERR_SeekError: u32 = 30;
pub const TDERR_NoMem: u32 = 31;
pub const TDERR_BadUnitNum: u32 = 32;
pub const TDERR_BadDriveType: u32 = 33;
pub const TDERR_DriveInUse: u32 = 34;
pub const TDERR_PostReset: u32 = 35;
pub const TDPB_NOCLICK: u32 = 0;
pub const TDPF_NOCLICK: u32 = 1;
pub const TFUNIT_CONTROL: i32 = -1;
pub const TRACKFILENAME: &[u8; 17] = b"trackfile.device\0";
pub const TFSU_NextAvailableUnit: i32 = -1;
pub const TFERROR_UnitBusy: i32 = -202041;
pub const TFERROR_OutOfMemory: i32 = -202042;
pub const TFERROR_UnitNotFound: i32 = -202043;
pub const TFERROR_AlreadyInUse: i32 = -202044;
pub const TFERROR_UnitNotActive: i32 = -202045;
pub const TFERROR_InvalidFile: i32 = -202046;
pub const TFERROR_InvalidFileSize: i32 = -202047;
pub const TFERROR_NoFileGiven: i32 = -202048;
pub const TFERROR_Aborted: i32 = -202049;
pub const TFERROR_InvalidDriveType: i32 = -202050;
pub const TFERROR_ProcessFailed: i32 = -202051;
pub const TFERROR_NoMediumPresent: i32 = -202052;
pub const TFERROR_ReadOnlyVolume: i32 = -202053;
pub const TFERROR_ReadOnlyFile: i32 = -202054;
pub const TFERROR_DuplicateDisk: i32 = -202055;
pub const TFERROR_DuplicateVolume: i32 = -202056;
pub const TFERROR_Denied: i32 = -202057;
pub const TFERROR_NotSupported: i32 = -202058;
pub const TFGUD_AllUnits: i32 = -1;
pub const TFEFS_Unsupported: i32 = -1;
pub const TF_MINIMUM_CACHE_SIZE: u32 = 46000;
pub const MAXFONTPATH: u32 = 256;
pub const FCH_ID: u32 = 3840;
pub const TFCH_ID: u32 = 3842;
pub const OFCH_ID: u32 = 3843;
pub const DFH_ID: u32 = 3968;
pub const MAXFONTNAME: u32 = 32;
pub const AFB_MEMORY: u32 = 0;
pub const AFF_MEMORY: u32 = 1;
pub const AFB_DISK: u32 = 1;
pub const AFF_DISK: u32 = 2;
pub const AFB_SCALED: u32 = 2;
pub const AFF_SCALED: u32 = 4;
pub const AFB_BITMAP: u32 = 3;
pub const AFF_BITMAP: u32 = 8;
pub const AFB_OTAG: u32 = 4;
pub const AFF_OTAG: u32 = 16;
pub const AFB_TYPE: u32 = 6;
pub const AFF_CHARSET: u32 = 32;
pub const AFF_TYPE: u32 = 64;
pub const AFB_TAGGED: u32 = 16;
pub const AFF_TAGGED: u32 = 65536;
pub const OFB_OPEN: u32 = 0;
pub const OFF_OPEN: u32 = 1;
pub const OT_Indirect: u32 = 32768;
pub const OTUL_None: u32 = 0;
pub const OTUL_Solid: u32 = 1;
pub const OTUL_Broken: u32 = 2;
pub const OTUL_DoubleSolid: u32 = 3;
pub const OTUL_DoubleBroken: u32 = 4;
pub const OUTL_DoubleBroken: u32 = 4;
pub const OTSUFFIX: &[u8; 6] = b".otag\0";
pub const OTE_Bullet: &[u8; 7] = b"bullet\0";
pub const OTS_UltraThin: u32 = 8;
pub const OTS_ExtraThin: u32 = 24;
pub const OTS_Thin: u32 = 40;
pub const OTS_ExtraLight: u32 = 56;
pub const OTS_Light: u32 = 72;
pub const OTS_DemiLight: u32 = 88;
pub const OTS_SemiLight: u32 = 104;
pub const OTS_Book: u32 = 120;
pub const OTS_Medium: u32 = 136;
pub const OTS_SemiBold: u32 = 152;
pub const OTS_DemiBold: u32 = 168;
pub const OTS_Bold: u32 = 184;
pub const OTS_ExtraBold: u32 = 200;
pub const OTS_Black: u32 = 216;
pub const OTS_ExtraBlack: u32 = 232;
pub const OTS_UltraBlack: u32 = 248;
pub const OTS_Upright: u32 = 0;
pub const OTS_Italic: u32 = 1;
pub const OTS_LeftItalic: u32 = 2;
pub const OTH_UltraCompressed: u32 = 16;
pub const OTH_ExtraCompressed: u32 = 48;
pub const OTH_Compressed: u32 = 80;
pub const OTH_Condensed: u32 = 112;
pub const OTH_Normal: u32 = 144;
pub const OTH_SemiExpanded: u32 = 176;
pub const OTH_Expanded: u32 = 208;
pub const OTH_ExtraExpanded: u32 = 240;
pub const OT_MAXAVAILSIZES: u32 = 20;
pub const DFCTRL_SORT_OFF: u32 = 0;
pub const DFCTRL_SORT_ASC: u32 = 1;
pub const DFCTRL_SORT_DES: i32 = -1;
pub const OTERR_Failure: i32 = -1;
pub const OTERR_Success: u32 = 0;
pub const OTERR_BadTag: u32 = 1;
pub const OTERR_UnknownTag: u32 = 2;
pub const OTERR_BadData: u32 = 3;
pub const OTERR_NoMemory: u32 = 4;
pub const OTERR_NoFace: u32 = 5;
pub const OTERR_BadFace: u32 = 6;
pub const OTERR_NoGlyph: u32 = 7;
pub const OTERR_BadGlyph: u32 = 8;
pub const OTERR_NoShear: u32 = 9;
pub const OTERR_NoRotate: u32 = 10;
pub const OTERR_TooSmall: u32 = 11;
pub const OTERR_UnknownGlyph: u32 = 12;
pub const LEN_DATSTRING: u32 = 16;
pub const DTB_SUBST: u32 = 0;
pub const DTB_FUTURE: u32 = 1;
pub const DTF_SUBST: u32 = 1;
pub const DTF_FUTURE: u32 = 2;
pub const FORMAT_DOS: u32 = 0;
pub const FORMAT_INT: u32 = 1;
pub const FORMAT_USA: u32 = 2;
pub const FORMAT_CDN: u32 = 3;
pub const FORMAT_DEF: u32 = 4;
pub const FORMAT_MAX: u32 = 3;
pub const APB_DOWILD: u32 = 0;
pub const APF_DOWILD: u32 = 1;
pub const APB_ITSWILD: u32 = 1;
pub const APF_ITSWILD: u32 = 2;
pub const APB_DODIR: u32 = 2;
pub const APF_DODIR: u32 = 4;
pub const APB_DIDDIR: u32 = 3;
pub const APF_DIDDIR: u32 = 8;
pub const APB_NOMEMERR: u32 = 4;
pub const APF_NOMEMERR: u32 = 16;
pub const APB_DODOT: u32 = 5;
pub const APF_DODOT: u32 = 32;
pub const APB_DirChanged: u32 = 6;
pub const APF_DirChanged: u32 = 64;
pub const APB_FollowHLinks: u32 = 7;
pub const APF_FollowHLinks: u32 = 128;
pub const DDB_PatternBit: u32 = 0;
pub const DDF_PatternBit: u32 = 1;
pub const DDB_ExaminedBit: u32 = 1;
pub const DDF_ExaminedBit: u32 = 2;
pub const DDB_Completed: u32 = 2;
pub const DDF_Completed: u32 = 4;
pub const DDB_AllBit: u32 = 3;
pub const DDF_AllBit: u32 = 8;
pub const DDB_Single: u32 = 4;
pub const DDF_Single: u32 = 16;
pub const P_ANY: u32 = 128;
pub const P_SINGLE: u32 = 129;
pub const P_ORSTART: u32 = 130;
pub const P_ORNEXT: u32 = 131;
pub const P_OREND: u32 = 132;
pub const P_NOT: u32 = 133;
pub const P_NOTEND: u32 = 134;
pub const P_NOTCLASS: u32 = 135;
pub const P_CLASS: u32 = 136;
pub const P_REPBEG: u32 = 137;
pub const P_REPEND: u32 = 138;
pub const P_STOP: u32 = 139;
pub const COMPLEX_BIT: u32 = 1;
pub const EXAMINE_BIT: u32 = 2;
pub const ERROR_BUFFER_OVERFLOW: u32 = 303;
pub const ERROR_BREAK: u32 = 304;
pub const ERROR_NOT_EXECUTABLE: u32 = 305;
pub const HUNK_UNIT: u32 = 999;
pub const HUNK_NAME: u32 = 1000;
pub const HUNK_CODE: u32 = 1001;
pub const HUNK_DATA: u32 = 1002;
pub const HUNK_BSS: u32 = 1003;
pub const HUNK_RELOC32: u32 = 1004;
pub const HUNK_ABSRELOC32: u32 = 1004;
pub const HUNK_RELOC16: u32 = 1005;
pub const HUNK_RELRELOC16: u32 = 1005;
pub const HUNK_RELOC8: u32 = 1006;
pub const HUNK_RELRELOC8: u32 = 1006;
pub const HUNK_EXT: u32 = 1007;
pub const HUNK_SYMBOL: u32 = 1008;
pub const HUNK_DEBUG: u32 = 1009;
pub const HUNK_END: u32 = 1010;
pub const HUNK_HEADER: u32 = 1011;
pub const HUNK_OVERLAY: u32 = 1013;
pub const HUNK_BREAK: u32 = 1014;
pub const HUNK_DREL32: u32 = 1015;
pub const HUNK_DREL16: u32 = 1016;
pub const HUNK_DREL8: u32 = 1017;
pub const HUNK_LIB: u32 = 1018;
pub const HUNK_INDEX: u32 = 1019;
pub const HUNK_RELOC32SHORT: u32 = 1020;
pub const HUNK_RELRELOC32: u32 = 1021;
pub const HUNK_ABSRELOC16: u32 = 1022;
pub const HUNKB_ADVISORY: u32 = 29;
pub const HUNKB_CHIP: u32 = 30;
pub const HUNKB_FAST: u32 = 31;
pub const HUNKF_ADVISORY: u32 = 536870912;
pub const HUNKF_CHIP: u32 = 1073741824;
pub const HUNKF_FAST: u32 = 2147483648;
pub const EXT_SYMB: u32 = 0;
pub const EXT_DEF: u32 = 1;
pub const EXT_ABS: u32 = 2;
pub const EXT_RES: u32 = 3;
pub const EXT_REF32: u32 = 129;
pub const EXT_ABSREF32: u32 = 129;
pub const EXT_COMMON: u32 = 130;
pub const EXT_ABSCOMMON: u32 = 130;
pub const EXT_REF16: u32 = 131;
pub const EXT_RELREF16: u32 = 131;
pub const EXT_REF8: u32 = 132;
pub const EXT_RELREF8: u32 = 132;
pub const EXT_DEXT32: u32 = 133;
pub const EXT_DEXT16: u32 = 134;
pub const EXT_DEXT8: u32 = 135;
pub const EXT_RELREF32: u32 = 136;
pub const EXT_RELCOMMON: u32 = 137;
pub const EXT_ABSREF16: u32 = 138;
pub const EXT_ABSREF8: u32 = 139;
pub const ED_NAME: u32 = 1;
pub const ED_TYPE: u32 = 2;
pub const ED_SIZE: u32 = 3;
pub const ED_PROTECTION: u32 = 4;
pub const ED_DATE: u32 = 5;
pub const ED_COMMENT: u32 = 6;
pub const ED_OWNER: u32 = 7;
pub const DE_TABLESIZE: u32 = 0;
pub const DE_SIZEBLOCK: u32 = 1;
pub const DE_SECORG: u32 = 2;
pub const DE_NUMHEADS: u32 = 3;
pub const DE_SECSPERBLK: u32 = 4;
pub const DE_BLKSPERTRACK: u32 = 5;
pub const DE_RESERVEDBLKS: u32 = 6;
pub const DE_PREFAC: u32 = 7;
pub const DE_INTERLEAVE: u32 = 8;
pub const DE_LOWCYL: u32 = 9;
pub const DE_UPPERCYL: u32 = 10;
pub const DE_NUMBUFFERS: u32 = 11;
pub const DE_MEMBUFTYPE: u32 = 12;
pub const DE_BUFMEMTYPE: u32 = 12;
pub const DE_MAXTRANSFER: u32 = 13;
pub const DE_MASK: u32 = 14;
pub const DE_BOOTPRI: u32 = 15;
pub const DE_DOSTYPE: u32 = 16;
pub const DE_BAUD: u32 = 17;
pub const DE_CONTROL: u32 = 18;
pub const DE_BOOTBLOCKS: u32 = 19;
pub const ENVF_SCSIDIRECT: u32 = 65536;
pub const ENVF_SUPERFLOPPY: u32 = 131072;
pub const ENVF_DISABLENSD: u32 = 262144;
pub const NOTIFY_CLASS: u32 = 1073741824;
pub const NOTIFY_CODE: u32 = 4660;
pub const NRF_SEND_MESSAGE: u32 = 1;
pub const NRF_SEND_SIGNAL: u32 = 2;
pub const NRF_WAIT_REPLY: u32 = 8;
pub const NRF_NOTIFY_INITIAL: u32 = 16;
pub const NRF_MAGIC: u32 = 2147483648;
pub const NRB_SEND_MESSAGE: u32 = 0;
pub const NRB_SEND_SIGNAL: u32 = 1;
pub const NRB_WAIT_REPLY: u32 = 3;
pub const NRB_NOTIFY_INITIAL: u32 = 4;
pub const NRB_MAGIC: u32 = 31;
pub const NR_HANDLER_FLAGS: u32 = 4294901760;
pub const REC_EXCLUSIVE: u32 = 0;
pub const REC_EXCLUSIVE_IMMED: u32 = 1;
pub const REC_SHARED: u32 = 2;
pub const REC_SHARED_IMMED: u32 = 3;
pub const BUF_LINE: u32 = 0;
pub const BUF_FULL: u32 = 1;
pub const BUF_NONE: u32 = 2;
pub const ENDSTREAMCH: i32 = -1;
pub const LV_VAR: u32 = 0;
pub const LV_ALIAS: u32 = 1;
pub const LVB_IGNORE: u32 = 7;
pub const LVF_IGNORE: u32 = 128;
pub const GVB_GLOBAL_ONLY: u32 = 8;
pub const GVF_GLOBAL_ONLY: u32 = 256;
pub const GVB_LOCAL_ONLY: u32 = 9;
pub const GVF_LOCAL_ONLY: u32 = 512;
pub const GVB_BINARY_VAR: u32 = 10;
pub const GVF_BINARY_VAR: u32 = 1024;
pub const GVB_DONT_NULL_TERM: u32 = 11;
pub const GVF_DONT_NULL_TERM: u32 = 2048;
pub const GVB_SAVE_VAR: u32 = 12;
pub const GVF_SAVE_VAR: u32 = 4096;
pub const SG_DEFAULTMAXCHARS: u32 = 128;
pub const LORIENT_NONE: u32 = 0;
pub const LORIENT_HORIZ: u32 = 1;
pub const LORIENT_VERT: u32 = 2;
pub const GM_Dummy: i32 = -1;
pub const GM_HITTEST: u32 = 0;
pub const GM_RENDER: u32 = 1;
pub const GM_GOACTIVE: u32 = 2;
pub const GM_HANDLEINPUT: u32 = 3;
pub const GM_GOINACTIVE: u32 = 4;
pub const GM_HELPTEST: u32 = 5;
pub const GM_LAYOUT: u32 = 6;
pub const GM_DOMAIN: u32 = 7;
pub const GM_KEYTEST: u32 = 8;
pub const GM_KEYGOACTIVE: u32 = 9;
pub const GM_KEYGOINACTIVE: u32 = 10;
pub const GM_HANDLESCROLL: u32 = 14;
pub const GM_QUERYHOVERED: u32 = 15;
pub const GMR_GADGETHIT: u32 = 4;
pub const GMR_NOHELPHIT: u32 = 0;
pub const GMR_HELPHIT: u32 = 4294967295;
pub const GMR_HELPCODE: u32 = 65536;
pub const GREDRAW_UPDATE: u32 = 2;
pub const GREDRAW_REDRAW: u32 = 1;
pub const GREDRAW_TOGGLE: u32 = 0;
pub const GMR_MEACTIVE: u32 = 0;
pub const GMR_NOREUSE: u32 = 2;
pub const GMR_REUSE: u32 = 4;
pub const GMR_VERIFY: u32 = 8;
pub const GMR_NEXTACTIVE: u32 = 16;
pub const GMR_PREVACTIVE: u32 = 32;
pub const GDOMAIN_MINIMUM: u32 = 0;
pub const GDOMAIN_NOMINAL: u32 = 1;
pub const GDOMAIN_MAXIMUM: u32 = 2;
pub const GMR_KEYACTIVE: u32 = 16;
pub const GMR_KEYVERIFY: u32 = 32;
pub const CUSTOMIMAGEDEPTH: i32 = -1;
pub const SYSISIZE_MEDRES: u32 = 0;
pub const SYSISIZE_LOWRES: u32 = 1;
pub const SYSISIZE_HIRES: u32 = 2;
pub const DEPTHIMAGE: u32 = 0;
pub const ZOOMIMAGE: u32 = 1;
pub const SIZEIMAGE: u32 = 2;
pub const CLOSEIMAGE: u32 = 3;
pub const SDEPTHIMAGE: u32 = 5;
pub const SDOWNBACKMAGE: u32 = 6;
pub const LEFTIMAGE: u32 = 10;
pub const UPIMAGE: u32 = 11;
pub const RIGHTIMAGE: u32 = 12;
pub const DOWNIMAGE: u32 = 13;
pub const CHECKIMAGE: u32 = 14;
pub const MXIMAGE: u32 = 15;
pub const MENUCHECK: u32 = 16;
pub const AMIGAKEY: u32 = 17;
pub const ICONIFYIMAGE: u32 = 22;
pub const MENUMX: u32 = 27;
pub const MENUSUB: u32 = 28;
pub const SHIFTKEYIMAGE: u32 = 42;
pub const FRAME_DEFAULT: u32 = 0;
pub const FRAME_BUTTON: u32 = 1;
pub const FRAME_RIDGE: u32 = 2;
pub const FRAME_ICONDROPBOX: u32 = 3;
pub const FRAME_PROPBORDER: u32 = 4;
pub const FRAME_PROPKNOB: u32 = 5;
pub const FRAME_DISPLAY: u32 = 6;
pub const FRAME_CONTEXT: u32 = 7;
pub const IM_DRAW: u32 = 514;
pub const IM_HITTEST: u32 = 515;
pub const IM_ERASE: u32 = 516;
pub const IM_MOVE: u32 = 517;
pub const IM_DRAWFRAME: u32 = 518;
pub const IM_FRAMEBOX: u32 = 519;
pub const IM_HITFRAME: u32 = 520;
pub const IM_ERASEFRAME: u32 = 521;
pub const IM_DOMAINFRAME: u32 = 522;
pub const IDS_NORMAL: u32 = 0;
pub const IDS_SELECTED: u32 = 1;
pub const IDS_DISABLED: u32 = 2;
pub const IDS_BUSY: u32 = 3;
pub const IDS_INDETERMINATE: u32 = 4;
pub const IDS_INACTIVENORMAL: u32 = 5;
pub const IDS_INACTIVESELECTED: u32 = 6;
pub const IDS_INACTIVEDISABLED: u32 = 7;
pub const IDS_SELECTEDDISABLED: u32 = 8;
pub const IDS_INDETERMINANT: u32 = 4;
pub const FRAMEF_MINIMAL: u32 = 2;
pub const IDOMAIN_MINIMUM: u32 = 0;
pub const IDOMAIN_NOMINAL: u32 = 1;
pub const IDOMAIN_MAXIMUM: u32 = 2;
pub const BVS_THIN: u32 = 0;
pub const BVS_BUTTON: u32 = 1;
pub const BVS_GROUP: u32 = 2;
pub const BVS_FIELD: u32 = 3;
pub const BVS_NONE: u32 = 4;
pub const BVS_DROPBOX: u32 = 5;
pub const BVS_SBAR_HORIZ: u32 = 6;
pub const BVS_SBAR_VERT: u32 = 7;
pub const BVS_BOX: u32 = 8;
pub const BVS_STANDARD: u32 = 11;
pub const BVS_CONTAINER: u32 = 12;
pub const BVS_KNOB: u32 = 13;
pub const BVS_DISPLAY: u32 = 14;
pub const BVS_SBAR_HORZ: u32 = 6;
pub const BVS_FOCUS: u32 = 9;
pub const BVS_RADIOBUTTON: u32 = 10;
pub const BFLG_XENFILL: u32 = 1;
pub const BFLG_TRANS: u32 = 2;
pub const BVJ_TOP_CENTER: u32 = 0;
pub const BVJ_TOP_LEFT: u32 = 1;
pub const BVJ_TOP_RIGHT: u32 = 2;
pub const BVJ_IN_CENTER: u32 = 3;
pub const BVJ_IN_LEFT: u32 = 4;
pub const BVJ_IN_RIGHT: u32 = 5;
pub const BVJ_BOT_CENTER: u32 = 6;
pub const BVJ_BOT_LEFT: u32 = 7;
pub const BVJ_BOT_RIGHT: u32 = 8;
pub const BCJ_LEFT: u32 = 0;
pub const BCJ_CENTER: u32 = 1;
pub const BCJ_RIGHT: u32 = 2;
pub const BCJ_CENTRE: u32 = 1;
pub const BALIGN_LEFT: u32 = 0;
pub const BALIGN_TOP: u32 = 0;
pub const BALIGN_CENTER: u32 = 1;
pub const BALIGN_RIGHT: u32 = 2;
pub const BALIGN_BOTTOM: u32 = 2;
pub const BAG_POPFILE: u32 = 1;
pub const BAG_POPDRAWER: u32 = 2;
pub const BAG_POPFONT: u32 = 3;
pub const BAG_CHECKBOX: u32 = 4;
pub const BAG_CANCELBOX: u32 = 5;
pub const BAG_UPARROW: u32 = 6;
pub const BAG_DNARROW: u32 = 7;
pub const BAG_RTARROW: u32 = 8;
pub const BAG_LFARROW: u32 = 9;
pub const BAG_POPTIME: u32 = 10;
pub const BAG_POPSCREEN: u32 = 11;
pub const BAG_POPUP: u32 = 12;
pub const BAG_POPDATE: u32 = 13;
pub const BAG_POPCOLOR: u32 = 14;
pub const BAG_POPCOLOUR: u32 = 14;
pub const CHOOSER_MinWidth: u32 = 36;
pub const CHOOSER_MinHeight: u32 = 10;
pub const CHJ_LEFT: u32 = 0;
pub const CHJ_CENTER: u32 = 1;
pub const CHJ_RIGHT: u32 = 2;
pub const CTORIENT_HORIZ: u32 = 0;
pub const CTORIENT_VERT: u32 = 1;
pub const CTORIENT_HORIZFLIP: u32 = 2;
pub const CTORIENT_VERTFLIP: u32 = 3;
pub const PLACECLOSE_LEFT: u32 = 0;
pub const PLACECLOSE_RIGHT: u32 = 1;
pub const FGORIENT_HORIZ: u32 = 0;
pub const FGORIENT_VERT: u32 = 1;
pub const FGJ_LEFT: u32 = 0;
pub const FGJ_CENTER: u32 = 1;
pub const FGJ_CENTRE: u32 = 1;
pub const FUELGAUGE_HORIZONTAL: u32 = 0;
pub const FUELGAUGE_VERTICAL: u32 = 1;
pub const GCOLOR_REQUEST: u32 = 6488065;
pub const GFILE_REQUEST: u32 = 6422529;
pub const GFILE_FREELIST: u32 = 6422530;
pub const GFONT_REQUEST: u32 = 6291457;
pub const GSM_REQUEST: u32 = 6356993;
pub const LM_ADDCHILD: u32 = 5505025;
pub const LM_ADDIMAGE: u32 = 5505026;
pub const LM_REMOVECHILD: u32 = 5505027;
pub const LM_MODIFYCHILD: u32 = 5505028;
pub const INTERSPACING: u32 = 1;
pub const INTERSPACE: u32 = 1;
pub const LAYOUT_HORIZONTAL: u32 = 0;
pub const LAYOUT_VERTICAL: u32 = 1;
pub const LAYOUT_ORIENT_HORIZ: u32 = 0;
pub const LAYOUT_ORIENT_VERT: u32 = 1;
pub const LALIGN_LEFT: u32 = 0;
pub const LALIGN_RIGHT: u32 = 1;
pub const LALIGN_CENTER: u32 = 2;
pub const LALIGN_CENTRE: u32 = 2;
pub const LAYOUT_ALIGN_LEFT: u32 = 0;
pub const LAYOUT_ALIGN_RIGHT: u32 = 1;
pub const LAYOUT_ALIGN_CENTER: u32 = 2;
pub const LALIGN_TOP: u32 = 0;
pub const LALIGN_BOTTOM: u32 = 1;
pub const LAYOUT_ALIGN_TOP: u32 = 0;
pub const LAYOUT_ALIGN_BOTTOM: u32 = 1;
pub const LBM_ADDNODE: u32 = 5767169;
pub const LBM_REMNODE: u32 = 5767170;
pub const LBM_EDITNODE: u32 = 5767171;
pub const LBM_SORT: u32 = 5767172;
pub const LBMSORT_FORWARD: u32 = 0;
pub const LBMSORT_REVERSE: u32 = 1;
pub const LBM_SHOWCHILDREN: u32 = 5767173;
pub const LBM_HIDECHILDREN: u32 = 5767174;
pub const LBFLG_READONLY: u32 = 1;
pub const LBFLG_CUSTOMPENS: u32 = 2;
pub const LBFLG_HASCHILDREN: u32 = 4;
pub const LBFLG_SHOWCHILDREN: u32 = 8;
pub const LBFLG_HIDDEN: u32 = 16;
pub const LCJ_LEFT: u32 = 0;
pub const LCJ_CENTER: u32 = 1;
pub const LCJ_RIGHT: u32 = 2;
pub const LCJ_CENTRE: u32 = 1;
pub const LRJ_BOTTOM: u32 = 0;
pub const LRJ_CENTER: u32 = 1;
pub const LRJ_TOP: u32 = 2;
pub const LRJ_CENTRE: u32 = 1;
pub const LB_DRAW: u32 = 514;
pub const LBCB_OK: u32 = 0;
pub const LBCB_UNKNOWN: u32 = 1;
pub const LBR_NORMAL: u32 = 0;
pub const LBR_SELECTED: u32 = 1;
pub const CIF_WEIGHTED: u32 = 0;
pub const CIF_FIXED: u32 = 1;
pub const CIF_DRAGGABLE: u32 = 2;
pub const CIF_NOSEPARATORS: u32 = 4;
pub const CIF_SORTABLE: u32 = 8;
pub const CIF_CENTER: u32 = 16;
pub const CIF_RIGHT: u32 = 32;
pub const CIF_CENTRE: u32 = 16;
pub const LBP_LINEUP: u32 = 1;
pub const LBP_LINEDOWN: u32 = 2;
pub const LBP_PAGEUP: u32 = 3;
pub const LBP_PAGEDOWN: u32 = 4;
pub const LBP_TOP: u32 = 5;
pub const LBP_BOTTOM: u32 = 6;
pub const LBP_SHIFTLEFT: u32 = 10;
pub const LBP_SHIFTRIGHT: u32 = 11;
pub const LBP_LEFTEDGE: u32 = 12;
pub const LBP_RIGHTEDGE: u32 = 13;
pub const LBP_PAGELEFT: u32 = 14;
pub const LBP_PAGERIGHT: u32 = 15;
pub const LBRE_NORMAL: u32 = 1;
pub const LBRE_HIDECHILDREN: u32 = 2;
pub const LBRE_SHOWCHILDREN: u32 = 4;
pub const LBRE_EDIT: u32 = 8;
pub const LBRE_DOUBLECLICK: u32 = 16;
pub const LBRE_CHECKED: u32 = 32;
pub const LBRE_UNCHECKED: u32 = 64;
pub const LBRE_TITLECLICK: u32 = 128;
pub const LBRE_COLUMNADJUST: u32 = 256;
pub const LBRE_EDITTABNEXT: u32 = 512;
pub const LBRE_EDITTABPREV: u32 = 1024;
pub const LBS_NONE: u32 = 0;
pub const LBS_ROWS: u32 = 1;
pub const LBS_COLUMNS: u32 = 2;
pub const LBS_BOTH: u32 = 3;
pub const LBET_DOUBLECLICK: u32 = 0;
pub const LBET_DELAYEDSECOND: u32 = 1;
pub const LVJ_LEFT: u32 = 0;
pub const LVJ_CENTER: u32 = 1;
pub const LVJ_RIGHT: u32 = 2;
pub const PB_DRAW: u32 = 514;
pub const PBCB_OK: u32 = 0;
pub const PBCB_UNKNOWN: u32 = 1;
pub const PBR_NORMAL: u32 = 0;
pub const PBR_SELECTED: u32 = 1;
pub const PBR_NORMALDISABLED: u32 = 2;
pub const PBR_SELECTEDDISABLED: u32 = 8;
pub const SORIENT_HORIZ: u32 = 2;
pub const SORIENT_VERT: u32 = 4;
pub const SCROLLER_HORIZONTAL: u32 = 2;
pub const SCROLLER_VERTICAL: u32 = 4;
pub const INTUITION_CGHOOKS_H: u32 = 1;
pub const SGTOOL_FREEHAND_DOTS: u32 = 0;
pub const SGTOOL_FREEHAND: u32 = 1;
pub const SGTOOL_ELLIPSE: u32 = 2;
pub const SGTOOL_ELLIPSE_FILLED: u32 = 3;
pub const SGTOOL_RECT: u32 = 4;
pub const SGTOOL_RECT_FILLED: u32 = 5;
pub const SGTOOL_LINE: u32 = 6;
pub const SGTOOL_FILL: u32 = 7;
pub const SGTOOL_GETPEN: u32 = 8;
pub const SGTOOL_HOTSPOT: u32 = 9;
pub const SGTOOL_SELECT: u32 = 10;
pub const SGTOOL_MOVE: u32 = 11;
pub const SGSCROLLWHEEL_NOTHING: u32 = 0;
pub const SGSCROLLWHEEL_SCROLLANDZOOM: u32 = 1;
pub const SGSCROLLWHEEL_ZOOM: u32 = 2;
pub const SGM_Clear: u32 = 5767424;
pub const SGM_Undo: u32 = 5767425;
pub const SGM_Redo: u32 = 5767426;
pub const SGM_Scroll: u32 = 5767427;
pub const SLIDER_HORIZONTAL: u32 = 2;
pub const SLIDER_VERTICAL: u32 = 4;
pub const SLJ_LEFT: u32 = 0;
pub const SLJ_CENTER: u32 = 1;
pub const SLJ_RIGHT: u32 = 2;
pub const SBH_NONE: u32 = 0;
pub const SBH_BACKFILL: u32 = 1;
pub const SBH_RECESS: u32 = 2;
pub const SBH_IMAGE: u32 = 3;
pub const SBM_SETNODEATTRS: u32 = 5767178;
pub const SBORIENT_HORIZ: u32 = 0;
pub const SBORIENT_VERT: u32 = 1;
pub const SPEEDBAR_HORIZONTAL: u32 = 0;
pub const SPEEDBAR_VERTICAL: u32 = 1;
pub const SBTYPE_BOTH: u32 = 0;
pub const SBTYPE_TEXT: u32 = 1;
pub const SBTYPE_IMAGE: u32 = 2;
pub const SHK_CUSTOM: u32 = 0;
pub const SHK_PASSWORD: u32 = 1;
pub const SHK_IPADDRESS: u32 = 2;
pub const SHK_FLOAT: u32 = 3;
pub const SHK_HEXIDECIMAL: u32 = 4;
pub const SHK_TELEPHONE: u32 = 5;
pub const SHK_POSTALCODE: u32 = 6;
pub const SHK_AMOUNT: u32 = 7;
pub const SHK_UPPERCASE: u32 = 8;
pub const SHK_HOTKEY: u32 = 9;
pub const SHK_HEXADECIMAL: u32 = 4;
pub const TL_TEXTPEN: u32 = 0;
pub const TL_BACKGROUNDPEN: u32 = 1;
pub const TL_FILLTEXTPEN: u32 = 2;
pub const TL_FILLPEN: u32 = 3;
pub const MAX_TL_PENS: u32 = 4;
pub const BUT_REWIND: u32 = 0;
pub const BUT_PLAY: u32 = 1;
pub const BUT_FORWARD: u32 = 2;
pub const BUT_STOP: u32 = 3;
pub const BUT_PAUSE: u32 = 4;
pub const BUT_BEGIN: u32 = 5;
pub const BUT_FRAME: u32 = 6;
pub const BUT_END: u32 = 7;
pub const TEXTEDITOR_Dummy: u32 = 282624;
pub const GM_TEXTEDITOR_HandleError: u32 = 282655;
pub const GM_TEXTEDITOR_AddKeyBindings: u32 = 282658;
pub const GM_TEXTEDITOR_ARexxCmd: u32 = 282659;
pub const GM_TEXTEDITOR_ClearText: u32 = 282660;
pub const GM_TEXTEDITOR_ExportText: u32 = 282661;
pub const GM_TEXTEDITOR_InsertText: u32 = 282662;
pub const GM_TEXTEDITOR_MacroBegin: u32 = 282663;
pub const GM_TEXTEDITOR_MacroEnd: u32 = 282664;
pub const GM_TEXTEDITOR_MacroExecute: u32 = 282665;
pub const GM_TEXTEDITOR_Replace: u32 = 282666;
pub const GM_TEXTEDITOR_Search: u32 = 282667;
pub const GM_TEXTEDITOR_MarkText: u32 = 282668;
pub const GM_TEXTEDITOR_BlockInfo: u32 = 282672;
pub const GM_TEXTEDITOR_AddChangeListener: u32 = 282673;
pub const GM_TEXTEDITOR_ExportBlock: u32 = 282692;
pub const GM_TEXTEDITOR_ReplaceAll: u32 = 282699;
pub const GV_TEXTEDITOR_ExportHook_Plain: u32 = 0;
pub const GV_TEXTEDITOR_ExportHook_EMail: u32 = 1;
pub const GV_TEXTEDITOR_Flow_Left: u32 = 0;
pub const GV_TEXTEDITOR_Flow_Center: u32 = 1;
pub const GV_TEXTEDITOR_Flow_Right: u32 = 2;
pub const GV_TEXTEDITOR_Flow_Justified: u32 = 3;
pub const GV_TEXTEDITOR_ImportHook_Plain: u32 = 0;
pub const GV_TEXTEDITOR_ImportHook_EMail: u32 = 2;
pub const GV_TEXTEDITOR_ImportHook_MIME: u32 = 3;
pub const GV_TEXTEDITOR_ImportHook_MIMEQuoted: u32 = 4;
pub const GV_TEXTEDITOR_InsertText_Cursor: u32 = 0;
pub const GV_TEXTEDITOR_InsertText_Top: u32 = 1;
pub const GV_TEXTEDITOR_InsertText_Bottom: u32 = 2;
pub const GV_TEXTEDITOR_LengthHook_Plain: u32 = 0;
pub const GV_TEXTEDITOR_LengthHook_ANSI: u32 = 1;
pub const GV_TEXTEDITOR_LengthHook_HTML: u32 = 2;
pub const GV_TEXTEDITOR_LengthHook_MAIL: u32 = 3;
pub const GV_TEXTEDITOR_TabKey_IndentsLine: u32 = 0;
pub const GV_TEXTEDITOR_TabKey_IndentsAfter: u32 = 1;
pub const GF_TEXTEDITOR_Search_FromTop: u32 = 1;
pub const GF_TEXTEDITOR_Search_Next: u32 = 2;
pub const GF_TEXTEDITOR_Search_Incremental: u32 = 3;
pub const GF_TEXTEDITOR_Search_Backwards: u32 = 16;
pub const GF_TEXTEDITOR_Highlight_All: u32 = 19;
pub const GF_TEXTEDITOR_SearchType_Mask: u32 = 19;
pub const GF_TEXTEDITOR_Search_CaseSensitive: u32 = 4;
pub const GF_TEXTEDITOR_Search_DOSPattern: u32 = 8;
pub const GF_TEXTEDITOR_Search_Wildstar: u32 = 32;
pub const GF_TEXTEDITOR_Search_Word: u32 = 64;
pub const GF_TEXTEDITOR_Search_WholeWord: u32 = 64;
pub const GF_TEXTEDITOR_Search_Cyclic: u32 = 128;
pub const GF_TEXTEDITOR_Replace_All: u32 = 1;
pub const Error_ClipboardIsEmpty: u32 = 1;
pub const Error_ClipboardIsNotFTXT: u32 = 2;
pub const Error_MacroBufferIsFull: u32 = 3;
pub const Error_MemoryAllocationFailed: u32 = 4;
pub const Error_NoAreaMarked: u32 = 5;
pub const Error_NoMacroDefined: u32 = 6;
pub const Error_NothingToRedo: u32 = 7;
pub const Error_NothingToUndo: u32 = 8;
pub const Error_NotEnoughUndoMem: u32 = 9;
pub const Error_StringNotFound: u32 = 10;
pub const Error_NoBookmarkInstalled: u32 = 11;
pub const Error_BookmarkHasBeenLost: u32 = 12;
pub const TBSTYLE_UNDERLINE: u32 = 1;
pub const TBSTYLE_BOLD: u32 = 2;
pub const TBSTYLE_ITALIC: u32 = 4;
pub const TBSTYLE_SETCOLOR: u32 = 8;
pub const TBSTYLE_SPELLERROR: u32 = 64;
pub const TBSTYLE_COLORMASK: u32 = 65280;
pub const TBSTYLE_STYLEMASK: u32 = 255;
pub const TBSTYLE_NOTSET: u32 = 65280;
pub const LEFTBAR_RENDERCOMMAND: u32 = 0;
pub const LEFTBAR_MOUSECOMMAND: u32 = 1;
pub const LNSB_Top: u32 = 0;
pub const LNSB_Middle: u32 = 1;
pub const LNSB_Bottom: u32 = 2;
pub const LNSB_StrikeThru: u32 = 3;
pub const LNSB_Thick: u32 = 4;
pub const LNSF_Top: u32 = 1;
pub const LNSF_Middle: u32 = 2;
pub const LNSF_Bottom: u32 = 4;
pub const LNSF_StrikeThru: u32 = 8;
pub const LNSF_Thick: u32 = 16;
pub const LINEENDING_LF: u32 = 0;
pub const LINEENDING_CR: u32 = 1;
pub const LINEENDING_CRLF: u32 = 2;
pub const LINEENDING_ASIMPORT: u32 = 3;
pub const PRESERVE_COLORS: u32 = 1;
pub const AVOID_FLICKER: u32 = 2;
pub const IGNORE_MCOMPAT: u32 = 4;
pub const BIDTAG_COERCE: u32 = 1;
pub const BORDERHIT: u32 = 0;
pub const TOPHIT: u32 = 1;
pub const BOTTOMHIT: u32 = 2;
pub const LEFTHIT: u32 = 4;
pub const RIGHTHIT: u32 = 8;
pub const MODE_640: u32 = 32768;
pub const PLNCNTMSK: u32 = 7;
pub const PLNCNTSHFT: u32 = 12;
pub const PF2PRI: u32 = 64;
pub const COLORON: u32 = 512;
pub const DBLPF: u32 = 1024;
pub const HOLDNMODIFY: u32 = 2048;
pub const INTERLACE: u32 = 4;
pub const PFA_FINE_SCROLL: u32 = 15;
pub const PFB_FINE_SCROLL_SHIFT: u32 = 4;
pub const PF_FINE_SCROLL_MASK: u32 = 15;
pub const DIW_HORIZ_POS: u32 = 127;
pub const DIW_VRTCL_POS: u32 = 511;
pub const DIW_VRTCL_POS_SHIFT: u32 = 7;
pub const DFTCH_MASK: u32 = 255;
pub const VPOSRLOF: u32 = 32768;
pub const SUSERFLAGS: u32 = 255;
pub const VSPRITE: u32 = 1;
pub const SAVEBACK: u32 = 2;
pub const OVERLAY: u32 = 4;
pub const MUSTDRAW: u32 = 8;
pub const BACKSAVED: u32 = 256;
pub const BOBUPDATE: u32 = 512;
pub const GELGONE: u32 = 1024;
pub const VSOVERFLOW: u32 = 2048;
pub const BUSERFLAGS: u32 = 255;
pub const SAVEBOB: u32 = 1;
pub const BOBISCOMP: u32 = 2;
pub const BWAITING: u32 = 256;
pub const BDRAWN: u32 = 512;
pub const BOBSAWAY: u32 = 1024;
pub const BOBNIX: u32 = 2048;
pub const SAVEPRESERVE: u32 = 4096;
pub const OUTSTEP: u32 = 8192;
pub const ANFRACSIZE: u32 = 6;
pub const ANIMHALF: u32 = 32;
pub const RINGTRIGGER: u32 = 1;
pub const B2NORM: u32 = 0;
pub const B2SWAP: u32 = 1;
pub const B2BOBBER: u32 = 2;
pub const NTSC: u32 = 1;
pub const GENLOC: u32 = 2;
pub const PAL: u32 = 4;
pub const TODA_SAFE: u32 = 8;
pub const REALLY_PAL: u32 = 16;
pub const LPEN_SWAP_FRAMES: u32 = 32;
pub const BLITMSG_FAULT: u32 = 4;
pub const GFXB_BIG_BLITS: u32 = 0;
pub const GFXB_HR_AGNUS: u32 = 0;
pub const GFXB_HR_DENISE: u32 = 1;
pub const GFXB_AA_ALICE: u32 = 2;
pub const GFXB_AA_LISA: u32 = 3;
pub const GFXB_AA_MLISA: u32 = 4;
pub const GFXF_BIG_BLITS: u32 = 1;
pub const GFXF_HR_AGNUS: u32 = 1;
pub const GFXF_HR_DENISE: u32 = 2;
pub const GFXF_AA_ALICE: u32 = 4;
pub const GFXF_AA_LISA: u32 = 8;
pub const GFXF_AA_MLISA: u32 = 16;
pub const SETCHIPREV_A: u32 = 1;
pub const SETCHIPREV_ECS: u32 = 3;
pub const SETCHIPREV_AA: u32 = 15;
pub const SETCHIPREV_BEST: u32 = 4294967295;
pub const BUS_16: u32 = 0;
pub const NML_CAS: u32 = 0;
pub const BUS_32: u32 = 1;
pub const DBL_CAS: u32 = 2;
pub const BANDWIDTH_1X: u32 = 0;
pub const BANDWIDTH_2XNML: u32 = 1;
pub const BANDWIDTH_2XDBL: u32 = 2;
pub const BANDWIDTH_4X: u32 = 3;
pub const NEW_DATABASE: u32 = 1;
pub const GRAPHICSNAME: &[u8; 17] = b"graphics.library\0";
pub const DMAF_SETCLR: u32 = 32768;
pub const DMAF_AUDIO: u32 = 15;
pub const DMAF_AUD0: u32 = 1;
pub const DMAF_AUD1: u32 = 2;
pub const DMAF_AUD2: u32 = 4;
pub const DMAF_AUD3: u32 = 8;
pub const DMAF_DISK: u32 = 16;
pub const DMAF_SPRITE: u32 = 32;
pub const DMAF_BLITTER: u32 = 64;
pub const DMAF_COPPER: u32 = 128;
pub const DMAF_RASTER: u32 = 256;
pub const DMAF_MASTER: u32 = 512;
pub const DMAF_BLITHOG: u32 = 1024;
pub const DMAF_ALL: u32 = 511;
pub const DMAF_BLTDONE: u32 = 16384;
pub const DMAF_BLTNZERO: u32 = 8192;
pub const DMAB_SETCLR: u32 = 15;
pub const DMAB_AUD0: u32 = 0;
pub const DMAB_AUD1: u32 = 1;
pub const DMAB_AUD2: u32 = 2;
pub const DMAB_AUD3: u32 = 3;
pub const DMAB_DISK: u32 = 4;
pub const DMAB_SPRITE: u32 = 5;
pub const DMAB_BLITTER: u32 = 6;
pub const DMAB_COPPER: u32 = 7;
pub const DMAB_RASTER: u32 = 8;
pub const DMAB_MASTER: u32 = 9;
pub const DMAB_BLITHOG: u32 = 10;
pub const DMAB_BLTDONE: u32 = 14;
pub const DMAB_BLTNZERO: u32 = 13;
pub const RPTAG_Font: u32 = 2147483648;
pub const RPTAG_APen: u32 = 2147483650;
pub const RPTAG_BPen: u32 = 2147483651;
pub const RPTAG_DrMd: u32 = 2147483652;
pub const RPTAG_OutLinePen: u32 = 2147483653;
pub const RPTAG_OutlinePen: u32 = 2147483653;
pub const RPTAG_WriteMask: u32 = 2147483654;
pub const RPTAG_MaxPen: u32 = 2147483655;
pub const RPTAG_DrawBounds: u32 = 2147483656;
pub const SPRITE_ATTACHED: u32 = 128;
pub const SPRITEA_Width: u32 = 2164260864;
pub const SPRITEA_XReplication: u32 = 2164260866;
pub const SPRITEA_YReplication: u32 = 2164260868;
pub const SPRITEA_OutputHeight: u32 = 2164260870;
pub const SPRITEA_Attached: u32 = 2164260872;
pub const SPRITEA_OldDataFormat: u32 = 2164260874;
pub const GSTAG_SPRITE_NUM: u32 = 2181038112;
pub const GSTAG_ATTACHED: u32 = 2181038114;
pub const GSTAG_SOFTSPRITE: u32 = 2181038116;
pub const GSTAG_SCANDOUBLED: u32 = 2197815296;
pub const VTAG_END_CM: u32 = 0;
pub const VTAG_CHROMAKEY_CLR: u32 = 2147483648;
pub const VTAG_CHROMAKEY_SET: u32 = 2147483649;
pub const VTAG_BITPLANEKEY_CLR: u32 = 2147483650;
pub const VTAG_BITPLANEKEY_SET: u32 = 2147483651;
pub const VTAG_BORDERBLANK_CLR: u32 = 2147483652;
pub const VTAG_BORDERBLANK_SET: u32 = 2147483653;
pub const VTAG_BORDERNOTRANS_CLR: u32 = 2147483654;
pub const VTAG_BORDERNOTRANS_SET: u32 = 2147483655;
pub const VTAG_CHROMA_PEN_CLR: u32 = 2147483656;
pub const VTAG_CHROMA_PEN_SET: u32 = 2147483657;
pub const VTAG_CHROMA_PLANE_SET: u32 = 2147483658;
pub const VTAG_ATTACH_CM_SET: u32 = 2147483659;
pub const VTAG_NEXTBUF_CM: u32 = 2147483660;
pub const VTAG_BATCH_CM_CLR: u32 = 2147483661;
pub const VTAG_BATCH_CM_SET: u32 = 2147483662;
pub const VTAG_NORMAL_DISP_GET: u32 = 2147483663;
pub const VTAG_NORMAL_DISP_SET: u32 = 2147483664;
pub const VTAG_COERCE_DISP_GET: u32 = 2147483665;
pub const VTAG_COERCE_DISP_SET: u32 = 2147483666;
pub const VTAG_VIEWPORTEXTRA_GET: u32 = 2147483667;
pub const VTAG_VIEWPORTEXTRA_SET: u32 = 2147483668;
pub const VTAG_CHROMAKEY_GET: u32 = 2147483669;
pub const VTAG_BITPLANEKEY_GET: u32 = 2147483670;
pub const VTAG_BORDERBLANK_GET: u32 = 2147483671;
pub const VTAG_BORDERNOTRANS_GET: u32 = 2147483672;
pub const VTAG_CHROMA_PEN_GET: u32 = 2147483673;
pub const VTAG_CHROMA_PLANE_GET: u32 = 2147483674;
pub const VTAG_ATTACH_CM_GET: u32 = 2147483675;
pub const VTAG_BATCH_CM_GET: u32 = 2147483676;
pub const VTAG_BATCH_ITEMS_GET: u32 = 2147483677;
pub const VTAG_BATCH_ITEMS_SET: u32 = 2147483678;
pub const VTAG_BATCH_ITEMS_ADD: u32 = 2147483679;
pub const VTAG_VPMODEID_GET: u32 = 2147483680;
pub const VTAG_VPMODEID_SET: u32 = 2147483681;
pub const VTAG_VPMODEID_CLR: u32 = 2147483682;
pub const VTAG_USERCLIP_GET: u32 = 2147483683;
pub const VTAG_USERCLIP_SET: u32 = 2147483684;
pub const VTAG_USERCLIP_CLR: u32 = 2147483685;
pub const VTAG_PF1_BASE_GET: u32 = 2147483686;
pub const VTAG_PF2_BASE_GET: u32 = 2147483687;
pub const VTAG_SPEVEN_BASE_GET: u32 = 2147483688;
pub const VTAG_SPODD_BASE_GET: u32 = 2147483689;
pub const VTAG_PF1_BASE_SET: u32 = 2147483690;
pub const VTAG_PF2_BASE_SET: u32 = 2147483691;
pub const VTAG_SPEVEN_BASE_SET: u32 = 2147483692;
pub const VTAG_SPODD_BASE_SET: u32 = 2147483693;
pub const VTAG_BORDERSPRITE_GET: u32 = 2147483694;
pub const VTAG_BORDERSPRITE_SET: u32 = 2147483695;
pub const VTAG_BORDERSPRITE_CLR: u32 = 2147483696;
pub const VTAG_SPRITERESN_SET: u32 = 2147483697;
pub const VTAG_SPRITERESN_GET: u32 = 2147483698;
pub const VTAG_PF1_TO_SPRITEPRI_SET: u32 = 2147483699;
pub const VTAG_PF1_TO_SPRITEPRI_GET: u32 = 2147483700;
pub const VTAG_PF2_TO_SPRITEPRI_SET: u32 = 2147483701;
pub const VTAG_PF2_TO_SPRITEPRI_GET: u32 = 2147483702;
pub const VTAG_IMMEDIATE: u32 = 2147483703;
pub const VTAG_FULLPALETTE_SET: u32 = 2147483704;
pub const VTAG_FULLPALETTE_GET: u32 = 2147483705;
pub const VTAG_FULLPALETTE_CLR: u32 = 2147483706;
pub const VTAG_DEFSPRITERESN_SET: u32 = 2147483707;
pub const VTAG_DEFSPRITERESN_GET: u32 = 2147483708;
pub const VC_IntermediateCLUpdate: u32 = 2147483776;
pub const VC_IntermediateCLUpdate_Query: u32 = 2147483777;
pub const VC_NoColorPaletteLoad: u32 = 2147483778;
pub const VC_NoColorPaletteLoad_Query: u32 = 2147483779;
pub const VC_DUALPF_Disable: u32 = 2147483780;
pub const VC_DUALPF_Disable_Query: u32 = 2147483781;
pub const ADKB_SETCLR: u32 = 15;
pub const ADKB_PRECOMP1: u32 = 14;
pub const ADKB_PRECOMP0: u32 = 13;
pub const ADKB_MFMPREC: u32 = 12;
pub const ADKB_UARTBRK: u32 = 11;
pub const ADKB_WORDSYNC: u32 = 10;
pub const ADKB_MSBSYNC: u32 = 9;
pub const ADKB_FAST: u32 = 8;
pub const ADKB_USE3PN: u32 = 7;
pub const ADKB_USE2P3: u32 = 6;
pub const ADKB_USE1P2: u32 = 5;
pub const ADKB_USE0P1: u32 = 4;
pub const ADKB_USE3VN: u32 = 3;
pub const ADKB_USE2V3: u32 = 2;
pub const ADKB_USE1V2: u32 = 1;
pub const ADKB_USE0V1: u32 = 0;
pub const ADKF_SETCLR: u32 = 32768;
pub const ADKF_PRECOMP1: u32 = 16384;
pub const ADKF_PRECOMP0: u32 = 8192;
pub const ADKF_MFMPREC: u32 = 4096;
pub const ADKF_UARTBRK: u32 = 2048;
pub const ADKF_WORDSYNC: u32 = 1024;
pub const ADKF_MSBSYNC: u32 = 512;
pub const ADKF_FAST: u32 = 256;
pub const ADKF_USE3PN: u32 = 128;
pub const ADKF_USE2P3: u32 = 64;
pub const ADKF_USE1P2: u32 = 32;
pub const ADKF_USE0P1: u32 = 16;
pub const ADKF_USE3VN: u32 = 8;
pub const ADKF_USE2V3: u32 = 4;
pub const ADKF_USE1V2: u32 = 2;
pub const ADKF_USE0V1: u32 = 1;
pub const ADKF_PRE000NS: u32 = 0;
pub const ADKF_PRE140NS: u32 = 8192;
pub const ADKF_PRE280NS: u32 = 16384;
pub const ADKF_PRE560NS: u32 = 24576;
pub const HSIZEBITS: u32 = 6;
pub const VSIZEBITS: u32 = 10;
pub const HSIZEMASK: u32 = 63;
pub const VSIZEMASK: u32 = 1023;
pub const MINBYTESPERROW: u32 = 128;
pub const MAXBYTESPERROW: u32 = 4096;
pub const ABC: u32 = 128;
pub const ABNC: u32 = 64;
pub const ANBC: u32 = 32;
pub const ANBNC: u32 = 16;
pub const NABC: u32 = 8;
pub const NABNC: u32 = 4;
pub const NANBC: u32 = 2;
pub const NANBNC: u32 = 1;
pub const A_OR_B: u32 = 252;
pub const A_OR_C: u32 = 250;
pub const A_XOR_C: u32 = 90;
pub const A_TO_D: u32 = 240;
pub const BC0B_DEST: u32 = 8;
pub const BC0B_SRCC: u32 = 9;
pub const BC0B_SRCB: u32 = 10;
pub const BC0B_SRCA: u32 = 11;
pub const BC0F_DEST: u32 = 256;
pub const BC0F_SRCC: u32 = 512;
pub const BC0F_SRCB: u32 = 1024;
pub const BC0F_SRCA: u32 = 2048;
pub const BC1F_DESC: u32 = 2;
pub const DEST: u32 = 256;
pub const SRCC: u32 = 512;
pub const SRCB: u32 = 1024;
pub const SRCA: u32 = 2048;
pub const ASHIFTSHIFT: u32 = 12;
pub const BSHIFTSHIFT: u32 = 12;
pub const LINEMODE: u32 = 1;
pub const FILL_OR: u32 = 8;
pub const FILL_XOR: u32 = 16;
pub const FILL_CARRYIN: u32 = 4;
pub const ONEDOT: u32 = 2;
pub const OVFLAG: u32 = 32;
pub const SIGNFLAG: u32 = 64;
pub const BLITREVERSE: u32 = 2;
pub const SUD: u32 = 16;
pub const SUL: u32 = 8;
pub const AUL: u32 = 4;
pub const OCTANT8: u32 = 24;
pub const OCTANT7: u32 = 4;
pub const OCTANT6: u32 = 12;
pub const OCTANT5: u32 = 28;
pub const OCTANT4: u32 = 20;
pub const OCTANT3: u32 = 8;
pub const OCTANT2: u32 = 0;
pub const OCTANT1: u32 = 16;
pub const CLEANUP: u32 = 64;
pub const CLEANME: u32 = 64;
pub const CIAICRB_TA: u32 = 0;
pub const CIAICRB_TB: u32 = 1;
pub const CIAICRB_ALRM: u32 = 2;
pub const CIAICRB_SP: u32 = 3;
pub const CIAICRB_FLG: u32 = 4;
pub const CIAICRB_IR: u32 = 7;
pub const CIAICRB_SETCLR: u32 = 7;
pub const CIACRAB_START: u32 = 0;
pub const CIACRAB_PBON: u32 = 1;
pub const CIACRAB_OUTMODE: u32 = 2;
pub const CIACRAB_RUNMODE: u32 = 3;
pub const CIACRAB_LOAD: u32 = 4;
pub const CIACRAB_INMODE: u32 = 5;
pub const CIACRAB_SPMODE: u32 = 6;
pub const CIACRAB_TODIN: u32 = 7;
pub const CIACRBB_START: u32 = 0;
pub const CIACRBB_PBON: u32 = 1;
pub const CIACRBB_OUTMODE: u32 = 2;
pub const CIACRBB_RUNMODE: u32 = 3;
pub const CIACRBB_LOAD: u32 = 4;
pub const CIACRBB_INMODE0: u32 = 5;
pub const CIACRBB_INMODE1: u32 = 6;
pub const CIACRBB_ALARM: u32 = 7;
pub const CIAICRF_TA: u32 = 1;
pub const CIAICRF_TB: u32 = 2;
pub const CIAICRF_ALRM: u32 = 4;
pub const CIAICRF_SP: u32 = 8;
pub const CIAICRF_FLG: u32 = 16;
pub const CIAICRF_IR: u32 = 128;
pub const CIAICRF_SETCLR: u32 = 128;
pub const CIACRAF_START: u32 = 1;
pub const CIACRAF_PBON: u32 = 2;
pub const CIACRAF_OUTMODE: u32 = 4;
pub const CIACRAF_RUNMODE: u32 = 8;
pub const CIACRAF_LOAD: u32 = 16;
pub const CIACRAF_INMODE: u32 = 32;
pub const CIACRAF_SPMODE: u32 = 64;
pub const CIACRAF_TODIN: u32 = 128;
pub const CIACRBF_START: u32 = 1;
pub const CIACRBF_PBON: u32 = 2;
pub const CIACRBF_OUTMODE: u32 = 4;
pub const CIACRBF_RUNMODE: u32 = 8;
pub const CIACRBF_LOAD: u32 = 16;
pub const CIACRBF_INMODE0: u32 = 32;
pub const CIACRBF_INMODE1: u32 = 64;
pub const CIACRBF_ALARM: u32 = 128;
pub const CIACRBF_IN_PHI2: u32 = 0;
pub const CIACRBF_IN_CNT: u32 = 32;
pub const CIACRBF_IN_TA: u32 = 64;
pub const CIACRBF_IN_CNT_TA: u32 = 96;
pub const CIAB_GAMEPORT1: u32 = 7;
pub const CIAB_GAMEPORT0: u32 = 6;
pub const CIAB_DSKRDY: u32 = 5;
pub const CIAB_DSKTRACK0: u32 = 4;
pub const CIAB_DSKPROT: u32 = 3;
pub const CIAB_DSKCHANGE: u32 = 2;
pub const CIAB_LED: u32 = 1;
pub const CIAB_OVERLAY: u32 = 0;
pub const CIAB_COMDTR: u32 = 7;
pub const CIAB_COMRTS: u32 = 6;
pub const CIAB_COMCD: u32 = 5;
pub const CIAB_COMCTS: u32 = 4;
pub const CIAB_COMDSR: u32 = 3;
pub const CIAB_PRTRSEL: u32 = 2;
pub const CIAB_PRTRPOUT: u32 = 1;
pub const CIAB_PRTRBUSY: u32 = 0;
pub const CIAB_DSKMOTOR: u32 = 7;
pub const CIAB_DSKSEL3: u32 = 6;
pub const CIAB_DSKSEL2: u32 = 5;
pub const CIAB_DSKSEL1: u32 = 4;
pub const CIAB_DSKSEL0: u32 = 3;
pub const CIAB_DSKSIDE: u32 = 2;
pub const CIAB_DSKDIREC: u32 = 1;
pub const CIAB_DSKSTEP: u32 = 0;
pub const CIAF_GAMEPORT1: u32 = 128;
pub const CIAF_GAMEPORT0: u32 = 64;
pub const CIAF_DSKRDY: u32 = 32;
pub const CIAF_DSKTRACK0: u32 = 16;
pub const CIAF_DSKPROT: u32 = 8;
pub const CIAF_DSKCHANGE: u32 = 4;
pub const CIAF_LED: u32 = 2;
pub const CIAF_OVERLAY: u32 = 1;
pub const CIAF_COMDTR: u32 = 128;
pub const CIAF_COMRTS: u32 = 64;
pub const CIAF_COMCD: u32 = 32;
pub const CIAF_COMCTS: u32 = 16;
pub const CIAF_COMDSR: u32 = 8;
pub const CIAF_PRTRSEL: u32 = 4;
pub const CIAF_PRTRPOUT: u32 = 2;
pub const CIAF_PRTRBUSY: u32 = 1;
pub const CIAF_DSKMOTOR: u32 = 128;
pub const CIAF_DSKSEL3: u32 = 64;
pub const CIAF_DSKSEL2: u32 = 32;
pub const CIAF_DSKSEL1: u32 = 16;
pub const CIAF_DSKSEL0: u32 = 8;
pub const CIAF_DSKSIDE: u32 = 4;
pub const CIAF_DSKDIREC: u32 = 2;
pub const CIAF_DSKSTEP: u32 = 1;
pub const INTB_SETCLR: u32 = 15;
pub const INTB_INTEN: u32 = 14;
pub const INTB_EXTER: u32 = 13;
pub const INTB_DSKSYNC: u32 = 12;
pub const INTB_RBF: u32 = 11;
pub const INTB_AUD3: u32 = 10;
pub const INTB_AUD2: u32 = 9;
pub const INTB_AUD1: u32 = 8;
pub const INTB_AUD0: u32 = 7;
pub const INTB_BLIT: u32 = 6;
pub const INTB_VERTB: u32 = 5;
pub const INTB_COPER: u32 = 4;
pub const INTB_PORTS: u32 = 3;
pub const INTB_SOFTINT: u32 = 2;
pub const INTB_DSKBLK: u32 = 1;
pub const INTB_TBE: u32 = 0;
pub const INTF_SETCLR: u32 = 32768;
pub const INTF_INTEN: u32 = 16384;
pub const INTF_EXTER: u32 = 8192;
pub const INTF_DSKSYNC: u32 = 4096;
pub const INTF_RBF: u32 = 2048;
pub const INTF_AUD3: u32 = 1024;
pub const INTF_AUD2: u32 = 512;
pub const INTF_AUD1: u32 = 256;
pub const INTF_AUD0: u32 = 128;
pub const INTF_BLIT: u32 = 64;
pub const INTF_VERTB: u32 = 32;
pub const INTF_COPER: u32 = 16;
pub const INTF_PORTS: u32 = 8;
pub const INTF_SOFTINT: u32 = 4;
pub const INTF_DSKBLK: u32 = 2;
pub const INTF_TBE: u32 = 1;
pub const DLST_END: u32 = 0;
pub const DLST_LINE: u32 = 1;
pub const DLST_RECT: u32 = 2;
pub const DLST_FILL: u32 = 3;
pub const DLST_ELLIPSE: u32 = 4;
pub const DLST_CIRCLE: u32 = 5;
pub const DLST_LINEPAT: u32 = 6;
pub const DLST_FILLPAT: u32 = 7;
pub const DLST_AMOVE: u32 = 8;
pub const DLST_ADRAW: u32 = 9;
pub const DLST_AFILL: u32 = 10;
pub const DLST_BEVELBOX: u32 = 11;
pub const DLST_ARC: u32 = 12;
pub const DLST_START: u32 = 13;
pub const DLST_BOUNDS: u32 = 13;
pub const DLST_LINESIZE: u32 = 14;
pub const GLYPH_NONE: u32 = 0;
pub const GLYPH_DOWNARROW: u32 = 1;
pub const GLYPH_UPARROW: u32 = 2;
pub const GLYPH_LEFTARROW: u32 = 3;
pub const GLYPH_RIGHTARROW: u32 = 4;
pub const GLYPH_DROPDOWN: u32 = 5;
pub const GLYPH_POPUP: u32 = 6;
pub const GLYPH_CHECKMARK: u32 = 7;
pub const GLYPH_POPFONT: u32 = 8;
pub const GLYPH_POPFILE: u32 = 9;
pub const GLYPH_POPDRAWER: u32 = 10;
pub const GLYPH_POPSCREENMODE: u32 = 11;
pub const GLYPH_POPTIME: u32 = 12;
pub const GLYPH_RADIOBUTTON: u32 = 18;
pub const GLYPH_RETURNARROW: u32 = 20;
pub const GLYPH_BDOWNARROW: u32 = 21;
pub const GLYPH_BUPARROW: u32 = 22;
pub const GLYPH_BLEFTARROW: u32 = 23;
pub const GLYPH_BRIGHTARROW: u32 = 24;
pub const GLYPH_DROPDOWNMENU: u32 = 25;
pub const GLYPH_CYCLE: u32 = 26;
pub const GLYPH_POPDATE: u32 = 27;
pub const GLYPH_POPCOLOR: u32 = 28;
pub const GLYPH_POPCOLOUR: u32 = 28;
pub const GLYPH_SHIFTKEY: u32 = 32;
pub const LJ_LEFT: u32 = 0;
pub const LJ_CENTRE: u32 = 1;
pub const LJ_RIGHT: u32 = 2;
pub const LJ_CENTER: u32 = 1;
pub const LABEL_LEFT: u32 = 0;
pub const LABEL_CENTRE: u32 = 1;
pub const LABEL_CENTER: u32 = 1;
pub const LABEL_RIGHT: u32 = 2;
pub const LVALIGN_BOTTOM: u32 = 0;
pub const LVALIGN_BASELINE: u32 = 1;
pub const IMAGE_CHUNKY: u32 = 0;
pub const IMAGE_IMAGE: u32 = 1;
pub const IMAGE_DRAWLIST: u32 = 2;
pub const ICM_Dummy: u32 = 1025;
pub const ICM_SETLOOP: u32 = 1026;
pub const ICM_CLEARLOOP: u32 = 1027;
pub const ICM_CHECKLOOP: u32 = 1028;
pub const ICTARGET_IDCMP: i32 = -1;
pub const INTUITION_INTUITIONBASE_H: u32 = 1;
pub const DMODECOUNT: u32 = 2;
pub const HIRESPICK: u32 = 0;
pub const LOWRESPICK: u32 = 1;
pub const EVENTMAX: u32 = 10;
pub const RESCOUNT: u32 = 2;
pub const HIRESGADGET: u32 = 0;
pub const LOWRESGADGET: u32 = 1;
pub const GADGETCOUNT: u32 = 8;
pub const UPFRONTGADGET: u32 = 0;
pub const DOWNBACKGADGET: u32 = 1;
pub const SIZEGADGET: u32 = 2;
pub const CLOSEGADGET: u32 = 3;
pub const DRAGGADGET: u32 = 4;
pub const SUPFRONTGADGET: u32 = 5;
pub const SDOWNBACKGADGET: u32 = 6;
pub const SDRAGGADGET: u32 = 7;
pub const POINTERXRESN_DEFAULT: u32 = 0;
pub const POINTERXRESN_140NS: u32 = 1;
pub const POINTERXRESN_70NS: u32 = 2;
pub const POINTERXRESN_35NS: u32 = 3;
pub const POINTERXRESN_SCREENRES: u32 = 4;
pub const POINTERXRESN_LORES: u32 = 5;
pub const POINTERXRESN_HIRES: u32 = 6;
pub const POINTERYRESN_DEFAULT: u32 = 0;
pub const POINTERYRESN_HIGH: u32 = 2;
pub const POINTERYRESN_HIGHASPECT: u32 = 3;
pub const POINTERYRESN_SCREENRES: u32 = 4;
pub const POINTERYRESN_SCREENRESASPECT: u32 = 5;
pub const POINTERTYPE_NORMAL: u32 = 0;
pub const POINTERTYPE_BUSY: u32 = 1;
pub const POINTERTYPE_ALIAS: u32 = 2;
pub const POINTERTYPE_CELL: u32 = 3;
pub const POINTERTYPE_COLUMNRESIZE: u32 = 4;
pub const POINTERTYPE_CONTEXTMENU: u32 = 5;
pub const POINTERTYPE_COPY: u32 = 6;
pub const POINTERTYPE_CROSS: u32 = 7;
pub const POINTERTYPE_DRAGANDDROP: u32 = 8;
pub const POINTERTYPE_EASTRESIZE: u32 = 9;
pub const POINTERTYPE_EASTWESTRESIZE: u32 = 10;
pub const POINTERTYPE_HAND: u32 = 11;
pub const POINTERTYPE_HELP: u32 = 12;
pub const POINTERTYPE_LINK: u32 = 13;
pub const POINTERTYPE_MENU: u32 = 14;
pub const POINTERTYPE_NODROP: u32 = 15;
pub const POINTERTYPE_NONE: u32 = 16;
pub const POINTERTYPE_NORTHEASTRESIZE: u32 = 17;
pub const POINTERTYPE_NORTHEASTSOUTHWESTRESIZE: u32 = 18;
pub const POINTERTYPE_NORTHRESIZE: u32 = 19;
pub const POINTERTYPE_NORTHSOUTHRESIZE: u32 = 20;
pub const POINTERTYPE_NORTHWESTRESIZE: u32 = 21;
pub const POINTERTYPE_NORTHWESTSOUTHEASTRESIZE: u32 = 22;
pub const POINTERTYPE_NOTALLOWED: u32 = 23;
pub const POINTERTYPE_PROGRESS: u32 = 24;
pub const POINTERTYPE_ROWRESIZE: u32 = 25;
pub const POINTERTYPE_SCROLLALL: u32 = 26;
pub const POINTERTYPE_SOUTHEASTRESIZE: u32 = 27;
pub const POINTERTYPE_SOUTHRESIZE: u32 = 28;
pub const POINTERTYPE_SOUTHWESTRESIZE: u32 = 29;
pub const POINTERTYPE_TEXT: u32 = 30;
pub const POINTERTYPE_VERTICALTEXT: u32 = 31;
pub const POINTERTYPE_WESTRESIZE: u32 = 32;
pub const POINTERTYPE_ZOOMIN: u32 = 33;
pub const POINTERTYPE_ZOOMOUT: u32 = 34;
pub const POINTERTYPE_PEN: u32 = 35;
pub const POINTERTYPE_ROTATE: u32 = 36;
pub const POINTERTYPE_RUBBER: u32 = 37;
pub const POINTERTYPE_SELECT: u32 = 38;
pub const POINTERTYPE_SMUDGE: u32 = 39;
pub const POINTERTYPE_COUNT: u32 = 40;
pub const INTUITION_SGHOOKS_H: u32 = 1;
pub const EO_NOOP: u32 = 1;
pub const EO_DELBACKWARD: u32 = 2;
pub const EO_DELFORWARD: u32 = 3;
pub const EO_MOVECURSOR: u32 = 4;
pub const EO_ENTER: u32 = 5;
pub const EO_RESET: u32 = 6;
pub const EO_REPLACECHAR: u32 = 7;
pub const EO_INSERTCHAR: u32 = 8;
pub const EO_BADFORMAT: u32 = 9;
pub const EO_BIGCHANGE: u32 = 10;
pub const EO_UNDO: u32 = 11;
pub const EO_CLEAR: u32 = 12;
pub const EO_SPECIAL: u32 = 13;
pub const SGM_REPLACE: u32 = 1;
pub const SGM_FIXEDFIELD: u32 = 2;
pub const SGM_NOFILTER: u32 = 4;
pub const SGM_EXITHELP: u32 = 128;
pub const SGM_NOCHANGE: u32 = 8;
pub const SGM_NOWORKB: u32 = 16;
pub const SGM_CONTROL: u32 = 32;
pub const SGM_LONGINT: u32 = 64;
pub const SGA_USE: u32 = 1;
pub const SGA_END: u32 = 2;
pub const SGA_BEEP: u32 = 4;
pub const SGA_REUSE: u32 = 8;
pub const SGA_REDISPLAY: u32 = 16;
pub const SGA_NEXTACTIVE: u32 = 32;
pub const SGA_PREVACTIVE: u32 = 64;
pub const SGH_KEY: u32 = 1;
pub const SGH_CLICK: u32 = 2;
pub const APSH_TOOL_ID: u32 = 11000;
pub const StartupMsgID: u32 = 11001;
pub const LoginToolID: u32 = 11002;
pub const LogoutToolID: u32 = 11003;
pub const ShutdownMsgID: u32 = 11004;
pub const ActivateToolID: u32 = 11005;
pub const DeactivateToolID: u32 = 11006;
pub const ActiveToolID: u32 = 11007;
pub const InactiveToolID: u32 = 11008;
pub const ToolStatusID: u32 = 11009;
pub const ToolCmdID: u32 = 11010;
pub const ToolCmdReplyID: u32 = 11011;
pub const ShutdownToolID: u32 = 11012;
pub const HTF_LOAD_INDEX: u32 = 1;
pub const HTF_LOAD_ALL: u32 = 2;
pub const HTF_CACHE_NODE: u32 = 4;
pub const HTF_CACHE_DB: u32 = 8;
pub const HTF_UNIQUE: u32 = 32768;
pub const HTF_NOACTIVATE: u32 = 65536;
pub const HTFC_SYSGADS: u32 = 2147483648;
pub const HTH_OPEN: u32 = 0;
pub const HTH_CLOSE: u32 = 1;
pub const HTERR_NOT_ENOUGH_MEMORY: u32 = 100;
pub const HTERR_CANT_OPEN_DATABASE: u32 = 101;
pub const HTERR_CANT_FIND_NODE: u32 = 102;
pub const HTERR_CANT_OPEN_NODE: u32 = 103;
pub const HTERR_CANT_OPEN_WINDOW: u32 = 104;
pub const HTERR_INVALID_COMMAND: u32 = 105;
pub const HTERR_CANT_COMPLETE: u32 = 106;
pub const HTERR_PORT_CLOSED: u32 = 107;
pub const HTERR_CANT_CREATE_PORT: u32 = 108;
pub const HTERR_KEYWORD_NOT_FOUND: u32 = 113;
pub const XR_GENERIC: u32 = 0;
pub const XR_FUNCTION: u32 = 1;
pub const XR_COMMAND: u32 = 2;
pub const XR_INCLUDE: u32 = 3;
pub const XR_MACRO: u32 = 4;
pub const XR_STRUCT: u32 = 5;
pub const XR_FIELD: u32 = 6;
pub const XR_TYPEDEF: u32 = 7;
pub const XR_DEFINE: u32 = 8;
pub const HM_FINDNODE: u32 = 1;
pub const HM_OPENNODE: u32 = 2;
pub const HM_CLOSENODE: u32 = 3;
pub const HM_EXPUNGE: u32 = 10;
pub const HTNF_KEEP: u32 = 1;
pub const HTNF_RESERVED1: u32 = 2;
pub const HTNF_RESERVED2: u32 = 4;
pub const HTNF_ASCII: u32 = 8;
pub const HTNF_RESERVED3: u32 = 16;
pub const HTNF_CLEAN: u32 = 32;
pub const HTNF_DONE: u32 = 64;
pub const AslName: &[u8; 12] = b"asl.library\0";
pub const ASL_FileRequest: u32 = 0;
pub const ASL_FontRequest: u32 = 1;
pub const ASL_ScreenModeRequest: u32 = 2;
pub const FRB_FILTERFUNC: u32 = 7;
pub const FRB_INTUIFUNC: u32 = 6;
pub const FRB_DOSAVEMODE: u32 = 5;
pub const FRB_PRIVATEIDCMP: u32 = 4;
pub const FRB_DOMULTISELECT: u32 = 3;
pub const FRB_DOPATTERNS: u32 = 0;
pub const FRF_FILTERFUNC: u32 = 128;
pub const FRF_INTUIFUNC: u32 = 64;
pub const FRF_DOSAVEMODE: u32 = 32;
pub const FRF_PRIVATEIDCMP: u32 = 16;
pub const FRF_DOMULTISELECT: u32 = 8;
pub const FRF_DOPATTERNS: u32 = 1;
pub const FRB_DRAWERSONLY: u32 = 0;
pub const FRB_FILTERDRAWERS: u32 = 1;
pub const FRB_REJECTICONS: u32 = 2;
pub const FRF_DRAWERSONLY: u32 = 1;
pub const FRF_FILTERDRAWERS: u32 = 2;
pub const FRF_REJECTICONS: u32 = 4;
pub const ASLFRSORTBY_Name: u32 = 0;
pub const ASLFRSORTBY_Date: u32 = 1;
pub const ASLFRSORTBY_Size: u32 = 2;
pub const ASLFRSORTDRAWERS_First: u32 = 0;
pub const ASLFRSORTDRAWERS_Mix: u32 = 1;
pub const ASLFRSORTDRAWERS_Last: u32 = 2;
pub const ASLFRSORTORDER_Ascend: u32 = 0;
pub const ASLFRSORTORDER_Descend: u32 = 1;
pub const FOB_DOFRONTPEN: u32 = 0;
pub const FOB_DOBACKPEN: u32 = 1;
pub const FOB_DOSTYLE: u32 = 2;
pub const FOB_DODRAWMODE: u32 = 3;
pub const FOB_FIXEDWIDTHONLY: u32 = 4;
pub const FOB_PRIVATEIDCMP: u32 = 5;
pub const FOB_INTUIFUNC: u32 = 6;
pub const FOB_FILTERFUNC: u32 = 7;
pub const FOF_DOFRONTPEN: u32 = 1;
pub const FOF_DOBACKPEN: u32 = 2;
pub const FOF_DOSTYLE: u32 = 4;
pub const FOF_DODRAWMODE: u32 = 8;
pub const FOF_FIXEDWIDTHONLY: u32 = 16;
pub const FOF_PRIVATEIDCMP: u32 = 32;
pub const FOF_INTUIFUNC: u32 = 64;
pub const FOF_FILTERFUNC: u32 = 128;
pub const FO_SPECIALMODE_NONE: u32 = 0;
pub const FO_SPECIALMODE_OUTLINE: u32 = 1;
pub const FO_SPECIALMODE_SHADOW: u32 = 2;
pub const ASL_SEMAPHORE_NAME: &[u8; 12] = b"asl.library\0";
pub const ASLPOS_DefaultPosition: u32 = 0;
pub const ASLPOS_CenterWindow: u32 = 1;
pub const ASLPOS_CenterScreen: u32 = 2;
pub const ASLPOS_WindowPosition: u32 = 3;
pub const ASLPOS_ScreenPosition: u32 = 4;
pub const ASLPOS_CenterMouse: u32 = 5;
pub const ASLPOS_MASK: u32 = 15;
pub const ASLSIZE_DefaultSize: u32 = 0;
pub const ASLSIZE_RelativeSize: u32 = 16;
pub const ASLSIZE_MASK: u32 = 48;
pub const ASLOPTION_ASLOverrides: u32 = 64;
pub const FILB_DOWILDFUNC: u32 = 7;
pub const FILB_DOMSGFUNC: u32 = 6;
pub const FILB_SAVE: u32 = 5;
pub const FILB_NEWIDCMP: u32 = 4;
pub const FILB_MULTISELECT: u32 = 3;
pub const FILB_PATGAD: u32 = 0;
pub const FILF_DOWILDFUNC: u32 = 128;
pub const FILF_DOMSGFUNC: u32 = 64;
pub const FILF_SAVE: u32 = 32;
pub const FILF_NEWIDCMP: u32 = 16;
pub const FILF_MULTISELECT: u32 = 8;
pub const FILF_PATGAD: u32 = 1;
pub const FIL1B_NOFILES: u32 = 0;
pub const FIL1B_MATCHDIRS: u32 = 1;
pub const FIL1F_NOFILES: u32 = 1;
pub const FIL1F_MATCHDIRS: u32 = 2;
pub const FONB_FRONTCOLOR: u32 = 0;
pub const FONB_BACKCOLOR: u32 = 1;
pub const FONB_STYLES: u32 = 2;
pub const FONB_DRAWMODE: u32 = 3;
pub const FONB_FIXEDWIDTH: u32 = 4;
pub const FONB_NEWIDCMP: u32 = 5;
pub const FONB_DOMSGFUNC: u32 = 6;
pub const FONB_DOWILDFUNC: u32 = 7;
pub const FONF_FRONTCOLOR: u32 = 1;
pub const FONF_BACKCOLOR: u32 = 2;
pub const FONF_STYLES: u32 = 4;
pub const FONF_DRAWMODE: u32 = 8;
pub const FONF_FIXEDWIDTH: u32 = 16;
pub const FONF_NEWIDCMP: u32 = 32;
pub const FONF_DOMSGFUNC: u32 = 64;
pub const FONF_DOWILDFUNC: u32 = 128;
pub const NB_VERSION: u32 = 5;
pub const CBD_NAMELEN: u32 = 24;
pub const CBD_TITLELEN: u32 = 40;
pub const CBD_DESCRLEN: u32 = 40;
pub const NBU_DUPLICATE: u32 = 0;
pub const NBU_UNIQUE: u32 = 1;
pub const NBU_NOTIFY: u32 = 2;
pub const COF_SHOW_HIDE: u32 = 4;
pub const CX_INVALID: u32 = 0;
pub const CX_FILTER: u32 = 1;
pub const CX_TYPEFILTER: u32 = 2;
pub const CX_SEND: u32 = 3;
pub const CX_SIGNAL: u32 = 4;
pub const CX_TRANSLATE: u32 = 5;
pub const CX_BROKER: u32 = 6;
pub const CX_DEBUG: u32 = 7;
pub const CX_CUSTOM: u32 = 8;
pub const CX_ZERO: u32 = 9;
pub const CXM_IEVENT: u32 = 32;
pub const CXM_COMMAND: u32 = 64;
pub const CXCMD_DISABLE: u32 = 15;
pub const CXCMD_ENABLE: u32 = 17;
pub const CXCMD_APPEAR: u32 = 19;
pub const CXCMD_DISAPPEAR: u32 = 21;
pub const CXCMD_KILL: u32 = 23;
pub const CXCMD_LIST_CHG: u32 = 27;
pub const CXCMD_UNIQUE: u32 = 25;
pub const IX_VERSION: u32 = 2;
pub const IXSYM_SHIFT: u32 = 1;
pub const IXSYM_CAPS: u32 = 2;
pub const IXSYM_ALT: u32 = 4;
pub const IXSYM_SHIFTMASK: u32 = 3;
pub const IXSYM_CAPSMASK: u32 = 7;
pub const IXSYM_ALTMASK: u32 = 48;
pub const IX_NORMALQUALS: u32 = 32767;
pub const CBERR_OK: u32 = 0;
pub const CBERR_SYSERR: u32 = 1;
pub const CBERR_DUP: u32 = 2;
pub const CBERR_VERSION: u32 = 3;
pub const COERR_ISNULL: u32 = 1;
pub const COERR_NULLATTACH: u32 = 2;
pub const COERR_BADFILTER: u32 = 4;
pub const COERR_BADTYPE: u32 = 8;
pub const E_SLOTSIZE: u32 = 65536;
pub const E_SLOTMASK: u32 = 65535;
pub const E_SLOTSHIFT: u32 = 16;
pub const E_EXPANSIONBASE: u32 = 15204352;
pub const EZ3_EXPANSIONBASE: u32 = 4278190080;
pub const E_EXPANSIONSIZE: u32 = 524288;
pub const E_EXPANSIONSLOTS: u32 = 8;
pub const E_MEMORYBASE: u32 = 2097152;
pub const E_MEMORYSIZE: u32 = 8388608;
pub const E_MEMORYSLOTS: u32 = 128;
pub const EZ3_CONFIGAREA: u32 = 1073741824;
pub const EZ3_CONFIGAREAEND: u32 = 2147483647;
pub const EZ3_SIZEGRANULARITY: u32 = 524288;
pub const ERT_TYPEMASK: u32 = 192;
pub const ERT_TYPEBIT: u32 = 6;
pub const ERT_TYPESIZE: u32 = 2;
pub const ERT_NEWBOARD: u32 = 192;
pub const ERT_ZORROII: u32 = 192;
pub const ERT_ZORROIII: u32 = 128;
pub const ERTB_MEMLIST: u32 = 5;
pub const ERTB_DIAGVALID: u32 = 4;
pub const ERTB_CHAINEDCONFIG: u32 = 3;
pub const ERTF_MEMLIST: u32 = 32;
pub const ERTF_DIAGVALID: u32 = 16;
pub const ERTF_CHAINEDCONFIG: u32 = 8;
pub const ERT_MEMMASK: u32 = 7;
pub const ERT_MEMBIT: u32 = 0;
pub const ERT_MEMSIZE: u32 = 3;
pub const ERFF_MEMSPACE: u32 = 128;
pub const ERFB_MEMSPACE: u32 = 7;
pub const ERFF_NOSHUTUP: u32 = 64;
pub const ERFB_NOSHUTUP: u32 = 6;
pub const ERFF_EXTENDED: u32 = 32;
pub const ERFB_EXTENDED: u32 = 5;
pub const ERFF_ZORRO_III: u32 = 16;
pub const ERFB_ZORRO_III: u32 = 4;
pub const ERT_Z3_SSMASK: u32 = 15;
pub const ERT_Z3_SSBIT: u32 = 0;
pub const ERT_Z3_SSSIZE: u32 = 4;
pub const ECIB_INTENA: u32 = 1;
pub const ECIB_RESET: u32 = 3;
pub const ECIB_INT2PEND: u32 = 4;
pub const ECIB_INT6PEND: u32 = 5;
pub const ECIB_INT7PEND: u32 = 6;
pub const ECIB_INTERRUPTING: u32 = 7;
pub const ECIF_INTENA: u32 = 2;
pub const ECIF_RESET: u32 = 8;
pub const ECIF_INT2PEND: u32 = 16;
pub const ECIF_INT6PEND: u32 = 32;
pub const ECIF_INT7PEND: u32 = 64;
pub const ECIF_INTERRUPTING: u32 = 128;
pub const DAC_BUSWIDTH: u32 = 192;
pub const DAC_NIBBLEWIDE: u32 = 0;
pub const DAC_BYTEWIDE: u32 = 64;
pub const DAC_WORDWIDE: u32 = 128;
pub const DAC_BOOTTIME: u32 = 48;
pub const DAC_NEVER: u32 = 0;
pub const DAC_CONFIGTIME: u32 = 16;
pub const DAC_BINDTIME: u32 = 32;
pub const CDB_SHUTUP: u32 = 0;
pub const CDB_CONFIGME: u32 = 1;
pub const CDB_BADMEMORY: u32 = 2;
pub const CDB_PROCESSED: u32 = 3;
pub const CDF_SHUTUP: u32 = 1;
pub const CDF_CONFIGME: u32 = 2;
pub const CDF_BADMEMORY: u32 = 4;
pub const CDF_PROCESSED: u32 = 8;
pub const EXPANSIONNAME: &[u8; 18] = b"expansion.library\0";
pub const ADNB_STARTPROC: u32 = 0;
pub const ADNF_STARTPROC: u32 = 1;
pub const EE_OK: u32 = 0;
pub const EE_LASTBOARD: u32 = 40;
pub const EE_NOEXPANSION: u32 = 41;
pub const EE_NOMEMORY: u32 = 42;
pub const EE_NOBOARD: u32 = 43;
pub const EE_BADMEM: u32 = 44;
pub const EBB_CLOGGED: u32 = 0;
pub const EBF_CLOGGED: u32 = 1;
pub const EBB_SHORTMEM: u32 = 1;
pub const EBF_SHORTMEM: u32 = 2;
pub const EBB_BADMEM: u32 = 2;
pub const EBF_BADMEM: u32 = 4;
pub const EBB_DOSFLAG: u32 = 3;
pub const EBF_DOSFLAG: u32 = 8;
pub const EBB_KICKBACK33: u32 = 4;
pub const EBF_KICKBACK33: u32 = 16;
pub const EBB_KICKBACK36: u32 = 5;
pub const EBF_KICKBACK36: u32 = 32;
pub const EBB_SILENTSTART: u32 = 6;
pub const EBF_SILENTSTART: u32 = 64;
pub const EBB_START_CC0: u32 = 7;
pub const EBF_START_CC0: u32 = 128;
pub const GENERIC_KIND: u32 = 0;
pub const BUTTON_KIND: u32 = 1;
pub const CHECKBOX_KIND: u32 = 2;
pub const INTEGER_KIND: u32 = 3;
pub const LISTVIEW_KIND: u32 = 4;
pub const MX_KIND: u32 = 5;
pub const NUMBER_KIND: u32 = 6;
pub const CYCLE_KIND: u32 = 7;
pub const PALETTE_KIND: u32 = 8;
pub const SCROLLER_KIND: u32 = 9;
pub const SLIDER_KIND: u32 = 11;
pub const STRING_KIND: u32 = 12;
pub const TEXT_KIND: u32 = 13;
pub const NUM_KINDS: u32 = 14;
pub const ARROWIDCMP: u32 = 4194408;
pub const BUTTONIDCMP: u32 = 64;
pub const CHECKBOXIDCMP: u32 = 64;
pub const INTEGERIDCMP: u32 = 64;
pub const LISTVIEWIDCMP: u32 = 4194424;
pub const MXIDCMP: u32 = 32;
pub const NUMBERIDCMP: u32 = 0;
pub const CYCLEIDCMP: u32 = 64;
pub const PALETTEIDCMP: u32 = 64;
pub const SCROLLERIDCMP: u32 = 112;
pub const SLIDERIDCMP: u32 = 112;
pub const STRINGIDCMP: u32 = 64;
pub const TEXTIDCMP: u32 = 0;
pub const PLACETEXT_LEFT: u32 = 1;
pub const PLACETEXT_RIGHT: u32 = 2;
pub const PLACETEXT_ABOVE: u32 = 4;
pub const PLACETEXT_BELOW: u32 = 8;
pub const PLACETEXT_IN: u32 = 16;
pub const NG_HIGHLABEL: u32 = 32;
pub const NG_GRIDLAYOUT: u32 = 128;
pub const MENU_IMAGE: u32 = 128;
pub const NM_TITLE: u32 = 1;
pub const NM_ITEM: u32 = 2;
pub const NM_SUB: u32 = 3;
pub const IM_ITEM: u32 = 130;
pub const IM_SUB: u32 = 131;
pub const NM_END: u32 = 0;
pub const NM_IGNORE: u32 = 64;
pub const NM_MENUDISABLED: u32 = 1;
pub const NM_ITEMDISABLED: u32 = 16;
pub const NM_COMMANDSTRING: u32 = 4;
pub const NM_FLAGMASK: i32 = -199;
pub const NM_FLAGMASK_V39: i32 = -195;
pub const GTMENU_TRIMMED: u32 = 1;
pub const GTMENU_INVALID: u32 = 2;
pub const GTMENU_NOMEM: u32 = 3;
pub const MX_WIDTH: u32 = 17;
pub const MX_HEIGHT: u32 = 9;
pub const CHECKBOX_WIDTH: u32 = 26;
pub const CHECKBOX_HEIGHT: u32 = 11;
pub const GTJ_LEFT: u32 = 0;
pub const GTJ_RIGHT: u32 = 1;
pub const GTJ_CENTER: u32 = 2;
pub const BBFT_BUTTON: u32 = 1;
pub const BBFT_RIDGE: u32 = 2;
pub const BBFT_ICONDROPBOX: u32 = 3;
pub const BBFT_DISPLAY: u32 = 6;
pub const BBFT_CTXTFRAME: u32 = 7;
pub const INTERWIDTH: u32 = 8;
pub const INTERHEIGHT: u32 = 4;
pub const NWAY_KIND: u32 = 7;
pub const NWAYIDCMP: u32 = 64;
pub const GADTOOLBIT: u32 = 32768;
pub const GADTOOLMASK: i32 = -32769;
pub const LV_DRAW: u32 = 514;
pub const LVCB_OK: u32 = 0;
pub const LVCB_UNKNOWN: u32 = 1;
pub const LVR_NORMAL: u32 = 0;
pub const LVR_SELECTED: u32 = 1;
pub const LVR_NORMALDISABLED: u32 = 2;
pub const LVR_SELECTEDDISABLED: u32 = 8;
pub const DAY_1: u32 = 1;
pub const DAY_2: u32 = 2;
pub const DAY_3: u32 = 3;
pub const DAY_4: u32 = 4;
pub const DAY_5: u32 = 5;
pub const DAY_6: u32 = 6;
pub const DAY_7: u32 = 7;
pub const ABDAY_1: u32 = 8;
pub const ABDAY_2: u32 = 9;
pub const ABDAY_3: u32 = 10;
pub const ABDAY_4: u32 = 11;
pub const ABDAY_5: u32 = 12;
pub const ABDAY_6: u32 = 13;
pub const ABDAY_7: u32 = 14;
pub const MON_1: u32 = 15;
pub const MON_2: u32 = 16;
pub const MON_3: u32 = 17;
pub const MON_4: u32 = 18;
pub const MON_5: u32 = 19;
pub const MON_6: u32 = 20;
pub const MON_7: u32 = 21;
pub const MON_8: u32 = 22;
pub const MON_9: u32 = 23;
pub const MON_10: u32 = 24;
pub const MON_11: u32 = 25;
pub const MON_12: u32 = 26;
pub const ABMON_1: u32 = 27;
pub const ABMON_2: u32 = 28;
pub const ABMON_3: u32 = 29;
pub const ABMON_4: u32 = 30;
pub const ABMON_5: u32 = 31;
pub const ABMON_6: u32 = 32;
pub const ABMON_7: u32 = 33;
pub const ABMON_8: u32 = 34;
pub const ABMON_9: u32 = 35;
pub const ABMON_10: u32 = 36;
pub const ABMON_11: u32 = 37;
pub const ABMON_12: u32 = 38;
pub const YESSTR: u32 = 39;
pub const NOSTR: u32 = 40;
pub const AM_STR: u32 = 41;
pub const PM_STR: u32 = 42;
pub const SOFTHYPHEN: u32 = 43;
pub const HARDHYPHEN: u32 = 44;
pub const OPENQUOTE: u32 = 45;
pub const CLOSEQUOTE: u32 = 46;
pub const YESTERDAYSTR: u32 = 47;
pub const TODAYSTR: u32 = 48;
pub const TOMORROWSTR: u32 = 49;
pub const FUTURESTR: u32 = 50;
pub const ALTDAY_1: u32 = 52;
pub const ALTDAY_2: u32 = 53;
pub const ALTDAY_3: u32 = 54;
pub const ALTDAY_4: u32 = 55;
pub const ALTDAY_5: u32 = 56;
pub const ALTDAY_6: u32 = 57;
pub const ALTDAY_7: u32 = 58;
pub const ALTMON_1: u32 = 59;
pub const ALTMON_2: u32 = 60;
pub const ALTMON_3: u32 = 61;
pub const ALTMON_4: u32 = 62;
pub const ALTMON_5: u32 = 63;
pub const ALTMON_6: u32 = 64;
pub const ALTMON_7: u32 = 65;
pub const ALTMON_8: u32 = 66;
pub const ALTMON_9: u32 = 67;
pub const ALTMON_10: u32 = 68;
pub const ALTMON_11: u32 = 69;
pub const ALTMON_12: u32 = 70;
pub const MAXSTRMSG: u32 = 71;
pub const MS_ISO: u32 = 0;
pub const MS_AMERICAN: u32 = 1;
pub const MS_IMPERIAL: u32 = 2;
pub const MS_BRITISH: u32 = 3;
pub const CT_7SUN: u32 = 0;
pub const CT_7MON: u32 = 1;
pub const CT_7TUE: u32 = 2;
pub const CT_7WED: u32 = 3;
pub const CT_7THU: u32 = 4;
pub const CT_7FRI: u32 = 5;
pub const CT_7SAT: u32 = 6;
pub const SS_NOSPACE: u32 = 0;
pub const SS_SPACE: u32 = 1;
pub const SP_PARENS: u32 = 0;
pub const SP_PREC_ALL: u32 = 1;
pub const SP_SUCC_ALL: u32 = 2;
pub const SP_PREC_CURR: u32 = 3;
pub const SP_SUCC_CURR: u32 = 4;
pub const CSP_PRECEDES: u32 = 0;
pub const CSP_SUCCEEDS: u32 = 1;
pub const SC_ASCII: u32 = 0;
pub const SC_COLLATE1: u32 = 1;
pub const SC_COLLATE2: u32 = 2;
pub const LLKB_LSHIFT: u32 = 16;
pub const LLKB_RSHIFT: u32 = 17;
pub const LLKB_CAPSLOCK: u32 = 18;
pub const LLKB_CONTROL: u32 = 19;
pub const LLKB_LALT: u32 = 20;
pub const LLKB_RALT: u32 = 21;
pub const LLKB_LAMIGA: u32 = 22;
pub const LLKB_RAMIGA: u32 = 23;
pub const LLKF_LSHIFT: u32 = 65536;
pub const LLKF_RSHIFT: u32 = 131072;
pub const LLKF_CAPSLOCK: u32 = 262144;
pub const LLKF_CONTROL: u32 = 524288;
pub const LLKF_LALT: u32 = 1048576;
pub const LLKF_RALT: u32 = 2097152;
pub const LLKF_LAMIGA: u32 = 4194304;
pub const LLKF_RAMIGA: u32 = 8388608;
pub const SJA_TYPE_AUTOSENSE: u32 = 0;
pub const SJA_TYPE_GAMECTLR: u32 = 1;
pub const SJA_TYPE_MOUSE: u32 = 2;
pub const SJA_TYPE_JOYSTK: u32 = 3;
pub const JP_TYPE_NOTAVAIL: u32 = 0;
pub const JP_TYPE_GAMECTLR: u32 = 268435456;
pub const JP_TYPE_MOUSE: u32 = 536870912;
pub const JP_TYPE_JOYSTK: u32 = 805306368;
pub const JP_TYPE_UNKNOWN: u32 = 1073741824;
pub const JP_TYPE_MASK: u32 = 4026531840;
pub const JPB_BUTTON_BLUE: u32 = 23;
pub const JPB_BUTTON_RED: u32 = 22;
pub const JPB_BUTTON_YELLOW: u32 = 21;
pub const JPB_BUTTON_GREEN: u32 = 20;
pub const JPB_BUTTON_FORWARD: u32 = 19;
pub const JPB_BUTTON_REVERSE: u32 = 18;
pub const JPB_BUTTON_PLAY: u32 = 17;
pub const JPF_BUTTON_BLUE: u32 = 8388608;
pub const JPF_BUTTON_RED: u32 = 4194304;
pub const JPF_BUTTON_YELLOW: u32 = 2097152;
pub const JPF_BUTTON_GREEN: u32 = 1048576;
pub const JPF_BUTTON_FORWARD: u32 = 524288;
pub const JPF_BUTTON_REVERSE: u32 = 262144;
pub const JPF_BUTTON_PLAY: u32 = 131072;
pub const JP_BUTTON_MASK: u32 = 16646144;
pub const JPB_JOY_UP: u32 = 3;
pub const JPB_JOY_DOWN: u32 = 2;
pub const JPB_JOY_LEFT: u32 = 1;
pub const JPB_JOY_RIGHT: u32 = 0;
pub const JPF_JOY_UP: u32 = 8;
pub const JPF_JOY_DOWN: u32 = 4;
pub const JPF_JOY_LEFT: u32 = 2;
pub const JPF_JOY_RIGHT: u32 = 1;
pub const JP_DIRECTION_MASK: u32 = 15;
pub const JP_MHORZ_MASK: u32 = 255;
pub const JP_MVERT_MASK: u32 = 65280;
pub const JP_MOUSE_MASK: u32 = 65535;
pub const JPB_BTN1: u32 = 23;
pub const JPF_BTN1: u32 = 8388608;
pub const JPB_BTN2: u32 = 22;
pub const JPF_BTN2: u32 = 4194304;
pub const JPB_BTN3: u32 = 21;
pub const JPF_BTN3: u32 = 2097152;
pub const JPB_BTN4: u32 = 20;
pub const JPF_BTN4: u32 = 1048576;
pub const JPB_BTN5: u32 = 19;
pub const JPF_BTN5: u32 = 524288;
pub const JPB_BTN6: u32 = 18;
pub const JPF_BTN6: u32 = 262144;
pub const JPB_BTN7: u32 = 17;
pub const JPF_BTN7: u32 = 131072;
pub const JPB_UP: u32 = 3;
pub const JPF_UP: u32 = 8;
pub const JPB_DOWN: u32 = 2;
pub const JPF_DOWN: u32 = 4;
pub const JPB_LEFT: u32 = 1;
pub const JPF_LEFT: u32 = 2;
pub const JPB_RIGHT: u32 = 0;
pub const JPF_RIGHT: u32 = 1;
pub const CDReboot_On: u32 = 1;
pub const CDReboot_Off: u32 = 0;
pub const CDReboot_Default: u32 = 2;
pub const RAWKEY_PORT0_BUTTON_BLUE: u32 = 114;
pub const RAWKEY_PORT0_BUTTON_RED: u32 = 120;
pub const RAWKEY_PORT0_BUTTON_YELLOW: u32 = 119;
pub const RAWKEY_PORT0_BUTTON_GREEN: u32 = 118;
pub const RAWKEY_PORT0_BUTTON_FORWARD: u32 = 117;
pub const RAWKEY_PORT0_BUTTON_REVERSE: u32 = 116;
pub const RAWKEY_PORT0_BUTTON_PLAY: u32 = 115;
pub const RAWKEY_PORT0_JOY_UP: u32 = 121;
pub const RAWKEY_PORT0_JOY_DOWN: u32 = 122;
pub const RAWKEY_PORT0_JOY_LEFT: u32 = 124;
pub const RAWKEY_PORT0_JOY_RIGHT: u32 = 123;
pub const RAWKEY_PORT1_BUTTON_BLUE: u32 = 370;
pub const RAWKEY_PORT1_BUTTON_RED: u32 = 376;
pub const RAWKEY_PORT1_BUTTON_YELLOW: u32 = 375;
pub const RAWKEY_PORT1_BUTTON_GREEN: u32 = 374;
pub const RAWKEY_PORT1_BUTTON_FORWARD: u32 = 373;
pub const RAWKEY_PORT1_BUTTON_REVERSE: u32 = 372;
pub const RAWKEY_PORT1_BUTTON_PLAY: u32 = 371;
pub const RAWKEY_PORT1_JOY_UP: u32 = 377;
pub const RAWKEY_PORT1_JOY_DOWN: u32 = 378;
pub const RAWKEY_PORT1_JOY_LEFT: u32 = 380;
pub const RAWKEY_PORT1_JOY_RIGHT: u32 = 379;
pub const RAWKEY_PORT2_BUTTON_BLUE: u32 = 626;
pub const RAWKEY_PORT2_BUTTON_RED: u32 = 632;
pub const RAWKEY_PORT2_BUTTON_YELLOW: u32 = 631;
pub const RAWKEY_PORT2_BUTTON_GREEN: u32 = 630;
pub const RAWKEY_PORT2_BUTTON_FORWARD: u32 = 629;
pub const RAWKEY_PORT2_BUTTON_REVERSE: u32 = 628;
pub const RAWKEY_PORT2_BUTTON_PLAY: u32 = 627;
pub const RAWKEY_PORT2_JOY_UP: u32 = 633;
pub const RAWKEY_PORT2_JOY_DOWN: u32 = 634;
pub const RAWKEY_PORT2_JOY_LEFT: u32 = 636;
pub const RAWKEY_PORT2_JOY_RIGHT: u32 = 635;
pub const RAWKEY_PORT3_BUTTON_BLUE: u32 = 882;
pub const RAWKEY_PORT3_BUTTON_RED: u32 = 888;
pub const RAWKEY_PORT3_BUTTON_YELLOW: u32 = 887;
pub const RAWKEY_PORT3_BUTTON_GREEN: u32 = 886;
pub const RAWKEY_PORT3_BUTTON_FORWARD: u32 = 885;
pub const RAWKEY_PORT3_BUTTON_REVERSE: u32 = 884;
pub const RAWKEY_PORT3_BUTTON_PLAY: u32 = 883;
pub const RAWKEY_PORT3_JOY_UP: u32 = 889;
pub const RAWKEY_PORT3_JOY_DOWN: u32 = 890;
pub const RAWKEY_PORT3_JOY_LEFT: u32 = 892;
pub const RAWKEY_PORT3_JOY_RIGHT: u32 = 891;
pub const LANG_UNKNOWN: u32 = 0;
pub const LANG_AMERICAN: u32 = 1;
pub const LANG_ENGLISH: u32 = 2;
pub const LANG_GERMAN: u32 = 3;
pub const LANG_FRENCH: u32 = 4;
pub const LANG_SPANISH: u32 = 5;
pub const LANG_ITALIAN: u32 = 6;
pub const LANG_PORTUGUESE: u32 = 7;
pub const LANG_DANISH: u32 = 8;
pub const LANG_DUTCH: u32 = 9;
pub const LANG_NORWEGIAN: u32 = 10;
pub const LANG_FINNISH: u32 = 11;
pub const LANG_SWEDISH: u32 = 12;
pub const LANG_JAPANESE: u32 = 13;
pub const LANG_CHINESE: u32 = 14;
pub const LANG_ARABIC: u32 = 15;
pub const LANG_GREEK: u32 = 16;
pub const LANG_HEBREW: u32 = 17;
pub const LANG_KOREAN: u32 = 18;
pub const LIBRARIES_MATHFFP_H: u32 = 1;
pub const MATHIEEERESOURCEF_DBLBAS: u32 = 1;
pub const MATHIEEERESOURCEF_DBLTRANS: u32 = 2;
pub const MATHIEEERESOURCEF_SGLBAS: u32 = 4;
pub const MATHIEEERESOURCEF_SGLTRANS: u32 = 8;
pub const MATHIEEERESOURCEF_EXTBAS: u32 = 16;
pub const MATHIEEERESOURCEF_EXTTRANS: u32 = 32;
pub const NVEB_DELETE: u32 = 0;
pub const NVEB_APPNAME: u32 = 31;
pub const NVEF_DELETE: u32 = 1;
pub const NVEF_APPNAME: u32 = 2147483648;
pub const NVERR_BADNAME: u32 = 1;
pub const NVERR_WRITEPROT: u32 = 2;
pub const NVERR_FAIL: u32 = 3;
pub const NVERR_FATAL: u32 = 4;
pub const TICK_FREQ: u32 = 1200;
pub const CONDUCTF_EXTERNAL: u32 = 1;
pub const CONDUCTF_GOTTICK: u32 = 2;
pub const CONDUCTF_METROSET: u32 = 4;
pub const CONDUCTF_PRIVATE: u32 = 8;
pub const CONDUCTB_EXTERNAL: u32 = 0;
pub const CONDUCTB_GOTTICK: u32 = 1;
pub const CONDUCTB_METROSET: u32 = 2;
pub const CONDUCTB_PRIVATE: u32 = 3;
pub const CONDSTATE_STOPPED: u32 = 0;
pub const CONDSTATE_PAUSED: u32 = 1;
pub const CONDSTATE_LOCATE: u32 = 2;
pub const CONDSTATE_RUNNING: u32 = 3;
pub const CONDSTATE_METRIC: i32 = -1;
pub const CONDSTATE_SHUTTLE: i32 = -2;
pub const CONDSTATE_LOCATE_SET: i32 = -3;
pub const PLAYERF_READY: u32 = 1;
pub const PLAYERF_ALARMSET: u32 = 2;
pub const PLAYERF_QUIET: u32 = 4;
pub const PLAYERF_CONDUCTED: u32 = 8;
pub const PLAYERF_EXTSYNC: u32 = 16;
pub const PLAYERB_READY: u32 = 0;
pub const PLAYERB_ALARMSET: u32 = 1;
pub const PLAYERB_QUIET: u32 = 2;
pub const PLAYERB_CONDUCTED: u32 = 3;
pub const PLAYERB_EXTSYNC: u32 = 4;
pub const PM_TICK: u32 = 0;
pub const PM_STATE: u32 = 1;
pub const PM_POSITION: u32 = 2;
pub const PM_SHUTTLE: u32 = 3;
pub const RT_CONDUCTORS: u32 = 0;
pub const RTE_NOMEMORY: u32 = 801;
pub const RTE_NOCONDUCTOR: u32 = 802;
pub const RTE_NOTIMER: u32 = 803;
pub const RTE_PLAYING: u32 = 804;
pub const RealTime_TickErr_Min: i32 = -705;
pub const RealTime_TickErr_Max: u32 = 705;
pub const TR_NotUsed: i32 = -1;
pub const TR_NoMem: i32 = -2;
pub const TR_MakeBad: i32 = -4;
pub const FONTNAMESIZE: u32 = 128;
pub const FP_WBFONT: u32 = 0;
pub const FP_SYSFONT: u32 = 1;
pub const FP_SCREENFONT: u32 = 2;
pub const IC_CURRENTVERSION: u32 = 2;
pub const ICB_COERCE_COLORS: u32 = 0;
pub const ICB_COERCE_LACE: u32 = 1;
pub const ICB_STRGAD_FILTER: u32 = 2;
pub const ICB_MENUSNAP: u32 = 3;
pub const ICB_MODEPROMOTE: u32 = 4;
pub const ICB_CORRECT_RATIO: u32 = 5;
pub const ICB_OFFSCRNWIN: u32 = 15;
pub const ICB_MORESIZEGADGETS: u32 = 16;
pub const ICB_RATIO_LSB: u32 = 17;
pub const ICB_RATIO_MSB: u32 = 18;
pub const ICB_VERSIONED: u32 = 31;
pub const ICF_COERCE_COLORS: u32 = 1;
pub const ICF_COERCE_LACE: u32 = 2;
pub const ICF_STRGAD_FILTER: u32 = 4;
pub const ICF_MENUSNAP: u32 = 8;
pub const ICF_MODEPROMOTE: u32 = 16;
pub const ICF_CORRECT_RATIO: u32 = 32;
pub const ICF_OFFSCRNWIN: u32 = 32768;
pub const ICF_MORESIZEGADGETS: u32 = 65536;
pub const ICF_RATIO_MASK: u32 = 393216;
pub const ICF_RATIO_9_7: u32 = 0;
pub const ICF_RATIO_9_8: u32 = 131072;
pub const ICF_RATIO_1_1: u32 = 262144;
pub const ICF_RATIO_8_9: u32 = 393216;
pub const ICF_VERSIONED: u32 = 2147483648;
pub const ICF_HF_HOVERGADGETS: u32 = 1;
pub const ICF_HF_REFLECTHOVER: u32 = 2;
pub const OSCAN_MAGIC: u32 = 4275878537;
pub const WBP_NORMAL: u32 = 0;
pub const WBP_BUSY: u32 = 1;
pub const PA_HORIZONTAL: u32 = 0;
pub const PA_VERTICAL: u32 = 1;
pub const PS_BW: u32 = 0;
pub const PS_GREYSCALE: u32 = 1;
pub const PS_COLOR: u32 = 2;
pub const PS_GREY_SCALE2: u32 = 3;
pub const PI_POSITIVE: u32 = 0;
pub const PI_NEGATIVE: u32 = 1;
pub const PCCB_RED: u32 = 1;
pub const PCCB_GREEN: u32 = 2;
pub const PCCB_BLUE: u32 = 3;
pub const PCCF_RED: u32 = 1;
pub const PCCF_GREEN: u32 = 2;
pub const PCCF_BLUE: u32 = 4;
pub const PD_IGNORE: u32 = 0;
pub const PD_BOUNDED: u32 = 1;
pub const PD_ABSOLUTE: u32 = 2;
pub const PD_PIXEL: u32 = 3;
pub const PD_MULTIPLY: u32 = 4;
pub const PD_ORDERED: u32 = 0;
pub const PD_HALFTONE: u32 = 1;
pub const PD_FLOYD: u32 = 2;
pub const PGFB_CENTER_IMAGE: u32 = 0;
pub const PGFB_INTEGER_SCALING: u32 = 1;
pub const PGFB_ANTI_ALIAS: u32 = 2;
pub const PGFF_CENTER_IMAGE: u32 = 1;
pub const PGFF_INTEGER_SCALING: u32 = 2;
pub const PGFF_ANTI_ALIAS: u32 = 4;
pub const DM_POSTSCRIPT: u32 = 0;
pub const DM_PASSTHROUGH: u32 = 1;
pub const PF_USLETTER: u32 = 0;
pub const PF_USLEGAL: u32 = 1;
pub const PF_A4: u32 = 2;
pub const PF_CUSTOM: u32 = 3;
pub const FONT_COURIER: u32 = 0;
pub const FONT_TIMES: u32 = 1;
pub const FONT_HELVETICA: u32 = 2;
pub const FONT_HELV_NARROW: u32 = 3;
pub const FONT_AVANTGARDE: u32 = 4;
pub const FONT_BOOKMAN: u32 = 5;
pub const FONT_NEWCENT: u32 = 6;
pub const FONT_PALATINO: u32 = 7;
pub const FONT_ZAPFCHANCERY: u32 = 8;
pub const PITCH_NORMAL: u32 = 0;
pub const PITCH_COMPRESSED: u32 = 1;
pub const PITCH_EXPANDED: u32 = 2;
pub const ORIENT_PORTRAIT: u32 = 0;
pub const ORIENT_LANDSCAPE: u32 = 1;
pub const TAB_4: u32 = 0;
pub const TAB_8: u32 = 1;
pub const TAB_QUART: u32 = 2;
pub const TAB_HALF: u32 = 3;
pub const TAB_INCH: u32 = 4;
pub const IM_POSITIVE: u32 = 0;
pub const IM_NEGATIVE: u32 = 1;
pub const SHAD_BW: u32 = 0;
pub const SHAD_GREYSCALE: u32 = 1;
pub const SHAD_COLOR: u32 = 2;
pub const DITH_DEFAULT: u32 = 0;
pub const DITH_DOTTY: u32 = 1;
pub const DITH_VERT: u32 = 2;
pub const DITH_HORIZ: u32 = 3;
pub const DITH_DIAG: u32 = 4;
pub const ASP_HORIZ: u32 = 0;
pub const ASP_VERT: u32 = 1;
pub const ST_ASPECT_ASIS: u32 = 0;
pub const ST_ASPECT_WIDE: u32 = 1;
pub const ST_ASPECT_TALL: u32 = 2;
pub const ST_ASPECT_BOTH: u32 = 3;
pub const ST_FITS_WIDE: u32 = 4;
pub const ST_FITS_TALL: u32 = 5;
pub const ST_FITS_BOTH: u32 = 6;
pub const CENT_NONE: u32 = 0;
pub const CENT_HORIZ: u32 = 1;
pub const CENT_VERT: u32 = 2;
pub const CENT_BOTH: u32 = 3;
pub const DRIVERNAMESIZE: u32 = 30;
pub const DEVICENAMESIZE: u32 = 32;
pub const UNITNAMESIZE: u32 = 32;
pub const PP_PARALLEL: u32 = 0;
pub const PP_SERIAL: u32 = 1;
pub const PT_FANFOLD: u32 = 0;
pub const PT_SINGLE: u32 = 1;
pub const PS_US_LETTER: u32 = 0;
pub const PS_US_LEGAL: u32 = 1;
pub const PS_N_TRACTOR: u32 = 2;
pub const PS_W_TRACTOR: u32 = 3;
pub const PS_CUSTOM: u32 = 4;
pub const PS_EURO_A0: u32 = 5;
pub const PS_EURO_A1: u32 = 6;
pub const PS_EURO_A2: u32 = 7;
pub const PS_EURO_A3: u32 = 8;
pub const PS_EURO_A4: u32 = 9;
pub const PS_EURO_A5: u32 = 10;
pub const PS_EURO_A6: u32 = 11;
pub const PS_EURO_A7: u32 = 12;
pub const PS_EURO_A8: u32 = 13;
pub const PP_PICA: u32 = 0;
pub const PP_ELITE: u32 = 1;
pub const PP_FINE: u32 = 2;
pub const PS_SIX_LPI: u32 = 0;
pub const PS_EIGHT_LPI: u32 = 1;
pub const PQ_DRAFT: u32 = 0;
pub const PQ_LETTER: u32 = 1;
pub const SMB_AUTOSCROLL: u32 = 1;
pub const SMF_AUTOSCROLL: u32 = 1;
pub const PARITY_NONE: u32 = 0;
pub const PARITY_EVEN: u32 = 1;
pub const PARITY_ODD: u32 = 2;
pub const PARITY_MARK: u32 = 3;
pub const PARITY_SPACE: u32 = 4;
pub const HSHAKE_XON: u32 = 0;
pub const HSHAKE_RTS: u32 = 1;
pub const HSHAKE_NONE: u32 = 2;
pub const SPTYPE_BEEP: u32 = 0;
pub const SPTYPE_SAMPLE: u32 = 1;
pub const WBP_ROOT: u32 = 0;
pub const WBP_DRAWER: u32 = 1;
pub const WBP_SCREEN: u32 = 2;
pub const WBPF_PATTERN: u32 = 1;
pub const WBPF_NOREMAP: u32 = 16;
pub const WBPF_DITHER_MASK: u32 = 768;
pub const WBPF_DITHER_DEF: u32 = 0;
pub const WBPF_DITHER_BAD: u32 = 256;
pub const WBPF_DITHER_GOOD: u32 = 512;
pub const WBPF_DITHER_BEST: u32 = 768;
pub const WBPF_PLACEMENT_MASK: u32 = 12288;
pub const WBPF_PLACEMENT_TILE: u32 = 0;
pub const WBPF_PLACEMENT_CENTER: u32 = 4096;
pub const WBPF_PLACEMENT_SCALE: u32 = 8192;
pub const WBPF_PLACEMENT_SCALEGOOD: u32 = 12288;
pub const WBPF_ALIGNMENT_MASK: u32 = 49152;
pub const WBPF_ALIGNMENT_MIDDLE: u32 = 0;
pub const WBPF_ALIGNMENT_LEFTTOP: u32 = 16384;
pub const WBPF_ALIGNMENT_RIGHTBOTTOM: u32 = 32768;
pub const WBPF_PRECISION_MASK: u32 = 3072;
pub const WBPF_PRECISION_DEF: u32 = 0;
pub const WBPF_PRECISION_ICON: u32 = 1024;
pub const WBPF_PRECISION_IMAGE: u32 = 2048;
pub const WBPF_PRECISION_EXACT: u32 = 3072;
pub const MAXDEPTH: u32 = 3;
pub const DEFPATDEPTH: u32 = 2;
pub const PAT_WIDTH: u32 = 16;
pub const PAT_HEIGHT: u32 = 16;
pub const GM_CLIPRECT: u32 = 5570561;
pub const GMC_VISIBLE: u32 = 2;
pub const GMC_PARTIAL: u32 = 1;
pub const GMC_INVISIBLE: u32 = 0;
pub const GetPath: u32 = 10;
pub const GetFile: u32 = 9;
pub const GetScreen: u32 = 11;
pub const GetTime: u32 = 12;
pub const CheckMark: u32 = 7;
pub const PopUp: u32 = 6;
pub const DropDown: u32 = 5;
pub const ThinFrame: u32 = 0;
pub const ButtonFrame: u32 = 1;
pub const StandardFrame: u32 = 11;
pub const RidgeFrame: u32 = 3;
pub const StringFrame: u32 = 3;
pub const GroupFrame: u32 = 2;
pub const DropBoxFrame: u32 = 5;
pub const HBarFrame: u32 = 6;
pub const VBarFrame: u32 = 7;
pub const RadioFrame: u32 = 10;
pub const MxFrame: u32 = 10;
pub const RAPREFSSEMAPHORE: &[u8; 15] = b"REACTION-PREFS\0";
pub const BVT_GT: u32 = 0;
pub const BVT_THIN: u32 = 1;
pub const BVT_THICK: u32 = 2;
pub const BVT_XEN: u32 = 3;
pub const BVT_XENTHIN: u32 = 4;
pub const GLT_GT: u32 = 0;
pub const GLT_FLAT: u32 = 1;
pub const GLT_3D: u32 = 2;
pub const RESOURCES_BATTCLOCK_H: u32 = 1;
pub const BATTCLOCKNAME: &[u8; 19] = b"battclock.resource\0";
pub const RESOURCES_BATTMEM_H: u32 = 1;
pub const BATTMEMNAME: &[u8; 17] = b"battmem.resource\0";
pub const RESOURCES_BATTMEMBITSAMIGA_H: u32 = 1;
pub const BATTMEM_AMIGA_AMNESIA_ADDR: u32 = 0;
pub const BATTMEM_AMIGA_AMNESIA_LEN: u32 = 1;
pub const BATTMEM_SCSI_TIMEOUT_ADDR: u32 = 1;
pub const BATTMEM_SCSI_TIMEOUT_LEN: u32 = 1;
pub const BATTMEM_SCSI_LUNS_ADDR: u32 = 2;
pub const BATTMEM_SCSI_LUNS_LEN: u32 = 1;
pub const RESOURCES_BATTMEMBITSAMIX_H: u32 = 1;
pub const RESOURCES_BATTMEMBITSSHARED_H: u32 = 1;
pub const BATTMEM_SHARED_AMNESIA_ADDR: u32 = 64;
pub const BATTMEM_SHARED_AMNESIA_LEN: u32 = 1;
pub const BATTMEM_SCSI_HOST_ID_ADDR: u32 = 65;
pub const BATTMEM_SCSI_HOST_ID_LEN: u32 = 3;
pub const BATTMEM_SCSI_SYNC_XFER_ADDR: u32 = 68;
pub const BATTMEM_SCSI_SYNC_XFER_LEN: u32 = 1;
pub const BATTMEM_SCSI_FAST_SYNC_ADDR: u32 = 69;
pub const BATTMEM_SCSI_FAST_SYNC_LEN: u32 = 1;
pub const BATTMEM_SCSI_TAG_QUEUES_ADDR: u32 = 70;
pub const BATTMEM_SCSI_TAG_QUEUES_LEN: u32 = 1;
pub const BATTMEM_IDE_EXTRA_WAIT_ADDR: u32 = 71;
pub const BATTMEM_IDE_EXTRA_WAIT_LEN: u32 = 1;
pub const RESOURCES_CARD_H: u32 = 1;
pub const CARDRESNAME: &[u8; 14] = b"card.resource\0";
pub const CARDB_RESETREMOVE: u32 = 0;
pub const CARDF_RESETREMOVE: u32 = 1;
pub const CARDB_IFAVAILABLE: u32 = 1;
pub const CARDF_IFAVAILABLE: u32 = 2;
pub const CARDB_DELAYOWNERSHIP: u32 = 2;
pub const CARDF_DELAYOWNERSHIP: u32 = 4;
pub const CARDB_POSTSTATUS: u32 = 3;
pub const CARDF_POSTSTATUS: u32 = 8;
pub const CARDB_REMOVEHANDLE: u32 = 0;
pub const CARDF_REMOVEHANDLE: u32 = 1;
pub const CARD_STATUSB_CCDET: u32 = 6;
pub const CARD_STATUSF_CCDET: u32 = 64;
pub const CARD_STATUSB_BVD1: u32 = 5;
pub const CARD_STATUSF_BVD1: u32 = 32;
pub const CARD_STATUSB_SC: u32 = 5;
pub const CARD_STATUSF_SC: u32 = 32;
pub const CARD_STATUSB_BVD2: u32 = 4;
pub const CARD_STATUSF_BVD2: u32 = 16;
pub const CARD_STATUSB_DA: u32 = 4;
pub const CARD_STATUSF_DA: u32 = 16;
pub const CARD_STATUSB_WR: u32 = 3;
pub const CARD_STATUSF_WR: u32 = 8;
pub const CARD_STATUSB_BSY: u32 = 2;
pub const CARD_STATUSF_BSY: u32 = 4;
pub const CARD_STATUSB_IRQ: u32 = 2;
pub const CARD_STATUSF_IRQ: u32 = 4;
pub const CARD_VOLTAGE_0V: u32 = 0;
pub const CARD_VOLTAGE_5V: u32 = 1;
pub const CARD_VOLTAGE_12V: u32 = 2;
pub const CARD_ENABLEB_DIGAUDIO: u32 = 1;
pub const CARD_ENABLEF_DIGAUDIO: u32 = 2;
pub const CARD_DISABLEB_WP: u32 = 3;
pub const CARD_DISABLEF_WP: u32 = 8;
pub const CARD_INTB_SETCLR: u32 = 7;
pub const CARD_INTF_SETCLR: u32 = 128;
pub const CARD_INTB_BVD1: u32 = 5;
pub const CARD_INTF_BVD1: u32 = 32;
pub const CARD_INTB_SC: u32 = 5;
pub const CARD_INTF_SC: u32 = 32;
pub const CARD_INTB_BVD2: u32 = 4;
pub const CARD_INTF_BVD2: u32 = 16;
pub const CARD_INTB_DA: u32 = 4;
pub const CARD_INTF_DA: u32 = 16;
pub const CARD_INTB_BSY: u32 = 2;
pub const CARD_INTF_BSY: u32 = 4;
pub const CARD_INTB_IRQ: u32 = 2;
pub const CARD_INTF_IRQ: u32 = 4;
pub const CARD_INTERFACE_AMIGA_0: u32 = 0;
pub const CISTPL_AMIGAXIP: u32 = 145;
pub const XIPFLAGSB_AUTORUN: u32 = 0;
pub const XIPFLAGSF_AUTORUN: u32 = 1;
pub const DEVICES_CIA_H: u32 = 1;
pub const CIAANAME: &[u8; 14] = b"ciaa.resource\0";
pub const CIABNAME: &[u8; 14] = b"ciab.resource\0";
pub const DRB_ALLOC0: u32 = 0;
pub const DRB_ALLOC1: u32 = 1;
pub const DRB_ALLOC2: u32 = 2;
pub const DRB_ALLOC3: u32 = 3;
pub const DRB_DETECT0: u32 = 4;
pub const DRB_ACTIVE: u32 = 7;
pub const DRF_ALLOC0: u32 = 1;
pub const DRF_ALLOC1: u32 = 2;
pub const DRF_ALLOC2: u32 = 4;
pub const DRF_ALLOC3: u32 = 8;
pub const DRF_DETECT0: u32 = 16;
pub const DRF_ACTIVE: u32 = 128;
pub const DSKDMAOFF: u32 = 16384;
pub const DISKNAME: &[u8; 14] = b"disk.resource\0";
pub const DR_ALLOCUNIT: i32 = -6;
pub const DR_FREEUNIT: i32 = -12;
pub const DR_GETUNIT: i32 = -18;
pub const DR_GIVEUNIT: i32 = -24;
pub const DR_GETUNITID: i32 = -30;
pub const DR_READUNITID: i32 = -36;
pub const DR_LASTCOMM: i32 = -36;
pub const DRT_AMIGA: u32 = 0;
pub const DRT_37422D2S: u32 = 1431655765;
pub const DRT_EMPTY: u32 = 4294967295;
pub const DRT_150RPM: u32 = 2863311530;
pub const FSRNAME: &[u8; 20] = b"FileSystem.resource\0";
pub const MR_SERIALPORT: u32 = 0;
pub const MR_SERIALBITS: u32 = 1;
pub const MR_PARALLELPORT: u32 = 2;
pub const MR_PARALLELBITS: u32 = 3;
pub const MR_ALLOCMISCRESOURCE: i32 = -6;
pub const MR_FREEMISCRESOURCE: i32 = -12;
pub const MISCNAME: &[u8; 14] = b"misc.resource\0";
pub const POTGONAME: &[u8; 15] = b"potgo.resource\0";
pub const RXBUFFSZ: u32 = 204;
pub const RXIO_EXIST: i32 = -1;
pub const RXIO_STRF: u32 = 0;
pub const RXIO_READ: u32 = 1;
pub const RXIO_WRITE: u32 = 2;
pub const RXIO_APPEND: u32 = 3;
pub const RXIO_BEGIN: i32 = -1;
pub const RXIO_CURR: u32 = 0;
pub const RXIO_END: u32 = 1;
pub const DT_DEV: u32 = 0;
pub const DT_DIR: u32 = 1;
pub const DT_VOL: u32 = 2;
pub const ACTION_STACK: u32 = 2002;
pub const ACTION_QUEUE: u32 = 2003;
pub const ANO_NameSpace: u32 = 4000;
pub const ANO_UserSpace: u32 = 4001;
pub const ANO_Priority: u32 = 4002;
pub const ANO_Flags: u32 = 4003;
pub const NSB_NODUPS: u32 = 0;
pub const NSB_CASE: u32 = 1;
pub const NSF_NODUPS: u32 = 1;
pub const NSF_CASE: u32 = 2;
pub const PSTB_SIGNED: u32 = 31;
pub const PSTB_UNPACK: u32 = 30;
pub const PSTB_PACK: u32 = 29;
pub const PSTB_EXISTS: u32 = 26;
pub const PSTF_SIGNED: u32 = 2147483648;
pub const PSTF_UNPACK: u32 = 1073741824;
pub const PSTF_PACK: u32 = 536870912;
pub const PSTF_EXISTS: u32 = 67108864;
pub const PKCTRL_PACKUNPACK: u32 = 0;
pub const PKCTRL_PACKONLY: u32 = 1073741824;
pub const PKCTRL_UNPACKONLY: u32 = 536870912;
pub const PKCTRL_BYTE: u32 = 2147483648;
pub const PKCTRL_WORD: u32 = 2281701376;
pub const PKCTRL_LONG: u32 = 2415919104;
pub const PKCTRL_UBYTE: u32 = 0;
pub const PKCTRL_UWORD: u32 = 134217728;
pub const PKCTRL_ULONG: u32 = 268435456;
pub const PKCTRL_BIT: u32 = 402653184;
pub const PKCTRL_FLIPBIT: u32 = 2550136832;
pub const PACK_ENDTABLE: u32 = 0;
pub const UTILITYNAME: &[u8; 16] = b"utility.library\0";
pub const ICONNAME: &[u8; 13] = b"icon.library\0";
pub const ICON_ASPECT_RATIO_UNKNOWN: u32 = 0;
pub const WBDISK: u32 = 1;
pub const WBDRAWER: u32 = 2;
pub const WBTOOL: u32 = 3;
pub const WBPROJECT: u32 = 4;
pub const WBGARBAGE: u32 = 5;
pub const WBDEVICE: u32 = 6;
pub const WBKICK: u32 = 7;
pub const WBAPPICON: u32 = 8;
pub const DDVM_BYDEFAULT: u32 = 0;
pub const DDVM_BYICON: u32 = 1;
pub const DDVM_BYNAME: u32 = 2;
pub const DDVM_BYDATE: u32 = 3;
pub const DDVM_BYSIZE: u32 = 4;
pub const DDVM_BYTYPE: u32 = 5;
pub const DDFLAGS_SHOWMASK: u32 = 3;
pub const DDFLAGS_SHOWDEFAULT: u32 = 0;
pub const DDFLAGS_SHOWICONS: u32 = 1;
pub const DDFLAGS_SHOWALL: u32 = 2;
pub const DDFLAGS_SORTMASK: u32 = 768;
pub const DDFLAGS_SORTDEFAULT: u32 = 0;
pub const DDFLAGS_SORTASC: u32 = 256;
pub const DDFLAGS_SORTDESC: u32 = 512;
pub const WB_DISKMAGIC: u32 = 58128;
pub const WB_DISKVERSION: u32 = 1;
pub const WB_DISKREVISION: u32 = 1;
pub const WB_DISKREVISIONMASK: u32 = 255;
pub const GFLG_GADGBACKFILL: u32 = 1;
pub const GADGBACKFILL: u32 = 1;
pub const NO_ICON_POSITION: u32 = 2147483648;
pub const WORKBENCH_NAME: &[u8; 18] = b"workbench.library\0";
pub const AM_VERSION: u32 = 1;
pub const AMTYPE_APPWINDOW: u32 = 7;
pub const AMTYPE_APPICON: u32 = 8;
pub const AMTYPE_APPMENUITEM: u32 = 9;
pub const AMTYPE_APPWINDOWZONE: u32 = 10;
pub const AMCLASSICON_Open: u32 = 0;
pub const AMCLASSICON_Copy: u32 = 1;
pub const AMCLASSICON_Rename: u32 = 2;
pub const AMCLASSICON_Information: u32 = 3;
pub const AMCLASSICON_Snapshot: u32 = 4;
pub const AMCLASSICON_UnSnapshot: u32 = 5;
pub const AMCLASSICON_LeaveOut: u32 = 6;
pub const AMCLASSICON_PutAway: u32 = 7;
pub const AMCLASSICON_Delete: u32 = 8;
pub const AMCLASSICON_FormatDisk: u32 = 9;
pub const AMCLASSICON_EjectDisk: u32 = 13;
pub const AMCLASSICON_EmptyTrash: u32 = 10;
pub const AMCLASSICON_Selected: u32 = 11;
pub const AMCLASSICON_Unselected: u32 = 12;
pub const SCHMSTATE_TryCleanup: u32 = 0;
pub const SCHMSTATE_Cleanup: u32 = 1;
pub const SCHMSTATE_Setup: u32 = 2;
pub const WBF_DRAWERPOSMASK: u32 = 3;
pub const WBF_DRAWERPOSFREE: u32 = 0;
pub const WBF_DRAWERPOSHEAD: u32 = 1;
pub const WBF_DRAWERPOSTAIL: u32 = 2;
pub const WBF_BOUNDTEXTVIEW: u32 = 128;
pub const WBF_OLDDATESFIRST: u32 = 65536;
pub const WBO_NONE: u32 = 0;
pub const WBO_DRAWER: u32 = 1;
pub const WBO_ICON: u32 = 2;
pub const ADZMACTION_Enter: u32 = 0;
pub const ADZMACTION_Leave: u32 = 1;
pub const ISMACTION_Unselect: u32 = 0;
pub const ISMACTION_Select: u32 = 1;
pub const ISMACTION_Ignore: u32 = 2;
pub const ISMACTION_Stop: u32 = 3;
pub const CPACTION_Begin: u32 = 0;
pub const CPACTION_Copy: u32 = 1;
pub const CPACTION_End: u32 = 2;
pub const DLACTION_BeginDiscard: u32 = 0;
pub const DLACTION_BeginEmptyTrash: u32 = 1;
pub const DLACTION_DeleteContents: u32 = 3;
pub const DLACTION_DeleteObject: u32 = 4;
pub const DLACTION_End: u32 = 5;
pub const TIACTION_Rename: u32 = 0;
pub const TIACTION_RelabelVolume: u32 = 1;
pub const TIACTION_NewDrawer: u32 = 2;
pub const TIACTION_Execute: u32 = 3;
pub const UPDATEWB_ObjectRemoved: u32 = 0;
pub const UPDATEWB_ObjectAdded: u32 = 1;
pub type APTR = *mut ::core::ffi::c_void;
pub type CONST_APTR = *const ::core::ffi::c_void;
pub type LONG = i32;
pub type ULONG = u32;
pub type LONGBITS = u32;
pub type WORD = i16;
pub type UWORD = u16;
pub type WORDBITS = u16;
pub type BYTE = i8;
pub type UBYTE = u8;
pub type BYTEBITS = u8;
pub type RPTR = u16;
pub type SHORT = i16;
pub type USHORT = u16;
pub type COUNT = i16;
pub type UCOUNT = u16;
pub type CPTR = u32;
pub type STRPTR = *mut ::core::ffi::c_uchar;
pub type CONST_STRPTR = *const ::core::ffi::c_uchar;
pub type FLOAT = f32;
pub type DOUBLE = f64;
pub type TEXT = ::core::ffi::c_uchar;
pub type BOOL = i16;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Node {
    pub ln_Succ: *mut Node,
    pub ln_Pred: *mut Node,
    pub ln_Type: UBYTE,
    pub ln_Pri: BYTE,
    pub ln_Name: *mut ::core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Node"][::core::mem::size_of::<Node>() - 14usize];
    ["Alignment of Node"][::core::mem::align_of::<Node>() - 2usize];
    ["Offset of field: Node::ln_Succ"][::core::mem::offset_of!(Node, ln_Succ) - 0usize];
    ["Offset of field: Node::ln_Pred"][::core::mem::offset_of!(Node, ln_Pred) - 4usize];
    ["Offset of field: Node::ln_Type"][::core::mem::offset_of!(Node, ln_Type) - 8usize];
    ["Offset of field: Node::ln_Pri"][::core::mem::offset_of!(Node, ln_Pri) - 9usize];
    ["Offset of field: Node::ln_Name"][::core::mem::offset_of!(Node, ln_Name) - 10usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MinNode {
    pub mln_Succ: *mut MinNode,
    pub mln_Pred: *mut MinNode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MinNode"][::core::mem::size_of::<MinNode>() - 8usize];
    ["Alignment of MinNode"][::core::mem::align_of::<MinNode>() - 2usize];
    ["Offset of field: MinNode::mln_Succ"][::core::mem::offset_of!(MinNode, mln_Succ) - 0usize];
    ["Offset of field: MinNode::mln_Pred"][::core::mem::offset_of!(MinNode, mln_Pred) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct List {
    pub lh_Head: *mut Node,
    pub lh_Tail: *mut Node,
    pub lh_TailPred: *mut Node,
    pub lh_Type: UBYTE,
    pub l_pad: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of List"][::core::mem::size_of::<List>() - 14usize];
    ["Alignment of List"][::core::mem::align_of::<List>() - 2usize];
    ["Offset of field: List::lh_Head"][::core::mem::offset_of!(List, lh_Head) - 0usize];
    ["Offset of field: List::lh_Tail"][::core::mem::offset_of!(List, lh_Tail) - 4usize];
    ["Offset of field: List::lh_TailPred"][::core::mem::offset_of!(List, lh_TailPred) - 8usize];
    ["Offset of field: List::lh_Type"][::core::mem::offset_of!(List, lh_Type) - 12usize];
    ["Offset of field: List::l_pad"][::core::mem::offset_of!(List, l_pad) - 13usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MinList {
    pub mlh_Head: *mut MinNode,
    pub mlh_Tail: *mut MinNode,
    pub mlh_TailPred: *mut MinNode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MinList"][::core::mem::size_of::<MinList>() - 12usize];
    ["Alignment of MinList"][::core::mem::align_of::<MinList>() - 2usize];
    ["Offset of field: MinList::mlh_Head"][::core::mem::offset_of!(MinList, mlh_Head) - 0usize];
    ["Offset of field: MinList::mlh_Tail"][::core::mem::offset_of!(MinList, mlh_Tail) - 4usize];
    ["Offset of field: MinList::mlh_TailPred"]
        [::core::mem::offset_of!(MinList, mlh_TailPred) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Resident {
    pub rt_MatchWord: UWORD,
    pub rt_MatchTag: *mut Resident,
    pub rt_EndSkip: APTR,
    pub rt_Flags: UBYTE,
    pub rt_Version: UBYTE,
    pub rt_Type: UBYTE,
    pub rt_Pri: BYTE,
    pub rt_Name: *mut ::core::ffi::c_char,
    pub rt_IdString: *mut ::core::ffi::c_char,
    pub rt_Init: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Resident"][::core::mem::size_of::<Resident>() - 26usize];
    ["Alignment of Resident"][::core::mem::align_of::<Resident>() - 2usize];
    ["Offset of field: Resident::rt_MatchWord"]
        [::core::mem::offset_of!(Resident, rt_MatchWord) - 0usize];
    ["Offset of field: Resident::rt_MatchTag"]
        [::core::mem::offset_of!(Resident, rt_MatchTag) - 2usize];
    ["Offset of field: Resident::rt_EndSkip"]
        [::core::mem::offset_of!(Resident, rt_EndSkip) - 6usize];
    ["Offset of field: Resident::rt_Flags"][::core::mem::offset_of!(Resident, rt_Flags) - 10usize];
    ["Offset of field: Resident::rt_Version"]
        [::core::mem::offset_of!(Resident, rt_Version) - 11usize];
    ["Offset of field: Resident::rt_Type"][::core::mem::offset_of!(Resident, rt_Type) - 12usize];
    ["Offset of field: Resident::rt_Pri"][::core::mem::offset_of!(Resident, rt_Pri) - 13usize];
    ["Offset of field: Resident::rt_Name"][::core::mem::offset_of!(Resident, rt_Name) - 14usize];
    ["Offset of field: Resident::rt_IdString"]
        [::core::mem::offset_of!(Resident, rt_IdString) - 18usize];
    ["Offset of field: Resident::rt_Init"][::core::mem::offset_of!(Resident, rt_Init) - 22usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MemChunk {
    pub mc_Next: *mut MemChunk,
    pub mc_Bytes: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MemChunk"][::core::mem::size_of::<MemChunk>() - 8usize];
    ["Alignment of MemChunk"][::core::mem::align_of::<MemChunk>() - 2usize];
    ["Offset of field: MemChunk::mc_Next"][::core::mem::offset_of!(MemChunk, mc_Next) - 0usize];
    ["Offset of field: MemChunk::mc_Bytes"][::core::mem::offset_of!(MemChunk, mc_Bytes) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MemHeader {
    pub mh_Node: Node,
    pub mh_Attributes: UWORD,
    pub mh_First: *mut MemChunk,
    pub mh_Lower: APTR,
    pub mh_Upper: APTR,
    pub mh_Free: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MemHeader"][::core::mem::size_of::<MemHeader>() - 32usize];
    ["Alignment of MemHeader"][::core::mem::align_of::<MemHeader>() - 2usize];
    ["Offset of field: MemHeader::mh_Node"][::core::mem::offset_of!(MemHeader, mh_Node) - 0usize];
    ["Offset of field: MemHeader::mh_Attributes"]
        [::core::mem::offset_of!(MemHeader, mh_Attributes) - 14usize];
    ["Offset of field: MemHeader::mh_First"]
        [::core::mem::offset_of!(MemHeader, mh_First) - 16usize];
    ["Offset of field: MemHeader::mh_Lower"]
        [::core::mem::offset_of!(MemHeader, mh_Lower) - 20usize];
    ["Offset of field: MemHeader::mh_Upper"]
        [::core::mem::offset_of!(MemHeader, mh_Upper) - 24usize];
    ["Offset of field: MemHeader::mh_Free"][::core::mem::offset_of!(MemHeader, mh_Free) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct MemEntry {
    pub me_Un: MemEntry__bindgen_ty_1,
    pub me_Length: ULONG,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union MemEntry__bindgen_ty_1 {
    pub meu_Reqs: ULONG,
    pub meu_Addr: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MemEntry__bindgen_ty_1"][::core::mem::size_of::<MemEntry__bindgen_ty_1>() - 4usize];
    ["Alignment of MemEntry__bindgen_ty_1"]
        [::core::mem::align_of::<MemEntry__bindgen_ty_1>() - 2usize];
    ["Offset of field: MemEntry__bindgen_ty_1::meu_Reqs"]
        [::core::mem::offset_of!(MemEntry__bindgen_ty_1, meu_Reqs) - 0usize];
    ["Offset of field: MemEntry__bindgen_ty_1::meu_Addr"]
        [::core::mem::offset_of!(MemEntry__bindgen_ty_1, meu_Addr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MemEntry"][::core::mem::size_of::<MemEntry>() - 8usize];
    ["Alignment of MemEntry"][::core::mem::align_of::<MemEntry>() - 2usize];
    ["Offset of field: MemEntry::me_Un"][::core::mem::offset_of!(MemEntry, me_Un) - 0usize];
    ["Offset of field: MemEntry::me_Length"][::core::mem::offset_of!(MemEntry, me_Length) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MemList {
    pub ml_Node: Node,
    pub ml_NumEntries: UWORD,
    pub ml_ME: [MemEntry; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MemList"][::core::mem::size_of::<MemList>() - 24usize];
    ["Alignment of MemList"][::core::mem::align_of::<MemList>() - 2usize];
    ["Offset of field: MemList::ml_Node"][::core::mem::offset_of!(MemList, ml_Node) - 0usize];
    ["Offset of field: MemList::ml_NumEntries"]
        [::core::mem::offset_of!(MemList, ml_NumEntries) - 14usize];
    ["Offset of field: MemList::ml_ME"][::core::mem::offset_of!(MemList, ml_ME) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MemHandlerData {
    pub memh_RequestSize: ULONG,
    pub memh_RequestFlags: ULONG,
    pub memh_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MemHandlerData"][::core::mem::size_of::<MemHandlerData>() - 12usize];
    ["Alignment of MemHandlerData"][::core::mem::align_of::<MemHandlerData>() - 2usize];
    ["Offset of field: MemHandlerData::memh_RequestSize"]
        [::core::mem::offset_of!(MemHandlerData, memh_RequestSize) - 0usize];
    ["Offset of field: MemHandlerData::memh_RequestFlags"]
        [::core::mem::offset_of!(MemHandlerData, memh_RequestFlags) - 4usize];
    ["Offset of field: MemHandlerData::memh_Flags"]
        [::core::mem::offset_of!(MemHandlerData, memh_Flags) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Task {
    pub tc_Node: Node,
    pub tc_Flags: UBYTE,
    pub tc_State: UBYTE,
    pub tc_IDNestCnt: BYTE,
    pub tc_TDNestCnt: BYTE,
    pub tc_SigAlloc: ULONG,
    pub tc_SigWait: ULONG,
    pub tc_SigRecvd: ULONG,
    pub tc_SigExcept: ULONG,
    pub tc_TrapAlloc: UWORD,
    pub tc_TrapAble: UWORD,
    pub tc_ExceptData: APTR,
    pub tc_ExceptCode: APTR,
    pub tc_TrapData: APTR,
    pub tc_TrapCode: APTR,
    pub tc_SPReg: APTR,
    pub tc_SPLower: APTR,
    pub tc_SPUpper: APTR,
    pub tc_Switch: FPTR,
    pub tc_Launch: FPTR,
    pub tc_MemEntry: List,
    pub tc_UserData: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Task"][::core::mem::size_of::<Task>() - 92usize];
    ["Alignment of Task"][::core::mem::align_of::<Task>() - 2usize];
    ["Offset of field: Task::tc_Node"][::core::mem::offset_of!(Task, tc_Node) - 0usize];
    ["Offset of field: Task::tc_Flags"][::core::mem::offset_of!(Task, tc_Flags) - 14usize];
    ["Offset of field: Task::tc_State"][::core::mem::offset_of!(Task, tc_State) - 15usize];
    ["Offset of field: Task::tc_IDNestCnt"][::core::mem::offset_of!(Task, tc_IDNestCnt) - 16usize];
    ["Offset of field: Task::tc_TDNestCnt"][::core::mem::offset_of!(Task, tc_TDNestCnt) - 17usize];
    ["Offset of field: Task::tc_SigAlloc"][::core::mem::offset_of!(Task, tc_SigAlloc) - 18usize];
    ["Offset of field: Task::tc_SigWait"][::core::mem::offset_of!(Task, tc_SigWait) - 22usize];
    ["Offset of field: Task::tc_SigRecvd"][::core::mem::offset_of!(Task, tc_SigRecvd) - 26usize];
    ["Offset of field: Task::tc_SigExcept"][::core::mem::offset_of!(Task, tc_SigExcept) - 30usize];
    ["Offset of field: Task::tc_TrapAlloc"][::core::mem::offset_of!(Task, tc_TrapAlloc) - 34usize];
    ["Offset of field: Task::tc_TrapAble"][::core::mem::offset_of!(Task, tc_TrapAble) - 36usize];
    ["Offset of field: Task::tc_ExceptData"]
        [::core::mem::offset_of!(Task, tc_ExceptData) - 38usize];
    ["Offset of field: Task::tc_ExceptCode"]
        [::core::mem::offset_of!(Task, tc_ExceptCode) - 42usize];
    ["Offset of field: Task::tc_TrapData"][::core::mem::offset_of!(Task, tc_TrapData) - 46usize];
    ["Offset of field: Task::tc_TrapCode"][::core::mem::offset_of!(Task, tc_TrapCode) - 50usize];
    ["Offset of field: Task::tc_SPReg"][::core::mem::offset_of!(Task, tc_SPReg) - 54usize];
    ["Offset of field: Task::tc_SPLower"][::core::mem::offset_of!(Task, tc_SPLower) - 58usize];
    ["Offset of field: Task::tc_SPUpper"][::core::mem::offset_of!(Task, tc_SPUpper) - 62usize];
    ["Offset of field: Task::tc_Switch"][::core::mem::offset_of!(Task, tc_Switch) - 66usize];
    ["Offset of field: Task::tc_Launch"][::core::mem::offset_of!(Task, tc_Launch) - 70usize];
    ["Offset of field: Task::tc_MemEntry"][::core::mem::offset_of!(Task, tc_MemEntry) - 74usize];
    ["Offset of field: Task::tc_UserData"][::core::mem::offset_of!(Task, tc_UserData) - 88usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct StackSwapStruct {
    pub stk_Lower: APTR,
    pub stk_Upper: ULONG,
    pub stk_Pointer: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StackSwapStruct"][::core::mem::size_of::<StackSwapStruct>() - 12usize];
    ["Alignment of StackSwapStruct"][::core::mem::align_of::<StackSwapStruct>() - 2usize];
    ["Offset of field: StackSwapStruct::stk_Lower"]
        [::core::mem::offset_of!(StackSwapStruct, stk_Lower) - 0usize];
    ["Offset of field: StackSwapStruct::stk_Upper"]
        [::core::mem::offset_of!(StackSwapStruct, stk_Upper) - 4usize];
    ["Offset of field: StackSwapStruct::stk_Pointer"]
        [::core::mem::offset_of!(StackSwapStruct, stk_Pointer) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MsgPort {
    pub mp_Node: Node,
    pub mp_Flags: UBYTE,
    pub mp_SigBit: UBYTE,
    pub mp_SigTask: *mut ::core::ffi::c_void,
    pub mp_MsgList: List,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MsgPort"][::core::mem::size_of::<MsgPort>() - 34usize];
    ["Alignment of MsgPort"][::core::mem::align_of::<MsgPort>() - 2usize];
    ["Offset of field: MsgPort::mp_Node"][::core::mem::offset_of!(MsgPort, mp_Node) - 0usize];
    ["Offset of field: MsgPort::mp_Flags"][::core::mem::offset_of!(MsgPort, mp_Flags) - 14usize];
    ["Offset of field: MsgPort::mp_SigBit"][::core::mem::offset_of!(MsgPort, mp_SigBit) - 15usize];
    ["Offset of field: MsgPort::mp_SigTask"]
        [::core::mem::offset_of!(MsgPort, mp_SigTask) - 16usize];
    ["Offset of field: MsgPort::mp_MsgList"]
        [::core::mem::offset_of!(MsgPort, mp_MsgList) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Message {
    pub mn_Node: Node,
    pub mn_ReplyPort: *mut MsgPort,
    pub mn_Length: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Message"][::core::mem::size_of::<Message>() - 20usize];
    ["Alignment of Message"][::core::mem::align_of::<Message>() - 2usize];
    ["Offset of field: Message::mn_Node"][::core::mem::offset_of!(Message, mn_Node) - 0usize];
    ["Offset of field: Message::mn_ReplyPort"]
        [::core::mem::offset_of!(Message, mn_ReplyPort) - 14usize];
    ["Offset of field: Message::mn_Length"][::core::mem::offset_of!(Message, mn_Length) - 18usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Interrupt {
    pub is_Node: Node,
    pub is_Data: APTR,
    pub is_Code: FPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Interrupt"][::core::mem::size_of::<Interrupt>() - 22usize];
    ["Alignment of Interrupt"][::core::mem::align_of::<Interrupt>() - 2usize];
    ["Offset of field: Interrupt::is_Node"][::core::mem::offset_of!(Interrupt, is_Node) - 0usize];
    ["Offset of field: Interrupt::is_Data"][::core::mem::offset_of!(Interrupt, is_Data) - 14usize];
    ["Offset of field: Interrupt::is_Code"][::core::mem::offset_of!(Interrupt, is_Code) - 18usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IntVector {
    pub iv_Data: APTR,
    pub iv_Code: FPTR,
    pub iv_Node: *mut Node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IntVector"][::core::mem::size_of::<IntVector>() - 12usize];
    ["Alignment of IntVector"][::core::mem::align_of::<IntVector>() - 2usize];
    ["Offset of field: IntVector::iv_Data"][::core::mem::offset_of!(IntVector, iv_Data) - 0usize];
    ["Offset of field: IntVector::iv_Code"][::core::mem::offset_of!(IntVector, iv_Code) - 4usize];
    ["Offset of field: IntVector::iv_Node"][::core::mem::offset_of!(IntVector, iv_Node) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoftIntList {
    pub sh_List: List,
    pub sh_Pad: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SoftIntList"][::core::mem::size_of::<SoftIntList>() - 16usize];
    ["Alignment of SoftIntList"][::core::mem::align_of::<SoftIntList>() - 2usize];
    ["Offset of field: SoftIntList::sh_List"]
        [::core::mem::offset_of!(SoftIntList, sh_List) - 0usize];
    ["Offset of field: SoftIntList::sh_Pad"]
        [::core::mem::offset_of!(SoftIntList, sh_Pad) - 14usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SemaphoreRequest {
    pub sr_Link: MinNode,
    pub sr_Waiter: *mut Task,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SemaphoreRequest"][::core::mem::size_of::<SemaphoreRequest>() - 12usize];
    ["Alignment of SemaphoreRequest"][::core::mem::align_of::<SemaphoreRequest>() - 2usize];
    ["Offset of field: SemaphoreRequest::sr_Link"]
        [::core::mem::offset_of!(SemaphoreRequest, sr_Link) - 0usize];
    ["Offset of field: SemaphoreRequest::sr_Waiter"]
        [::core::mem::offset_of!(SemaphoreRequest, sr_Waiter) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SignalSemaphore {
    pub ss_Link: Node,
    pub ss_NestCount: WORD,
    pub ss_WaitQueue: MinList,
    pub ss_MultipleLink: SemaphoreRequest,
    pub ss_Owner: *mut Task,
    pub ss_QueueCount: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SignalSemaphore"][::core::mem::size_of::<SignalSemaphore>() - 46usize];
    ["Alignment of SignalSemaphore"][::core::mem::align_of::<SignalSemaphore>() - 2usize];
    ["Offset of field: SignalSemaphore::ss_Link"]
        [::core::mem::offset_of!(SignalSemaphore, ss_Link) - 0usize];
    ["Offset of field: SignalSemaphore::ss_NestCount"]
        [::core::mem::offset_of!(SignalSemaphore, ss_NestCount) - 14usize];
    ["Offset of field: SignalSemaphore::ss_WaitQueue"]
        [::core::mem::offset_of!(SignalSemaphore, ss_WaitQueue) - 16usize];
    ["Offset of field: SignalSemaphore::ss_MultipleLink"]
        [::core::mem::offset_of!(SignalSemaphore, ss_MultipleLink) - 28usize];
    ["Offset of field: SignalSemaphore::ss_Owner"]
        [::core::mem::offset_of!(SignalSemaphore, ss_Owner) - 40usize];
    ["Offset of field: SignalSemaphore::ss_QueueCount"]
        [::core::mem::offset_of!(SignalSemaphore, ss_QueueCount) - 44usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SemaphoreMessage {
    pub ssm_Message: Message,
    pub ssm_Semaphore: *mut SignalSemaphore,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SemaphoreMessage"][::core::mem::size_of::<SemaphoreMessage>() - 24usize];
    ["Alignment of SemaphoreMessage"][::core::mem::align_of::<SemaphoreMessage>() - 2usize];
    ["Offset of field: SemaphoreMessage::ssm_Message"]
        [::core::mem::offset_of!(SemaphoreMessage, ssm_Message) - 0usize];
    ["Offset of field: SemaphoreMessage::ssm_Semaphore"]
        [::core::mem::offset_of!(SemaphoreMessage, ssm_Semaphore) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Semaphore {
    pub sm_MsgPort: MsgPort,
    pub sm_Bids: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Semaphore"][::core::mem::size_of::<Semaphore>() - 36usize];
    ["Alignment of Semaphore"][::core::mem::align_of::<Semaphore>() - 2usize];
    ["Offset of field: Semaphore::sm_MsgPort"]
        [::core::mem::offset_of!(Semaphore, sm_MsgPort) - 0usize];
    ["Offset of field: Semaphore::sm_Bids"][::core::mem::offset_of!(Semaphore, sm_Bids) - 34usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Library {
    pub lib_Node: Node,
    pub lib_Flags: UBYTE,
    pub lib_pad: UBYTE,
    pub lib_NegSize: UWORD,
    pub lib_PosSize: UWORD,
    pub lib_Version: UWORD,
    pub lib_Revision: UWORD,
    pub lib_IdString: APTR,
    pub lib_Sum: ULONG,
    pub lib_OpenCnt: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Library"][::core::mem::size_of::<Library>() - 34usize];
    ["Alignment of Library"][::core::mem::align_of::<Library>() - 2usize];
    ["Offset of field: Library::lib_Node"][::core::mem::offset_of!(Library, lib_Node) - 0usize];
    ["Offset of field: Library::lib_Flags"][::core::mem::offset_of!(Library, lib_Flags) - 14usize];
    ["Offset of field: Library::lib_pad"][::core::mem::offset_of!(Library, lib_pad) - 15usize];
    ["Offset of field: Library::lib_NegSize"]
        [::core::mem::offset_of!(Library, lib_NegSize) - 16usize];
    ["Offset of field: Library::lib_PosSize"]
        [::core::mem::offset_of!(Library, lib_PosSize) - 18usize];
    ["Offset of field: Library::lib_Version"]
        [::core::mem::offset_of!(Library, lib_Version) - 20usize];
    ["Offset of field: Library::lib_Revision"]
        [::core::mem::offset_of!(Library, lib_Revision) - 22usize];
    ["Offset of field: Library::lib_IdString"]
        [::core::mem::offset_of!(Library, lib_IdString) - 24usize];
    ["Offset of field: Library::lib_Sum"][::core::mem::offset_of!(Library, lib_Sum) - 28usize];
    ["Offset of field: Library::lib_OpenCnt"]
        [::core::mem::offset_of!(Library, lib_OpenCnt) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IORequest {
    pub io_Message: Message,
    pub io_Device: *mut Device,
    pub io_Unit: *mut Unit,
    pub io_Command: UWORD,
    pub io_Flags: UBYTE,
    pub io_Error: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IORequest"][::core::mem::size_of::<IORequest>() - 32usize];
    ["Alignment of IORequest"][::core::mem::align_of::<IORequest>() - 2usize];
    ["Offset of field: IORequest::io_Message"]
        [::core::mem::offset_of!(IORequest, io_Message) - 0usize];
    ["Offset of field: IORequest::io_Device"]
        [::core::mem::offset_of!(IORequest, io_Device) - 20usize];
    ["Offset of field: IORequest::io_Unit"][::core::mem::offset_of!(IORequest, io_Unit) - 24usize];
    ["Offset of field: IORequest::io_Command"]
        [::core::mem::offset_of!(IORequest, io_Command) - 28usize];
    ["Offset of field: IORequest::io_Flags"]
        [::core::mem::offset_of!(IORequest, io_Flags) - 30usize];
    ["Offset of field: IORequest::io_Error"]
        [::core::mem::offset_of!(IORequest, io_Error) - 31usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOStdReq {
    pub io_Message: Message,
    pub io_Device: *mut Device,
    pub io_Unit: *mut Unit,
    pub io_Command: UWORD,
    pub io_Flags: UBYTE,
    pub io_Error: BYTE,
    pub io_Actual: ULONG,
    pub io_Length: ULONG,
    pub io_Data: APTR,
    pub io_Offset: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOStdReq"][::core::mem::size_of::<IOStdReq>() - 48usize];
    ["Alignment of IOStdReq"][::core::mem::align_of::<IOStdReq>() - 2usize];
    ["Offset of field: IOStdReq::io_Message"]
        [::core::mem::offset_of!(IOStdReq, io_Message) - 0usize];
    ["Offset of field: IOStdReq::io_Device"]
        [::core::mem::offset_of!(IOStdReq, io_Device) - 20usize];
    ["Offset of field: IOStdReq::io_Unit"][::core::mem::offset_of!(IOStdReq, io_Unit) - 24usize];
    ["Offset of field: IOStdReq::io_Command"]
        [::core::mem::offset_of!(IOStdReq, io_Command) - 28usize];
    ["Offset of field: IOStdReq::io_Flags"][::core::mem::offset_of!(IOStdReq, io_Flags) - 30usize];
    ["Offset of field: IOStdReq::io_Error"][::core::mem::offset_of!(IOStdReq, io_Error) - 31usize];
    ["Offset of field: IOStdReq::io_Actual"]
        [::core::mem::offset_of!(IOStdReq, io_Actual) - 32usize];
    ["Offset of field: IOStdReq::io_Length"]
        [::core::mem::offset_of!(IOStdReq, io_Length) - 36usize];
    ["Offset of field: IOStdReq::io_Data"][::core::mem::offset_of!(IOStdReq, io_Data) - 40usize];
    ["Offset of field: IOStdReq::io_Offset"]
        [::core::mem::offset_of!(IOStdReq, io_Offset) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Device {
    pub dd_Library: Library,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Device"][::core::mem::size_of::<Device>() - 34usize];
    ["Alignment of Device"][::core::mem::align_of::<Device>() - 2usize];
    ["Offset of field: Device::dd_Library"][::core::mem::offset_of!(Device, dd_Library) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Unit {
    pub unit_MsgPort: MsgPort,
    pub unit_flags: UBYTE,
    pub unit_pad: UBYTE,
    pub unit_OpenCnt: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Unit"][::core::mem::size_of::<Unit>() - 38usize];
    ["Alignment of Unit"][::core::mem::align_of::<Unit>() - 2usize];
    ["Offset of field: Unit::unit_MsgPort"][::core::mem::offset_of!(Unit, unit_MsgPort) - 0usize];
    ["Offset of field: Unit::unit_flags"][::core::mem::offset_of!(Unit, unit_flags) - 34usize];
    ["Offset of field: Unit::unit_pad"][::core::mem::offset_of!(Unit, unit_pad) - 35usize];
    ["Offset of field: Unit::unit_OpenCnt"][::core::mem::offset_of!(Unit, unit_OpenCnt) - 36usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExecBase {
    pub LibNode: Library,
    pub SoftVer: UWORD,
    pub LowMemChkSum: WORD,
    pub ChkBase: ULONG,
    pub ColdCapture: APTR,
    pub CoolCapture: APTR,
    pub WarmCapture: APTR,
    pub SysStkUpper: APTR,
    pub SysStkLower: APTR,
    pub MaxLocMem: ULONG,
    pub DebugEntry: APTR,
    pub DebugData: APTR,
    pub AlertData: APTR,
    pub MaxExtMem: APTR,
    pub ChkSum: UWORD,
    pub IntVects: [IntVector; 16usize],
    pub ThisTask: *mut Task,
    pub IdleCount: ULONG,
    pub DispCount: ULONG,
    pub Quantum: UWORD,
    pub Elapsed: UWORD,
    pub SysFlags: UWORD,
    pub IDNestCnt: BYTE,
    pub TDNestCnt: BYTE,
    pub AttnFlags: UWORD,
    pub AttnResched: UWORD,
    pub ResModules: APTR,
    pub TaskTrapCode: APTR,
    pub TaskExceptCode: APTR,
    pub TaskExitCode: APTR,
    pub TaskSigAlloc: ULONG,
    pub TaskTrapAlloc: UWORD,
    pub MemList: List,
    pub ResourceList: List,
    pub DeviceList: List,
    pub IntrList: List,
    pub LibList: List,
    pub PortList: List,
    pub TaskReady: List,
    pub TaskWait: List,
    pub SoftInts: [SoftIntList; 5usize],
    pub LastAlert: [LONG; 4usize],
    pub VBlankFrequency: UBYTE,
    pub PowerSupplyFrequency: UBYTE,
    pub SemaphoreList: List,
    pub KickMemPtr: APTR,
    pub KickTagPtr: APTR,
    pub KickCheckSum: APTR,
    pub ex_Pad0: UWORD,
    pub ex_LaunchPoint: ULONG,
    pub ex_RamLibPrivate: APTR,
    pub ex_EClockFrequency: ULONG,
    pub ex_CacheControl: ULONG,
    pub ex_TaskID: ULONG,
    pub ex_Reserved1: [ULONG; 5usize],
    pub ex_MMULock: APTR,
    pub ex_Reserved2: [ULONG; 3usize],
    pub ex_MemHandlers: MinList,
    pub ex_MemHandler: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExecBase"][::core::mem::size_of::<ExecBase>() - 632usize];
    ["Alignment of ExecBase"][::core::mem::align_of::<ExecBase>() - 2usize];
    ["Offset of field: ExecBase::LibNode"][::core::mem::offset_of!(ExecBase, LibNode) - 0usize];
    ["Offset of field: ExecBase::SoftVer"][::core::mem::offset_of!(ExecBase, SoftVer) - 34usize];
    ["Offset of field: ExecBase::LowMemChkSum"]
        [::core::mem::offset_of!(ExecBase, LowMemChkSum) - 36usize];
    ["Offset of field: ExecBase::ChkBase"][::core::mem::offset_of!(ExecBase, ChkBase) - 38usize];
    ["Offset of field: ExecBase::ColdCapture"]
        [::core::mem::offset_of!(ExecBase, ColdCapture) - 42usize];
    ["Offset of field: ExecBase::CoolCapture"]
        [::core::mem::offset_of!(ExecBase, CoolCapture) - 46usize];
    ["Offset of field: ExecBase::WarmCapture"]
        [::core::mem::offset_of!(ExecBase, WarmCapture) - 50usize];
    ["Offset of field: ExecBase::SysStkUpper"]
        [::core::mem::offset_of!(ExecBase, SysStkUpper) - 54usize];
    ["Offset of field: ExecBase::SysStkLower"]
        [::core::mem::offset_of!(ExecBase, SysStkLower) - 58usize];
    ["Offset of field: ExecBase::MaxLocMem"]
        [::core::mem::offset_of!(ExecBase, MaxLocMem) - 62usize];
    ["Offset of field: ExecBase::DebugEntry"]
        [::core::mem::offset_of!(ExecBase, DebugEntry) - 66usize];
    ["Offset of field: ExecBase::DebugData"]
        [::core::mem::offset_of!(ExecBase, DebugData) - 70usize];
    ["Offset of field: ExecBase::AlertData"]
        [::core::mem::offset_of!(ExecBase, AlertData) - 74usize];
    ["Offset of field: ExecBase::MaxExtMem"]
        [::core::mem::offset_of!(ExecBase, MaxExtMem) - 78usize];
    ["Offset of field: ExecBase::ChkSum"][::core::mem::offset_of!(ExecBase, ChkSum) - 82usize];
    ["Offset of field: ExecBase::IntVects"][::core::mem::offset_of!(ExecBase, IntVects) - 84usize];
    ["Offset of field: ExecBase::ThisTask"][::core::mem::offset_of!(ExecBase, ThisTask) - 276usize];
    ["Offset of field: ExecBase::IdleCount"]
        [::core::mem::offset_of!(ExecBase, IdleCount) - 280usize];
    ["Offset of field: ExecBase::DispCount"]
        [::core::mem::offset_of!(ExecBase, DispCount) - 284usize];
    ["Offset of field: ExecBase::Quantum"][::core::mem::offset_of!(ExecBase, Quantum) - 288usize];
    ["Offset of field: ExecBase::Elapsed"][::core::mem::offset_of!(ExecBase, Elapsed) - 290usize];
    ["Offset of field: ExecBase::SysFlags"][::core::mem::offset_of!(ExecBase, SysFlags) - 292usize];
    ["Offset of field: ExecBase::IDNestCnt"]
        [::core::mem::offset_of!(ExecBase, IDNestCnt) - 294usize];
    ["Offset of field: ExecBase::TDNestCnt"]
        [::core::mem::offset_of!(ExecBase, TDNestCnt) - 295usize];
    ["Offset of field: ExecBase::AttnFlags"]
        [::core::mem::offset_of!(ExecBase, AttnFlags) - 296usize];
    ["Offset of field: ExecBase::AttnResched"]
        [::core::mem::offset_of!(ExecBase, AttnResched) - 298usize];
    ["Offset of field: ExecBase::ResModules"]
        [::core::mem::offset_of!(ExecBase, ResModules) - 300usize];
    ["Offset of field: ExecBase::TaskTrapCode"]
        [::core::mem::offset_of!(ExecBase, TaskTrapCode) - 304usize];
    ["Offset of field: ExecBase::TaskExceptCode"]
        [::core::mem::offset_of!(ExecBase, TaskExceptCode) - 308usize];
    ["Offset of field: ExecBase::TaskExitCode"]
        [::core::mem::offset_of!(ExecBase, TaskExitCode) - 312usize];
    ["Offset of field: ExecBase::TaskSigAlloc"]
        [::core::mem::offset_of!(ExecBase, TaskSigAlloc) - 316usize];
    ["Offset of field: ExecBase::TaskTrapAlloc"]
        [::core::mem::offset_of!(ExecBase, TaskTrapAlloc) - 320usize];
    ["Offset of field: ExecBase::MemList"][::core::mem::offset_of!(ExecBase, MemList) - 322usize];
    ["Offset of field: ExecBase::ResourceList"]
        [::core::mem::offset_of!(ExecBase, ResourceList) - 336usize];
    ["Offset of field: ExecBase::DeviceList"]
        [::core::mem::offset_of!(ExecBase, DeviceList) - 350usize];
    ["Offset of field: ExecBase::IntrList"][::core::mem::offset_of!(ExecBase, IntrList) - 364usize];
    ["Offset of field: ExecBase::LibList"][::core::mem::offset_of!(ExecBase, LibList) - 378usize];
    ["Offset of field: ExecBase::PortList"][::core::mem::offset_of!(ExecBase, PortList) - 392usize];
    ["Offset of field: ExecBase::TaskReady"]
        [::core::mem::offset_of!(ExecBase, TaskReady) - 406usize];
    ["Offset of field: ExecBase::TaskWait"][::core::mem::offset_of!(ExecBase, TaskWait) - 420usize];
    ["Offset of field: ExecBase::SoftInts"][::core::mem::offset_of!(ExecBase, SoftInts) - 434usize];
    ["Offset of field: ExecBase::LastAlert"]
        [::core::mem::offset_of!(ExecBase, LastAlert) - 514usize];
    ["Offset of field: ExecBase::VBlankFrequency"]
        [::core::mem::offset_of!(ExecBase, VBlankFrequency) - 530usize];
    ["Offset of field: ExecBase::PowerSupplyFrequency"]
        [::core::mem::offset_of!(ExecBase, PowerSupplyFrequency) - 531usize];
    ["Offset of field: ExecBase::SemaphoreList"]
        [::core::mem::offset_of!(ExecBase, SemaphoreList) - 532usize];
    ["Offset of field: ExecBase::KickMemPtr"]
        [::core::mem::offset_of!(ExecBase, KickMemPtr) - 546usize];
    ["Offset of field: ExecBase::KickTagPtr"]
        [::core::mem::offset_of!(ExecBase, KickTagPtr) - 550usize];
    ["Offset of field: ExecBase::KickCheckSum"]
        [::core::mem::offset_of!(ExecBase, KickCheckSum) - 554usize];
    ["Offset of field: ExecBase::ex_Pad0"][::core::mem::offset_of!(ExecBase, ex_Pad0) - 558usize];
    ["Offset of field: ExecBase::ex_LaunchPoint"]
        [::core::mem::offset_of!(ExecBase, ex_LaunchPoint) - 560usize];
    ["Offset of field: ExecBase::ex_RamLibPrivate"]
        [::core::mem::offset_of!(ExecBase, ex_RamLibPrivate) - 564usize];
    ["Offset of field: ExecBase::ex_EClockFrequency"]
        [::core::mem::offset_of!(ExecBase, ex_EClockFrequency) - 568usize];
    ["Offset of field: ExecBase::ex_CacheControl"]
        [::core::mem::offset_of!(ExecBase, ex_CacheControl) - 572usize];
    ["Offset of field: ExecBase::ex_TaskID"]
        [::core::mem::offset_of!(ExecBase, ex_TaskID) - 576usize];
    ["Offset of field: ExecBase::ex_Reserved1"]
        [::core::mem::offset_of!(ExecBase, ex_Reserved1) - 580usize];
    ["Offset of field: ExecBase::ex_MMULock"]
        [::core::mem::offset_of!(ExecBase, ex_MMULock) - 600usize];
    ["Offset of field: ExecBase::ex_Reserved2"]
        [::core::mem::offset_of!(ExecBase, ex_Reserved2) - 604usize];
    ["Offset of field: ExecBase::ex_MemHandlers"]
        [::core::mem::offset_of!(ExecBase, ex_MemHandlers) - 616usize];
    ["Offset of field: ExecBase::ex_MemHandler"]
        [::core::mem::offset_of!(ExecBase, ex_MemHandler) - 628usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DateStamp {
    pub ds_Days: LONG,
    pub ds_Minute: LONG,
    pub ds_Tick: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DateStamp"][::core::mem::size_of::<DateStamp>() - 12usize];
    ["Alignment of DateStamp"][::core::mem::align_of::<DateStamp>() - 2usize];
    ["Offset of field: DateStamp::ds_Days"][::core::mem::offset_of!(DateStamp, ds_Days) - 0usize];
    ["Offset of field: DateStamp::ds_Minute"]
        [::core::mem::offset_of!(DateStamp, ds_Minute) - 4usize];
    ["Offset of field: DateStamp::ds_Tick"][::core::mem::offset_of!(DateStamp, ds_Tick) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FileInfoBlock {
    pub fib_DiskKey: LONG,
    pub fib_DirEntryType: LONG,
    pub fib_FileName: [TEXT; 108usize],
    pub fib_Protection: LONG,
    pub fib_EntryType: LONG,
    pub fib_Size: LONG,
    pub fib_NumBlocks: LONG,
    pub fib_Date: DateStamp,
    pub fib_Comment: [TEXT; 80usize],
    pub fib_OwnerUID: UWORD,
    pub fib_OwnerGID: UWORD,
    pub fib_Reserved: [UBYTE; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileInfoBlock"][::core::mem::size_of::<FileInfoBlock>() - 260usize];
    ["Alignment of FileInfoBlock"][::core::mem::align_of::<FileInfoBlock>() - 2usize];
    ["Offset of field: FileInfoBlock::fib_DiskKey"]
        [::core::mem::offset_of!(FileInfoBlock, fib_DiskKey) - 0usize];
    ["Offset of field: FileInfoBlock::fib_DirEntryType"]
        [::core::mem::offset_of!(FileInfoBlock, fib_DirEntryType) - 4usize];
    ["Offset of field: FileInfoBlock::fib_FileName"]
        [::core::mem::offset_of!(FileInfoBlock, fib_FileName) - 8usize];
    ["Offset of field: FileInfoBlock::fib_Protection"]
        [::core::mem::offset_of!(FileInfoBlock, fib_Protection) - 116usize];
    ["Offset of field: FileInfoBlock::fib_EntryType"]
        [::core::mem::offset_of!(FileInfoBlock, fib_EntryType) - 120usize];
    ["Offset of field: FileInfoBlock::fib_Size"]
        [::core::mem::offset_of!(FileInfoBlock, fib_Size) - 124usize];
    ["Offset of field: FileInfoBlock::fib_NumBlocks"]
        [::core::mem::offset_of!(FileInfoBlock, fib_NumBlocks) - 128usize];
    ["Offset of field: FileInfoBlock::fib_Date"]
        [::core::mem::offset_of!(FileInfoBlock, fib_Date) - 132usize];
    ["Offset of field: FileInfoBlock::fib_Comment"]
        [::core::mem::offset_of!(FileInfoBlock, fib_Comment) - 144usize];
    ["Offset of field: FileInfoBlock::fib_OwnerUID"]
        [::core::mem::offset_of!(FileInfoBlock, fib_OwnerUID) - 224usize];
    ["Offset of field: FileInfoBlock::fib_OwnerGID"]
        [::core::mem::offset_of!(FileInfoBlock, fib_OwnerGID) - 226usize];
    ["Offset of field: FileInfoBlock::fib_Reserved"]
        [::core::mem::offset_of!(FileInfoBlock, fib_Reserved) - 228usize];
};
pub type BPTR = ::core::ffi::c_long;
pub type BSTR = ::core::ffi::c_long;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct InfoData {
    pub id_NumSoftErrors: LONG,
    pub id_UnitNumber: LONG,
    pub id_DiskState: LONG,
    pub id_NumBlocks: LONG,
    pub id_NumBlocksUsed: LONG,
    pub id_BytesPerBlock: LONG,
    pub id_DiskType: LONG,
    pub id_VolumeNode: BPTR,
    pub id_InUse: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InfoData"][::core::mem::size_of::<InfoData>() - 36usize];
    ["Alignment of InfoData"][::core::mem::align_of::<InfoData>() - 2usize];
    ["Offset of field: InfoData::id_NumSoftErrors"]
        [::core::mem::offset_of!(InfoData, id_NumSoftErrors) - 0usize];
    ["Offset of field: InfoData::id_UnitNumber"]
        [::core::mem::offset_of!(InfoData, id_UnitNumber) - 4usize];
    ["Offset of field: InfoData::id_DiskState"]
        [::core::mem::offset_of!(InfoData, id_DiskState) - 8usize];
    ["Offset of field: InfoData::id_NumBlocks"]
        [::core::mem::offset_of!(InfoData, id_NumBlocks) - 12usize];
    ["Offset of field: InfoData::id_NumBlocksUsed"]
        [::core::mem::offset_of!(InfoData, id_NumBlocksUsed) - 16usize];
    ["Offset of field: InfoData::id_BytesPerBlock"]
        [::core::mem::offset_of!(InfoData, id_BytesPerBlock) - 20usize];
    ["Offset of field: InfoData::id_DiskType"]
        [::core::mem::offset_of!(InfoData, id_DiskType) - 24usize];
    ["Offset of field: InfoData::id_VolumeNode"]
        [::core::mem::offset_of!(InfoData, id_VolumeNode) - 28usize];
    ["Offset of field: InfoData::id_InUse"][::core::mem::offset_of!(InfoData, id_InUse) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CSource {
    pub CS_Buffer: STRPTR,
    pub CS_Length: LONG,
    pub CS_CurChr: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CSource"][::core::mem::size_of::<CSource>() - 12usize];
    ["Alignment of CSource"][::core::mem::align_of::<CSource>() - 2usize];
    ["Offset of field: CSource::CS_Buffer"][::core::mem::offset_of!(CSource, CS_Buffer) - 0usize];
    ["Offset of field: CSource::CS_Length"][::core::mem::offset_of!(CSource, CS_Length) - 4usize];
    ["Offset of field: CSource::CS_CurChr"][::core::mem::offset_of!(CSource, CS_CurChr) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RDArgs {
    pub RDA_Source: CSource,
    pub RDA_DAList: LONG,
    pub RDA_Buffer: STRPTR,
    pub RDA_BufSiz: LONG,
    pub RDA_ExtHelp: STRPTR,
    pub RDA_Flags: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RDArgs"][::core::mem::size_of::<RDArgs>() - 32usize];
    ["Alignment of RDArgs"][::core::mem::align_of::<RDArgs>() - 2usize];
    ["Offset of field: RDArgs::RDA_Source"][::core::mem::offset_of!(RDArgs, RDA_Source) - 0usize];
    ["Offset of field: RDArgs::RDA_DAList"][::core::mem::offset_of!(RDArgs, RDA_DAList) - 12usize];
    ["Offset of field: RDArgs::RDA_Buffer"][::core::mem::offset_of!(RDArgs, RDA_Buffer) - 16usize];
    ["Offset of field: RDArgs::RDA_BufSiz"][::core::mem::offset_of!(RDArgs, RDA_BufSiz) - 20usize];
    ["Offset of field: RDArgs::RDA_ExtHelp"]
        [::core::mem::offset_of!(RDArgs, RDA_ExtHelp) - 24usize];
    ["Offset of field: RDArgs::RDA_Flags"][::core::mem::offset_of!(RDArgs, RDA_Flags) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NexxStr {
    pub ns_Ivalue: LONG,
    pub ns_Length: UWORD,
    pub ns_Flags: UBYTE,
    pub ns_Hash: UBYTE,
    pub ns_Buff: [BYTE; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NexxStr"][::core::mem::size_of::<NexxStr>() - 16usize];
    ["Alignment of NexxStr"][::core::mem::align_of::<NexxStr>() - 2usize];
    ["Offset of field: NexxStr::ns_Ivalue"][::core::mem::offset_of!(NexxStr, ns_Ivalue) - 0usize];
    ["Offset of field: NexxStr::ns_Length"][::core::mem::offset_of!(NexxStr, ns_Length) - 4usize];
    ["Offset of field: NexxStr::ns_Flags"][::core::mem::offset_of!(NexxStr, ns_Flags) - 6usize];
    ["Offset of field: NexxStr::ns_Hash"][::core::mem::offset_of!(NexxStr, ns_Hash) - 7usize];
    ["Offset of field: NexxStr::ns_Buff"][::core::mem::offset_of!(NexxStr, ns_Buff) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RexxArg {
    pub ra_Size: LONG,
    pub ra_Length: UWORD,
    pub ra_Flags: UBYTE,
    pub ra_Hash: UBYTE,
    pub ra_Buff: [BYTE; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RexxArg"][::core::mem::size_of::<RexxArg>() - 16usize];
    ["Alignment of RexxArg"][::core::mem::align_of::<RexxArg>() - 2usize];
    ["Offset of field: RexxArg::ra_Size"][::core::mem::offset_of!(RexxArg, ra_Size) - 0usize];
    ["Offset of field: RexxArg::ra_Length"][::core::mem::offset_of!(RexxArg, ra_Length) - 4usize];
    ["Offset of field: RexxArg::ra_Flags"][::core::mem::offset_of!(RexxArg, ra_Flags) - 6usize];
    ["Offset of field: RexxArg::ra_Hash"][::core::mem::offset_of!(RexxArg, ra_Hash) - 7usize];
    ["Offset of field: RexxArg::ra_Buff"][::core::mem::offset_of!(RexxArg, ra_Buff) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RexxMsg {
    pub rm_Node: Message,
    pub rm_TaskBlock: APTR,
    pub rm_LibBase: APTR,
    pub rm_Action: LONG,
    pub rm_Result1: LONG,
    pub rm_Result2: LONG,
    pub rm_Args: [STRPTR; 16usize],
    pub rm_PassPort: *mut MsgPort,
    pub rm_CommAddr: STRPTR,
    pub rm_FileExt: STRPTR,
    pub rm_Stdin: LONG,
    pub rm_Stdout: LONG,
    pub rm_avail: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RexxMsg"][::core::mem::size_of::<RexxMsg>() - 128usize];
    ["Alignment of RexxMsg"][::core::mem::align_of::<RexxMsg>() - 2usize];
    ["Offset of field: RexxMsg::rm_Node"][::core::mem::offset_of!(RexxMsg, rm_Node) - 0usize];
    ["Offset of field: RexxMsg::rm_TaskBlock"]
        [::core::mem::offset_of!(RexxMsg, rm_TaskBlock) - 20usize];
    ["Offset of field: RexxMsg::rm_LibBase"]
        [::core::mem::offset_of!(RexxMsg, rm_LibBase) - 24usize];
    ["Offset of field: RexxMsg::rm_Action"][::core::mem::offset_of!(RexxMsg, rm_Action) - 28usize];
    ["Offset of field: RexxMsg::rm_Result1"]
        [::core::mem::offset_of!(RexxMsg, rm_Result1) - 32usize];
    ["Offset of field: RexxMsg::rm_Result2"]
        [::core::mem::offset_of!(RexxMsg, rm_Result2) - 36usize];
    ["Offset of field: RexxMsg::rm_Args"][::core::mem::offset_of!(RexxMsg, rm_Args) - 40usize];
    ["Offset of field: RexxMsg::rm_PassPort"]
        [::core::mem::offset_of!(RexxMsg, rm_PassPort) - 104usize];
    ["Offset of field: RexxMsg::rm_CommAddr"]
        [::core::mem::offset_of!(RexxMsg, rm_CommAddr) - 108usize];
    ["Offset of field: RexxMsg::rm_FileExt"]
        [::core::mem::offset_of!(RexxMsg, rm_FileExt) - 112usize];
    ["Offset of field: RexxMsg::rm_Stdin"][::core::mem::offset_of!(RexxMsg, rm_Stdin) - 116usize];
    ["Offset of field: RexxMsg::rm_Stdout"][::core::mem::offset_of!(RexxMsg, rm_Stdout) - 120usize];
    ["Offset of field: RexxMsg::rm_avail"][::core::mem::offset_of!(RexxMsg, rm_avail) - 124usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RexxRsrc {
    pub rr_Node: Node,
    pub rr_Func: WORD,
    pub rr_Base: APTR,
    pub rr_Size: LONG,
    pub rr_Arg1: LONG,
    pub rr_Arg2: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RexxRsrc"][::core::mem::size_of::<RexxRsrc>() - 32usize];
    ["Alignment of RexxRsrc"][::core::mem::align_of::<RexxRsrc>() - 2usize];
    ["Offset of field: RexxRsrc::rr_Node"][::core::mem::offset_of!(RexxRsrc, rr_Node) - 0usize];
    ["Offset of field: RexxRsrc::rr_Func"][::core::mem::offset_of!(RexxRsrc, rr_Func) - 14usize];
    ["Offset of field: RexxRsrc::rr_Base"][::core::mem::offset_of!(RexxRsrc, rr_Base) - 16usize];
    ["Offset of field: RexxRsrc::rr_Size"][::core::mem::offset_of!(RexxRsrc, rr_Size) - 20usize];
    ["Offset of field: RexxRsrc::rr_Arg1"][::core::mem::offset_of!(RexxRsrc, rr_Arg1) - 24usize];
    ["Offset of field: RexxRsrc::rr_Arg2"][::core::mem::offset_of!(RexxRsrc, rr_Arg2) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RexxTask {
    pub rt_Global: [BYTE; 200usize],
    pub rt_MsgPort: MsgPort,
    pub rt_Flags: UBYTE,
    pub rt_SigBit: BYTE,
    pub rt_ClientID: APTR,
    pub rt_MsgPkt: APTR,
    pub rt_TaskID: APTR,
    pub rt_RexxPort: APTR,
    pub rt_ErrTrap: APTR,
    pub rt_StackPtr: APTR,
    pub rt_Header1: List,
    pub rt_Header2: List,
    pub rt_Header3: List,
    pub rt_Header4: List,
    pub rt_Header5: List,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RexxTask"][::core::mem::size_of::<RexxTask>() - 330usize];
    ["Alignment of RexxTask"][::core::mem::align_of::<RexxTask>() - 2usize];
    ["Offset of field: RexxTask::rt_Global"][::core::mem::offset_of!(RexxTask, rt_Global) - 0usize];
    ["Offset of field: RexxTask::rt_MsgPort"]
        [::core::mem::offset_of!(RexxTask, rt_MsgPort) - 200usize];
    ["Offset of field: RexxTask::rt_Flags"][::core::mem::offset_of!(RexxTask, rt_Flags) - 234usize];
    ["Offset of field: RexxTask::rt_SigBit"]
        [::core::mem::offset_of!(RexxTask, rt_SigBit) - 235usize];
    ["Offset of field: RexxTask::rt_ClientID"]
        [::core::mem::offset_of!(RexxTask, rt_ClientID) - 236usize];
    ["Offset of field: RexxTask::rt_MsgPkt"]
        [::core::mem::offset_of!(RexxTask, rt_MsgPkt) - 240usize];
    ["Offset of field: RexxTask::rt_TaskID"]
        [::core::mem::offset_of!(RexxTask, rt_TaskID) - 244usize];
    ["Offset of field: RexxTask::rt_RexxPort"]
        [::core::mem::offset_of!(RexxTask, rt_RexxPort) - 248usize];
    ["Offset of field: RexxTask::rt_ErrTrap"]
        [::core::mem::offset_of!(RexxTask, rt_ErrTrap) - 252usize];
    ["Offset of field: RexxTask::rt_StackPtr"]
        [::core::mem::offset_of!(RexxTask, rt_StackPtr) - 256usize];
    ["Offset of field: RexxTask::rt_Header1"]
        [::core::mem::offset_of!(RexxTask, rt_Header1) - 260usize];
    ["Offset of field: RexxTask::rt_Header2"]
        [::core::mem::offset_of!(RexxTask, rt_Header2) - 274usize];
    ["Offset of field: RexxTask::rt_Header3"]
        [::core::mem::offset_of!(RexxTask, rt_Header3) - 288usize];
    ["Offset of field: RexxTask::rt_Header4"]
        [::core::mem::offset_of!(RexxTask, rt_Header4) - 302usize];
    ["Offset of field: RexxTask::rt_Header5"]
        [::core::mem::offset_of!(RexxTask, rt_Header5) - 316usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SrcNode {
    pub sn_Succ: *mut SrcNode,
    pub sn_Pred: *mut SrcNode,
    pub sn_Ptr: APTR,
    pub sn_Size: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SrcNode"][::core::mem::size_of::<SrcNode>() - 16usize];
    ["Alignment of SrcNode"][::core::mem::align_of::<SrcNode>() - 2usize];
    ["Offset of field: SrcNode::sn_Succ"][::core::mem::offset_of!(SrcNode, sn_Succ) - 0usize];
    ["Offset of field: SrcNode::sn_Pred"][::core::mem::offset_of!(SrcNode, sn_Pred) - 4usize];
    ["Offset of field: SrcNode::sn_Ptr"][::core::mem::offset_of!(SrcNode, sn_Ptr) - 8usize];
    ["Offset of field: SrcNode::sn_Size"][::core::mem::offset_of!(SrcNode, sn_Size) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RxsLib {
    pub rl_Node: Library,
    pub rl_Flags: UBYTE,
    pub rl_Shadow: UBYTE,
    pub rl_SysBase: APTR,
    pub rl_DOSBase: APTR,
    pub rl_IeeeDPBase: APTR,
    pub rl_SegList: LONG,
    pub rl_NIL: LONG,
    pub rl_Chunk: LONG,
    pub rl_MaxNest: LONG,
    pub rl_NULL: *mut NexxStr,
    pub rl_FALSE: *mut NexxStr,
    pub rl_TRUE: *mut NexxStr,
    pub rl_REXX: *mut NexxStr,
    pub rl_COMMAND: *mut NexxStr,
    pub rl_STDIN: *mut NexxStr,
    pub rl_STDOUT: *mut NexxStr,
    pub rl_STDERR: *mut NexxStr,
    pub rl_Version: STRPTR,
    pub rl_TaskName: STRPTR,
    pub rl_TaskPri: LONG,
    pub rl_TaskSeg: LONG,
    pub rl_StackSize: LONG,
    pub rl_RexxDir: STRPTR,
    pub rl_CTABLE: STRPTR,
    pub rl_Notice: STRPTR,
    pub rl_RexxPort: MsgPort,
    pub rl_ReadLock: UWORD,
    pub rl_TraceFH: LONG,
    pub rl_TaskList: List,
    pub rl_NumTask: WORD,
    pub rl_LibList: List,
    pub rl_NumLib: WORD,
    pub rl_ClipList: List,
    pub rl_NumClip: WORD,
    pub rl_MsgList: List,
    pub rl_NumMsg: WORD,
    pub rl_PgmList: List,
    pub rl_NumPgm: WORD,
    pub rl_TraceCnt: UWORD,
    pub rl_avail: WORD,
    pub rl_UtilityBase: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RxsLib"][::core::mem::size_of::<RxsLib>() - 256usize];
    ["Alignment of RxsLib"][::core::mem::align_of::<RxsLib>() - 2usize];
    ["Offset of field: RxsLib::rl_Node"][::core::mem::offset_of!(RxsLib, rl_Node) - 0usize];
    ["Offset of field: RxsLib::rl_Flags"][::core::mem::offset_of!(RxsLib, rl_Flags) - 34usize];
    ["Offset of field: RxsLib::rl_Shadow"][::core::mem::offset_of!(RxsLib, rl_Shadow) - 35usize];
    ["Offset of field: RxsLib::rl_SysBase"][::core::mem::offset_of!(RxsLib, rl_SysBase) - 36usize];
    ["Offset of field: RxsLib::rl_DOSBase"][::core::mem::offset_of!(RxsLib, rl_DOSBase) - 40usize];
    ["Offset of field: RxsLib::rl_IeeeDPBase"]
        [::core::mem::offset_of!(RxsLib, rl_IeeeDPBase) - 44usize];
    ["Offset of field: RxsLib::rl_SegList"][::core::mem::offset_of!(RxsLib, rl_SegList) - 48usize];
    ["Offset of field: RxsLib::rl_NIL"][::core::mem::offset_of!(RxsLib, rl_NIL) - 52usize];
    ["Offset of field: RxsLib::rl_Chunk"][::core::mem::offset_of!(RxsLib, rl_Chunk) - 56usize];
    ["Offset of field: RxsLib::rl_MaxNest"][::core::mem::offset_of!(RxsLib, rl_MaxNest) - 60usize];
    ["Offset of field: RxsLib::rl_NULL"][::core::mem::offset_of!(RxsLib, rl_NULL) - 64usize];
    ["Offset of field: RxsLib::rl_FALSE"][::core::mem::offset_of!(RxsLib, rl_FALSE) - 68usize];
    ["Offset of field: RxsLib::rl_TRUE"][::core::mem::offset_of!(RxsLib, rl_TRUE) - 72usize];
    ["Offset of field: RxsLib::rl_REXX"][::core::mem::offset_of!(RxsLib, rl_REXX) - 76usize];
    ["Offset of field: RxsLib::rl_COMMAND"][::core::mem::offset_of!(RxsLib, rl_COMMAND) - 80usize];
    ["Offset of field: RxsLib::rl_STDIN"][::core::mem::offset_of!(RxsLib, rl_STDIN) - 84usize];
    ["Offset of field: RxsLib::rl_STDOUT"][::core::mem::offset_of!(RxsLib, rl_STDOUT) - 88usize];
    ["Offset of field: RxsLib::rl_STDERR"][::core::mem::offset_of!(RxsLib, rl_STDERR) - 92usize];
    ["Offset of field: RxsLib::rl_Version"][::core::mem::offset_of!(RxsLib, rl_Version) - 96usize];
    ["Offset of field: RxsLib::rl_TaskName"]
        [::core::mem::offset_of!(RxsLib, rl_TaskName) - 100usize];
    ["Offset of field: RxsLib::rl_TaskPri"][::core::mem::offset_of!(RxsLib, rl_TaskPri) - 104usize];
    ["Offset of field: RxsLib::rl_TaskSeg"][::core::mem::offset_of!(RxsLib, rl_TaskSeg) - 108usize];
    ["Offset of field: RxsLib::rl_StackSize"]
        [::core::mem::offset_of!(RxsLib, rl_StackSize) - 112usize];
    ["Offset of field: RxsLib::rl_RexxDir"][::core::mem::offset_of!(RxsLib, rl_RexxDir) - 116usize];
    ["Offset of field: RxsLib::rl_CTABLE"][::core::mem::offset_of!(RxsLib, rl_CTABLE) - 120usize];
    ["Offset of field: RxsLib::rl_Notice"][::core::mem::offset_of!(RxsLib, rl_Notice) - 124usize];
    ["Offset of field: RxsLib::rl_RexxPort"]
        [::core::mem::offset_of!(RxsLib, rl_RexxPort) - 128usize];
    ["Offset of field: RxsLib::rl_ReadLock"]
        [::core::mem::offset_of!(RxsLib, rl_ReadLock) - 162usize];
    ["Offset of field: RxsLib::rl_TraceFH"][::core::mem::offset_of!(RxsLib, rl_TraceFH) - 164usize];
    ["Offset of field: RxsLib::rl_TaskList"]
        [::core::mem::offset_of!(RxsLib, rl_TaskList) - 168usize];
    ["Offset of field: RxsLib::rl_NumTask"][::core::mem::offset_of!(RxsLib, rl_NumTask) - 182usize];
    ["Offset of field: RxsLib::rl_LibList"][::core::mem::offset_of!(RxsLib, rl_LibList) - 184usize];
    ["Offset of field: RxsLib::rl_NumLib"][::core::mem::offset_of!(RxsLib, rl_NumLib) - 198usize];
    ["Offset of field: RxsLib::rl_ClipList"]
        [::core::mem::offset_of!(RxsLib, rl_ClipList) - 200usize];
    ["Offset of field: RxsLib::rl_NumClip"][::core::mem::offset_of!(RxsLib, rl_NumClip) - 214usize];
    ["Offset of field: RxsLib::rl_MsgList"][::core::mem::offset_of!(RxsLib, rl_MsgList) - 216usize];
    ["Offset of field: RxsLib::rl_NumMsg"][::core::mem::offset_of!(RxsLib, rl_NumMsg) - 230usize];
    ["Offset of field: RxsLib::rl_PgmList"][::core::mem::offset_of!(RxsLib, rl_PgmList) - 232usize];
    ["Offset of field: RxsLib::rl_NumPgm"][::core::mem::offset_of!(RxsLib, rl_NumPgm) - 246usize];
    ["Offset of field: RxsLib::rl_TraceCnt"]
        [::core::mem::offset_of!(RxsLib, rl_TraceCnt) - 248usize];
    ["Offset of field: RxsLib::rl_avail"][::core::mem::offset_of!(RxsLib, rl_avail) - 250usize];
    ["Offset of field: RxsLib::rl_UtilityBase"]
        [::core::mem::offset_of!(RxsLib, rl_UtilityBase) - 252usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Hook {
    pub h_MinNode: MinNode,
    pub h_Entry: FPTR,
    pub h_SubEntry: FPTR,
    pub h_Data: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hook"][::core::mem::size_of::<Hook>() - 20usize];
    ["Alignment of Hook"][::core::mem::align_of::<Hook>() - 2usize];
    ["Offset of field: Hook::h_MinNode"][::core::mem::offset_of!(Hook, h_MinNode) - 0usize];
    ["Offset of field: Hook::h_Entry"][::core::mem::offset_of!(Hook, h_Entry) - 8usize];
    ["Offset of field: Hook::h_SubEntry"][::core::mem::offset_of!(Hook, h_SubEntry) - 12usize];
    ["Offset of field: Hook::h_Data"][::core::mem::offset_of!(Hook, h_Data) - 16usize];
};
pub type HOOKFUNC = FPTR;
pub type Object = ULONG;
pub type ClassID = STRPTR;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub MethodID: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_1"][::core::mem::size_of::<_bindgen_ty_1>() - 4usize];
    ["Alignment of _bindgen_ty_1"][::core::mem::align_of::<_bindgen_ty_1>() - 2usize];
    ["Offset of field: _bindgen_ty_1::MethodID"]
        [::core::mem::offset_of!(_bindgen_ty_1, MethodID) - 0usize];
};
pub type Msg = *mut _bindgen_ty_1;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct opSet {
    pub MethodID: ULONG,
    pub ops_AttrList: *mut TagItem,
    pub ops_GInfo: *mut GadgetInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of opSet"][::core::mem::size_of::<opSet>() - 12usize];
    ["Alignment of opSet"][::core::mem::align_of::<opSet>() - 2usize];
    ["Offset of field: opSet::MethodID"][::core::mem::offset_of!(opSet, MethodID) - 0usize];
    ["Offset of field: opSet::ops_AttrList"][::core::mem::offset_of!(opSet, ops_AttrList) - 4usize];
    ["Offset of field: opSet::ops_GInfo"][::core::mem::offset_of!(opSet, ops_GInfo) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct opUpdate {
    pub MethodID: ULONG,
    pub opu_AttrList: *mut TagItem,
    pub opu_GInfo: *mut GadgetInfo,
    pub opu_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of opUpdate"][::core::mem::size_of::<opUpdate>() - 16usize];
    ["Alignment of opUpdate"][::core::mem::align_of::<opUpdate>() - 2usize];
    ["Offset of field: opUpdate::MethodID"][::core::mem::offset_of!(opUpdate, MethodID) - 0usize];
    ["Offset of field: opUpdate::opu_AttrList"]
        [::core::mem::offset_of!(opUpdate, opu_AttrList) - 4usize];
    ["Offset of field: opUpdate::opu_GInfo"][::core::mem::offset_of!(opUpdate, opu_GInfo) - 8usize];
    ["Offset of field: opUpdate::opu_Flags"]
        [::core::mem::offset_of!(opUpdate, opu_Flags) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct opGet {
    pub MethodID: ULONG,
    pub opg_AttrID: ULONG,
    pub opg_Storage: *mut ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of opGet"][::core::mem::size_of::<opGet>() - 12usize];
    ["Alignment of opGet"][::core::mem::align_of::<opGet>() - 2usize];
    ["Offset of field: opGet::MethodID"][::core::mem::offset_of!(opGet, MethodID) - 0usize];
    ["Offset of field: opGet::opg_AttrID"][::core::mem::offset_of!(opGet, opg_AttrID) - 4usize];
    ["Offset of field: opGet::opg_Storage"][::core::mem::offset_of!(opGet, opg_Storage) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct opAddTail {
    pub MethodID: ULONG,
    pub opat_List: *mut List,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of opAddTail"][::core::mem::size_of::<opAddTail>() - 8usize];
    ["Alignment of opAddTail"][::core::mem::align_of::<opAddTail>() - 2usize];
    ["Offset of field: opAddTail::MethodID"][::core::mem::offset_of!(opAddTail, MethodID) - 0usize];
    ["Offset of field: opAddTail::opat_List"]
        [::core::mem::offset_of!(opAddTail, opat_List) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct opMember {
    pub MethodID: ULONG,
    pub opam_Object: *mut Object,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of opMember"][::core::mem::size_of::<opMember>() - 8usize];
    ["Alignment of opMember"][::core::mem::align_of::<opMember>() - 2usize];
    ["Offset of field: opMember::MethodID"][::core::mem::offset_of!(opMember, MethodID) - 0usize];
    ["Offset of field: opMember::opam_Object"]
        [::core::mem::offset_of!(opMember, opam_Object) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IClass {
    pub cl_Dispatcher: Hook,
    pub cl_Reserved: ULONG,
    pub cl_Super: *mut IClass,
    pub cl_ID: ClassID,
    pub cl_InstOffset: UWORD,
    pub cl_InstSize: UWORD,
    pub cl_UserData: ULONG,
    pub cl_SubclassCount: ULONG,
    pub cl_ObjectCount: ULONG,
    pub cl_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IClass"][::core::mem::size_of::<IClass>() - 52usize];
    ["Alignment of IClass"][::core::mem::align_of::<IClass>() - 2usize];
    ["Offset of field: IClass::cl_Dispatcher"]
        [::core::mem::offset_of!(IClass, cl_Dispatcher) - 0usize];
    ["Offset of field: IClass::cl_Reserved"]
        [::core::mem::offset_of!(IClass, cl_Reserved) - 20usize];
    ["Offset of field: IClass::cl_Super"][::core::mem::offset_of!(IClass, cl_Super) - 24usize];
    ["Offset of field: IClass::cl_ID"][::core::mem::offset_of!(IClass, cl_ID) - 28usize];
    ["Offset of field: IClass::cl_InstOffset"]
        [::core::mem::offset_of!(IClass, cl_InstOffset) - 32usize];
    ["Offset of field: IClass::cl_InstSize"]
        [::core::mem::offset_of!(IClass, cl_InstSize) - 34usize];
    ["Offset of field: IClass::cl_UserData"]
        [::core::mem::offset_of!(IClass, cl_UserData) - 36usize];
    ["Offset of field: IClass::cl_SubclassCount"]
        [::core::mem::offset_of!(IClass, cl_SubclassCount) - 40usize];
    ["Offset of field: IClass::cl_ObjectCount"]
        [::core::mem::offset_of!(IClass, cl_ObjectCount) - 44usize];
    ["Offset of field: IClass::cl_Flags"][::core::mem::offset_of!(IClass, cl_Flags) - 48usize];
};
pub type Class = IClass;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _Object {
    pub o_Node: MinNode,
    pub o_Class: *mut IClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Object"][::core::mem::size_of::<_Object>() - 12usize];
    ["Alignment of _Object"][::core::mem::align_of::<_Object>() - 2usize];
    ["Offset of field: _Object::o_Node"][::core::mem::offset_of!(_Object, o_Node) - 0usize];
    ["Offset of field: _Object::o_Class"][::core::mem::offset_of!(_Object, o_Class) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ClassLibrary {
    pub cl_Lib: Library,
    pub cl_Pad: UWORD,
    pub cl_Class: *mut Class,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClassLibrary"][::core::mem::size_of::<ClassLibrary>() - 40usize];
    ["Alignment of ClassLibrary"][::core::mem::align_of::<ClassLibrary>() - 2usize];
    ["Offset of field: ClassLibrary::cl_Lib"]
        [::core::mem::offset_of!(ClassLibrary, cl_Lib) - 0usize];
    ["Offset of field: ClassLibrary::cl_Pad"]
        [::core::mem::offset_of!(ClassLibrary, cl_Pad) - 34usize];
    ["Offset of field: ClassLibrary::cl_Class"]
        [::core::mem::offset_of!(ClassLibrary, cl_Class) - 36usize];
};
pub type Tag = ULONG;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TagItem {
    pub ti_Tag: Tag,
    pub ti_Data: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TagItem"][::core::mem::size_of::<TagItem>() - 8usize];
    ["Alignment of TagItem"][::core::mem::align_of::<TagItem>() - 2usize];
    ["Offset of field: TagItem::ti_Tag"][::core::mem::offset_of!(TagItem, ti_Tag) - 0usize];
    ["Offset of field: TagItem::ti_Data"][::core::mem::offset_of!(TagItem, ti_Data) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct apExecute {
    pub MethodID: ULONG,
    pub ape_CommandString: STRPTR,
    pub ape_PortName: STRPTR,
    pub ape_RC: *mut LONG,
    pub ape_RC2: *mut LONG,
    pub ape_Result: *mut STRPTR,
    pub ape_IO: BPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of apExecute"][::core::mem::size_of::<apExecute>() - 28usize];
    ["Alignment of apExecute"][::core::mem::align_of::<apExecute>() - 2usize];
    ["Offset of field: apExecute::MethodID"][::core::mem::offset_of!(apExecute, MethodID) - 0usize];
    ["Offset of field: apExecute::ape_CommandString"]
        [::core::mem::offset_of!(apExecute, ape_CommandString) - 4usize];
    ["Offset of field: apExecute::ape_PortName"]
        [::core::mem::offset_of!(apExecute, ape_PortName) - 8usize];
    ["Offset of field: apExecute::ape_RC"][::core::mem::offset_of!(apExecute, ape_RC) - 12usize];
    ["Offset of field: apExecute::ape_RC2"][::core::mem::offset_of!(apExecute, ape_RC2) - 16usize];
    ["Offset of field: apExecute::ape_Result"]
        [::core::mem::offset_of!(apExecute, ape_Result) - 20usize];
    ["Offset of field: apExecute::ape_IO"][::core::mem::offset_of!(apExecute, ape_IO) - 24usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ARexxCmd {
    pub ac_Name: STRPTR,
    pub ac_ID: UWORD,
    pub ac_Func: FPTR,
    pub ac_ArgTemplate: STRPTR,
    pub ac_Flags: ULONG,
    pub ac_ArgList: *mut ULONG,
    pub ac_RC: LONG,
    pub ac_RC2: LONG,
    pub ac_Result: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ARexxCmd"][::core::mem::size_of::<ARexxCmd>() - 34usize];
    ["Alignment of ARexxCmd"][::core::mem::align_of::<ARexxCmd>() - 2usize];
    ["Offset of field: ARexxCmd::ac_Name"][::core::mem::offset_of!(ARexxCmd, ac_Name) - 0usize];
    ["Offset of field: ARexxCmd::ac_ID"][::core::mem::offset_of!(ARexxCmd, ac_ID) - 4usize];
    ["Offset of field: ARexxCmd::ac_Func"][::core::mem::offset_of!(ARexxCmd, ac_Func) - 6usize];
    ["Offset of field: ARexxCmd::ac_ArgTemplate"]
        [::core::mem::offset_of!(ARexxCmd, ac_ArgTemplate) - 10usize];
    ["Offset of field: ARexxCmd::ac_Flags"][::core::mem::offset_of!(ARexxCmd, ac_Flags) - 14usize];
    ["Offset of field: ARexxCmd::ac_ArgList"]
        [::core::mem::offset_of!(ARexxCmd, ac_ArgList) - 18usize];
    ["Offset of field: ARexxCmd::ac_RC"][::core::mem::offset_of!(ARexxCmd, ac_RC) - 22usize];
    ["Offset of field: ARexxCmd::ac_RC2"][::core::mem::offset_of!(ARexxCmd, ac_RC2) - 26usize];
    ["Offset of field: ARexxCmd::ac_Result"]
        [::core::mem::offset_of!(ARexxCmd, ac_Result) - 30usize];
};
pub const REQIMAGE_DEFAULT: _bindgen_ty_2 = 0;
pub const REQIMAGE_INFO: _bindgen_ty_2 = 1;
pub const REQIMAGE_WARNING: _bindgen_ty_2 = 2;
pub const REQIMAGE_ERROR: _bindgen_ty_2 = 3;
pub const REQIMAGE_QUESTION: _bindgen_ty_2 = 4;
pub const REQIMAGE_INSERTDISK: _bindgen_ty_2 = 5;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct orRequest {
    pub MethodID: ULONG,
    pub or_Attrs: *mut TagItem,
    pub or_Window: *mut Window,
    pub or_Screen: *mut Screen,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of orRequest"][::core::mem::size_of::<orRequest>() - 16usize];
    ["Alignment of orRequest"][::core::mem::align_of::<orRequest>() - 2usize];
    ["Offset of field: orRequest::MethodID"][::core::mem::offset_of!(orRequest, MethodID) - 0usize];
    ["Offset of field: orRequest::or_Attrs"][::core::mem::offset_of!(orRequest, or_Attrs) - 4usize];
    ["Offset of field: orRequest::or_Window"]
        [::core::mem::offset_of!(orRequest, or_Window) - 8usize];
    ["Offset of field: orRequest::or_Screen"]
        [::core::mem::offset_of!(orRequest, or_Screen) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct wmHandle {
    pub MethodID: ULONG,
    pub wmh_Code: *mut WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wmHandle"][::core::mem::size_of::<wmHandle>() - 8usize];
    ["Alignment of wmHandle"][::core::mem::align_of::<wmHandle>() - 2usize];
    ["Offset of field: wmHandle::MethodID"][::core::mem::offset_of!(wmHandle, MethodID) - 0usize];
    ["Offset of field: wmHandle::wmh_Code"][::core::mem::offset_of!(wmHandle, wmh_Code) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct wmActivateGadget {
    pub MethodID: ULONG,
    pub wma_Object: *mut Gadget,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wmActivateGadget"][::core::mem::size_of::<wmActivateGadget>() - 8usize];
    ["Alignment of wmActivateGadget"][::core::mem::align_of::<wmActivateGadget>() - 2usize];
    ["Offset of field: wmActivateGadget::MethodID"]
        [::core::mem::offset_of!(wmActivateGadget, MethodID) - 0usize];
    ["Offset of field: wmActivateGadget::wma_Object"]
        [::core::mem::offset_of!(wmActivateGadget, wma_Object) - 4usize];
};
pub const SnapHow_SAVE: SnapHow = 0;
pub const SnapHow_USE: SnapHow = 1;
pub type SnapHow = ::core::ffi::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct wmSnapshot {
    pub MethodID: ULONG,
    pub How: SnapHow,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wmSnapshot"][::core::mem::size_of::<wmSnapshot>() - 8usize];
    ["Alignment of wmSnapshot"][::core::mem::align_of::<wmSnapshot>() - 2usize];
    ["Offset of field: wmSnapshot::MethodID"]
        [::core::mem::offset_of!(wmSnapshot, MethodID) - 0usize];
    ["Offset of field: wmSnapshot::How"][::core::mem::offset_of!(wmSnapshot, How) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HintInfo {
    pub hi_GadgetID: WORD,
    pub hi_Code: WORD,
    pub hi_Text: STRPTR,
    pub hi_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HintInfo"][::core::mem::size_of::<HintInfo>() - 12usize];
    ["Alignment of HintInfo"][::core::mem::align_of::<HintInfo>() - 2usize];
    ["Offset of field: HintInfo::hi_GadgetID"]
        [::core::mem::offset_of!(HintInfo, hi_GadgetID) - 0usize];
    ["Offset of field: HintInfo::hi_Code"][::core::mem::offset_of!(HintInfo, hi_Code) - 2usize];
    ["Offset of field: HintInfo::hi_Text"][::core::mem::offset_of!(HintInfo, hi_Text) - 4usize];
    ["Offset of field: HintInfo::hi_Flags"][::core::mem::offset_of!(HintInfo, hi_Flags) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ClipboardUnitPartial {
    pub cu_Node: Node,
    pub cu_UnitNum: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClipboardUnitPartial"][::core::mem::size_of::<ClipboardUnitPartial>() - 18usize];
    ["Alignment of ClipboardUnitPartial"][::core::mem::align_of::<ClipboardUnitPartial>() - 2usize];
    ["Offset of field: ClipboardUnitPartial::cu_Node"]
        [::core::mem::offset_of!(ClipboardUnitPartial, cu_Node) - 0usize];
    ["Offset of field: ClipboardUnitPartial::cu_UnitNum"]
        [::core::mem::offset_of!(ClipboardUnitPartial, cu_UnitNum) - 14usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOClipReq {
    pub io_Message: Message,
    pub io_Device: *mut Device,
    pub io_Unit: *mut ClipboardUnitPartial,
    pub io_Command: UWORD,
    pub io_Flags: UBYTE,
    pub io_Error: BYTE,
    pub io_Actual: ULONG,
    pub io_Length: ULONG,
    pub io_Data: STRPTR,
    pub io_Offset: ULONG,
    pub io_ClipID: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOClipReq"][::core::mem::size_of::<IOClipReq>() - 52usize];
    ["Alignment of IOClipReq"][::core::mem::align_of::<IOClipReq>() - 2usize];
    ["Offset of field: IOClipReq::io_Message"]
        [::core::mem::offset_of!(IOClipReq, io_Message) - 0usize];
    ["Offset of field: IOClipReq::io_Device"]
        [::core::mem::offset_of!(IOClipReq, io_Device) - 20usize];
    ["Offset of field: IOClipReq::io_Unit"][::core::mem::offset_of!(IOClipReq, io_Unit) - 24usize];
    ["Offset of field: IOClipReq::io_Command"]
        [::core::mem::offset_of!(IOClipReq, io_Command) - 28usize];
    ["Offset of field: IOClipReq::io_Flags"]
        [::core::mem::offset_of!(IOClipReq, io_Flags) - 30usize];
    ["Offset of field: IOClipReq::io_Error"]
        [::core::mem::offset_of!(IOClipReq, io_Error) - 31usize];
    ["Offset of field: IOClipReq::io_Actual"]
        [::core::mem::offset_of!(IOClipReq, io_Actual) - 32usize];
    ["Offset of field: IOClipReq::io_Length"]
        [::core::mem::offset_of!(IOClipReq, io_Length) - 36usize];
    ["Offset of field: IOClipReq::io_Data"][::core::mem::offset_of!(IOClipReq, io_Data) - 40usize];
    ["Offset of field: IOClipReq::io_Offset"]
        [::core::mem::offset_of!(IOClipReq, io_Offset) - 44usize];
    ["Offset of field: IOClipReq::io_ClipID"]
        [::core::mem::offset_of!(IOClipReq, io_ClipID) - 48usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SatisfyMsg {
    pub sm_Msg: Message,
    pub sm_Unit: UWORD,
    pub sm_ClipID: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SatisfyMsg"][::core::mem::size_of::<SatisfyMsg>() - 26usize];
    ["Alignment of SatisfyMsg"][::core::mem::align_of::<SatisfyMsg>() - 2usize];
    ["Offset of field: SatisfyMsg::sm_Msg"][::core::mem::offset_of!(SatisfyMsg, sm_Msg) - 0usize];
    ["Offset of field: SatisfyMsg::sm_Unit"]
        [::core::mem::offset_of!(SatisfyMsg, sm_Unit) - 20usize];
    ["Offset of field: SatisfyMsg::sm_ClipID"]
        [::core::mem::offset_of!(SatisfyMsg, sm_ClipID) - 22usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ClipHookMsg {
    pub chm_Type: ULONG,
    pub chm_ChangeCmd: LONG,
    pub chm_ClipID: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClipHookMsg"][::core::mem::size_of::<ClipHookMsg>() - 12usize];
    ["Alignment of ClipHookMsg"][::core::mem::align_of::<ClipHookMsg>() - 2usize];
    ["Offset of field: ClipHookMsg::chm_Type"]
        [::core::mem::offset_of!(ClipHookMsg, chm_Type) - 0usize];
    ["Offset of field: ClipHookMsg::chm_ChangeCmd"]
        [::core::mem::offset_of!(ClipHookMsg, chm_ChangeCmd) - 4usize];
    ["Offset of field: ClipHookMsg::chm_ClipID"]
        [::core::mem::offset_of!(ClipHookMsg, chm_ClipID) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IFFHandle {
    pub iff_Stream: ULONG,
    pub iff_Flags: ULONG,
    pub iff_Depth: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IFFHandle"][::core::mem::size_of::<IFFHandle>() - 12usize];
    ["Alignment of IFFHandle"][::core::mem::align_of::<IFFHandle>() - 2usize];
    ["Offset of field: IFFHandle::iff_Stream"]
        [::core::mem::offset_of!(IFFHandle, iff_Stream) - 0usize];
    ["Offset of field: IFFHandle::iff_Flags"]
        [::core::mem::offset_of!(IFFHandle, iff_Flags) - 4usize];
    ["Offset of field: IFFHandle::iff_Depth"]
        [::core::mem::offset_of!(IFFHandle, iff_Depth) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IFFStreamCmd {
    pub sc_Command: LONG,
    pub sc_Buf: APTR,
    pub sc_NBytes: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IFFStreamCmd"][::core::mem::size_of::<IFFStreamCmd>() - 12usize];
    ["Alignment of IFFStreamCmd"][::core::mem::align_of::<IFFStreamCmd>() - 2usize];
    ["Offset of field: IFFStreamCmd::sc_Command"]
        [::core::mem::offset_of!(IFFStreamCmd, sc_Command) - 0usize];
    ["Offset of field: IFFStreamCmd::sc_Buf"]
        [::core::mem::offset_of!(IFFStreamCmd, sc_Buf) - 4usize];
    ["Offset of field: IFFStreamCmd::sc_NBytes"]
        [::core::mem::offset_of!(IFFStreamCmd, sc_NBytes) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ContextNode {
    pub cn_Node: MinNode,
    pub cn_ID: LONG,
    pub cn_Type: LONG,
    pub cn_Size: LONG,
    pub cn_Scan: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ContextNode"][::core::mem::size_of::<ContextNode>() - 24usize];
    ["Alignment of ContextNode"][::core::mem::align_of::<ContextNode>() - 2usize];
    ["Offset of field: ContextNode::cn_Node"]
        [::core::mem::offset_of!(ContextNode, cn_Node) - 0usize];
    ["Offset of field: ContextNode::cn_ID"][::core::mem::offset_of!(ContextNode, cn_ID) - 8usize];
    ["Offset of field: ContextNode::cn_Type"]
        [::core::mem::offset_of!(ContextNode, cn_Type) - 12usize];
    ["Offset of field: ContextNode::cn_Size"]
        [::core::mem::offset_of!(ContextNode, cn_Size) - 16usize];
    ["Offset of field: ContextNode::cn_Scan"]
        [::core::mem::offset_of!(ContextNode, cn_Scan) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct LocalContextItem {
    pub lci_Node: MinNode,
    pub lci_ID: ULONG,
    pub lci_Type: ULONG,
    pub lci_Ident: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LocalContextItem"][::core::mem::size_of::<LocalContextItem>() - 20usize];
    ["Alignment of LocalContextItem"][::core::mem::align_of::<LocalContextItem>() - 2usize];
    ["Offset of field: LocalContextItem::lci_Node"]
        [::core::mem::offset_of!(LocalContextItem, lci_Node) - 0usize];
    ["Offset of field: LocalContextItem::lci_ID"]
        [::core::mem::offset_of!(LocalContextItem, lci_ID) - 8usize];
    ["Offset of field: LocalContextItem::lci_Type"]
        [::core::mem::offset_of!(LocalContextItem, lci_Type) - 12usize];
    ["Offset of field: LocalContextItem::lci_Ident"]
        [::core::mem::offset_of!(LocalContextItem, lci_Ident) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct StoredProperty {
    pub sp_Size: LONG,
    pub sp_Data: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StoredProperty"][::core::mem::size_of::<StoredProperty>() - 8usize];
    ["Alignment of StoredProperty"][::core::mem::align_of::<StoredProperty>() - 2usize];
    ["Offset of field: StoredProperty::sp_Size"]
        [::core::mem::offset_of!(StoredProperty, sp_Size) - 0usize];
    ["Offset of field: StoredProperty::sp_Data"]
        [::core::mem::offset_of!(StoredProperty, sp_Data) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CollectionItem {
    pub ci_Next: *mut CollectionItem,
    pub ci_Size: LONG,
    pub ci_Data: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CollectionItem"][::core::mem::size_of::<CollectionItem>() - 12usize];
    ["Alignment of CollectionItem"][::core::mem::align_of::<CollectionItem>() - 2usize];
    ["Offset of field: CollectionItem::ci_Next"]
        [::core::mem::offset_of!(CollectionItem, ci_Next) - 0usize];
    ["Offset of field: CollectionItem::ci_Size"]
        [::core::mem::offset_of!(CollectionItem, ci_Size) - 4usize];
    ["Offset of field: CollectionItem::ci_Data"]
        [::core::mem::offset_of!(CollectionItem, ci_Data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClipboardHandle {
    pub cbh_Req: IOClipReq,
    pub cbh_CBport: MsgPort,
    pub cbh_SatisfyPort: MsgPort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClipboardHandle"][::core::mem::size_of::<ClipboardHandle>() - 120usize];
    ["Alignment of ClipboardHandle"][::core::mem::align_of::<ClipboardHandle>() - 2usize];
    ["Offset of field: ClipboardHandle::cbh_Req"]
        [::core::mem::offset_of!(ClipboardHandle, cbh_Req) - 0usize];
    ["Offset of field: ClipboardHandle::cbh_CBport"]
        [::core::mem::offset_of!(ClipboardHandle, cbh_CBport) - 52usize];
    ["Offset of field: ClipboardHandle::cbh_SatisfyPort"]
        [::core::mem::offset_of!(ClipboardHandle, cbh_SatisfyPort) - 86usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DataTypeHeader {
    pub dth_Name: STRPTR,
    pub dth_BaseName: STRPTR,
    pub dth_Pattern: STRPTR,
    pub dth_Mask: *mut WORD,
    pub dth_GroupID: ULONG,
    pub dth_ID: ULONG,
    pub dth_MaskLen: WORD,
    pub dth_Pad: WORD,
    pub dth_Flags: UWORD,
    pub dth_Priority: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DataTypeHeader"][::core::mem::size_of::<DataTypeHeader>() - 32usize];
    ["Alignment of DataTypeHeader"][::core::mem::align_of::<DataTypeHeader>() - 2usize];
    ["Offset of field: DataTypeHeader::dth_Name"]
        [::core::mem::offset_of!(DataTypeHeader, dth_Name) - 0usize];
    ["Offset of field: DataTypeHeader::dth_BaseName"]
        [::core::mem::offset_of!(DataTypeHeader, dth_BaseName) - 4usize];
    ["Offset of field: DataTypeHeader::dth_Pattern"]
        [::core::mem::offset_of!(DataTypeHeader, dth_Pattern) - 8usize];
    ["Offset of field: DataTypeHeader::dth_Mask"]
        [::core::mem::offset_of!(DataTypeHeader, dth_Mask) - 12usize];
    ["Offset of field: DataTypeHeader::dth_GroupID"]
        [::core::mem::offset_of!(DataTypeHeader, dth_GroupID) - 16usize];
    ["Offset of field: DataTypeHeader::dth_ID"]
        [::core::mem::offset_of!(DataTypeHeader, dth_ID) - 20usize];
    ["Offset of field: DataTypeHeader::dth_MaskLen"]
        [::core::mem::offset_of!(DataTypeHeader, dth_MaskLen) - 24usize];
    ["Offset of field: DataTypeHeader::dth_Pad"]
        [::core::mem::offset_of!(DataTypeHeader, dth_Pad) - 26usize];
    ["Offset of field: DataTypeHeader::dth_Flags"]
        [::core::mem::offset_of!(DataTypeHeader, dth_Flags) - 28usize];
    ["Offset of field: DataTypeHeader::dth_Priority"]
        [::core::mem::offset_of!(DataTypeHeader, dth_Priority) - 30usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DTHookContext {
    pub dthc_SysBase: *mut Library,
    pub dthc_DOSBase: *mut Library,
    pub dthc_IFFParseBase: *mut Library,
    pub dthc_UtilityBase: *mut Library,
    pub dthc_Lock: BPTR,
    pub dthc_FIB: *mut FileInfoBlock,
    pub dthc_FileHandle: BPTR,
    pub dthc_IFF: *mut IFFHandle,
    pub dthc_Buffer: STRPTR,
    pub dthc_BufferLength: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DTHookContext"][::core::mem::size_of::<DTHookContext>() - 40usize];
    ["Alignment of DTHookContext"][::core::mem::align_of::<DTHookContext>() - 2usize];
    ["Offset of field: DTHookContext::dthc_SysBase"]
        [::core::mem::offset_of!(DTHookContext, dthc_SysBase) - 0usize];
    ["Offset of field: DTHookContext::dthc_DOSBase"]
        [::core::mem::offset_of!(DTHookContext, dthc_DOSBase) - 4usize];
    ["Offset of field: DTHookContext::dthc_IFFParseBase"]
        [::core::mem::offset_of!(DTHookContext, dthc_IFFParseBase) - 8usize];
    ["Offset of field: DTHookContext::dthc_UtilityBase"]
        [::core::mem::offset_of!(DTHookContext, dthc_UtilityBase) - 12usize];
    ["Offset of field: DTHookContext::dthc_Lock"]
        [::core::mem::offset_of!(DTHookContext, dthc_Lock) - 16usize];
    ["Offset of field: DTHookContext::dthc_FIB"]
        [::core::mem::offset_of!(DTHookContext, dthc_FIB) - 20usize];
    ["Offset of field: DTHookContext::dthc_FileHandle"]
        [::core::mem::offset_of!(DTHookContext, dthc_FileHandle) - 24usize];
    ["Offset of field: DTHookContext::dthc_IFF"]
        [::core::mem::offset_of!(DTHookContext, dthc_IFF) - 28usize];
    ["Offset of field: DTHookContext::dthc_Buffer"]
        [::core::mem::offset_of!(DTHookContext, dthc_Buffer) - 32usize];
    ["Offset of field: DTHookContext::dthc_BufferLength"]
        [::core::mem::offset_of!(DTHookContext, dthc_BufferLength) - 36usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Tool {
    pub tn_Which: UWORD,
    pub tn_Flags: UWORD,
    pub tn_Program: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Tool"][::core::mem::size_of::<Tool>() - 8usize];
    ["Alignment of Tool"][::core::mem::align_of::<Tool>() - 2usize];
    ["Offset of field: Tool::tn_Which"][::core::mem::offset_of!(Tool, tn_Which) - 0usize];
    ["Offset of field: Tool::tn_Flags"][::core::mem::offset_of!(Tool, tn_Flags) - 2usize];
    ["Offset of field: Tool::tn_Program"][::core::mem::offset_of!(Tool, tn_Program) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DataType {
    pub dtn_Node1: Node,
    pub dtn_Node2: Node,
    pub dtn_Header: *mut DataTypeHeader,
    pub dtn_ToolList: List,
    pub dtn_FunctionName: STRPTR,
    pub dtn_AttrList: *mut TagItem,
    pub dtn_Length: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DataType"][::core::mem::size_of::<DataType>() - 58usize];
    ["Alignment of DataType"][::core::mem::align_of::<DataType>() - 2usize];
    ["Offset of field: DataType::dtn_Node1"][::core::mem::offset_of!(DataType, dtn_Node1) - 0usize];
    ["Offset of field: DataType::dtn_Node2"]
        [::core::mem::offset_of!(DataType, dtn_Node2) - 14usize];
    ["Offset of field: DataType::dtn_Header"]
        [::core::mem::offset_of!(DataType, dtn_Header) - 28usize];
    ["Offset of field: DataType::dtn_ToolList"]
        [::core::mem::offset_of!(DataType, dtn_ToolList) - 32usize];
    ["Offset of field: DataType::dtn_FunctionName"]
        [::core::mem::offset_of!(DataType, dtn_FunctionName) - 46usize];
    ["Offset of field: DataType::dtn_AttrList"]
        [::core::mem::offset_of!(DataType, dtn_AttrList) - 50usize];
    ["Offset of field: DataType::dtn_Length"]
        [::core::mem::offset_of!(DataType, dtn_Length) - 54usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ToolNode {
    pub tn_Node: Node,
    pub tn_Tool: Tool,
    pub tn_Length: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ToolNode"][::core::mem::size_of::<ToolNode>() - 26usize];
    ["Alignment of ToolNode"][::core::mem::align_of::<ToolNode>() - 2usize];
    ["Offset of field: ToolNode::tn_Node"][::core::mem::offset_of!(ToolNode, tn_Node) - 0usize];
    ["Offset of field: ToolNode::tn_Tool"][::core::mem::offset_of!(ToolNode, tn_Tool) - 14usize];
    ["Offset of field: ToolNode::tn_Length"]
        [::core::mem::offset_of!(ToolNode, tn_Length) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rectangle {
    pub MinX: WORD,
    pub MinY: WORD,
    pub MaxX: WORD,
    pub MaxY: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Rectangle"][::core::mem::size_of::<Rectangle>() - 8usize];
    ["Alignment of Rectangle"][::core::mem::align_of::<Rectangle>() - 2usize];
    ["Offset of field: Rectangle::MinX"][::core::mem::offset_of!(Rectangle, MinX) - 0usize];
    ["Offset of field: Rectangle::MinY"][::core::mem::offset_of!(Rectangle, MinY) - 2usize];
    ["Offset of field: Rectangle::MaxX"][::core::mem::offset_of!(Rectangle, MaxX) - 4usize];
    ["Offset of field: Rectangle::MaxY"][::core::mem::offset_of!(Rectangle, MaxY) - 6usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Rect32 {
    pub MinX: LONG,
    pub MinY: LONG,
    pub MaxX: LONG,
    pub MaxY: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Rect32"][::core::mem::size_of::<Rect32>() - 16usize];
    ["Alignment of Rect32"][::core::mem::align_of::<Rect32>() - 2usize];
    ["Offset of field: Rect32::MinX"][::core::mem::offset_of!(Rect32, MinX) - 0usize];
    ["Offset of field: Rect32::MinY"][::core::mem::offset_of!(Rect32, MinY) - 4usize];
    ["Offset of field: Rect32::MaxX"][::core::mem::offset_of!(Rect32, MaxX) - 8usize];
    ["Offset of field: Rect32::MaxY"][::core::mem::offset_of!(Rect32, MaxY) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tPoint {
    pub x: WORD,
    pub y: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tPoint"][::core::mem::size_of::<tPoint>() - 4usize];
    ["Alignment of tPoint"][::core::mem::align_of::<tPoint>() - 2usize];
    ["Offset of field: tPoint::x"][::core::mem::offset_of!(tPoint, x) - 0usize];
    ["Offset of field: tPoint::y"][::core::mem::offset_of!(tPoint, y) - 2usize];
};
pub type Point = tPoint;
pub type PLANEPTR = *mut UBYTE;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BitMap {
    pub BytesPerRow: UWORD,
    pub Rows: UWORD,
    pub Flags: UBYTE,
    pub Depth: UBYTE,
    pub pad: UWORD,
    pub Planes: [PLANEPTR; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BitMap"][::core::mem::size_of::<BitMap>() - 40usize];
    ["Alignment of BitMap"][::core::mem::align_of::<BitMap>() - 2usize];
    ["Offset of field: BitMap::BytesPerRow"][::core::mem::offset_of!(BitMap, BytesPerRow) - 0usize];
    ["Offset of field: BitMap::Rows"][::core::mem::offset_of!(BitMap, Rows) - 2usize];
    ["Offset of field: BitMap::Flags"][::core::mem::offset_of!(BitMap, Flags) - 4usize];
    ["Offset of field: BitMap::Depth"][::core::mem::offset_of!(BitMap, Depth) - 5usize];
    ["Offset of field: BitMap::pad"][::core::mem::offset_of!(BitMap, pad) - 6usize];
    ["Offset of field: BitMap::Planes"][::core::mem::offset_of!(BitMap, Planes) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Layer {
    pub front: *mut Layer,
    pub back: *mut Layer,
    pub ClipRect: *mut ClipRect,
    pub rp: *mut RastPort,
    pub bounds: Rectangle,
    pub nlink: *mut Layer,
    pub priority: UWORD,
    pub Flags: UWORD,
    pub SuperBitMap: *mut BitMap,
    pub SuperClipRect: *mut ClipRect,
    pub Window: APTR,
    pub Scroll_X: WORD,
    pub Scroll_Y: WORD,
    pub OnScreen: *mut ClipRect,
    pub OffScreen: *mut ClipRect,
    pub Backup: *mut ClipRect,
    pub SuperSaveClipRects: *mut ClipRect,
    pub Undamaged: *mut ClipRect,
    pub LayerInfo: *mut Layer_Info,
    pub Lock: SignalSemaphore,
    pub BackFill: *mut Hook,
    pub reserved1: ULONG,
    pub ClipRegion: *mut Region,
    pub clipped: *mut ClipRect,
    pub Width: WORD,
    pub Height: WORD,
    pub reserved2: [UBYTE; 18usize],
    pub DamageList: *mut Region,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Layer"][::core::mem::size_of::<Layer>() - 160usize];
    ["Alignment of Layer"][::core::mem::align_of::<Layer>() - 2usize];
    ["Offset of field: Layer::front"][::core::mem::offset_of!(Layer, front) - 0usize];
    ["Offset of field: Layer::back"][::core::mem::offset_of!(Layer, back) - 4usize];
    ["Offset of field: Layer::ClipRect"][::core::mem::offset_of!(Layer, ClipRect) - 8usize];
    ["Offset of field: Layer::rp"][::core::mem::offset_of!(Layer, rp) - 12usize];
    ["Offset of field: Layer::bounds"][::core::mem::offset_of!(Layer, bounds) - 16usize];
    ["Offset of field: Layer::nlink"][::core::mem::offset_of!(Layer, nlink) - 24usize];
    ["Offset of field: Layer::priority"][::core::mem::offset_of!(Layer, priority) - 28usize];
    ["Offset of field: Layer::Flags"][::core::mem::offset_of!(Layer, Flags) - 30usize];
    ["Offset of field: Layer::SuperBitMap"][::core::mem::offset_of!(Layer, SuperBitMap) - 32usize];
    ["Offset of field: Layer::SuperClipRect"]
        [::core::mem::offset_of!(Layer, SuperClipRect) - 36usize];
    ["Offset of field: Layer::Window"][::core::mem::offset_of!(Layer, Window) - 40usize];
    ["Offset of field: Layer::Scroll_X"][::core::mem::offset_of!(Layer, Scroll_X) - 44usize];
    ["Offset of field: Layer::Scroll_Y"][::core::mem::offset_of!(Layer, Scroll_Y) - 46usize];
    ["Offset of field: Layer::OnScreen"][::core::mem::offset_of!(Layer, OnScreen) - 48usize];
    ["Offset of field: Layer::OffScreen"][::core::mem::offset_of!(Layer, OffScreen) - 52usize];
    ["Offset of field: Layer::Backup"][::core::mem::offset_of!(Layer, Backup) - 56usize];
    ["Offset of field: Layer::SuperSaveClipRects"]
        [::core::mem::offset_of!(Layer, SuperSaveClipRects) - 60usize];
    ["Offset of field: Layer::Undamaged"][::core::mem::offset_of!(Layer, Undamaged) - 64usize];
    ["Offset of field: Layer::LayerInfo"][::core::mem::offset_of!(Layer, LayerInfo) - 68usize];
    ["Offset of field: Layer::Lock"][::core::mem::offset_of!(Layer, Lock) - 72usize];
    ["Offset of field: Layer::BackFill"][::core::mem::offset_of!(Layer, BackFill) - 118usize];
    ["Offset of field: Layer::reserved1"][::core::mem::offset_of!(Layer, reserved1) - 122usize];
    ["Offset of field: Layer::ClipRegion"][::core::mem::offset_of!(Layer, ClipRegion) - 126usize];
    ["Offset of field: Layer::clipped"][::core::mem::offset_of!(Layer, clipped) - 130usize];
    ["Offset of field: Layer::Width"][::core::mem::offset_of!(Layer, Width) - 134usize];
    ["Offset of field: Layer::Height"][::core::mem::offset_of!(Layer, Height) - 136usize];
    ["Offset of field: Layer::reserved2"][::core::mem::offset_of!(Layer, reserved2) - 138usize];
    ["Offset of field: Layer::DamageList"][::core::mem::offset_of!(Layer, DamageList) - 156usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ClipRect {
    pub Next: *mut ClipRect,
    pub reservedlink: *mut ClipRect,
    pub obscured: LONG,
    pub BitMap: *mut BitMap,
    pub bounds: Rectangle,
    pub vlink: *mut ClipRect,
    pub home: *mut Layer_Info,
    pub reserved: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClipRect"][::core::mem::size_of::<ClipRect>() - 36usize];
    ["Alignment of ClipRect"][::core::mem::align_of::<ClipRect>() - 2usize];
    ["Offset of field: ClipRect::Next"][::core::mem::offset_of!(ClipRect, Next) - 0usize];
    ["Offset of field: ClipRect::reservedlink"]
        [::core::mem::offset_of!(ClipRect, reservedlink) - 4usize];
    ["Offset of field: ClipRect::obscured"][::core::mem::offset_of!(ClipRect, obscured) - 8usize];
    ["Offset of field: ClipRect::BitMap"][::core::mem::offset_of!(ClipRect, BitMap) - 12usize];
    ["Offset of field: ClipRect::bounds"][::core::mem::offset_of!(ClipRect, bounds) - 16usize];
    ["Offset of field: ClipRect::vlink"][::core::mem::offset_of!(ClipRect, vlink) - 24usize];
    ["Offset of field: ClipRect::home"][::core::mem::offset_of!(ClipRect, home) - 28usize];
    ["Offset of field: ClipRect::reserved"][::core::mem::offset_of!(ClipRect, reserved) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CopIns {
    pub OpCode: WORD,
    pub u3: CopIns__bindgen_ty_1,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union CopIns__bindgen_ty_1 {
    pub nxtlist: *mut CopList,
    pub u4: CopIns__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CopIns__bindgen_ty_1__bindgen_ty_1 {
    pub u1: CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub u2: CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub VWaitPos: WORD,
    pub DestAddr: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::VWaitPos"][::core::mem::offset_of!(
        CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        VWaitPos
    ) - 0usize];
    ["Offset of field: CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::DestAddr"][::core::mem::offset_of!(
        CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        DestAddr
    ) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub HWaitPos: WORD,
    pub DestData: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Alignment of CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::HWaitPos"][::core::mem::offset_of!(
        CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
        HWaitPos
    ) - 0usize];
    ["Offset of field: CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::DestData"][::core::mem::offset_of!(
        CopIns__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
        DestData
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CopIns__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<CopIns__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of CopIns__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<CopIns__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: CopIns__bindgen_ty_1__bindgen_ty_1::u1"]
        [::core::mem::offset_of!(CopIns__bindgen_ty_1__bindgen_ty_1, u1) - 0usize];
    ["Offset of field: CopIns__bindgen_ty_1__bindgen_ty_1::u2"]
        [::core::mem::offset_of!(CopIns__bindgen_ty_1__bindgen_ty_1, u2) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CopIns__bindgen_ty_1"][::core::mem::size_of::<CopIns__bindgen_ty_1>() - 4usize];
    ["Alignment of CopIns__bindgen_ty_1"][::core::mem::align_of::<CopIns__bindgen_ty_1>() - 2usize];
    ["Offset of field: CopIns__bindgen_ty_1::nxtlist"]
        [::core::mem::offset_of!(CopIns__bindgen_ty_1, nxtlist) - 0usize];
    ["Offset of field: CopIns__bindgen_ty_1::u4"]
        [::core::mem::offset_of!(CopIns__bindgen_ty_1, u4) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CopIns"][::core::mem::size_of::<CopIns>() - 6usize];
    ["Alignment of CopIns"][::core::mem::align_of::<CopIns>() - 2usize];
    ["Offset of field: CopIns::OpCode"][::core::mem::offset_of!(CopIns, OpCode) - 0usize];
    ["Offset of field: CopIns::u3"][::core::mem::offset_of!(CopIns, u3) - 2usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct cprlist {
    pub Next: *mut cprlist,
    pub start: *mut UWORD,
    pub MaxCount: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cprlist"][::core::mem::size_of::<cprlist>() - 10usize];
    ["Alignment of cprlist"][::core::mem::align_of::<cprlist>() - 2usize];
    ["Offset of field: cprlist::Next"][::core::mem::offset_of!(cprlist, Next) - 0usize];
    ["Offset of field: cprlist::start"][::core::mem::offset_of!(cprlist, start) - 4usize];
    ["Offset of field: cprlist::MaxCount"][::core::mem::offset_of!(cprlist, MaxCount) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CopList {
    pub Next: *mut CopList,
    pub _CopList: *mut CopList,
    pub _ViewPort: *mut ViewPort,
    pub CopIns: *mut CopIns,
    pub CopPtr: *mut CopIns,
    pub CopLStart: *mut UWORD,
    pub CopSStart: *mut UWORD,
    pub Count: WORD,
    pub MaxCount: WORD,
    pub DyOffset: WORD,
    pub SLRepeat: UWORD,
    pub Flags: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CopList"][::core::mem::size_of::<CopList>() - 38usize];
    ["Alignment of CopList"][::core::mem::align_of::<CopList>() - 2usize];
    ["Offset of field: CopList::Next"][::core::mem::offset_of!(CopList, Next) - 0usize];
    ["Offset of field: CopList::_CopList"][::core::mem::offset_of!(CopList, _CopList) - 4usize];
    ["Offset of field: CopList::_ViewPort"][::core::mem::offset_of!(CopList, _ViewPort) - 8usize];
    ["Offset of field: CopList::CopIns"][::core::mem::offset_of!(CopList, CopIns) - 12usize];
    ["Offset of field: CopList::CopPtr"][::core::mem::offset_of!(CopList, CopPtr) - 16usize];
    ["Offset of field: CopList::CopLStart"][::core::mem::offset_of!(CopList, CopLStart) - 20usize];
    ["Offset of field: CopList::CopSStart"][::core::mem::offset_of!(CopList, CopSStart) - 24usize];
    ["Offset of field: CopList::Count"][::core::mem::offset_of!(CopList, Count) - 28usize];
    ["Offset of field: CopList::MaxCount"][::core::mem::offset_of!(CopList, MaxCount) - 30usize];
    ["Offset of field: CopList::DyOffset"][::core::mem::offset_of!(CopList, DyOffset) - 32usize];
    ["Offset of field: CopList::SLRepeat"][::core::mem::offset_of!(CopList, SLRepeat) - 34usize];
    ["Offset of field: CopList::Flags"][::core::mem::offset_of!(CopList, Flags) - 36usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct UCopList {
    pub Next: *mut UCopList,
    pub FirstCopList: *mut CopList,
    pub CopList: *mut CopList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UCopList"][::core::mem::size_of::<UCopList>() - 12usize];
    ["Alignment of UCopList"][::core::mem::align_of::<UCopList>() - 2usize];
    ["Offset of field: UCopList::Next"][::core::mem::offset_of!(UCopList, Next) - 0usize];
    ["Offset of field: UCopList::FirstCopList"]
        [::core::mem::offset_of!(UCopList, FirstCopList) - 4usize];
    ["Offset of field: UCopList::CopList"][::core::mem::offset_of!(UCopList, CopList) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct copinit {
    pub vsync_hblank: [UWORD; 2usize],
    pub diagstrt: [UWORD; 12usize],
    pub fm0: [UWORD; 2usize],
    pub diwstart: [UWORD; 10usize],
    pub bplcon2: [UWORD; 2usize],
    pub sprfix: [UWORD; 16usize],
    pub sprstrtup: [UWORD; 32usize],
    pub wait14: [UWORD; 2usize],
    pub norm_hblank: [UWORD; 2usize],
    pub jump: [UWORD; 2usize],
    pub wait_forever: [UWORD; 6usize],
    pub sprstop: [UWORD; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of copinit"][::core::mem::size_of::<copinit>() - 192usize];
    ["Alignment of copinit"][::core::mem::align_of::<copinit>() - 2usize];
    ["Offset of field: copinit::vsync_hblank"]
        [::core::mem::offset_of!(copinit, vsync_hblank) - 0usize];
    ["Offset of field: copinit::diagstrt"][::core::mem::offset_of!(copinit, diagstrt) - 4usize];
    ["Offset of field: copinit::fm0"][::core::mem::offset_of!(copinit, fm0) - 28usize];
    ["Offset of field: copinit::diwstart"][::core::mem::offset_of!(copinit, diwstart) - 32usize];
    ["Offset of field: copinit::bplcon2"][::core::mem::offset_of!(copinit, bplcon2) - 52usize];
    ["Offset of field: copinit::sprfix"][::core::mem::offset_of!(copinit, sprfix) - 56usize];
    ["Offset of field: copinit::sprstrtup"][::core::mem::offset_of!(copinit, sprstrtup) - 88usize];
    ["Offset of field: copinit::wait14"][::core::mem::offset_of!(copinit, wait14) - 152usize];
    ["Offset of field: copinit::norm_hblank"]
        [::core::mem::offset_of!(copinit, norm_hblank) - 156usize];
    ["Offset of field: copinit::jump"][::core::mem::offset_of!(copinit, jump) - 160usize];
    ["Offset of field: copinit::wait_forever"]
        [::core::mem::offset_of!(copinit, wait_forever) - 164usize];
    ["Offset of field: copinit::sprstop"][::core::mem::offset_of!(copinit, sprstop) - 176usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExtendedNode {
    pub xln_Succ: *mut Node,
    pub xln_Pred: *mut Node,
    pub xln_Type: UBYTE,
    pub xln_Pri: BYTE,
    pub xln_Name: *mut ::core::ffi::c_char,
    pub xln_Subsystem: UBYTE,
    pub xln_Subtype: UBYTE,
    pub xln_Library: *mut GfxBase,
    pub xln_Init: FPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExtendedNode"][::core::mem::size_of::<ExtendedNode>() - 24usize];
    ["Alignment of ExtendedNode"][::core::mem::align_of::<ExtendedNode>() - 2usize];
    ["Offset of field: ExtendedNode::xln_Succ"]
        [::core::mem::offset_of!(ExtendedNode, xln_Succ) - 0usize];
    ["Offset of field: ExtendedNode::xln_Pred"]
        [::core::mem::offset_of!(ExtendedNode, xln_Pred) - 4usize];
    ["Offset of field: ExtendedNode::xln_Type"]
        [::core::mem::offset_of!(ExtendedNode, xln_Type) - 8usize];
    ["Offset of field: ExtendedNode::xln_Pri"]
        [::core::mem::offset_of!(ExtendedNode, xln_Pri) - 9usize];
    ["Offset of field: ExtendedNode::xln_Name"]
        [::core::mem::offset_of!(ExtendedNode, xln_Name) - 10usize];
    ["Offset of field: ExtendedNode::xln_Subsystem"]
        [::core::mem::offset_of!(ExtendedNode, xln_Subsystem) - 14usize];
    ["Offset of field: ExtendedNode::xln_Subtype"]
        [::core::mem::offset_of!(ExtendedNode, xln_Subtype) - 15usize];
    ["Offset of field: ExtendedNode::xln_Library"]
        [::core::mem::offset_of!(ExtendedNode, xln_Library) - 16usize];
    ["Offset of field: ExtendedNode::xln_Init"]
        [::core::mem::offset_of!(ExtendedNode, xln_Init) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MonitorSpec {
    pub ms_Node: ExtendedNode,
    pub ms_Flags: UWORD,
    pub ratioh: LONG,
    pub ratiov: LONG,
    pub total_rows: UWORD,
    pub total_colorclocks: UWORD,
    pub DeniseMaxDisplayColumn: UWORD,
    pub BeamCon0: UWORD,
    pub min_row: UWORD,
    pub ms_Special: *mut SpecialMonitor,
    pub ms_OpenCount: WORD,
    pub ms_transform: FPTR,
    pub ms_translate: FPTR,
    pub ms_scale: FPTR,
    pub ms_xoffset: UWORD,
    pub ms_yoffset: UWORD,
    pub ms_LegalView: Rectangle,
    pub ms_maxoscan: FPTR,
    pub ms_videoscan: FPTR,
    pub DeniseMinDisplayColumn: UWORD,
    pub DisplayCompatible: ULONG,
    pub DisplayInfoDataBase: List,
    pub DisplayInfoDataBaseSemaphore: SignalSemaphore,
    pub ms_MrgCop: FPTR,
    pub ms_LoadView: FPTR,
    pub ms_KillView: FPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MonitorSpec"][::core::mem::size_of::<MonitorSpec>() - 160usize];
    ["Alignment of MonitorSpec"][::core::mem::align_of::<MonitorSpec>() - 2usize];
    ["Offset of field: MonitorSpec::ms_Node"]
        [::core::mem::offset_of!(MonitorSpec, ms_Node) - 0usize];
    ["Offset of field: MonitorSpec::ms_Flags"]
        [::core::mem::offset_of!(MonitorSpec, ms_Flags) - 24usize];
    ["Offset of field: MonitorSpec::ratioh"]
        [::core::mem::offset_of!(MonitorSpec, ratioh) - 26usize];
    ["Offset of field: MonitorSpec::ratiov"]
        [::core::mem::offset_of!(MonitorSpec, ratiov) - 30usize];
    ["Offset of field: MonitorSpec::total_rows"]
        [::core::mem::offset_of!(MonitorSpec, total_rows) - 34usize];
    ["Offset of field: MonitorSpec::total_colorclocks"]
        [::core::mem::offset_of!(MonitorSpec, total_colorclocks) - 36usize];
    ["Offset of field: MonitorSpec::DeniseMaxDisplayColumn"]
        [::core::mem::offset_of!(MonitorSpec, DeniseMaxDisplayColumn) - 38usize];
    ["Offset of field: MonitorSpec::BeamCon0"]
        [::core::mem::offset_of!(MonitorSpec, BeamCon0) - 40usize];
    ["Offset of field: MonitorSpec::min_row"]
        [::core::mem::offset_of!(MonitorSpec, min_row) - 42usize];
    ["Offset of field: MonitorSpec::ms_Special"]
        [::core::mem::offset_of!(MonitorSpec, ms_Special) - 44usize];
    ["Offset of field: MonitorSpec::ms_OpenCount"]
        [::core::mem::offset_of!(MonitorSpec, ms_OpenCount) - 48usize];
    ["Offset of field: MonitorSpec::ms_transform"]
        [::core::mem::offset_of!(MonitorSpec, ms_transform) - 50usize];
    ["Offset of field: MonitorSpec::ms_translate"]
        [::core::mem::offset_of!(MonitorSpec, ms_translate) - 54usize];
    ["Offset of field: MonitorSpec::ms_scale"]
        [::core::mem::offset_of!(MonitorSpec, ms_scale) - 58usize];
    ["Offset of field: MonitorSpec::ms_xoffset"]
        [::core::mem::offset_of!(MonitorSpec, ms_xoffset) - 62usize];
    ["Offset of field: MonitorSpec::ms_yoffset"]
        [::core::mem::offset_of!(MonitorSpec, ms_yoffset) - 64usize];
    ["Offset of field: MonitorSpec::ms_LegalView"]
        [::core::mem::offset_of!(MonitorSpec, ms_LegalView) - 66usize];
    ["Offset of field: MonitorSpec::ms_maxoscan"]
        [::core::mem::offset_of!(MonitorSpec, ms_maxoscan) - 74usize];
    ["Offset of field: MonitorSpec::ms_videoscan"]
        [::core::mem::offset_of!(MonitorSpec, ms_videoscan) - 78usize];
    ["Offset of field: MonitorSpec::DeniseMinDisplayColumn"]
        [::core::mem::offset_of!(MonitorSpec, DeniseMinDisplayColumn) - 82usize];
    ["Offset of field: MonitorSpec::DisplayCompatible"]
        [::core::mem::offset_of!(MonitorSpec, DisplayCompatible) - 84usize];
    ["Offset of field: MonitorSpec::DisplayInfoDataBase"]
        [::core::mem::offset_of!(MonitorSpec, DisplayInfoDataBase) - 88usize];
    ["Offset of field: MonitorSpec::DisplayInfoDataBaseSemaphore"]
        [::core::mem::offset_of!(MonitorSpec, DisplayInfoDataBaseSemaphore) - 102usize];
    ["Offset of field: MonitorSpec::ms_MrgCop"]
        [::core::mem::offset_of!(MonitorSpec, ms_MrgCop) - 148usize];
    ["Offset of field: MonitorSpec::ms_LoadView"]
        [::core::mem::offset_of!(MonitorSpec, ms_LoadView) - 152usize];
    ["Offset of field: MonitorSpec::ms_KillView"]
        [::core::mem::offset_of!(MonitorSpec, ms_KillView) - 156usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnalogSignalInterval {
    pub asi_Start: UWORD,
    pub asi_Stop: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnalogSignalInterval"][::core::mem::size_of::<AnalogSignalInterval>() - 4usize];
    ["Alignment of AnalogSignalInterval"][::core::mem::align_of::<AnalogSignalInterval>() - 2usize];
    ["Offset of field: AnalogSignalInterval::asi_Start"]
        [::core::mem::offset_of!(AnalogSignalInterval, asi_Start) - 0usize];
    ["Offset of field: AnalogSignalInterval::asi_Stop"]
        [::core::mem::offset_of!(AnalogSignalInterval, asi_Stop) - 2usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SpecialMonitor {
    pub spm_Node: ExtendedNode,
    pub spm_Flags: UWORD,
    pub do_monitor: FPTR,
    pub reserved1: FPTR,
    pub reserved2: FPTR,
    pub reserved3: FPTR,
    pub hblank: AnalogSignalInterval,
    pub vblank: AnalogSignalInterval,
    pub hsync: AnalogSignalInterval,
    pub vsync: AnalogSignalInterval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpecialMonitor"][::core::mem::size_of::<SpecialMonitor>() - 58usize];
    ["Alignment of SpecialMonitor"][::core::mem::align_of::<SpecialMonitor>() - 2usize];
    ["Offset of field: SpecialMonitor::spm_Node"]
        [::core::mem::offset_of!(SpecialMonitor, spm_Node) - 0usize];
    ["Offset of field: SpecialMonitor::spm_Flags"]
        [::core::mem::offset_of!(SpecialMonitor, spm_Flags) - 24usize];
    ["Offset of field: SpecialMonitor::do_monitor"]
        [::core::mem::offset_of!(SpecialMonitor, do_monitor) - 26usize];
    ["Offset of field: SpecialMonitor::reserved1"]
        [::core::mem::offset_of!(SpecialMonitor, reserved1) - 30usize];
    ["Offset of field: SpecialMonitor::reserved2"]
        [::core::mem::offset_of!(SpecialMonitor, reserved2) - 34usize];
    ["Offset of field: SpecialMonitor::reserved3"]
        [::core::mem::offset_of!(SpecialMonitor, reserved3) - 38usize];
    ["Offset of field: SpecialMonitor::hblank"]
        [::core::mem::offset_of!(SpecialMonitor, hblank) - 42usize];
    ["Offset of field: SpecialMonitor::vblank"]
        [::core::mem::offset_of!(SpecialMonitor, vblank) - 46usize];
    ["Offset of field: SpecialMonitor::hsync"]
        [::core::mem::offset_of!(SpecialMonitor, hsync) - 50usize];
    ["Offset of field: SpecialMonitor::vsync"]
        [::core::mem::offset_of!(SpecialMonitor, vsync) - 54usize];
};
pub type DisplayInfoHandle = APTR;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct QueryHeader {
    pub StructID: ULONG,
    pub DisplayID: ULONG,
    pub SkipID: ULONG,
    pub Length: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of QueryHeader"][::core::mem::size_of::<QueryHeader>() - 16usize];
    ["Alignment of QueryHeader"][::core::mem::align_of::<QueryHeader>() - 2usize];
    ["Offset of field: QueryHeader::StructID"]
        [::core::mem::offset_of!(QueryHeader, StructID) - 0usize];
    ["Offset of field: QueryHeader::DisplayID"]
        [::core::mem::offset_of!(QueryHeader, DisplayID) - 4usize];
    ["Offset of field: QueryHeader::SkipID"][::core::mem::offset_of!(QueryHeader, SkipID) - 8usize];
    ["Offset of field: QueryHeader::Length"]
        [::core::mem::offset_of!(QueryHeader, Length) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DisplayInfo {
    pub Header: QueryHeader,
    pub NotAvailable: UWORD,
    pub PropertyFlags: ULONG,
    pub Resolution: Point,
    pub PixelSpeed: UWORD,
    pub NumStdSprites: UWORD,
    pub PaletteRange: UWORD,
    pub SpriteResolution: Point,
    pub pad: [UBYTE; 4usize],
    pub RedBits: UBYTE,
    pub GreenBits: UBYTE,
    pub BlueBits: UBYTE,
    pub pad2: [UBYTE; 5usize],
    pub reserved: [ULONG; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DisplayInfo"][::core::mem::size_of::<DisplayInfo>() - 56usize];
    ["Alignment of DisplayInfo"][::core::mem::align_of::<DisplayInfo>() - 2usize];
    ["Offset of field: DisplayInfo::Header"][::core::mem::offset_of!(DisplayInfo, Header) - 0usize];
    ["Offset of field: DisplayInfo::NotAvailable"]
        [::core::mem::offset_of!(DisplayInfo, NotAvailable) - 16usize];
    ["Offset of field: DisplayInfo::PropertyFlags"]
        [::core::mem::offset_of!(DisplayInfo, PropertyFlags) - 18usize];
    ["Offset of field: DisplayInfo::Resolution"]
        [::core::mem::offset_of!(DisplayInfo, Resolution) - 22usize];
    ["Offset of field: DisplayInfo::PixelSpeed"]
        [::core::mem::offset_of!(DisplayInfo, PixelSpeed) - 26usize];
    ["Offset of field: DisplayInfo::NumStdSprites"]
        [::core::mem::offset_of!(DisplayInfo, NumStdSprites) - 28usize];
    ["Offset of field: DisplayInfo::PaletteRange"]
        [::core::mem::offset_of!(DisplayInfo, PaletteRange) - 30usize];
    ["Offset of field: DisplayInfo::SpriteResolution"]
        [::core::mem::offset_of!(DisplayInfo, SpriteResolution) - 32usize];
    ["Offset of field: DisplayInfo::pad"][::core::mem::offset_of!(DisplayInfo, pad) - 36usize];
    ["Offset of field: DisplayInfo::RedBits"]
        [::core::mem::offset_of!(DisplayInfo, RedBits) - 40usize];
    ["Offset of field: DisplayInfo::GreenBits"]
        [::core::mem::offset_of!(DisplayInfo, GreenBits) - 41usize];
    ["Offset of field: DisplayInfo::BlueBits"]
        [::core::mem::offset_of!(DisplayInfo, BlueBits) - 42usize];
    ["Offset of field: DisplayInfo::pad2"][::core::mem::offset_of!(DisplayInfo, pad2) - 43usize];
    ["Offset of field: DisplayInfo::reserved"]
        [::core::mem::offset_of!(DisplayInfo, reserved) - 48usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DimensionInfo {
    pub Header: QueryHeader,
    pub MaxDepth: UWORD,
    pub MinRasterWidth: UWORD,
    pub MinRasterHeight: UWORD,
    pub MaxRasterWidth: UWORD,
    pub MaxRasterHeight: UWORD,
    pub Nominal: Rectangle,
    pub MaxOScan: Rectangle,
    pub VideoOScan: Rectangle,
    pub TxtOScan: Rectangle,
    pub StdOScan: Rectangle,
    pub pad: [UBYTE; 14usize],
    pub reserved: [ULONG; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DimensionInfo"][::core::mem::size_of::<DimensionInfo>() - 88usize];
    ["Alignment of DimensionInfo"][::core::mem::align_of::<DimensionInfo>() - 2usize];
    ["Offset of field: DimensionInfo::Header"]
        [::core::mem::offset_of!(DimensionInfo, Header) - 0usize];
    ["Offset of field: DimensionInfo::MaxDepth"]
        [::core::mem::offset_of!(DimensionInfo, MaxDepth) - 16usize];
    ["Offset of field: DimensionInfo::MinRasterWidth"]
        [::core::mem::offset_of!(DimensionInfo, MinRasterWidth) - 18usize];
    ["Offset of field: DimensionInfo::MinRasterHeight"]
        [::core::mem::offset_of!(DimensionInfo, MinRasterHeight) - 20usize];
    ["Offset of field: DimensionInfo::MaxRasterWidth"]
        [::core::mem::offset_of!(DimensionInfo, MaxRasterWidth) - 22usize];
    ["Offset of field: DimensionInfo::MaxRasterHeight"]
        [::core::mem::offset_of!(DimensionInfo, MaxRasterHeight) - 24usize];
    ["Offset of field: DimensionInfo::Nominal"]
        [::core::mem::offset_of!(DimensionInfo, Nominal) - 26usize];
    ["Offset of field: DimensionInfo::MaxOScan"]
        [::core::mem::offset_of!(DimensionInfo, MaxOScan) - 34usize];
    ["Offset of field: DimensionInfo::VideoOScan"]
        [::core::mem::offset_of!(DimensionInfo, VideoOScan) - 42usize];
    ["Offset of field: DimensionInfo::TxtOScan"]
        [::core::mem::offset_of!(DimensionInfo, TxtOScan) - 50usize];
    ["Offset of field: DimensionInfo::StdOScan"]
        [::core::mem::offset_of!(DimensionInfo, StdOScan) - 58usize];
    ["Offset of field: DimensionInfo::pad"][::core::mem::offset_of!(DimensionInfo, pad) - 66usize];
    ["Offset of field: DimensionInfo::reserved"]
        [::core::mem::offset_of!(DimensionInfo, reserved) - 80usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MonitorInfo {
    pub Header: QueryHeader,
    pub Mspc: *mut MonitorSpec,
    pub ViewPosition: Point,
    pub ViewResolution: Point,
    pub ViewPositionRange: Rectangle,
    pub TotalRows: UWORD,
    pub TotalColorClocks: UWORD,
    pub MinRow: UWORD,
    pub Compatibility: WORD,
    pub pad: [UBYTE; 32usize],
    pub MouseTicks: Point,
    pub DefaultViewPosition: Point,
    pub PreferredModeID: ULONG,
    pub reserved: [ULONG; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MonitorInfo"][::core::mem::size_of::<MonitorInfo>() - 96usize];
    ["Alignment of MonitorInfo"][::core::mem::align_of::<MonitorInfo>() - 2usize];
    ["Offset of field: MonitorInfo::Header"][::core::mem::offset_of!(MonitorInfo, Header) - 0usize];
    ["Offset of field: MonitorInfo::Mspc"][::core::mem::offset_of!(MonitorInfo, Mspc) - 16usize];
    ["Offset of field: MonitorInfo::ViewPosition"]
        [::core::mem::offset_of!(MonitorInfo, ViewPosition) - 20usize];
    ["Offset of field: MonitorInfo::ViewResolution"]
        [::core::mem::offset_of!(MonitorInfo, ViewResolution) - 24usize];
    ["Offset of field: MonitorInfo::ViewPositionRange"]
        [::core::mem::offset_of!(MonitorInfo, ViewPositionRange) - 28usize];
    ["Offset of field: MonitorInfo::TotalRows"]
        [::core::mem::offset_of!(MonitorInfo, TotalRows) - 36usize];
    ["Offset of field: MonitorInfo::TotalColorClocks"]
        [::core::mem::offset_of!(MonitorInfo, TotalColorClocks) - 38usize];
    ["Offset of field: MonitorInfo::MinRow"]
        [::core::mem::offset_of!(MonitorInfo, MinRow) - 40usize];
    ["Offset of field: MonitorInfo::Compatibility"]
        [::core::mem::offset_of!(MonitorInfo, Compatibility) - 42usize];
    ["Offset of field: MonitorInfo::pad"][::core::mem::offset_of!(MonitorInfo, pad) - 44usize];
    ["Offset of field: MonitorInfo::MouseTicks"]
        [::core::mem::offset_of!(MonitorInfo, MouseTicks) - 76usize];
    ["Offset of field: MonitorInfo::DefaultViewPosition"]
        [::core::mem::offset_of!(MonitorInfo, DefaultViewPosition) - 80usize];
    ["Offset of field: MonitorInfo::PreferredModeID"]
        [::core::mem::offset_of!(MonitorInfo, PreferredModeID) - 84usize];
    ["Offset of field: MonitorInfo::reserved"]
        [::core::mem::offset_of!(MonitorInfo, reserved) - 88usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NameInfo {
    pub Header: QueryHeader,
    pub Name: [UBYTE; 32usize],
    pub reserved: [ULONG; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NameInfo"][::core::mem::size_of::<NameInfo>() - 56usize];
    ["Alignment of NameInfo"][::core::mem::align_of::<NameInfo>() - 2usize];
    ["Offset of field: NameInfo::Header"][::core::mem::offset_of!(NameInfo, Header) - 0usize];
    ["Offset of field: NameInfo::Name"][::core::mem::offset_of!(NameInfo, Name) - 16usize];
    ["Offset of field: NameInfo::reserved"][::core::mem::offset_of!(NameInfo, reserved) - 48usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct VecInfo {
    pub Header: QueryHeader,
    pub Vec: APTR,
    pub Data: APTR,
    pub Type: UWORD,
    pub pad: [UWORD; 3usize],
    pub reserved: [ULONG; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VecInfo"][::core::mem::size_of::<VecInfo>() - 40usize];
    ["Alignment of VecInfo"][::core::mem::align_of::<VecInfo>() - 2usize];
    ["Offset of field: VecInfo::Header"][::core::mem::offset_of!(VecInfo, Header) - 0usize];
    ["Offset of field: VecInfo::Vec"][::core::mem::offset_of!(VecInfo, Vec) - 16usize];
    ["Offset of field: VecInfo::Data"][::core::mem::offset_of!(VecInfo, Data) - 20usize];
    ["Offset of field: VecInfo::Type"][::core::mem::offset_of!(VecInfo, Type) - 24usize];
    ["Offset of field: VecInfo::pad"][::core::mem::offset_of!(VecInfo, pad) - 26usize];
    ["Offset of field: VecInfo::reserved"][::core::mem::offset_of!(VecInfo, reserved) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Custom {
    pub bltddat: UWORD,
    pub dmaconr: UWORD,
    pub vposr: UWORD,
    pub vhposr: UWORD,
    pub dskdatr: UWORD,
    pub joy0dat: UWORD,
    pub joy1dat: UWORD,
    pub clxdat: UWORD,
    pub adkconr: UWORD,
    pub pot0dat: UWORD,
    pub pot1dat: UWORD,
    pub potinp: UWORD,
    pub serdatr: UWORD,
    pub dskbytr: UWORD,
    pub intenar: UWORD,
    pub intreqr: UWORD,
    pub dskpt: APTR,
    pub dsklen: UWORD,
    pub dskdat: UWORD,
    pub refptr: UWORD,
    pub vposw: UWORD,
    pub vhposw: UWORD,
    pub copcon: UWORD,
    pub serdat: UWORD,
    pub serper: UWORD,
    pub potgo: UWORD,
    pub joytest: UWORD,
    pub strequ: UWORD,
    pub strvbl: UWORD,
    pub strhor: UWORD,
    pub strlong: UWORD,
    pub bltcon0: UWORD,
    pub bltcon1: UWORD,
    pub bltafwm: UWORD,
    pub bltalwm: UWORD,
    pub bltcpt: APTR,
    pub bltbpt: APTR,
    pub bltapt: APTR,
    pub bltdpt: APTR,
    pub bltsize: UWORD,
    pub pad2d: UBYTE,
    pub bltcon0l: UBYTE,
    pub bltsizv: UWORD,
    pub bltsizh: UWORD,
    pub bltcmod: UWORD,
    pub bltbmod: UWORD,
    pub bltamod: UWORD,
    pub bltdmod: UWORD,
    pub pad34: [UWORD; 4usize],
    pub bltcdat: UWORD,
    pub bltbdat: UWORD,
    pub bltadat: UWORD,
    pub pad3b: [UWORD; 3usize],
    pub deniseid: UWORD,
    pub dsksync: UWORD,
    pub cop1lc: ULONG,
    pub cop2lc: ULONG,
    pub copjmp1: UWORD,
    pub copjmp2: UWORD,
    pub copins: UWORD,
    pub diwstrt: UWORD,
    pub diwstop: UWORD,
    pub ddfstrt: UWORD,
    pub ddfstop: UWORD,
    pub dmacon: UWORD,
    pub clxcon: UWORD,
    pub intena: UWORD,
    pub intreq: UWORD,
    pub adkcon: UWORD,
    pub aud: [Custom_AudChannel; 4usize],
    pub bplpt: [APTR; 8usize],
    pub bplcon0: UWORD,
    pub bplcon1: UWORD,
    pub bplcon2: UWORD,
    pub bplcon3: UWORD,
    pub bpl1mod: UWORD,
    pub bpl2mod: UWORD,
    pub bplcon4: UWORD,
    pub clxcon2: UWORD,
    pub bpldat: [UWORD; 8usize],
    pub sprpt: [APTR; 8usize],
    pub spr: [Custom_SpriteDef; 8usize],
    pub color: [UWORD; 32usize],
    pub htotal: UWORD,
    pub hsstop: UWORD,
    pub hbstrt: UWORD,
    pub hbstop: UWORD,
    pub vtotal: UWORD,
    pub vsstop: UWORD,
    pub vbstrt: UWORD,
    pub vbstop: UWORD,
    pub sprhstrt: UWORD,
    pub sprhstop: UWORD,
    pub bplhstrt: UWORD,
    pub bplhstop: UWORD,
    pub hhposw: UWORD,
    pub hhposr: UWORD,
    pub beamcon0: UWORD,
    pub hsstrt: UWORD,
    pub vsstrt: UWORD,
    pub hcenter: UWORD,
    pub diwhigh: UWORD,
    pub padf3: [UWORD; 11usize],
    pub fmode: UWORD,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Custom_AudChannel {
    pub ac_ptr: *mut UWORD,
    pub ac_len: UWORD,
    pub ac_per: UWORD,
    pub ac_vol: UWORD,
    pub ac_dat: UWORD,
    pub ac_pad: [UWORD; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Custom_AudChannel"][::core::mem::size_of::<Custom_AudChannel>() - 16usize];
    ["Alignment of Custom_AudChannel"][::core::mem::align_of::<Custom_AudChannel>() - 2usize];
    ["Offset of field: Custom_AudChannel::ac_ptr"]
        [::core::mem::offset_of!(Custom_AudChannel, ac_ptr) - 0usize];
    ["Offset of field: Custom_AudChannel::ac_len"]
        [::core::mem::offset_of!(Custom_AudChannel, ac_len) - 4usize];
    ["Offset of field: Custom_AudChannel::ac_per"]
        [::core::mem::offset_of!(Custom_AudChannel, ac_per) - 6usize];
    ["Offset of field: Custom_AudChannel::ac_vol"]
        [::core::mem::offset_of!(Custom_AudChannel, ac_vol) - 8usize];
    ["Offset of field: Custom_AudChannel::ac_dat"]
        [::core::mem::offset_of!(Custom_AudChannel, ac_dat) - 10usize];
    ["Offset of field: Custom_AudChannel::ac_pad"]
        [::core::mem::offset_of!(Custom_AudChannel, ac_pad) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Custom_SpriteDef {
    pub pos: UWORD,
    pub ctl: UWORD,
    pub dataa: UWORD,
    pub datab: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Custom_SpriteDef"][::core::mem::size_of::<Custom_SpriteDef>() - 8usize];
    ["Alignment of Custom_SpriteDef"][::core::mem::align_of::<Custom_SpriteDef>() - 2usize];
    ["Offset of field: Custom_SpriteDef::pos"]
        [::core::mem::offset_of!(Custom_SpriteDef, pos) - 0usize];
    ["Offset of field: Custom_SpriteDef::ctl"]
        [::core::mem::offset_of!(Custom_SpriteDef, ctl) - 2usize];
    ["Offset of field: Custom_SpriteDef::dataa"]
        [::core::mem::offset_of!(Custom_SpriteDef, dataa) - 4usize];
    ["Offset of field: Custom_SpriteDef::datab"]
        [::core::mem::offset_of!(Custom_SpriteDef, datab) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Custom"][::core::mem::size_of::<Custom>() - 510usize];
    ["Alignment of Custom"][::core::mem::align_of::<Custom>() - 2usize];
    ["Offset of field: Custom::bltddat"][::core::mem::offset_of!(Custom, bltddat) - 0usize];
    ["Offset of field: Custom::dmaconr"][::core::mem::offset_of!(Custom, dmaconr) - 2usize];
    ["Offset of field: Custom::vposr"][::core::mem::offset_of!(Custom, vposr) - 4usize];
    ["Offset of field: Custom::vhposr"][::core::mem::offset_of!(Custom, vhposr) - 6usize];
    ["Offset of field: Custom::dskdatr"][::core::mem::offset_of!(Custom, dskdatr) - 8usize];
    ["Offset of field: Custom::joy0dat"][::core::mem::offset_of!(Custom, joy0dat) - 10usize];
    ["Offset of field: Custom::joy1dat"][::core::mem::offset_of!(Custom, joy1dat) - 12usize];
    ["Offset of field: Custom::clxdat"][::core::mem::offset_of!(Custom, clxdat) - 14usize];
    ["Offset of field: Custom::adkconr"][::core::mem::offset_of!(Custom, adkconr) - 16usize];
    ["Offset of field: Custom::pot0dat"][::core::mem::offset_of!(Custom, pot0dat) - 18usize];
    ["Offset of field: Custom::pot1dat"][::core::mem::offset_of!(Custom, pot1dat) - 20usize];
    ["Offset of field: Custom::potinp"][::core::mem::offset_of!(Custom, potinp) - 22usize];
    ["Offset of field: Custom::serdatr"][::core::mem::offset_of!(Custom, serdatr) - 24usize];
    ["Offset of field: Custom::dskbytr"][::core::mem::offset_of!(Custom, dskbytr) - 26usize];
    ["Offset of field: Custom::intenar"][::core::mem::offset_of!(Custom, intenar) - 28usize];
    ["Offset of field: Custom::intreqr"][::core::mem::offset_of!(Custom, intreqr) - 30usize];
    ["Offset of field: Custom::dskpt"][::core::mem::offset_of!(Custom, dskpt) - 32usize];
    ["Offset of field: Custom::dsklen"][::core::mem::offset_of!(Custom, dsklen) - 36usize];
    ["Offset of field: Custom::dskdat"][::core::mem::offset_of!(Custom, dskdat) - 38usize];
    ["Offset of field: Custom::refptr"][::core::mem::offset_of!(Custom, refptr) - 40usize];
    ["Offset of field: Custom::vposw"][::core::mem::offset_of!(Custom, vposw) - 42usize];
    ["Offset of field: Custom::vhposw"][::core::mem::offset_of!(Custom, vhposw) - 44usize];
    ["Offset of field: Custom::copcon"][::core::mem::offset_of!(Custom, copcon) - 46usize];
    ["Offset of field: Custom::serdat"][::core::mem::offset_of!(Custom, serdat) - 48usize];
    ["Offset of field: Custom::serper"][::core::mem::offset_of!(Custom, serper) - 50usize];
    ["Offset of field: Custom::potgo"][::core::mem::offset_of!(Custom, potgo) - 52usize];
    ["Offset of field: Custom::joytest"][::core::mem::offset_of!(Custom, joytest) - 54usize];
    ["Offset of field: Custom::strequ"][::core::mem::offset_of!(Custom, strequ) - 56usize];
    ["Offset of field: Custom::strvbl"][::core::mem::offset_of!(Custom, strvbl) - 58usize];
    ["Offset of field: Custom::strhor"][::core::mem::offset_of!(Custom, strhor) - 60usize];
    ["Offset of field: Custom::strlong"][::core::mem::offset_of!(Custom, strlong) - 62usize];
    ["Offset of field: Custom::bltcon0"][::core::mem::offset_of!(Custom, bltcon0) - 64usize];
    ["Offset of field: Custom::bltcon1"][::core::mem::offset_of!(Custom, bltcon1) - 66usize];
    ["Offset of field: Custom::bltafwm"][::core::mem::offset_of!(Custom, bltafwm) - 68usize];
    ["Offset of field: Custom::bltalwm"][::core::mem::offset_of!(Custom, bltalwm) - 70usize];
    ["Offset of field: Custom::bltcpt"][::core::mem::offset_of!(Custom, bltcpt) - 72usize];
    ["Offset of field: Custom::bltbpt"][::core::mem::offset_of!(Custom, bltbpt) - 76usize];
    ["Offset of field: Custom::bltapt"][::core::mem::offset_of!(Custom, bltapt) - 80usize];
    ["Offset of field: Custom::bltdpt"][::core::mem::offset_of!(Custom, bltdpt) - 84usize];
    ["Offset of field: Custom::bltsize"][::core::mem::offset_of!(Custom, bltsize) - 88usize];
    ["Offset of field: Custom::pad2d"][::core::mem::offset_of!(Custom, pad2d) - 90usize];
    ["Offset of field: Custom::bltcon0l"][::core::mem::offset_of!(Custom, bltcon0l) - 91usize];
    ["Offset of field: Custom::bltsizv"][::core::mem::offset_of!(Custom, bltsizv) - 92usize];
    ["Offset of field: Custom::bltsizh"][::core::mem::offset_of!(Custom, bltsizh) - 94usize];
    ["Offset of field: Custom::bltcmod"][::core::mem::offset_of!(Custom, bltcmod) - 96usize];
    ["Offset of field: Custom::bltbmod"][::core::mem::offset_of!(Custom, bltbmod) - 98usize];
    ["Offset of field: Custom::bltamod"][::core::mem::offset_of!(Custom, bltamod) - 100usize];
    ["Offset of field: Custom::bltdmod"][::core::mem::offset_of!(Custom, bltdmod) - 102usize];
    ["Offset of field: Custom::pad34"][::core::mem::offset_of!(Custom, pad34) - 104usize];
    ["Offset of field: Custom::bltcdat"][::core::mem::offset_of!(Custom, bltcdat) - 112usize];
    ["Offset of field: Custom::bltbdat"][::core::mem::offset_of!(Custom, bltbdat) - 114usize];
    ["Offset of field: Custom::bltadat"][::core::mem::offset_of!(Custom, bltadat) - 116usize];
    ["Offset of field: Custom::pad3b"][::core::mem::offset_of!(Custom, pad3b) - 118usize];
    ["Offset of field: Custom::deniseid"][::core::mem::offset_of!(Custom, deniseid) - 124usize];
    ["Offset of field: Custom::dsksync"][::core::mem::offset_of!(Custom, dsksync) - 126usize];
    ["Offset of field: Custom::cop1lc"][::core::mem::offset_of!(Custom, cop1lc) - 128usize];
    ["Offset of field: Custom::cop2lc"][::core::mem::offset_of!(Custom, cop2lc) - 132usize];
    ["Offset of field: Custom::copjmp1"][::core::mem::offset_of!(Custom, copjmp1) - 136usize];
    ["Offset of field: Custom::copjmp2"][::core::mem::offset_of!(Custom, copjmp2) - 138usize];
    ["Offset of field: Custom::copins"][::core::mem::offset_of!(Custom, copins) - 140usize];
    ["Offset of field: Custom::diwstrt"][::core::mem::offset_of!(Custom, diwstrt) - 142usize];
    ["Offset of field: Custom::diwstop"][::core::mem::offset_of!(Custom, diwstop) - 144usize];
    ["Offset of field: Custom::ddfstrt"][::core::mem::offset_of!(Custom, ddfstrt) - 146usize];
    ["Offset of field: Custom::ddfstop"][::core::mem::offset_of!(Custom, ddfstop) - 148usize];
    ["Offset of field: Custom::dmacon"][::core::mem::offset_of!(Custom, dmacon) - 150usize];
    ["Offset of field: Custom::clxcon"][::core::mem::offset_of!(Custom, clxcon) - 152usize];
    ["Offset of field: Custom::intena"][::core::mem::offset_of!(Custom, intena) - 154usize];
    ["Offset of field: Custom::intreq"][::core::mem::offset_of!(Custom, intreq) - 156usize];
    ["Offset of field: Custom::adkcon"][::core::mem::offset_of!(Custom, adkcon) - 158usize];
    ["Offset of field: Custom::aud"][::core::mem::offset_of!(Custom, aud) - 160usize];
    ["Offset of field: Custom::bplpt"][::core::mem::offset_of!(Custom, bplpt) - 224usize];
    ["Offset of field: Custom::bplcon0"][::core::mem::offset_of!(Custom, bplcon0) - 256usize];
    ["Offset of field: Custom::bplcon1"][::core::mem::offset_of!(Custom, bplcon1) - 258usize];
    ["Offset of field: Custom::bplcon2"][::core::mem::offset_of!(Custom, bplcon2) - 260usize];
    ["Offset of field: Custom::bplcon3"][::core::mem::offset_of!(Custom, bplcon3) - 262usize];
    ["Offset of field: Custom::bpl1mod"][::core::mem::offset_of!(Custom, bpl1mod) - 264usize];
    ["Offset of field: Custom::bpl2mod"][::core::mem::offset_of!(Custom, bpl2mod) - 266usize];
    ["Offset of field: Custom::bplcon4"][::core::mem::offset_of!(Custom, bplcon4) - 268usize];
    ["Offset of field: Custom::clxcon2"][::core::mem::offset_of!(Custom, clxcon2) - 270usize];
    ["Offset of field: Custom::bpldat"][::core::mem::offset_of!(Custom, bpldat) - 272usize];
    ["Offset of field: Custom::sprpt"][::core::mem::offset_of!(Custom, sprpt) - 288usize];
    ["Offset of field: Custom::spr"][::core::mem::offset_of!(Custom, spr) - 320usize];
    ["Offset of field: Custom::color"][::core::mem::offset_of!(Custom, color) - 384usize];
    ["Offset of field: Custom::htotal"][::core::mem::offset_of!(Custom, htotal) - 448usize];
    ["Offset of field: Custom::hsstop"][::core::mem::offset_of!(Custom, hsstop) - 450usize];
    ["Offset of field: Custom::hbstrt"][::core::mem::offset_of!(Custom, hbstrt) - 452usize];
    ["Offset of field: Custom::hbstop"][::core::mem::offset_of!(Custom, hbstop) - 454usize];
    ["Offset of field: Custom::vtotal"][::core::mem::offset_of!(Custom, vtotal) - 456usize];
    ["Offset of field: Custom::vsstop"][::core::mem::offset_of!(Custom, vsstop) - 458usize];
    ["Offset of field: Custom::vbstrt"][::core::mem::offset_of!(Custom, vbstrt) - 460usize];
    ["Offset of field: Custom::vbstop"][::core::mem::offset_of!(Custom, vbstop) - 462usize];
    ["Offset of field: Custom::sprhstrt"][::core::mem::offset_of!(Custom, sprhstrt) - 464usize];
    ["Offset of field: Custom::sprhstop"][::core::mem::offset_of!(Custom, sprhstop) - 466usize];
    ["Offset of field: Custom::bplhstrt"][::core::mem::offset_of!(Custom, bplhstrt) - 468usize];
    ["Offset of field: Custom::bplhstop"][::core::mem::offset_of!(Custom, bplhstop) - 470usize];
    ["Offset of field: Custom::hhposw"][::core::mem::offset_of!(Custom, hhposw) - 472usize];
    ["Offset of field: Custom::hhposr"][::core::mem::offset_of!(Custom, hhposr) - 474usize];
    ["Offset of field: Custom::beamcon0"][::core::mem::offset_of!(Custom, beamcon0) - 476usize];
    ["Offset of field: Custom::hsstrt"][::core::mem::offset_of!(Custom, hsstrt) - 478usize];
    ["Offset of field: Custom::vsstrt"][::core::mem::offset_of!(Custom, vsstrt) - 480usize];
    ["Offset of field: Custom::hcenter"][::core::mem::offset_of!(Custom, hcenter) - 482usize];
    ["Offset of field: Custom::diwhigh"][::core::mem::offset_of!(Custom, diwhigh) - 484usize];
    ["Offset of field: Custom::padf3"][::core::mem::offset_of!(Custom, padf3) - 486usize];
    ["Offset of field: Custom::fmode"][::core::mem::offset_of!(Custom, fmode) - 508usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ViewPort {
    pub Next: *mut ViewPort,
    pub ColorMap: *mut ColorMap,
    pub DspIns: *mut CopList,
    pub SprIns: *mut CopList,
    pub ClrIns: *mut CopList,
    pub UCopIns: *mut UCopList,
    pub DWidth: WORD,
    pub DHeight: WORD,
    pub DxOffset: WORD,
    pub DyOffset: WORD,
    pub Modes: UWORD,
    pub SpritePriorities: UBYTE,
    pub ExtendedModes: UBYTE,
    pub RasInfo: *mut RasInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ViewPort"][::core::mem::size_of::<ViewPort>() - 40usize];
    ["Alignment of ViewPort"][::core::mem::align_of::<ViewPort>() - 2usize];
    ["Offset of field: ViewPort::Next"][::core::mem::offset_of!(ViewPort, Next) - 0usize];
    ["Offset of field: ViewPort::ColorMap"][::core::mem::offset_of!(ViewPort, ColorMap) - 4usize];
    ["Offset of field: ViewPort::DspIns"][::core::mem::offset_of!(ViewPort, DspIns) - 8usize];
    ["Offset of field: ViewPort::SprIns"][::core::mem::offset_of!(ViewPort, SprIns) - 12usize];
    ["Offset of field: ViewPort::ClrIns"][::core::mem::offset_of!(ViewPort, ClrIns) - 16usize];
    ["Offset of field: ViewPort::UCopIns"][::core::mem::offset_of!(ViewPort, UCopIns) - 20usize];
    ["Offset of field: ViewPort::DWidth"][::core::mem::offset_of!(ViewPort, DWidth) - 24usize];
    ["Offset of field: ViewPort::DHeight"][::core::mem::offset_of!(ViewPort, DHeight) - 26usize];
    ["Offset of field: ViewPort::DxOffset"][::core::mem::offset_of!(ViewPort, DxOffset) - 28usize];
    ["Offset of field: ViewPort::DyOffset"][::core::mem::offset_of!(ViewPort, DyOffset) - 30usize];
    ["Offset of field: ViewPort::Modes"][::core::mem::offset_of!(ViewPort, Modes) - 32usize];
    ["Offset of field: ViewPort::SpritePriorities"]
        [::core::mem::offset_of!(ViewPort, SpritePriorities) - 34usize];
    ["Offset of field: ViewPort::ExtendedModes"]
        [::core::mem::offset_of!(ViewPort, ExtendedModes) - 35usize];
    ["Offset of field: ViewPort::RasInfo"][::core::mem::offset_of!(ViewPort, RasInfo) - 36usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct View {
    pub ViewPort: *mut ViewPort,
    pub LOFCprList: *mut cprlist,
    pub SHFCprList: *mut cprlist,
    pub DyOffset: WORD,
    pub DxOffset: WORD,
    pub Modes: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of View"][::core::mem::size_of::<View>() - 18usize];
    ["Alignment of View"][::core::mem::align_of::<View>() - 2usize];
    ["Offset of field: View::ViewPort"][::core::mem::offset_of!(View, ViewPort) - 0usize];
    ["Offset of field: View::LOFCprList"][::core::mem::offset_of!(View, LOFCprList) - 4usize];
    ["Offset of field: View::SHFCprList"][::core::mem::offset_of!(View, SHFCprList) - 8usize];
    ["Offset of field: View::DyOffset"][::core::mem::offset_of!(View, DyOffset) - 12usize];
    ["Offset of field: View::DxOffset"][::core::mem::offset_of!(View, DxOffset) - 14usize];
    ["Offset of field: View::Modes"][::core::mem::offset_of!(View, Modes) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ViewExtra {
    pub n: ExtendedNode,
    pub View: *mut View,
    pub Monitor: *mut MonitorSpec,
    pub TopLine: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ViewExtra"][::core::mem::size_of::<ViewExtra>() - 34usize];
    ["Alignment of ViewExtra"][::core::mem::align_of::<ViewExtra>() - 2usize];
    ["Offset of field: ViewExtra::n"][::core::mem::offset_of!(ViewExtra, n) - 0usize];
    ["Offset of field: ViewExtra::View"][::core::mem::offset_of!(ViewExtra, View) - 24usize];
    ["Offset of field: ViewExtra::Monitor"][::core::mem::offset_of!(ViewExtra, Monitor) - 28usize];
    ["Offset of field: ViewExtra::TopLine"][::core::mem::offset_of!(ViewExtra, TopLine) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ViewPortExtra {
    pub n: ExtendedNode,
    pub ViewPort: *mut ViewPort,
    pub DisplayClip: Rectangle,
    pub VecTable: APTR,
    pub DriverData: [APTR; 2usize],
    pub Flags: UWORD,
    pub Origin: [Point; 2usize],
    pub cop1ptr: ULONG,
    pub cop2ptr: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ViewPortExtra"][::core::mem::size_of::<ViewPortExtra>() - 66usize];
    ["Alignment of ViewPortExtra"][::core::mem::align_of::<ViewPortExtra>() - 2usize];
    ["Offset of field: ViewPortExtra::n"][::core::mem::offset_of!(ViewPortExtra, n) - 0usize];
    ["Offset of field: ViewPortExtra::ViewPort"]
        [::core::mem::offset_of!(ViewPortExtra, ViewPort) - 24usize];
    ["Offset of field: ViewPortExtra::DisplayClip"]
        [::core::mem::offset_of!(ViewPortExtra, DisplayClip) - 28usize];
    ["Offset of field: ViewPortExtra::VecTable"]
        [::core::mem::offset_of!(ViewPortExtra, VecTable) - 36usize];
    ["Offset of field: ViewPortExtra::DriverData"]
        [::core::mem::offset_of!(ViewPortExtra, DriverData) - 40usize];
    ["Offset of field: ViewPortExtra::Flags"]
        [::core::mem::offset_of!(ViewPortExtra, Flags) - 48usize];
    ["Offset of field: ViewPortExtra::Origin"]
        [::core::mem::offset_of!(ViewPortExtra, Origin) - 50usize];
    ["Offset of field: ViewPortExtra::cop1ptr"]
        [::core::mem::offset_of!(ViewPortExtra, cop1ptr) - 58usize];
    ["Offset of field: ViewPortExtra::cop2ptr"]
        [::core::mem::offset_of!(ViewPortExtra, cop2ptr) - 62usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RasInfo {
    pub Next: *mut RasInfo,
    pub BitMap: *mut BitMap,
    pub RxOffset: WORD,
    pub RyOffset: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RasInfo"][::core::mem::size_of::<RasInfo>() - 12usize];
    ["Alignment of RasInfo"][::core::mem::align_of::<RasInfo>() - 2usize];
    ["Offset of field: RasInfo::Next"][::core::mem::offset_of!(RasInfo, Next) - 0usize];
    ["Offset of field: RasInfo::BitMap"][::core::mem::offset_of!(RasInfo, BitMap) - 4usize];
    ["Offset of field: RasInfo::RxOffset"][::core::mem::offset_of!(RasInfo, RxOffset) - 8usize];
    ["Offset of field: RasInfo::RyOffset"][::core::mem::offset_of!(RasInfo, RyOffset) - 10usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ColorMap {
    pub Flags: UBYTE,
    pub Type: UBYTE,
    pub Count: UWORD,
    pub ColorTable: APTR,
    pub cm_vpe: *mut ViewPortExtra,
    pub LowColorBits: APTR,
    pub TransparencyPlane: UBYTE,
    pub SpriteResolution: UBYTE,
    pub SpriteResDefault: UBYTE,
    pub AuxFlags: UBYTE,
    pub cm_vp: *mut ViewPort,
    pub NormalDisplayInfo: APTR,
    pub CoerceDisplayInfo: APTR,
    pub cm_batch_items: *mut TagItem,
    pub VPModeID: ULONG,
    pub PalExtra: *mut PaletteExtra,
    pub SpriteBase_Even: UWORD,
    pub SpriteBase_Odd: UWORD,
    pub Bp_0_base: UWORD,
    pub Bp_1_base: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorMap"][::core::mem::size_of::<ColorMap>() - 52usize];
    ["Alignment of ColorMap"][::core::mem::align_of::<ColorMap>() - 2usize];
    ["Offset of field: ColorMap::Flags"][::core::mem::offset_of!(ColorMap, Flags) - 0usize];
    ["Offset of field: ColorMap::Type"][::core::mem::offset_of!(ColorMap, Type) - 1usize];
    ["Offset of field: ColorMap::Count"][::core::mem::offset_of!(ColorMap, Count) - 2usize];
    ["Offset of field: ColorMap::ColorTable"]
        [::core::mem::offset_of!(ColorMap, ColorTable) - 4usize];
    ["Offset of field: ColorMap::cm_vpe"][::core::mem::offset_of!(ColorMap, cm_vpe) - 8usize];
    ["Offset of field: ColorMap::LowColorBits"]
        [::core::mem::offset_of!(ColorMap, LowColorBits) - 12usize];
    ["Offset of field: ColorMap::TransparencyPlane"]
        [::core::mem::offset_of!(ColorMap, TransparencyPlane) - 16usize];
    ["Offset of field: ColorMap::SpriteResolution"]
        [::core::mem::offset_of!(ColorMap, SpriteResolution) - 17usize];
    ["Offset of field: ColorMap::SpriteResDefault"]
        [::core::mem::offset_of!(ColorMap, SpriteResDefault) - 18usize];
    ["Offset of field: ColorMap::AuxFlags"][::core::mem::offset_of!(ColorMap, AuxFlags) - 19usize];
    ["Offset of field: ColorMap::cm_vp"][::core::mem::offset_of!(ColorMap, cm_vp) - 20usize];
    ["Offset of field: ColorMap::NormalDisplayInfo"]
        [::core::mem::offset_of!(ColorMap, NormalDisplayInfo) - 24usize];
    ["Offset of field: ColorMap::CoerceDisplayInfo"]
        [::core::mem::offset_of!(ColorMap, CoerceDisplayInfo) - 28usize];
    ["Offset of field: ColorMap::cm_batch_items"]
        [::core::mem::offset_of!(ColorMap, cm_batch_items) - 32usize];
    ["Offset of field: ColorMap::VPModeID"][::core::mem::offset_of!(ColorMap, VPModeID) - 36usize];
    ["Offset of field: ColorMap::PalExtra"][::core::mem::offset_of!(ColorMap, PalExtra) - 40usize];
    ["Offset of field: ColorMap::SpriteBase_Even"]
        [::core::mem::offset_of!(ColorMap, SpriteBase_Even) - 44usize];
    ["Offset of field: ColorMap::SpriteBase_Odd"]
        [::core::mem::offset_of!(ColorMap, SpriteBase_Odd) - 46usize];
    ["Offset of field: ColorMap::Bp_0_base"]
        [::core::mem::offset_of!(ColorMap, Bp_0_base) - 48usize];
    ["Offset of field: ColorMap::Bp_1_base"]
        [::core::mem::offset_of!(ColorMap, Bp_1_base) - 50usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PaletteExtra {
    pub pe_Semaphore: SignalSemaphore,
    pub pe_FirstFree: UWORD,
    pub pe_NFree: UWORD,
    pub pe_FirstShared: UWORD,
    pub pe_NShared: UWORD,
    pub pe_RefCnt: *mut UBYTE,
    pub pe_AllocList: *mut UBYTE,
    pub pe_ViewPort: *mut ViewPort,
    pub pe_SharableColors: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PaletteExtra"][::core::mem::size_of::<PaletteExtra>() - 68usize];
    ["Alignment of PaletteExtra"][::core::mem::align_of::<PaletteExtra>() - 2usize];
    ["Offset of field: PaletteExtra::pe_Semaphore"]
        [::core::mem::offset_of!(PaletteExtra, pe_Semaphore) - 0usize];
    ["Offset of field: PaletteExtra::pe_FirstFree"]
        [::core::mem::offset_of!(PaletteExtra, pe_FirstFree) - 46usize];
    ["Offset of field: PaletteExtra::pe_NFree"]
        [::core::mem::offset_of!(PaletteExtra, pe_NFree) - 48usize];
    ["Offset of field: PaletteExtra::pe_FirstShared"]
        [::core::mem::offset_of!(PaletteExtra, pe_FirstShared) - 50usize];
    ["Offset of field: PaletteExtra::pe_NShared"]
        [::core::mem::offset_of!(PaletteExtra, pe_NShared) - 52usize];
    ["Offset of field: PaletteExtra::pe_RefCnt"]
        [::core::mem::offset_of!(PaletteExtra, pe_RefCnt) - 54usize];
    ["Offset of field: PaletteExtra::pe_AllocList"]
        [::core::mem::offset_of!(PaletteExtra, pe_AllocList) - 58usize];
    ["Offset of field: PaletteExtra::pe_ViewPort"]
        [::core::mem::offset_of!(PaletteExtra, pe_ViewPort) - 62usize];
    ["Offset of field: PaletteExtra::pe_SharableColors"]
        [::core::mem::offset_of!(PaletteExtra, pe_SharableColors) - 66usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DBufInfo {
    pub dbi_Link1: APTR,
    pub dbi_Count1: ULONG,
    pub dbi_SafeMessage: Message,
    pub dbi_UserData1: APTR,
    pub dbi_Link2: APTR,
    pub dbi_Count2: ULONG,
    pub dbi_DispMessage: Message,
    pub dbi_UserData2: APTR,
    pub dbi_MatchLong: ULONG,
    pub dbi_CopPtr1: APTR,
    pub dbi_CopPtr2: APTR,
    pub dbi_CopPtr3: APTR,
    pub dbi_BeamPos1: UWORD,
    pub dbi_BeamPos2: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DBufInfo"][::core::mem::size_of::<DBufInfo>() - 84usize];
    ["Alignment of DBufInfo"][::core::mem::align_of::<DBufInfo>() - 2usize];
    ["Offset of field: DBufInfo::dbi_Link1"][::core::mem::offset_of!(DBufInfo, dbi_Link1) - 0usize];
    ["Offset of field: DBufInfo::dbi_Count1"]
        [::core::mem::offset_of!(DBufInfo, dbi_Count1) - 4usize];
    ["Offset of field: DBufInfo::dbi_SafeMessage"]
        [::core::mem::offset_of!(DBufInfo, dbi_SafeMessage) - 8usize];
    ["Offset of field: DBufInfo::dbi_UserData1"]
        [::core::mem::offset_of!(DBufInfo, dbi_UserData1) - 28usize];
    ["Offset of field: DBufInfo::dbi_Link2"]
        [::core::mem::offset_of!(DBufInfo, dbi_Link2) - 32usize];
    ["Offset of field: DBufInfo::dbi_Count2"]
        [::core::mem::offset_of!(DBufInfo, dbi_Count2) - 36usize];
    ["Offset of field: DBufInfo::dbi_DispMessage"]
        [::core::mem::offset_of!(DBufInfo, dbi_DispMessage) - 40usize];
    ["Offset of field: DBufInfo::dbi_UserData2"]
        [::core::mem::offset_of!(DBufInfo, dbi_UserData2) - 60usize];
    ["Offset of field: DBufInfo::dbi_MatchLong"]
        [::core::mem::offset_of!(DBufInfo, dbi_MatchLong) - 64usize];
    ["Offset of field: DBufInfo::dbi_CopPtr1"]
        [::core::mem::offset_of!(DBufInfo, dbi_CopPtr1) - 68usize];
    ["Offset of field: DBufInfo::dbi_CopPtr2"]
        [::core::mem::offset_of!(DBufInfo, dbi_CopPtr2) - 72usize];
    ["Offset of field: DBufInfo::dbi_CopPtr3"]
        [::core::mem::offset_of!(DBufInfo, dbi_CopPtr3) - 76usize];
    ["Offset of field: DBufInfo::dbi_BeamPos1"]
        [::core::mem::offset_of!(DBufInfo, dbi_BeamPos1) - 80usize];
    ["Offset of field: DBufInfo::dbi_BeamPos2"]
        [::core::mem::offset_of!(DBufInfo, dbi_BeamPos2) - 82usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AreaInfo {
    pub VctrTbl: *mut WORD,
    pub VctrPtr: *mut WORD,
    pub FlagTbl: *mut BYTE,
    pub FlagPtr: *mut BYTE,
    pub Count: WORD,
    pub MaxCount: WORD,
    pub FirstX: WORD,
    pub FirstY: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AreaInfo"][::core::mem::size_of::<AreaInfo>() - 24usize];
    ["Alignment of AreaInfo"][::core::mem::align_of::<AreaInfo>() - 2usize];
    ["Offset of field: AreaInfo::VctrTbl"][::core::mem::offset_of!(AreaInfo, VctrTbl) - 0usize];
    ["Offset of field: AreaInfo::VctrPtr"][::core::mem::offset_of!(AreaInfo, VctrPtr) - 4usize];
    ["Offset of field: AreaInfo::FlagTbl"][::core::mem::offset_of!(AreaInfo, FlagTbl) - 8usize];
    ["Offset of field: AreaInfo::FlagPtr"][::core::mem::offset_of!(AreaInfo, FlagPtr) - 12usize];
    ["Offset of field: AreaInfo::Count"][::core::mem::offset_of!(AreaInfo, Count) - 16usize];
    ["Offset of field: AreaInfo::MaxCount"][::core::mem::offset_of!(AreaInfo, MaxCount) - 18usize];
    ["Offset of field: AreaInfo::FirstX"][::core::mem::offset_of!(AreaInfo, FirstX) - 20usize];
    ["Offset of field: AreaInfo::FirstY"][::core::mem::offset_of!(AreaInfo, FirstY) - 22usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TmpRas {
    pub RasPtr: *mut BYTE,
    pub Size: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TmpRas"][::core::mem::size_of::<TmpRas>() - 8usize];
    ["Alignment of TmpRas"][::core::mem::align_of::<TmpRas>() - 2usize];
    ["Offset of field: TmpRas::RasPtr"][::core::mem::offset_of!(TmpRas, RasPtr) - 0usize];
    ["Offset of field: TmpRas::Size"][::core::mem::offset_of!(TmpRas, Size) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GelsInfo {
    pub sprRsrvd: BYTE,
    pub Flags: UBYTE,
    pub gelHead: *mut VSprite,
    pub gelTail: *mut VSprite,
    pub nextLine: *mut WORD,
    pub lastColor: *mut *mut WORD,
    pub collHandler: *mut collTable,
    pub leftmost: WORD,
    pub rightmost: WORD,
    pub topmost: WORD,
    pub bottommost: WORD,
    pub firstBlissObj: APTR,
    pub lastBlissObj: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GelsInfo"][::core::mem::size_of::<GelsInfo>() - 38usize];
    ["Alignment of GelsInfo"][::core::mem::align_of::<GelsInfo>() - 2usize];
    ["Offset of field: GelsInfo::sprRsrvd"][::core::mem::offset_of!(GelsInfo, sprRsrvd) - 0usize];
    ["Offset of field: GelsInfo::Flags"][::core::mem::offset_of!(GelsInfo, Flags) - 1usize];
    ["Offset of field: GelsInfo::gelHead"][::core::mem::offset_of!(GelsInfo, gelHead) - 2usize];
    ["Offset of field: GelsInfo::gelTail"][::core::mem::offset_of!(GelsInfo, gelTail) - 6usize];
    ["Offset of field: GelsInfo::nextLine"][::core::mem::offset_of!(GelsInfo, nextLine) - 10usize];
    ["Offset of field: GelsInfo::lastColor"]
        [::core::mem::offset_of!(GelsInfo, lastColor) - 14usize];
    ["Offset of field: GelsInfo::collHandler"]
        [::core::mem::offset_of!(GelsInfo, collHandler) - 18usize];
    ["Offset of field: GelsInfo::leftmost"][::core::mem::offset_of!(GelsInfo, leftmost) - 22usize];
    ["Offset of field: GelsInfo::rightmost"]
        [::core::mem::offset_of!(GelsInfo, rightmost) - 24usize];
    ["Offset of field: GelsInfo::topmost"][::core::mem::offset_of!(GelsInfo, topmost) - 26usize];
    ["Offset of field: GelsInfo::bottommost"]
        [::core::mem::offset_of!(GelsInfo, bottommost) - 28usize];
    ["Offset of field: GelsInfo::firstBlissObj"]
        [::core::mem::offset_of!(GelsInfo, firstBlissObj) - 30usize];
    ["Offset of field: GelsInfo::lastBlissObj"]
        [::core::mem::offset_of!(GelsInfo, lastBlissObj) - 34usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RastPort {
    pub Layer: *mut Layer,
    pub BitMap: *mut BitMap,
    pub AreaPtrn: *mut UWORD,
    pub TmpRas: *mut TmpRas,
    pub AreaInfo: *mut AreaInfo,
    pub GelsInfo: *mut GelsInfo,
    pub Mask: UBYTE,
    pub FgPen: BYTE,
    pub BgPen: BYTE,
    pub AOlPen: BYTE,
    pub DrawMode: BYTE,
    pub AreaPtSz: BYTE,
    pub linpatcnt: BYTE,
    pub dummy: BYTE,
    pub Flags: UWORD,
    pub LinePtrn: UWORD,
    pub cp_x: WORD,
    pub cp_y: WORD,
    pub minterms: [UBYTE; 8usize],
    pub PenWidth: WORD,
    pub PenHeight: WORD,
    pub Font: *mut TextFont,
    pub AlgoStyle: UBYTE,
    pub TxFlags: UBYTE,
    pub TxHeight: UWORD,
    pub TxWidth: UWORD,
    pub TxBaseline: UWORD,
    pub TxSpacing: WORD,
    pub RP_User: *mut APTR,
    pub longreserved: [ULONG; 2usize],
    pub wordreserved: [UWORD; 7usize],
    pub reserved: [UBYTE; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RastPort"][::core::mem::size_of::<RastPort>() - 100usize];
    ["Alignment of RastPort"][::core::mem::align_of::<RastPort>() - 2usize];
    ["Offset of field: RastPort::Layer"][::core::mem::offset_of!(RastPort, Layer) - 0usize];
    ["Offset of field: RastPort::BitMap"][::core::mem::offset_of!(RastPort, BitMap) - 4usize];
    ["Offset of field: RastPort::AreaPtrn"][::core::mem::offset_of!(RastPort, AreaPtrn) - 8usize];
    ["Offset of field: RastPort::TmpRas"][::core::mem::offset_of!(RastPort, TmpRas) - 12usize];
    ["Offset of field: RastPort::AreaInfo"][::core::mem::offset_of!(RastPort, AreaInfo) - 16usize];
    ["Offset of field: RastPort::GelsInfo"][::core::mem::offset_of!(RastPort, GelsInfo) - 20usize];
    ["Offset of field: RastPort::Mask"][::core::mem::offset_of!(RastPort, Mask) - 24usize];
    ["Offset of field: RastPort::FgPen"][::core::mem::offset_of!(RastPort, FgPen) - 25usize];
    ["Offset of field: RastPort::BgPen"][::core::mem::offset_of!(RastPort, BgPen) - 26usize];
    ["Offset of field: RastPort::AOlPen"][::core::mem::offset_of!(RastPort, AOlPen) - 27usize];
    ["Offset of field: RastPort::DrawMode"][::core::mem::offset_of!(RastPort, DrawMode) - 28usize];
    ["Offset of field: RastPort::AreaPtSz"][::core::mem::offset_of!(RastPort, AreaPtSz) - 29usize];
    ["Offset of field: RastPort::linpatcnt"]
        [::core::mem::offset_of!(RastPort, linpatcnt) - 30usize];
    ["Offset of field: RastPort::dummy"][::core::mem::offset_of!(RastPort, dummy) - 31usize];
    ["Offset of field: RastPort::Flags"][::core::mem::offset_of!(RastPort, Flags) - 32usize];
    ["Offset of field: RastPort::LinePtrn"][::core::mem::offset_of!(RastPort, LinePtrn) - 34usize];
    ["Offset of field: RastPort::cp_x"][::core::mem::offset_of!(RastPort, cp_x) - 36usize];
    ["Offset of field: RastPort::cp_y"][::core::mem::offset_of!(RastPort, cp_y) - 38usize];
    ["Offset of field: RastPort::minterms"][::core::mem::offset_of!(RastPort, minterms) - 40usize];
    ["Offset of field: RastPort::PenWidth"][::core::mem::offset_of!(RastPort, PenWidth) - 48usize];
    ["Offset of field: RastPort::PenHeight"]
        [::core::mem::offset_of!(RastPort, PenHeight) - 50usize];
    ["Offset of field: RastPort::Font"][::core::mem::offset_of!(RastPort, Font) - 52usize];
    ["Offset of field: RastPort::AlgoStyle"]
        [::core::mem::offset_of!(RastPort, AlgoStyle) - 56usize];
    ["Offset of field: RastPort::TxFlags"][::core::mem::offset_of!(RastPort, TxFlags) - 57usize];
    ["Offset of field: RastPort::TxHeight"][::core::mem::offset_of!(RastPort, TxHeight) - 58usize];
    ["Offset of field: RastPort::TxWidth"][::core::mem::offset_of!(RastPort, TxWidth) - 60usize];
    ["Offset of field: RastPort::TxBaseline"]
        [::core::mem::offset_of!(RastPort, TxBaseline) - 62usize];
    ["Offset of field: RastPort::TxSpacing"]
        [::core::mem::offset_of!(RastPort, TxSpacing) - 64usize];
    ["Offset of field: RastPort::RP_User"][::core::mem::offset_of!(RastPort, RP_User) - 66usize];
    ["Offset of field: RastPort::longreserved"]
        [::core::mem::offset_of!(RastPort, longreserved) - 70usize];
    ["Offset of field: RastPort::wordreserved"]
        [::core::mem::offset_of!(RastPort, wordreserved) - 78usize];
    ["Offset of field: RastPort::reserved"][::core::mem::offset_of!(RastPort, reserved) - 92usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Layer_Info {
    pub top_layer: *mut Layer,
    pub resPtr1: *mut ::core::ffi::c_void,
    pub resPtr2: *mut ::core::ffi::c_void,
    pub FreeClipRects: *mut ClipRect,
    pub bounds: Rectangle,
    pub Lock: SignalSemaphore,
    pub gs_Head: MinList,
    pub PrivateReserve3: WORD,
    pub PrivateReserve4: *mut ::core::ffi::c_void,
    pub Flags: UWORD,
    pub res_count: BYTE,
    pub LockLayersCount: BYTE,
    pub PrivateReserve5: BYTE,
    pub UserClipRectsCount: BYTE,
    pub BlankHook: *mut Hook,
    pub resPtr5: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Layer_Info"][::core::mem::size_of::<Layer_Info>() - 102usize];
    ["Alignment of Layer_Info"][::core::mem::align_of::<Layer_Info>() - 2usize];
    ["Offset of field: Layer_Info::top_layer"]
        [::core::mem::offset_of!(Layer_Info, top_layer) - 0usize];
    ["Offset of field: Layer_Info::resPtr1"][::core::mem::offset_of!(Layer_Info, resPtr1) - 4usize];
    ["Offset of field: Layer_Info::resPtr2"][::core::mem::offset_of!(Layer_Info, resPtr2) - 8usize];
    ["Offset of field: Layer_Info::FreeClipRects"]
        [::core::mem::offset_of!(Layer_Info, FreeClipRects) - 12usize];
    ["Offset of field: Layer_Info::bounds"][::core::mem::offset_of!(Layer_Info, bounds) - 16usize];
    ["Offset of field: Layer_Info::Lock"][::core::mem::offset_of!(Layer_Info, Lock) - 24usize];
    ["Offset of field: Layer_Info::gs_Head"]
        [::core::mem::offset_of!(Layer_Info, gs_Head) - 70usize];
    ["Offset of field: Layer_Info::PrivateReserve3"]
        [::core::mem::offset_of!(Layer_Info, PrivateReserve3) - 82usize];
    ["Offset of field: Layer_Info::PrivateReserve4"]
        [::core::mem::offset_of!(Layer_Info, PrivateReserve4) - 84usize];
    ["Offset of field: Layer_Info::Flags"][::core::mem::offset_of!(Layer_Info, Flags) - 88usize];
    ["Offset of field: Layer_Info::res_count"]
        [::core::mem::offset_of!(Layer_Info, res_count) - 90usize];
    ["Offset of field: Layer_Info::LockLayersCount"]
        [::core::mem::offset_of!(Layer_Info, LockLayersCount) - 91usize];
    ["Offset of field: Layer_Info::PrivateReserve5"]
        [::core::mem::offset_of!(Layer_Info, PrivateReserve5) - 92usize];
    ["Offset of field: Layer_Info::UserClipRectsCount"]
        [::core::mem::offset_of!(Layer_Info, UserClipRectsCount) - 93usize];
    ["Offset of field: Layer_Info::BlankHook"]
        [::core::mem::offset_of!(Layer_Info, BlankHook) - 94usize];
    ["Offset of field: Layer_Info::resPtr5"]
        [::core::mem::offset_of!(Layer_Info, resPtr5) - 98usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TextAttr {
    pub ta_Name: STRPTR,
    pub ta_YSize: UWORD,
    pub ta_Style: UBYTE,
    pub ta_Flags: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TextAttr"][::core::mem::size_of::<TextAttr>() - 8usize];
    ["Alignment of TextAttr"][::core::mem::align_of::<TextAttr>() - 2usize];
    ["Offset of field: TextAttr::ta_Name"][::core::mem::offset_of!(TextAttr, ta_Name) - 0usize];
    ["Offset of field: TextAttr::ta_YSize"][::core::mem::offset_of!(TextAttr, ta_YSize) - 4usize];
    ["Offset of field: TextAttr::ta_Style"][::core::mem::offset_of!(TextAttr, ta_Style) - 6usize];
    ["Offset of field: TextAttr::ta_Flags"][::core::mem::offset_of!(TextAttr, ta_Flags) - 7usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TTextAttr {
    pub tta_Name: STRPTR,
    pub tta_YSize: UWORD,
    pub tta_Style: UBYTE,
    pub tta_Flags: UBYTE,
    pub tta_Tags: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TTextAttr"][::core::mem::size_of::<TTextAttr>() - 12usize];
    ["Alignment of TTextAttr"][::core::mem::align_of::<TTextAttr>() - 2usize];
    ["Offset of field: TTextAttr::tta_Name"][::core::mem::offset_of!(TTextAttr, tta_Name) - 0usize];
    ["Offset of field: TTextAttr::tta_YSize"]
        [::core::mem::offset_of!(TTextAttr, tta_YSize) - 4usize];
    ["Offset of field: TTextAttr::tta_Style"]
        [::core::mem::offset_of!(TTextAttr, tta_Style) - 6usize];
    ["Offset of field: TTextAttr::tta_Flags"]
        [::core::mem::offset_of!(TTextAttr, tta_Flags) - 7usize];
    ["Offset of field: TTextAttr::tta_Tags"][::core::mem::offset_of!(TTextAttr, tta_Tags) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TextFont {
    pub tf_Message: Message,
    pub tf_YSize: UWORD,
    pub tf_Style: UBYTE,
    pub tf_Flags: UBYTE,
    pub tf_XSize: UWORD,
    pub tf_Baseline: UWORD,
    pub tf_BoldSmear: UWORD,
    pub tf_Accessors: UWORD,
    pub tf_LoChar: UBYTE,
    pub tf_HiChar: UBYTE,
    pub tf_CharData: APTR,
    pub tf_Modulo: UWORD,
    pub tf_CharLoc: APTR,
    pub tf_CharSpace: APTR,
    pub tf_CharKern: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TextFont"][::core::mem::size_of::<TextFont>() - 52usize];
    ["Alignment of TextFont"][::core::mem::align_of::<TextFont>() - 2usize];
    ["Offset of field: TextFont::tf_Message"]
        [::core::mem::offset_of!(TextFont, tf_Message) - 0usize];
    ["Offset of field: TextFont::tf_YSize"][::core::mem::offset_of!(TextFont, tf_YSize) - 20usize];
    ["Offset of field: TextFont::tf_Style"][::core::mem::offset_of!(TextFont, tf_Style) - 22usize];
    ["Offset of field: TextFont::tf_Flags"][::core::mem::offset_of!(TextFont, tf_Flags) - 23usize];
    ["Offset of field: TextFont::tf_XSize"][::core::mem::offset_of!(TextFont, tf_XSize) - 24usize];
    ["Offset of field: TextFont::tf_Baseline"]
        [::core::mem::offset_of!(TextFont, tf_Baseline) - 26usize];
    ["Offset of field: TextFont::tf_BoldSmear"]
        [::core::mem::offset_of!(TextFont, tf_BoldSmear) - 28usize];
    ["Offset of field: TextFont::tf_Accessors"]
        [::core::mem::offset_of!(TextFont, tf_Accessors) - 30usize];
    ["Offset of field: TextFont::tf_LoChar"]
        [::core::mem::offset_of!(TextFont, tf_LoChar) - 32usize];
    ["Offset of field: TextFont::tf_HiChar"]
        [::core::mem::offset_of!(TextFont, tf_HiChar) - 33usize];
    ["Offset of field: TextFont::tf_CharData"]
        [::core::mem::offset_of!(TextFont, tf_CharData) - 34usize];
    ["Offset of field: TextFont::tf_Modulo"]
        [::core::mem::offset_of!(TextFont, tf_Modulo) - 38usize];
    ["Offset of field: TextFont::tf_CharLoc"]
        [::core::mem::offset_of!(TextFont, tf_CharLoc) - 40usize];
    ["Offset of field: TextFont::tf_CharSpace"]
        [::core::mem::offset_of!(TextFont, tf_CharSpace) - 44usize];
    ["Offset of field: TextFont::tf_CharKern"]
        [::core::mem::offset_of!(TextFont, tf_CharKern) - 48usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TextFontExtension {
    pub tfe_MatchWord: UWORD,
    pub tfe_Flags0: UBYTE,
    pub tfe_Flags1: UBYTE,
    pub tfe_BackPtr: *mut TextFont,
    pub tfe_OrigReplyPort: *mut MsgPort,
    pub tfe_Tags: *mut TagItem,
    pub tfe_OFontPatchS: *mut UWORD,
    pub tfe_OFontPatchK: *mut UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TextFontExtension"][::core::mem::size_of::<TextFontExtension>() - 24usize];
    ["Alignment of TextFontExtension"][::core::mem::align_of::<TextFontExtension>() - 2usize];
    ["Offset of field: TextFontExtension::tfe_MatchWord"]
        [::core::mem::offset_of!(TextFontExtension, tfe_MatchWord) - 0usize];
    ["Offset of field: TextFontExtension::tfe_Flags0"]
        [::core::mem::offset_of!(TextFontExtension, tfe_Flags0) - 2usize];
    ["Offset of field: TextFontExtension::tfe_Flags1"]
        [::core::mem::offset_of!(TextFontExtension, tfe_Flags1) - 3usize];
    ["Offset of field: TextFontExtension::tfe_BackPtr"]
        [::core::mem::offset_of!(TextFontExtension, tfe_BackPtr) - 4usize];
    ["Offset of field: TextFontExtension::tfe_OrigReplyPort"]
        [::core::mem::offset_of!(TextFontExtension, tfe_OrigReplyPort) - 8usize];
    ["Offset of field: TextFontExtension::tfe_Tags"]
        [::core::mem::offset_of!(TextFontExtension, tfe_Tags) - 12usize];
    ["Offset of field: TextFontExtension::tfe_OFontPatchS"]
        [::core::mem::offset_of!(TextFontExtension, tfe_OFontPatchS) - 16usize];
    ["Offset of field: TextFontExtension::tfe_OFontPatchK"]
        [::core::mem::offset_of!(TextFontExtension, tfe_OFontPatchK) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ColorFontColors {
    pub cfc_Reserved: UWORD,
    pub cfc_Count: UWORD,
    pub cfc_ColorTable: *mut UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorFontColors"][::core::mem::size_of::<ColorFontColors>() - 8usize];
    ["Alignment of ColorFontColors"][::core::mem::align_of::<ColorFontColors>() - 2usize];
    ["Offset of field: ColorFontColors::cfc_Reserved"]
        [::core::mem::offset_of!(ColorFontColors, cfc_Reserved) - 0usize];
    ["Offset of field: ColorFontColors::cfc_Count"]
        [::core::mem::offset_of!(ColorFontColors, cfc_Count) - 2usize];
    ["Offset of field: ColorFontColors::cfc_ColorTable"]
        [::core::mem::offset_of!(ColorFontColors, cfc_ColorTable) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ColorTextFont {
    pub ctf_TF: TextFont,
    pub ctf_Flags: UWORD,
    pub ctf_Depth: UBYTE,
    pub ctf_FgColor: UBYTE,
    pub ctf_Low: UBYTE,
    pub ctf_High: UBYTE,
    pub ctf_PlanePick: UBYTE,
    pub ctf_PlaneOnOff: UBYTE,
    pub ctf_ColorFontColors: *mut ColorFontColors,
    pub ctf_CharData: [APTR; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorTextFont"][::core::mem::size_of::<ColorTextFont>() - 96usize];
    ["Alignment of ColorTextFont"][::core::mem::align_of::<ColorTextFont>() - 2usize];
    ["Offset of field: ColorTextFont::ctf_TF"]
        [::core::mem::offset_of!(ColorTextFont, ctf_TF) - 0usize];
    ["Offset of field: ColorTextFont::ctf_Flags"]
        [::core::mem::offset_of!(ColorTextFont, ctf_Flags) - 52usize];
    ["Offset of field: ColorTextFont::ctf_Depth"]
        [::core::mem::offset_of!(ColorTextFont, ctf_Depth) - 54usize];
    ["Offset of field: ColorTextFont::ctf_FgColor"]
        [::core::mem::offset_of!(ColorTextFont, ctf_FgColor) - 55usize];
    ["Offset of field: ColorTextFont::ctf_Low"]
        [::core::mem::offset_of!(ColorTextFont, ctf_Low) - 56usize];
    ["Offset of field: ColorTextFont::ctf_High"]
        [::core::mem::offset_of!(ColorTextFont, ctf_High) - 57usize];
    ["Offset of field: ColorTextFont::ctf_PlanePick"]
        [::core::mem::offset_of!(ColorTextFont, ctf_PlanePick) - 58usize];
    ["Offset of field: ColorTextFont::ctf_PlaneOnOff"]
        [::core::mem::offset_of!(ColorTextFont, ctf_PlaneOnOff) - 59usize];
    ["Offset of field: ColorTextFont::ctf_ColorFontColors"]
        [::core::mem::offset_of!(ColorTextFont, ctf_ColorFontColors) - 60usize];
    ["Offset of field: ColorTextFont::ctf_CharData"]
        [::core::mem::offset_of!(ColorTextFont, ctf_CharData) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TextExtent {
    pub te_Width: UWORD,
    pub te_Height: UWORD,
    pub te_Extent: Rectangle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TextExtent"][::core::mem::size_of::<TextExtent>() - 12usize];
    ["Alignment of TextExtent"][::core::mem::align_of::<TextExtent>() - 2usize];
    ["Offset of field: TextExtent::te_Width"]
        [::core::mem::offset_of!(TextExtent, te_Width) - 0usize];
    ["Offset of field: TextExtent::te_Height"]
        [::core::mem::offset_of!(TextExtent, te_Height) - 2usize];
    ["Offset of field: TextExtent::te_Extent"]
        [::core::mem::offset_of!(TextExtent, te_Extent) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TimeVal {
    pub tv_secs: ULONG,
    pub tv_micro: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TimeVal"][::core::mem::size_of::<TimeVal>() - 8usize];
    ["Alignment of TimeVal"][::core::mem::align_of::<TimeVal>() - 2usize];
    ["Offset of field: TimeVal::tv_secs"][::core::mem::offset_of!(TimeVal, tv_secs) - 0usize];
    ["Offset of field: TimeVal::tv_micro"][::core::mem::offset_of!(TimeVal, tv_micro) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeRequest {
    pub tr_node: IORequest,
    pub tr_time: TimeVal,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TimeRequest"][::core::mem::size_of::<TimeRequest>() - 40usize];
    ["Alignment of TimeRequest"][::core::mem::align_of::<TimeRequest>() - 2usize];
    ["Offset of field: TimeRequest::tr_node"]
        [::core::mem::offset_of!(TimeRequest, tr_node) - 0usize];
    ["Offset of field: TimeRequest::tr_time"]
        [::core::mem::offset_of!(TimeRequest, tr_time) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_secs: ULONG,
    pub tv_micro: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::core::mem::size_of::<timeval>() - 8usize];
    ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 2usize];
    ["Offset of field: timeval::tv_secs"][::core::mem::offset_of!(timeval, tv_secs) - 0usize];
    ["Offset of field: timeval::tv_micro"][::core::mem::offset_of!(timeval, tv_micro) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timerequest {
    pub tr_node: IORequest,
    pub tr_time: timeval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timerequest"][::core::mem::size_of::<timerequest>() - 40usize];
    ["Alignment of timerequest"][::core::mem::align_of::<timerequest>() - 2usize];
    ["Offset of field: timerequest::tr_node"]
        [::core::mem::offset_of!(timerequest, tr_node) - 0usize];
    ["Offset of field: timerequest::tr_time"]
        [::core::mem::offset_of!(timerequest, tr_time) - 32usize];
};
pub type TimeVal_Type = timeval;
pub type TimeRequest_Type = timerequest;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct EClockVal {
    pub ev_hi: ULONG,
    pub ev_lo: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EClockVal"][::core::mem::size_of::<EClockVal>() - 8usize];
    ["Alignment of EClockVal"][::core::mem::align_of::<EClockVal>() - 2usize];
    ["Offset of field: EClockVal::ev_hi"][::core::mem::offset_of!(EClockVal, ev_hi) - 0usize];
    ["Offset of field: EClockVal::ev_lo"][::core::mem::offset_of!(EClockVal, ev_lo) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IEPointerPixel {
    pub iepp_Screen: *mut Screen,
    pub iepp_Position: IEPointerPixel__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IEPointerPixel__bindgen_ty_1 {
    pub X: WORD,
    pub Y: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IEPointerPixel__bindgen_ty_1"]
        [::core::mem::size_of::<IEPointerPixel__bindgen_ty_1>() - 4usize];
    ["Alignment of IEPointerPixel__bindgen_ty_1"]
        [::core::mem::align_of::<IEPointerPixel__bindgen_ty_1>() - 2usize];
    ["Offset of field: IEPointerPixel__bindgen_ty_1::X"]
        [::core::mem::offset_of!(IEPointerPixel__bindgen_ty_1, X) - 0usize];
    ["Offset of field: IEPointerPixel__bindgen_ty_1::Y"]
        [::core::mem::offset_of!(IEPointerPixel__bindgen_ty_1, Y) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IEPointerPixel"][::core::mem::size_of::<IEPointerPixel>() - 8usize];
    ["Alignment of IEPointerPixel"][::core::mem::align_of::<IEPointerPixel>() - 2usize];
    ["Offset of field: IEPointerPixel::iepp_Screen"]
        [::core::mem::offset_of!(IEPointerPixel, iepp_Screen) - 0usize];
    ["Offset of field: IEPointerPixel::iepp_Position"]
        [::core::mem::offset_of!(IEPointerPixel, iepp_Position) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IEPointerTablet {
    pub iept_Range: IEPointerTablet__bindgen_ty_1,
    pub iept_Value: IEPointerTablet__bindgen_ty_2,
    pub iept_Pressure: WORD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IEPointerTablet__bindgen_ty_1 {
    pub X: UWORD,
    pub Y: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IEPointerTablet__bindgen_ty_1"]
        [::core::mem::size_of::<IEPointerTablet__bindgen_ty_1>() - 4usize];
    ["Alignment of IEPointerTablet__bindgen_ty_1"]
        [::core::mem::align_of::<IEPointerTablet__bindgen_ty_1>() - 2usize];
    ["Offset of field: IEPointerTablet__bindgen_ty_1::X"]
        [::core::mem::offset_of!(IEPointerTablet__bindgen_ty_1, X) - 0usize];
    ["Offset of field: IEPointerTablet__bindgen_ty_1::Y"]
        [::core::mem::offset_of!(IEPointerTablet__bindgen_ty_1, Y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IEPointerTablet__bindgen_ty_2 {
    pub X: UWORD,
    pub Y: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IEPointerTablet__bindgen_ty_2"]
        [::core::mem::size_of::<IEPointerTablet__bindgen_ty_2>() - 4usize];
    ["Alignment of IEPointerTablet__bindgen_ty_2"]
        [::core::mem::align_of::<IEPointerTablet__bindgen_ty_2>() - 2usize];
    ["Offset of field: IEPointerTablet__bindgen_ty_2::X"]
        [::core::mem::offset_of!(IEPointerTablet__bindgen_ty_2, X) - 0usize];
    ["Offset of field: IEPointerTablet__bindgen_ty_2::Y"]
        [::core::mem::offset_of!(IEPointerTablet__bindgen_ty_2, Y) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IEPointerTablet"][::core::mem::size_of::<IEPointerTablet>() - 10usize];
    ["Alignment of IEPointerTablet"][::core::mem::align_of::<IEPointerTablet>() - 2usize];
    ["Offset of field: IEPointerTablet::iept_Range"]
        [::core::mem::offset_of!(IEPointerTablet, iept_Range) - 0usize];
    ["Offset of field: IEPointerTablet::iept_Value"]
        [::core::mem::offset_of!(IEPointerTablet, iept_Value) - 4usize];
    ["Offset of field: IEPointerTablet::iept_Pressure"]
        [::core::mem::offset_of!(IEPointerTablet, iept_Pressure) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IENewTablet {
    pub ient_CallBack: *mut Hook,
    pub ient_ScaledX: UWORD,
    pub ient_ScaledY: UWORD,
    pub ient_ScaledXFraction: UWORD,
    pub ient_ScaledYFraction: UWORD,
    pub ient_TabletX: ULONG,
    pub ient_TabletY: ULONG,
    pub ient_RangeX: ULONG,
    pub ient_RangeY: ULONG,
    pub ient_TagList: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IENewTablet"][::core::mem::size_of::<IENewTablet>() - 32usize];
    ["Alignment of IENewTablet"][::core::mem::align_of::<IENewTablet>() - 2usize];
    ["Offset of field: IENewTablet::ient_CallBack"]
        [::core::mem::offset_of!(IENewTablet, ient_CallBack) - 0usize];
    ["Offset of field: IENewTablet::ient_ScaledX"]
        [::core::mem::offset_of!(IENewTablet, ient_ScaledX) - 4usize];
    ["Offset of field: IENewTablet::ient_ScaledY"]
        [::core::mem::offset_of!(IENewTablet, ient_ScaledY) - 6usize];
    ["Offset of field: IENewTablet::ient_ScaledXFraction"]
        [::core::mem::offset_of!(IENewTablet, ient_ScaledXFraction) - 8usize];
    ["Offset of field: IENewTablet::ient_ScaledYFraction"]
        [::core::mem::offset_of!(IENewTablet, ient_ScaledYFraction) - 10usize];
    ["Offset of field: IENewTablet::ient_TabletX"]
        [::core::mem::offset_of!(IENewTablet, ient_TabletX) - 12usize];
    ["Offset of field: IENewTablet::ient_TabletY"]
        [::core::mem::offset_of!(IENewTablet, ient_TabletY) - 16usize];
    ["Offset of field: IENewTablet::ient_RangeX"]
        [::core::mem::offset_of!(IENewTablet, ient_RangeX) - 20usize];
    ["Offset of field: IENewTablet::ient_RangeY"]
        [::core::mem::offset_of!(IENewTablet, ient_RangeY) - 24usize];
    ["Offset of field: IENewTablet::ient_TagList"]
        [::core::mem::offset_of!(IENewTablet, ient_TagList) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct InputEvent {
    pub ie_NextEvent: *mut InputEvent,
    pub ie_Class: UBYTE,
    pub ie_SubClass: UBYTE,
    pub ie_Code: UWORD,
    pub ie_Qualifier: UWORD,
    pub ie_position: InputEvent__bindgen_ty_1,
    pub ie_TimeStamp: TimeVal_Type,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union InputEvent__bindgen_ty_1 {
    pub ie_xy: InputEvent__bindgen_ty_1__bindgen_ty_1,
    pub ie_addr: APTR,
    pub ie_dead: InputEvent__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputEvent__bindgen_ty_1__bindgen_ty_1 {
    pub ie_x: WORD,
    pub ie_y: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputEvent__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<InputEvent__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of InputEvent__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<InputEvent__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: InputEvent__bindgen_ty_1__bindgen_ty_1::ie_x"]
        [::core::mem::offset_of!(InputEvent__bindgen_ty_1__bindgen_ty_1, ie_x) - 0usize];
    ["Offset of field: InputEvent__bindgen_ty_1__bindgen_ty_1::ie_y"]
        [::core::mem::offset_of!(InputEvent__bindgen_ty_1__bindgen_ty_1, ie_y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputEvent__bindgen_ty_1__bindgen_ty_2 {
    pub ie_prev1DownCode: UBYTE,
    pub ie_prev1DownQual: UBYTE,
    pub ie_prev2DownCode: UBYTE,
    pub ie_prev2DownQual: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputEvent__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<InputEvent__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of InputEvent__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<InputEvent__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: InputEvent__bindgen_ty_1__bindgen_ty_2::ie_prev1DownCode"][::core::mem::offset_of!(
        InputEvent__bindgen_ty_1__bindgen_ty_2,
        ie_prev1DownCode
    ) - 0usize];
    ["Offset of field: InputEvent__bindgen_ty_1__bindgen_ty_2::ie_prev1DownQual"][::core::mem::offset_of!(
        InputEvent__bindgen_ty_1__bindgen_ty_2,
        ie_prev1DownQual
    ) - 1usize];
    ["Offset of field: InputEvent__bindgen_ty_1__bindgen_ty_2::ie_prev2DownCode"][::core::mem::offset_of!(
        InputEvent__bindgen_ty_1__bindgen_ty_2,
        ie_prev2DownCode
    ) - 2usize];
    ["Offset of field: InputEvent__bindgen_ty_1__bindgen_ty_2::ie_prev2DownQual"][::core::mem::offset_of!(
        InputEvent__bindgen_ty_1__bindgen_ty_2,
        ie_prev2DownQual
    ) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputEvent__bindgen_ty_1"]
        [::core::mem::size_of::<InputEvent__bindgen_ty_1>() - 4usize];
    ["Alignment of InputEvent__bindgen_ty_1"]
        [::core::mem::align_of::<InputEvent__bindgen_ty_1>() - 2usize];
    ["Offset of field: InputEvent__bindgen_ty_1::ie_xy"]
        [::core::mem::offset_of!(InputEvent__bindgen_ty_1, ie_xy) - 0usize];
    ["Offset of field: InputEvent__bindgen_ty_1::ie_addr"]
        [::core::mem::offset_of!(InputEvent__bindgen_ty_1, ie_addr) - 0usize];
    ["Offset of field: InputEvent__bindgen_ty_1::ie_dead"]
        [::core::mem::offset_of!(InputEvent__bindgen_ty_1, ie_dead) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputEvent"][::core::mem::size_of::<InputEvent>() - 22usize];
    ["Alignment of InputEvent"][::core::mem::align_of::<InputEvent>() - 2usize];
    ["Offset of field: InputEvent::ie_NextEvent"]
        [::core::mem::offset_of!(InputEvent, ie_NextEvent) - 0usize];
    ["Offset of field: InputEvent::ie_Class"]
        [::core::mem::offset_of!(InputEvent, ie_Class) - 4usize];
    ["Offset of field: InputEvent::ie_SubClass"]
        [::core::mem::offset_of!(InputEvent, ie_SubClass) - 5usize];
    ["Offset of field: InputEvent::ie_Code"][::core::mem::offset_of!(InputEvent, ie_Code) - 6usize];
    ["Offset of field: InputEvent::ie_Qualifier"]
        [::core::mem::offset_of!(InputEvent, ie_Qualifier) - 8usize];
    ["Offset of field: InputEvent::ie_position"]
        [::core::mem::offset_of!(InputEvent, ie_position) - 10usize];
    ["Offset of field: InputEvent::ie_TimeStamp"]
        [::core::mem::offset_of!(InputEvent, ie_TimeStamp) - 14usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Menu {
    pub NextMenu: *mut Menu,
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub Flags: UWORD,
    pub MenuName: CONST_STRPTR,
    pub FirstItem: *mut MenuItem,
    pub JazzX: WORD,
    pub JazzY: WORD,
    pub BeatX: WORD,
    pub BeatY: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Menu"][::core::mem::size_of::<Menu>() - 30usize];
    ["Alignment of Menu"][::core::mem::align_of::<Menu>() - 2usize];
    ["Offset of field: Menu::NextMenu"][::core::mem::offset_of!(Menu, NextMenu) - 0usize];
    ["Offset of field: Menu::LeftEdge"][::core::mem::offset_of!(Menu, LeftEdge) - 4usize];
    ["Offset of field: Menu::TopEdge"][::core::mem::offset_of!(Menu, TopEdge) - 6usize];
    ["Offset of field: Menu::Width"][::core::mem::offset_of!(Menu, Width) - 8usize];
    ["Offset of field: Menu::Height"][::core::mem::offset_of!(Menu, Height) - 10usize];
    ["Offset of field: Menu::Flags"][::core::mem::offset_of!(Menu, Flags) - 12usize];
    ["Offset of field: Menu::MenuName"][::core::mem::offset_of!(Menu, MenuName) - 14usize];
    ["Offset of field: Menu::FirstItem"][::core::mem::offset_of!(Menu, FirstItem) - 18usize];
    ["Offset of field: Menu::JazzX"][::core::mem::offset_of!(Menu, JazzX) - 22usize];
    ["Offset of field: Menu::JazzY"][::core::mem::offset_of!(Menu, JazzY) - 24usize];
    ["Offset of field: Menu::BeatX"][::core::mem::offset_of!(Menu, BeatX) - 26usize];
    ["Offset of field: Menu::BeatY"][::core::mem::offset_of!(Menu, BeatY) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MenuItem {
    pub NextItem: *mut MenuItem,
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub Flags: UWORD,
    pub MutualExclude: LONG,
    pub ItemFill: APTR,
    pub SelectFill: APTR,
    pub Command: BYTE,
    pub SubItem: *mut MenuItem,
    pub NextSelect: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MenuItem"][::core::mem::size_of::<MenuItem>() - 34usize];
    ["Alignment of MenuItem"][::core::mem::align_of::<MenuItem>() - 2usize];
    ["Offset of field: MenuItem::NextItem"][::core::mem::offset_of!(MenuItem, NextItem) - 0usize];
    ["Offset of field: MenuItem::LeftEdge"][::core::mem::offset_of!(MenuItem, LeftEdge) - 4usize];
    ["Offset of field: MenuItem::TopEdge"][::core::mem::offset_of!(MenuItem, TopEdge) - 6usize];
    ["Offset of field: MenuItem::Width"][::core::mem::offset_of!(MenuItem, Width) - 8usize];
    ["Offset of field: MenuItem::Height"][::core::mem::offset_of!(MenuItem, Height) - 10usize];
    ["Offset of field: MenuItem::Flags"][::core::mem::offset_of!(MenuItem, Flags) - 12usize];
    ["Offset of field: MenuItem::MutualExclude"]
        [::core::mem::offset_of!(MenuItem, MutualExclude) - 14usize];
    ["Offset of field: MenuItem::ItemFill"][::core::mem::offset_of!(MenuItem, ItemFill) - 18usize];
    ["Offset of field: MenuItem::SelectFill"]
        [::core::mem::offset_of!(MenuItem, SelectFill) - 22usize];
    ["Offset of field: MenuItem::Command"][::core::mem::offset_of!(MenuItem, Command) - 26usize];
    ["Offset of field: MenuItem::SubItem"][::core::mem::offset_of!(MenuItem, SubItem) - 28usize];
    ["Offset of field: MenuItem::NextSelect"]
        [::core::mem::offset_of!(MenuItem, NextSelect) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Requester {
    pub OlderRequest: *mut Requester,
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub RelLeft: WORD,
    pub RelTop: WORD,
    pub ReqGadget: *mut Gadget,
    pub ReqBorder: *mut Border,
    pub ReqText: *mut IntuiText,
    pub Flags: UWORD,
    pub BackFill: UBYTE,
    pub ReqLayer: *mut Layer,
    pub ReqPad1: [UBYTE; 32usize],
    pub ImageBMap: *mut BitMap,
    pub RWindow: *mut Window,
    pub ReqImage: *mut Image,
    pub ReqPad2: [UBYTE; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Requester"][::core::mem::size_of::<Requester>() - 112usize];
    ["Alignment of Requester"][::core::mem::align_of::<Requester>() - 2usize];
    ["Offset of field: Requester::OlderRequest"]
        [::core::mem::offset_of!(Requester, OlderRequest) - 0usize];
    ["Offset of field: Requester::LeftEdge"][::core::mem::offset_of!(Requester, LeftEdge) - 4usize];
    ["Offset of field: Requester::TopEdge"][::core::mem::offset_of!(Requester, TopEdge) - 6usize];
    ["Offset of field: Requester::Width"][::core::mem::offset_of!(Requester, Width) - 8usize];
    ["Offset of field: Requester::Height"][::core::mem::offset_of!(Requester, Height) - 10usize];
    ["Offset of field: Requester::RelLeft"][::core::mem::offset_of!(Requester, RelLeft) - 12usize];
    ["Offset of field: Requester::RelTop"][::core::mem::offset_of!(Requester, RelTop) - 14usize];
    ["Offset of field: Requester::ReqGadget"]
        [::core::mem::offset_of!(Requester, ReqGadget) - 16usize];
    ["Offset of field: Requester::ReqBorder"]
        [::core::mem::offset_of!(Requester, ReqBorder) - 20usize];
    ["Offset of field: Requester::ReqText"][::core::mem::offset_of!(Requester, ReqText) - 24usize];
    ["Offset of field: Requester::Flags"][::core::mem::offset_of!(Requester, Flags) - 28usize];
    ["Offset of field: Requester::BackFill"]
        [::core::mem::offset_of!(Requester, BackFill) - 30usize];
    ["Offset of field: Requester::ReqLayer"]
        [::core::mem::offset_of!(Requester, ReqLayer) - 32usize];
    ["Offset of field: Requester::ReqPad1"][::core::mem::offset_of!(Requester, ReqPad1) - 36usize];
    ["Offset of field: Requester::ImageBMap"]
        [::core::mem::offset_of!(Requester, ImageBMap) - 68usize];
    ["Offset of field: Requester::RWindow"][::core::mem::offset_of!(Requester, RWindow) - 72usize];
    ["Offset of field: Requester::ReqImage"]
        [::core::mem::offset_of!(Requester, ReqImage) - 76usize];
    ["Offset of field: Requester::ReqPad2"][::core::mem::offset_of!(Requester, ReqPad2) - 80usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Gadget {
    pub NextGadget: *mut Gadget,
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub Flags: UWORD,
    pub Activation: UWORD,
    pub GadgetType: UWORD,
    pub GadgetRender: APTR,
    pub SelectRender: APTR,
    pub GadgetText: *mut IntuiText,
    pub MutualExclude: LONG,
    pub SpecialInfo: APTR,
    pub GadgetID: UWORD,
    pub UserData: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Gadget"][::core::mem::size_of::<Gadget>() - 44usize];
    ["Alignment of Gadget"][::core::mem::align_of::<Gadget>() - 2usize];
    ["Offset of field: Gadget::NextGadget"][::core::mem::offset_of!(Gadget, NextGadget) - 0usize];
    ["Offset of field: Gadget::LeftEdge"][::core::mem::offset_of!(Gadget, LeftEdge) - 4usize];
    ["Offset of field: Gadget::TopEdge"][::core::mem::offset_of!(Gadget, TopEdge) - 6usize];
    ["Offset of field: Gadget::Width"][::core::mem::offset_of!(Gadget, Width) - 8usize];
    ["Offset of field: Gadget::Height"][::core::mem::offset_of!(Gadget, Height) - 10usize];
    ["Offset of field: Gadget::Flags"][::core::mem::offset_of!(Gadget, Flags) - 12usize];
    ["Offset of field: Gadget::Activation"][::core::mem::offset_of!(Gadget, Activation) - 14usize];
    ["Offset of field: Gadget::GadgetType"][::core::mem::offset_of!(Gadget, GadgetType) - 16usize];
    ["Offset of field: Gadget::GadgetRender"]
        [::core::mem::offset_of!(Gadget, GadgetRender) - 18usize];
    ["Offset of field: Gadget::SelectRender"]
        [::core::mem::offset_of!(Gadget, SelectRender) - 22usize];
    ["Offset of field: Gadget::GadgetText"][::core::mem::offset_of!(Gadget, GadgetText) - 26usize];
    ["Offset of field: Gadget::MutualExclude"]
        [::core::mem::offset_of!(Gadget, MutualExclude) - 30usize];
    ["Offset of field: Gadget::SpecialInfo"]
        [::core::mem::offset_of!(Gadget, SpecialInfo) - 34usize];
    ["Offset of field: Gadget::GadgetID"][::core::mem::offset_of!(Gadget, GadgetID) - 38usize];
    ["Offset of field: Gadget::UserData"][::core::mem::offset_of!(Gadget, UserData) - 40usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExtGadget {
    pub NextGadget: *mut ExtGadget,
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub Flags: UWORD,
    pub Activation: UWORD,
    pub GadgetType: UWORD,
    pub GadgetRender: APTR,
    pub SelectRender: APTR,
    pub GadgetText: *mut IntuiText,
    pub MutualExclude: LONG,
    pub SpecialInfo: APTR,
    pub GadgetID: UWORD,
    pub UserData: APTR,
    pub MoreFlags: ULONG,
    pub BoundsLeftEdge: WORD,
    pub BoundsTopEdge: WORD,
    pub BoundsWidth: WORD,
    pub BoundsHeight: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExtGadget"][::core::mem::size_of::<ExtGadget>() - 56usize];
    ["Alignment of ExtGadget"][::core::mem::align_of::<ExtGadget>() - 2usize];
    ["Offset of field: ExtGadget::NextGadget"]
        [::core::mem::offset_of!(ExtGadget, NextGadget) - 0usize];
    ["Offset of field: ExtGadget::LeftEdge"][::core::mem::offset_of!(ExtGadget, LeftEdge) - 4usize];
    ["Offset of field: ExtGadget::TopEdge"][::core::mem::offset_of!(ExtGadget, TopEdge) - 6usize];
    ["Offset of field: ExtGadget::Width"][::core::mem::offset_of!(ExtGadget, Width) - 8usize];
    ["Offset of field: ExtGadget::Height"][::core::mem::offset_of!(ExtGadget, Height) - 10usize];
    ["Offset of field: ExtGadget::Flags"][::core::mem::offset_of!(ExtGadget, Flags) - 12usize];
    ["Offset of field: ExtGadget::Activation"]
        [::core::mem::offset_of!(ExtGadget, Activation) - 14usize];
    ["Offset of field: ExtGadget::GadgetType"]
        [::core::mem::offset_of!(ExtGadget, GadgetType) - 16usize];
    ["Offset of field: ExtGadget::GadgetRender"]
        [::core::mem::offset_of!(ExtGadget, GadgetRender) - 18usize];
    ["Offset of field: ExtGadget::SelectRender"]
        [::core::mem::offset_of!(ExtGadget, SelectRender) - 22usize];
    ["Offset of field: ExtGadget::GadgetText"]
        [::core::mem::offset_of!(ExtGadget, GadgetText) - 26usize];
    ["Offset of field: ExtGadget::MutualExclude"]
        [::core::mem::offset_of!(ExtGadget, MutualExclude) - 30usize];
    ["Offset of field: ExtGadget::SpecialInfo"]
        [::core::mem::offset_of!(ExtGadget, SpecialInfo) - 34usize];
    ["Offset of field: ExtGadget::GadgetID"]
        [::core::mem::offset_of!(ExtGadget, GadgetID) - 38usize];
    ["Offset of field: ExtGadget::UserData"]
        [::core::mem::offset_of!(ExtGadget, UserData) - 40usize];
    ["Offset of field: ExtGadget::MoreFlags"]
        [::core::mem::offset_of!(ExtGadget, MoreFlags) - 44usize];
    ["Offset of field: ExtGadget::BoundsLeftEdge"]
        [::core::mem::offset_of!(ExtGadget, BoundsLeftEdge) - 48usize];
    ["Offset of field: ExtGadget::BoundsTopEdge"]
        [::core::mem::offset_of!(ExtGadget, BoundsTopEdge) - 50usize];
    ["Offset of field: ExtGadget::BoundsWidth"]
        [::core::mem::offset_of!(ExtGadget, BoundsWidth) - 52usize];
    ["Offset of field: ExtGadget::BoundsHeight"]
        [::core::mem::offset_of!(ExtGadget, BoundsHeight) - 54usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BoolInfo {
    pub Flags: UWORD,
    pub Mask: *mut UWORD,
    pub Reserved: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BoolInfo"][::core::mem::size_of::<BoolInfo>() - 10usize];
    ["Alignment of BoolInfo"][::core::mem::align_of::<BoolInfo>() - 2usize];
    ["Offset of field: BoolInfo::Flags"][::core::mem::offset_of!(BoolInfo, Flags) - 0usize];
    ["Offset of field: BoolInfo::Mask"][::core::mem::offset_of!(BoolInfo, Mask) - 2usize];
    ["Offset of field: BoolInfo::Reserved"][::core::mem::offset_of!(BoolInfo, Reserved) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropInfo {
    pub Flags: UWORD,
    pub HorizPot: UWORD,
    pub VertPot: UWORD,
    pub HorizBody: UWORD,
    pub VertBody: UWORD,
    pub CWidth: UWORD,
    pub CHeight: UWORD,
    pub HPotRes: UWORD,
    pub VPotRes: UWORD,
    pub LeftBorder: UWORD,
    pub TopBorder: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PropInfo"][::core::mem::size_of::<PropInfo>() - 22usize];
    ["Alignment of PropInfo"][::core::mem::align_of::<PropInfo>() - 2usize];
    ["Offset of field: PropInfo::Flags"][::core::mem::offset_of!(PropInfo, Flags) - 0usize];
    ["Offset of field: PropInfo::HorizPot"][::core::mem::offset_of!(PropInfo, HorizPot) - 2usize];
    ["Offset of field: PropInfo::VertPot"][::core::mem::offset_of!(PropInfo, VertPot) - 4usize];
    ["Offset of field: PropInfo::HorizBody"][::core::mem::offset_of!(PropInfo, HorizBody) - 6usize];
    ["Offset of field: PropInfo::VertBody"][::core::mem::offset_of!(PropInfo, VertBody) - 8usize];
    ["Offset of field: PropInfo::CWidth"][::core::mem::offset_of!(PropInfo, CWidth) - 10usize];
    ["Offset of field: PropInfo::CHeight"][::core::mem::offset_of!(PropInfo, CHeight) - 12usize];
    ["Offset of field: PropInfo::HPotRes"][::core::mem::offset_of!(PropInfo, HPotRes) - 14usize];
    ["Offset of field: PropInfo::VPotRes"][::core::mem::offset_of!(PropInfo, VPotRes) - 16usize];
    ["Offset of field: PropInfo::LeftBorder"]
        [::core::mem::offset_of!(PropInfo, LeftBorder) - 18usize];
    ["Offset of field: PropInfo::TopBorder"]
        [::core::mem::offset_of!(PropInfo, TopBorder) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct StringInfo {
    pub Buffer: STRPTR,
    pub UndoBuffer: STRPTR,
    pub BufferPos: WORD,
    pub MaxChars: WORD,
    pub DispPos: WORD,
    pub UndoPos: WORD,
    pub NumChars: WORD,
    pub DispCount: WORD,
    pub CLeft: WORD,
    pub CTop: WORD,
    pub Extension: *mut StringExtend,
    pub LongInt: LONG,
    pub AltKeyMap: *mut KeyMap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StringInfo"][::core::mem::size_of::<StringInfo>() - 36usize];
    ["Alignment of StringInfo"][::core::mem::align_of::<StringInfo>() - 2usize];
    ["Offset of field: StringInfo::Buffer"][::core::mem::offset_of!(StringInfo, Buffer) - 0usize];
    ["Offset of field: StringInfo::UndoBuffer"]
        [::core::mem::offset_of!(StringInfo, UndoBuffer) - 4usize];
    ["Offset of field: StringInfo::BufferPos"]
        [::core::mem::offset_of!(StringInfo, BufferPos) - 8usize];
    ["Offset of field: StringInfo::MaxChars"]
        [::core::mem::offset_of!(StringInfo, MaxChars) - 10usize];
    ["Offset of field: StringInfo::DispPos"]
        [::core::mem::offset_of!(StringInfo, DispPos) - 12usize];
    ["Offset of field: StringInfo::UndoPos"]
        [::core::mem::offset_of!(StringInfo, UndoPos) - 14usize];
    ["Offset of field: StringInfo::NumChars"]
        [::core::mem::offset_of!(StringInfo, NumChars) - 16usize];
    ["Offset of field: StringInfo::DispCount"]
        [::core::mem::offset_of!(StringInfo, DispCount) - 18usize];
    ["Offset of field: StringInfo::CLeft"][::core::mem::offset_of!(StringInfo, CLeft) - 20usize];
    ["Offset of field: StringInfo::CTop"][::core::mem::offset_of!(StringInfo, CTop) - 22usize];
    ["Offset of field: StringInfo::Extension"]
        [::core::mem::offset_of!(StringInfo, Extension) - 24usize];
    ["Offset of field: StringInfo::LongInt"]
        [::core::mem::offset_of!(StringInfo, LongInt) - 28usize];
    ["Offset of field: StringInfo::AltKeyMap"]
        [::core::mem::offset_of!(StringInfo, AltKeyMap) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IntuiText {
    pub FrontPen: UBYTE,
    pub BackPen: UBYTE,
    pub DrawMode: UBYTE,
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub ITextFont: *const TextAttr,
    pub IText: STRPTR,
    pub NextText: *mut IntuiText,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IntuiText"][::core::mem::size_of::<IntuiText>() - 20usize];
    ["Alignment of IntuiText"][::core::mem::align_of::<IntuiText>() - 2usize];
    ["Offset of field: IntuiText::FrontPen"][::core::mem::offset_of!(IntuiText, FrontPen) - 0usize];
    ["Offset of field: IntuiText::BackPen"][::core::mem::offset_of!(IntuiText, BackPen) - 1usize];
    ["Offset of field: IntuiText::DrawMode"][::core::mem::offset_of!(IntuiText, DrawMode) - 2usize];
    ["Offset of field: IntuiText::LeftEdge"][::core::mem::offset_of!(IntuiText, LeftEdge) - 4usize];
    ["Offset of field: IntuiText::TopEdge"][::core::mem::offset_of!(IntuiText, TopEdge) - 6usize];
    ["Offset of field: IntuiText::ITextFont"]
        [::core::mem::offset_of!(IntuiText, ITextFont) - 8usize];
    ["Offset of field: IntuiText::IText"][::core::mem::offset_of!(IntuiText, IText) - 12usize];
    ["Offset of field: IntuiText::NextText"]
        [::core::mem::offset_of!(IntuiText, NextText) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Border {
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub FrontPen: UBYTE,
    pub BackPen: UBYTE,
    pub DrawMode: UBYTE,
    pub Count: BYTE,
    pub XY: *mut WORD,
    pub NextBorder: *mut Border,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Border"][::core::mem::size_of::<Border>() - 16usize];
    ["Alignment of Border"][::core::mem::align_of::<Border>() - 2usize];
    ["Offset of field: Border::LeftEdge"][::core::mem::offset_of!(Border, LeftEdge) - 0usize];
    ["Offset of field: Border::TopEdge"][::core::mem::offset_of!(Border, TopEdge) - 2usize];
    ["Offset of field: Border::FrontPen"][::core::mem::offset_of!(Border, FrontPen) - 4usize];
    ["Offset of field: Border::BackPen"][::core::mem::offset_of!(Border, BackPen) - 5usize];
    ["Offset of field: Border::DrawMode"][::core::mem::offset_of!(Border, DrawMode) - 6usize];
    ["Offset of field: Border::Count"][::core::mem::offset_of!(Border, Count) - 7usize];
    ["Offset of field: Border::XY"][::core::mem::offset_of!(Border, XY) - 8usize];
    ["Offset of field: Border::NextBorder"][::core::mem::offset_of!(Border, NextBorder) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Image {
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub Depth: WORD,
    pub ImageData: *mut UWORD,
    pub PlanePick: UBYTE,
    pub PlaneOnOff: UBYTE,
    pub NextImage: *mut Image,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Image"][::core::mem::size_of::<Image>() - 20usize];
    ["Alignment of Image"][::core::mem::align_of::<Image>() - 2usize];
    ["Offset of field: Image::LeftEdge"][::core::mem::offset_of!(Image, LeftEdge) - 0usize];
    ["Offset of field: Image::TopEdge"][::core::mem::offset_of!(Image, TopEdge) - 2usize];
    ["Offset of field: Image::Width"][::core::mem::offset_of!(Image, Width) - 4usize];
    ["Offset of field: Image::Height"][::core::mem::offset_of!(Image, Height) - 6usize];
    ["Offset of field: Image::Depth"][::core::mem::offset_of!(Image, Depth) - 8usize];
    ["Offset of field: Image::ImageData"][::core::mem::offset_of!(Image, ImageData) - 10usize];
    ["Offset of field: Image::PlanePick"][::core::mem::offset_of!(Image, PlanePick) - 14usize];
    ["Offset of field: Image::PlaneOnOff"][::core::mem::offset_of!(Image, PlaneOnOff) - 15usize];
    ["Offset of field: Image::NextImage"][::core::mem::offset_of!(Image, NextImage) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IntuiMessage {
    pub ExecMessage: Message,
    pub Class: ULONG,
    pub Code: UWORD,
    pub Qualifier: UWORD,
    pub IAddress: APTR,
    pub MouseX: WORD,
    pub MouseY: WORD,
    pub Seconds: ULONG,
    pub Micros: ULONG,
    pub IDCMPWindow: *mut Window,
    pub SpecialLink: *mut IntuiMessage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IntuiMessage"][::core::mem::size_of::<IntuiMessage>() - 52usize];
    ["Alignment of IntuiMessage"][::core::mem::align_of::<IntuiMessage>() - 2usize];
    ["Offset of field: IntuiMessage::ExecMessage"]
        [::core::mem::offset_of!(IntuiMessage, ExecMessage) - 0usize];
    ["Offset of field: IntuiMessage::Class"]
        [::core::mem::offset_of!(IntuiMessage, Class) - 20usize];
    ["Offset of field: IntuiMessage::Code"][::core::mem::offset_of!(IntuiMessage, Code) - 24usize];
    ["Offset of field: IntuiMessage::Qualifier"]
        [::core::mem::offset_of!(IntuiMessage, Qualifier) - 26usize];
    ["Offset of field: IntuiMessage::IAddress"]
        [::core::mem::offset_of!(IntuiMessage, IAddress) - 28usize];
    ["Offset of field: IntuiMessage::MouseX"]
        [::core::mem::offset_of!(IntuiMessage, MouseX) - 32usize];
    ["Offset of field: IntuiMessage::MouseY"]
        [::core::mem::offset_of!(IntuiMessage, MouseY) - 34usize];
    ["Offset of field: IntuiMessage::Seconds"]
        [::core::mem::offset_of!(IntuiMessage, Seconds) - 36usize];
    ["Offset of field: IntuiMessage::Micros"]
        [::core::mem::offset_of!(IntuiMessage, Micros) - 40usize];
    ["Offset of field: IntuiMessage::IDCMPWindow"]
        [::core::mem::offset_of!(IntuiMessage, IDCMPWindow) - 44usize];
    ["Offset of field: IntuiMessage::SpecialLink"]
        [::core::mem::offset_of!(IntuiMessage, SpecialLink) - 48usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExtIntuiMessage {
    pub eim_IntuiMessage: IntuiMessage,
    pub eim_TabletData: *mut TabletData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExtIntuiMessage"][::core::mem::size_of::<ExtIntuiMessage>() - 56usize];
    ["Alignment of ExtIntuiMessage"][::core::mem::align_of::<ExtIntuiMessage>() - 2usize];
    ["Offset of field: ExtIntuiMessage::eim_IntuiMessage"]
        [::core::mem::offset_of!(ExtIntuiMessage, eim_IntuiMessage) - 0usize];
    ["Offset of field: ExtIntuiMessage::eim_TabletData"]
        [::core::mem::offset_of!(ExtIntuiMessage, eim_TabletData) - 52usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IntuiWheelData {
    pub Version: UWORD,
    pub Reserved: UWORD,
    pub WheelX: WORD,
    pub WheelY: WORD,
    pub HoveredGadget: *mut Gadget,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IntuiWheelData"][::core::mem::size_of::<IntuiWheelData>() - 12usize];
    ["Alignment of IntuiWheelData"][::core::mem::align_of::<IntuiWheelData>() - 2usize];
    ["Offset of field: IntuiWheelData::Version"]
        [::core::mem::offset_of!(IntuiWheelData, Version) - 0usize];
    ["Offset of field: IntuiWheelData::Reserved"]
        [::core::mem::offset_of!(IntuiWheelData, Reserved) - 2usize];
    ["Offset of field: IntuiWheelData::WheelX"]
        [::core::mem::offset_of!(IntuiWheelData, WheelX) - 4usize];
    ["Offset of field: IntuiWheelData::WheelY"]
        [::core::mem::offset_of!(IntuiWheelData, WheelY) - 6usize];
    ["Offset of field: IntuiWheelData::HoveredGadget"]
        [::core::mem::offset_of!(IntuiWheelData, HoveredGadget) - 8usize];
};
pub const IMSGCODE_INTUIWHEELDATA: _bindgen_ty_3 = 32768;
pub const IMSGCODE_INTUIRAWKEYDATA: _bindgen_ty_3 = 16384;
pub const IMSGCODE_INTUIWHEELDATAREJECT: _bindgen_ty_3 = 8192;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IBox {
    pub Left: WORD,
    pub Top: WORD,
    pub Width: WORD,
    pub Height: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IBox"][::core::mem::size_of::<IBox>() - 8usize];
    ["Alignment of IBox"][::core::mem::align_of::<IBox>() - 2usize];
    ["Offset of field: IBox::Left"][::core::mem::offset_of!(IBox, Left) - 0usize];
    ["Offset of field: IBox::Top"][::core::mem::offset_of!(IBox, Top) - 2usize];
    ["Offset of field: IBox::Width"][::core::mem::offset_of!(IBox, Width) - 4usize];
    ["Offset of field: IBox::Height"][::core::mem::offset_of!(IBox, Height) - 6usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Window {
    pub NextWindow: *mut Window,
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub MouseY: WORD,
    pub MouseX: WORD,
    pub MinWidth: WORD,
    pub MinHeight: WORD,
    pub MaxWidth: UWORD,
    pub MaxHeight: UWORD,
    pub Flags: ULONG,
    pub MenuStrip: *mut Menu,
    pub Title: STRPTR,
    pub FirstRequest: *mut Requester,
    pub DMRequest: *mut Requester,
    pub ReqCount: WORD,
    pub WScreen: *mut Screen,
    pub RPort: *mut RastPort,
    pub BorderLeft: BYTE,
    pub BorderTop: BYTE,
    pub BorderRight: BYTE,
    pub BorderBottom: BYTE,
    pub BorderRPort: *mut RastPort,
    pub FirstGadget: *mut Gadget,
    pub Parent: *mut Window,
    pub Descendant: *mut Window,
    pub Pointer: *mut UWORD,
    pub PtrHeight: BYTE,
    pub PtrWidth: BYTE,
    pub XOffset: BYTE,
    pub YOffset: BYTE,
    pub IDCMPFlags: ULONG,
    pub UserPort: *mut MsgPort,
    pub WindowPort: *mut MsgPort,
    pub MessageKey: *mut IntuiMessage,
    pub DetailPen: UBYTE,
    pub BlockPen: UBYTE,
    pub CheckMark: *mut Image,
    pub ScreenTitle: STRPTR,
    pub GZZMouseX: WORD,
    pub GZZMouseY: WORD,
    pub GZZWidth: WORD,
    pub GZZHeight: WORD,
    pub ExtData: *mut UBYTE,
    pub UserData: *mut BYTE,
    pub WLayer: *mut Layer,
    pub IFont: *mut TextFont,
    pub MoreFlags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Window"][::core::mem::size_of::<Window>() - 136usize];
    ["Alignment of Window"][::core::mem::align_of::<Window>() - 2usize];
    ["Offset of field: Window::NextWindow"][::core::mem::offset_of!(Window, NextWindow) - 0usize];
    ["Offset of field: Window::LeftEdge"][::core::mem::offset_of!(Window, LeftEdge) - 4usize];
    ["Offset of field: Window::TopEdge"][::core::mem::offset_of!(Window, TopEdge) - 6usize];
    ["Offset of field: Window::Width"][::core::mem::offset_of!(Window, Width) - 8usize];
    ["Offset of field: Window::Height"][::core::mem::offset_of!(Window, Height) - 10usize];
    ["Offset of field: Window::MouseY"][::core::mem::offset_of!(Window, MouseY) - 12usize];
    ["Offset of field: Window::MouseX"][::core::mem::offset_of!(Window, MouseX) - 14usize];
    ["Offset of field: Window::MinWidth"][::core::mem::offset_of!(Window, MinWidth) - 16usize];
    ["Offset of field: Window::MinHeight"][::core::mem::offset_of!(Window, MinHeight) - 18usize];
    ["Offset of field: Window::MaxWidth"][::core::mem::offset_of!(Window, MaxWidth) - 20usize];
    ["Offset of field: Window::MaxHeight"][::core::mem::offset_of!(Window, MaxHeight) - 22usize];
    ["Offset of field: Window::Flags"][::core::mem::offset_of!(Window, Flags) - 24usize];
    ["Offset of field: Window::MenuStrip"][::core::mem::offset_of!(Window, MenuStrip) - 28usize];
    ["Offset of field: Window::Title"][::core::mem::offset_of!(Window, Title) - 32usize];
    ["Offset of field: Window::FirstRequest"]
        [::core::mem::offset_of!(Window, FirstRequest) - 36usize];
    ["Offset of field: Window::DMRequest"][::core::mem::offset_of!(Window, DMRequest) - 40usize];
    ["Offset of field: Window::ReqCount"][::core::mem::offset_of!(Window, ReqCount) - 44usize];
    ["Offset of field: Window::WScreen"][::core::mem::offset_of!(Window, WScreen) - 46usize];
    ["Offset of field: Window::RPort"][::core::mem::offset_of!(Window, RPort) - 50usize];
    ["Offset of field: Window::BorderLeft"][::core::mem::offset_of!(Window, BorderLeft) - 54usize];
    ["Offset of field: Window::BorderTop"][::core::mem::offset_of!(Window, BorderTop) - 55usize];
    ["Offset of field: Window::BorderRight"]
        [::core::mem::offset_of!(Window, BorderRight) - 56usize];
    ["Offset of field: Window::BorderBottom"]
        [::core::mem::offset_of!(Window, BorderBottom) - 57usize];
    ["Offset of field: Window::BorderRPort"]
        [::core::mem::offset_of!(Window, BorderRPort) - 58usize];
    ["Offset of field: Window::FirstGadget"]
        [::core::mem::offset_of!(Window, FirstGadget) - 62usize];
    ["Offset of field: Window::Parent"][::core::mem::offset_of!(Window, Parent) - 66usize];
    ["Offset of field: Window::Descendant"][::core::mem::offset_of!(Window, Descendant) - 70usize];
    ["Offset of field: Window::Pointer"][::core::mem::offset_of!(Window, Pointer) - 74usize];
    ["Offset of field: Window::PtrHeight"][::core::mem::offset_of!(Window, PtrHeight) - 78usize];
    ["Offset of field: Window::PtrWidth"][::core::mem::offset_of!(Window, PtrWidth) - 79usize];
    ["Offset of field: Window::XOffset"][::core::mem::offset_of!(Window, XOffset) - 80usize];
    ["Offset of field: Window::YOffset"][::core::mem::offset_of!(Window, YOffset) - 81usize];
    ["Offset of field: Window::IDCMPFlags"][::core::mem::offset_of!(Window, IDCMPFlags) - 82usize];
    ["Offset of field: Window::UserPort"][::core::mem::offset_of!(Window, UserPort) - 86usize];
    ["Offset of field: Window::WindowPort"][::core::mem::offset_of!(Window, WindowPort) - 90usize];
    ["Offset of field: Window::MessageKey"][::core::mem::offset_of!(Window, MessageKey) - 94usize];
    ["Offset of field: Window::DetailPen"][::core::mem::offset_of!(Window, DetailPen) - 98usize];
    ["Offset of field: Window::BlockPen"][::core::mem::offset_of!(Window, BlockPen) - 99usize];
    ["Offset of field: Window::CheckMark"][::core::mem::offset_of!(Window, CheckMark) - 100usize];
    ["Offset of field: Window::ScreenTitle"]
        [::core::mem::offset_of!(Window, ScreenTitle) - 104usize];
    ["Offset of field: Window::GZZMouseX"][::core::mem::offset_of!(Window, GZZMouseX) - 108usize];
    ["Offset of field: Window::GZZMouseY"][::core::mem::offset_of!(Window, GZZMouseY) - 110usize];
    ["Offset of field: Window::GZZWidth"][::core::mem::offset_of!(Window, GZZWidth) - 112usize];
    ["Offset of field: Window::GZZHeight"][::core::mem::offset_of!(Window, GZZHeight) - 114usize];
    ["Offset of field: Window::ExtData"][::core::mem::offset_of!(Window, ExtData) - 116usize];
    ["Offset of field: Window::UserData"][::core::mem::offset_of!(Window, UserData) - 120usize];
    ["Offset of field: Window::WLayer"][::core::mem::offset_of!(Window, WLayer) - 124usize];
    ["Offset of field: Window::IFont"][::core::mem::offset_of!(Window, IFont) - 128usize];
    ["Offset of field: Window::MoreFlags"][::core::mem::offset_of!(Window, MoreFlags) - 132usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NewWindow {
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub DetailPen: UBYTE,
    pub BlockPen: UBYTE,
    pub IDCMPFlags: ULONG,
    pub Flags: ULONG,
    pub FirstGadget: *mut Gadget,
    pub CheckMark: *mut Image,
    pub Title: STRPTR,
    pub Screen: *mut Screen,
    pub BitMap: *mut BitMap,
    pub MinWidth: WORD,
    pub MinHeight: WORD,
    pub MaxWidth: UWORD,
    pub MaxHeight: UWORD,
    pub Type: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NewWindow"][::core::mem::size_of::<NewWindow>() - 48usize];
    ["Alignment of NewWindow"][::core::mem::align_of::<NewWindow>() - 2usize];
    ["Offset of field: NewWindow::LeftEdge"][::core::mem::offset_of!(NewWindow, LeftEdge) - 0usize];
    ["Offset of field: NewWindow::TopEdge"][::core::mem::offset_of!(NewWindow, TopEdge) - 2usize];
    ["Offset of field: NewWindow::Width"][::core::mem::offset_of!(NewWindow, Width) - 4usize];
    ["Offset of field: NewWindow::Height"][::core::mem::offset_of!(NewWindow, Height) - 6usize];
    ["Offset of field: NewWindow::DetailPen"]
        [::core::mem::offset_of!(NewWindow, DetailPen) - 8usize];
    ["Offset of field: NewWindow::BlockPen"][::core::mem::offset_of!(NewWindow, BlockPen) - 9usize];
    ["Offset of field: NewWindow::IDCMPFlags"]
        [::core::mem::offset_of!(NewWindow, IDCMPFlags) - 10usize];
    ["Offset of field: NewWindow::Flags"][::core::mem::offset_of!(NewWindow, Flags) - 14usize];
    ["Offset of field: NewWindow::FirstGadget"]
        [::core::mem::offset_of!(NewWindow, FirstGadget) - 18usize];
    ["Offset of field: NewWindow::CheckMark"]
        [::core::mem::offset_of!(NewWindow, CheckMark) - 22usize];
    ["Offset of field: NewWindow::Title"][::core::mem::offset_of!(NewWindow, Title) - 26usize];
    ["Offset of field: NewWindow::Screen"][::core::mem::offset_of!(NewWindow, Screen) - 30usize];
    ["Offset of field: NewWindow::BitMap"][::core::mem::offset_of!(NewWindow, BitMap) - 34usize];
    ["Offset of field: NewWindow::MinWidth"]
        [::core::mem::offset_of!(NewWindow, MinWidth) - 38usize];
    ["Offset of field: NewWindow::MinHeight"]
        [::core::mem::offset_of!(NewWindow, MinHeight) - 40usize];
    ["Offset of field: NewWindow::MaxWidth"]
        [::core::mem::offset_of!(NewWindow, MaxWidth) - 42usize];
    ["Offset of field: NewWindow::MaxHeight"]
        [::core::mem::offset_of!(NewWindow, MaxHeight) - 44usize];
    ["Offset of field: NewWindow::Type"][::core::mem::offset_of!(NewWindow, Type) - 46usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExtNewWindow {
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub DetailPen: UBYTE,
    pub BlockPen: UBYTE,
    pub IDCMPFlags: ULONG,
    pub Flags: ULONG,
    pub FirstGadget: *mut Gadget,
    pub CheckMark: *mut Image,
    pub Title: STRPTR,
    pub Screen: *mut Screen,
    pub BitMap: *mut BitMap,
    pub MinWidth: WORD,
    pub MinHeight: WORD,
    pub MaxWidth: UWORD,
    pub MaxHeight: UWORD,
    pub Type: UWORD,
    pub Extension: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExtNewWindow"][::core::mem::size_of::<ExtNewWindow>() - 52usize];
    ["Alignment of ExtNewWindow"][::core::mem::align_of::<ExtNewWindow>() - 2usize];
    ["Offset of field: ExtNewWindow::LeftEdge"]
        [::core::mem::offset_of!(ExtNewWindow, LeftEdge) - 0usize];
    ["Offset of field: ExtNewWindow::TopEdge"]
        [::core::mem::offset_of!(ExtNewWindow, TopEdge) - 2usize];
    ["Offset of field: ExtNewWindow::Width"][::core::mem::offset_of!(ExtNewWindow, Width) - 4usize];
    ["Offset of field: ExtNewWindow::Height"]
        [::core::mem::offset_of!(ExtNewWindow, Height) - 6usize];
    ["Offset of field: ExtNewWindow::DetailPen"]
        [::core::mem::offset_of!(ExtNewWindow, DetailPen) - 8usize];
    ["Offset of field: ExtNewWindow::BlockPen"]
        [::core::mem::offset_of!(ExtNewWindow, BlockPen) - 9usize];
    ["Offset of field: ExtNewWindow::IDCMPFlags"]
        [::core::mem::offset_of!(ExtNewWindow, IDCMPFlags) - 10usize];
    ["Offset of field: ExtNewWindow::Flags"]
        [::core::mem::offset_of!(ExtNewWindow, Flags) - 14usize];
    ["Offset of field: ExtNewWindow::FirstGadget"]
        [::core::mem::offset_of!(ExtNewWindow, FirstGadget) - 18usize];
    ["Offset of field: ExtNewWindow::CheckMark"]
        [::core::mem::offset_of!(ExtNewWindow, CheckMark) - 22usize];
    ["Offset of field: ExtNewWindow::Title"]
        [::core::mem::offset_of!(ExtNewWindow, Title) - 26usize];
    ["Offset of field: ExtNewWindow::Screen"]
        [::core::mem::offset_of!(ExtNewWindow, Screen) - 30usize];
    ["Offset of field: ExtNewWindow::BitMap"]
        [::core::mem::offset_of!(ExtNewWindow, BitMap) - 34usize];
    ["Offset of field: ExtNewWindow::MinWidth"]
        [::core::mem::offset_of!(ExtNewWindow, MinWidth) - 38usize];
    ["Offset of field: ExtNewWindow::MinHeight"]
        [::core::mem::offset_of!(ExtNewWindow, MinHeight) - 40usize];
    ["Offset of field: ExtNewWindow::MaxWidth"]
        [::core::mem::offset_of!(ExtNewWindow, MaxWidth) - 42usize];
    ["Offset of field: ExtNewWindow::MaxHeight"]
        [::core::mem::offset_of!(ExtNewWindow, MaxHeight) - 44usize];
    ["Offset of field: ExtNewWindow::Type"][::core::mem::offset_of!(ExtNewWindow, Type) - 46usize];
    ["Offset of field: ExtNewWindow::Extension"]
        [::core::mem::offset_of!(ExtNewWindow, Extension) - 48usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DrawInfo {
    pub dri_Version: UWORD,
    pub dri_NumPens: UWORD,
    pub dri_Pens: *mut UWORD,
    pub dri_Font: *mut TextFont,
    pub dri_Depth: UWORD,
    pub dri_Resolution: DrawInfo__bindgen_ty_1,
    pub dri_Flags: ULONG,
    pub dri_CheckMark: *mut Image,
    pub dri_AmigaKey: *mut Image,
    pub dri_Screen: *mut Screen,
    pub dri_Reserved: [ULONG; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawInfo__bindgen_ty_1 {
    pub X: UWORD,
    pub Y: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DrawInfo__bindgen_ty_1"][::core::mem::size_of::<DrawInfo__bindgen_ty_1>() - 4usize];
    ["Alignment of DrawInfo__bindgen_ty_1"]
        [::core::mem::align_of::<DrawInfo__bindgen_ty_1>() - 2usize];
    ["Offset of field: DrawInfo__bindgen_ty_1::X"]
        [::core::mem::offset_of!(DrawInfo__bindgen_ty_1, X) - 0usize];
    ["Offset of field: DrawInfo__bindgen_ty_1::Y"]
        [::core::mem::offset_of!(DrawInfo__bindgen_ty_1, Y) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DrawInfo"][::core::mem::size_of::<DrawInfo>() - 50usize];
    ["Alignment of DrawInfo"][::core::mem::align_of::<DrawInfo>() - 2usize];
    ["Offset of field: DrawInfo::dri_Version"]
        [::core::mem::offset_of!(DrawInfo, dri_Version) - 0usize];
    ["Offset of field: DrawInfo::dri_NumPens"]
        [::core::mem::offset_of!(DrawInfo, dri_NumPens) - 2usize];
    ["Offset of field: DrawInfo::dri_Pens"][::core::mem::offset_of!(DrawInfo, dri_Pens) - 4usize];
    ["Offset of field: DrawInfo::dri_Font"][::core::mem::offset_of!(DrawInfo, dri_Font) - 8usize];
    ["Offset of field: DrawInfo::dri_Depth"]
        [::core::mem::offset_of!(DrawInfo, dri_Depth) - 12usize];
    ["Offset of field: DrawInfo::dri_Resolution"]
        [::core::mem::offset_of!(DrawInfo, dri_Resolution) - 14usize];
    ["Offset of field: DrawInfo::dri_Flags"]
        [::core::mem::offset_of!(DrawInfo, dri_Flags) - 18usize];
    ["Offset of field: DrawInfo::dri_CheckMark"]
        [::core::mem::offset_of!(DrawInfo, dri_CheckMark) - 22usize];
    ["Offset of field: DrawInfo::dri_AmigaKey"]
        [::core::mem::offset_of!(DrawInfo, dri_AmigaKey) - 26usize];
    ["Offset of field: DrawInfo::dri_Screen"]
        [::core::mem::offset_of!(DrawInfo, dri_Screen) - 30usize];
    ["Offset of field: DrawInfo::dri_Reserved"]
        [::core::mem::offset_of!(DrawInfo, dri_Reserved) - 34usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Screen {
    pub NextScreen: *mut Screen,
    pub FirstWindow: *mut Window,
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub MouseY: WORD,
    pub MouseX: WORD,
    pub Flags: UWORD,
    pub Title: STRPTR,
    pub DefaultTitle: STRPTR,
    pub BarHeight: BYTE,
    pub BarVBorder: BYTE,
    pub BarHBorder: BYTE,
    pub MenuVBorder: BYTE,
    pub MenuHBorder: BYTE,
    pub WBorTop: BYTE,
    pub WBorLeft: BYTE,
    pub WBorRight: BYTE,
    pub WBorBottom: BYTE,
    pub Font: *mut TextAttr,
    pub ViewPort: ViewPort,
    pub RastPort: RastPort,
    pub BitMap: BitMap,
    pub LayerInfo: Layer_Info,
    pub FirstGadget: *mut Gadget,
    pub DetailPen: UBYTE,
    pub BlockPen: UBYTE,
    pub SaveColor0: UWORD,
    pub BarLayer: *mut Layer,
    pub ExtData: *mut UBYTE,
    pub UserData: *mut UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Screen"][::core::mem::size_of::<Screen>() - 346usize];
    ["Alignment of Screen"][::core::mem::align_of::<Screen>() - 2usize];
    ["Offset of field: Screen::NextScreen"][::core::mem::offset_of!(Screen, NextScreen) - 0usize];
    ["Offset of field: Screen::FirstWindow"][::core::mem::offset_of!(Screen, FirstWindow) - 4usize];
    ["Offset of field: Screen::LeftEdge"][::core::mem::offset_of!(Screen, LeftEdge) - 8usize];
    ["Offset of field: Screen::TopEdge"][::core::mem::offset_of!(Screen, TopEdge) - 10usize];
    ["Offset of field: Screen::Width"][::core::mem::offset_of!(Screen, Width) - 12usize];
    ["Offset of field: Screen::Height"][::core::mem::offset_of!(Screen, Height) - 14usize];
    ["Offset of field: Screen::MouseY"][::core::mem::offset_of!(Screen, MouseY) - 16usize];
    ["Offset of field: Screen::MouseX"][::core::mem::offset_of!(Screen, MouseX) - 18usize];
    ["Offset of field: Screen::Flags"][::core::mem::offset_of!(Screen, Flags) - 20usize];
    ["Offset of field: Screen::Title"][::core::mem::offset_of!(Screen, Title) - 22usize];
    ["Offset of field: Screen::DefaultTitle"]
        [::core::mem::offset_of!(Screen, DefaultTitle) - 26usize];
    ["Offset of field: Screen::BarHeight"][::core::mem::offset_of!(Screen, BarHeight) - 30usize];
    ["Offset of field: Screen::BarVBorder"][::core::mem::offset_of!(Screen, BarVBorder) - 31usize];
    ["Offset of field: Screen::BarHBorder"][::core::mem::offset_of!(Screen, BarHBorder) - 32usize];
    ["Offset of field: Screen::MenuVBorder"]
        [::core::mem::offset_of!(Screen, MenuVBorder) - 33usize];
    ["Offset of field: Screen::MenuHBorder"]
        [::core::mem::offset_of!(Screen, MenuHBorder) - 34usize];
    ["Offset of field: Screen::WBorTop"][::core::mem::offset_of!(Screen, WBorTop) - 35usize];
    ["Offset of field: Screen::WBorLeft"][::core::mem::offset_of!(Screen, WBorLeft) - 36usize];
    ["Offset of field: Screen::WBorRight"][::core::mem::offset_of!(Screen, WBorRight) - 37usize];
    ["Offset of field: Screen::WBorBottom"][::core::mem::offset_of!(Screen, WBorBottom) - 38usize];
    ["Offset of field: Screen::Font"][::core::mem::offset_of!(Screen, Font) - 40usize];
    ["Offset of field: Screen::ViewPort"][::core::mem::offset_of!(Screen, ViewPort) - 44usize];
    ["Offset of field: Screen::RastPort"][::core::mem::offset_of!(Screen, RastPort) - 84usize];
    ["Offset of field: Screen::BitMap"][::core::mem::offset_of!(Screen, BitMap) - 184usize];
    ["Offset of field: Screen::LayerInfo"][::core::mem::offset_of!(Screen, LayerInfo) - 224usize];
    ["Offset of field: Screen::FirstGadget"]
        [::core::mem::offset_of!(Screen, FirstGadget) - 326usize];
    ["Offset of field: Screen::DetailPen"][::core::mem::offset_of!(Screen, DetailPen) - 330usize];
    ["Offset of field: Screen::BlockPen"][::core::mem::offset_of!(Screen, BlockPen) - 331usize];
    ["Offset of field: Screen::SaveColor0"][::core::mem::offset_of!(Screen, SaveColor0) - 332usize];
    ["Offset of field: Screen::BarLayer"][::core::mem::offset_of!(Screen, BarLayer) - 334usize];
    ["Offset of field: Screen::ExtData"][::core::mem::offset_of!(Screen, ExtData) - 338usize];
    ["Offset of field: Screen::UserData"][::core::mem::offset_of!(Screen, UserData) - 342usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NewScreen {
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub Depth: WORD,
    pub DetailPen: UBYTE,
    pub BlockPen: UBYTE,
    pub ViewModes: UWORD,
    pub Type: UWORD,
    pub Font: *mut TextAttr,
    pub DefaultTitle: STRPTR,
    pub Gadgets: *mut Gadget,
    pub CustomBitMap: *mut BitMap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NewScreen"][::core::mem::size_of::<NewScreen>() - 32usize];
    ["Alignment of NewScreen"][::core::mem::align_of::<NewScreen>() - 2usize];
    ["Offset of field: NewScreen::LeftEdge"][::core::mem::offset_of!(NewScreen, LeftEdge) - 0usize];
    ["Offset of field: NewScreen::TopEdge"][::core::mem::offset_of!(NewScreen, TopEdge) - 2usize];
    ["Offset of field: NewScreen::Width"][::core::mem::offset_of!(NewScreen, Width) - 4usize];
    ["Offset of field: NewScreen::Height"][::core::mem::offset_of!(NewScreen, Height) - 6usize];
    ["Offset of field: NewScreen::Depth"][::core::mem::offset_of!(NewScreen, Depth) - 8usize];
    ["Offset of field: NewScreen::DetailPen"]
        [::core::mem::offset_of!(NewScreen, DetailPen) - 10usize];
    ["Offset of field: NewScreen::BlockPen"]
        [::core::mem::offset_of!(NewScreen, BlockPen) - 11usize];
    ["Offset of field: NewScreen::ViewModes"]
        [::core::mem::offset_of!(NewScreen, ViewModes) - 12usize];
    ["Offset of field: NewScreen::Type"][::core::mem::offset_of!(NewScreen, Type) - 14usize];
    ["Offset of field: NewScreen::Font"][::core::mem::offset_of!(NewScreen, Font) - 16usize];
    ["Offset of field: NewScreen::DefaultTitle"]
        [::core::mem::offset_of!(NewScreen, DefaultTitle) - 20usize];
    ["Offset of field: NewScreen::Gadgets"][::core::mem::offset_of!(NewScreen, Gadgets) - 24usize];
    ["Offset of field: NewScreen::CustomBitMap"]
        [::core::mem::offset_of!(NewScreen, CustomBitMap) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExtNewScreen {
    pub LeftEdge: WORD,
    pub TopEdge: WORD,
    pub Width: WORD,
    pub Height: WORD,
    pub Depth: WORD,
    pub DetailPen: UBYTE,
    pub BlockPen: UBYTE,
    pub ViewModes: UWORD,
    pub Type: UWORD,
    pub Font: *mut TextAttr,
    pub DefaultTitle: STRPTR,
    pub Gadgets: *mut Gadget,
    pub CustomBitMap: *mut BitMap,
    pub Extension: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExtNewScreen"][::core::mem::size_of::<ExtNewScreen>() - 36usize];
    ["Alignment of ExtNewScreen"][::core::mem::align_of::<ExtNewScreen>() - 2usize];
    ["Offset of field: ExtNewScreen::LeftEdge"]
        [::core::mem::offset_of!(ExtNewScreen, LeftEdge) - 0usize];
    ["Offset of field: ExtNewScreen::TopEdge"]
        [::core::mem::offset_of!(ExtNewScreen, TopEdge) - 2usize];
    ["Offset of field: ExtNewScreen::Width"][::core::mem::offset_of!(ExtNewScreen, Width) - 4usize];
    ["Offset of field: ExtNewScreen::Height"]
        [::core::mem::offset_of!(ExtNewScreen, Height) - 6usize];
    ["Offset of field: ExtNewScreen::Depth"][::core::mem::offset_of!(ExtNewScreen, Depth) - 8usize];
    ["Offset of field: ExtNewScreen::DetailPen"]
        [::core::mem::offset_of!(ExtNewScreen, DetailPen) - 10usize];
    ["Offset of field: ExtNewScreen::BlockPen"]
        [::core::mem::offset_of!(ExtNewScreen, BlockPen) - 11usize];
    ["Offset of field: ExtNewScreen::ViewModes"]
        [::core::mem::offset_of!(ExtNewScreen, ViewModes) - 12usize];
    ["Offset of field: ExtNewScreen::Type"][::core::mem::offset_of!(ExtNewScreen, Type) - 14usize];
    ["Offset of field: ExtNewScreen::Font"][::core::mem::offset_of!(ExtNewScreen, Font) - 16usize];
    ["Offset of field: ExtNewScreen::DefaultTitle"]
        [::core::mem::offset_of!(ExtNewScreen, DefaultTitle) - 20usize];
    ["Offset of field: ExtNewScreen::Gadgets"]
        [::core::mem::offset_of!(ExtNewScreen, Gadgets) - 24usize];
    ["Offset of field: ExtNewScreen::CustomBitMap"]
        [::core::mem::offset_of!(ExtNewScreen, CustomBitMap) - 28usize];
    ["Offset of field: ExtNewScreen::Extension"]
        [::core::mem::offset_of!(ExtNewScreen, Extension) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PubScreenNode {
    pub psn_Node: Node,
    pub psn_Screen: *mut Screen,
    pub psn_Flags: UWORD,
    pub psn_Size: WORD,
    pub psn_VisitorCount: WORD,
    pub psn_SigTask: *mut Task,
    pub psn_SigBit: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PubScreenNode"][::core::mem::size_of::<PubScreenNode>() - 30usize];
    ["Alignment of PubScreenNode"][::core::mem::align_of::<PubScreenNode>() - 2usize];
    ["Offset of field: PubScreenNode::psn_Node"]
        [::core::mem::offset_of!(PubScreenNode, psn_Node) - 0usize];
    ["Offset of field: PubScreenNode::psn_Screen"]
        [::core::mem::offset_of!(PubScreenNode, psn_Screen) - 14usize];
    ["Offset of field: PubScreenNode::psn_Flags"]
        [::core::mem::offset_of!(PubScreenNode, psn_Flags) - 18usize];
    ["Offset of field: PubScreenNode::psn_Size"]
        [::core::mem::offset_of!(PubScreenNode, psn_Size) - 20usize];
    ["Offset of field: PubScreenNode::psn_VisitorCount"]
        [::core::mem::offset_of!(PubScreenNode, psn_VisitorCount) - 22usize];
    ["Offset of field: PubScreenNode::psn_SigTask"]
        [::core::mem::offset_of!(PubScreenNode, psn_SigTask) - 24usize];
    ["Offset of field: PubScreenNode::psn_SigBit"]
        [::core::mem::offset_of!(PubScreenNode, psn_SigBit) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ScreenBuffer {
    pub sb_BitMap: *mut BitMap,
    pub sb_DBufInfo: *mut DBufInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ScreenBuffer"][::core::mem::size_of::<ScreenBuffer>() - 8usize];
    ["Alignment of ScreenBuffer"][::core::mem::align_of::<ScreenBuffer>() - 2usize];
    ["Offset of field: ScreenBuffer::sb_BitMap"]
        [::core::mem::offset_of!(ScreenBuffer, sb_BitMap) - 0usize];
    ["Offset of field: ScreenBuffer::sb_DBufInfo"]
        [::core::mem::offset_of!(ScreenBuffer, sb_DBufInfo) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Preferences {
    pub FontHeight: BYTE,
    pub PrinterPort: UBYTE,
    pub BaudRate: UWORD,
    pub KeyRptSpeed: TimeVal_Type,
    pub KeyRptDelay: TimeVal_Type,
    pub DoubleClick: TimeVal_Type,
    pub PointerMatrix: [UWORD; 36usize],
    pub XOffset: BYTE,
    pub YOffset: BYTE,
    pub color17: UWORD,
    pub color18: UWORD,
    pub color19: UWORD,
    pub PointerTicks: UWORD,
    pub color0: UWORD,
    pub color1: UWORD,
    pub color2: UWORD,
    pub color3: UWORD,
    pub ViewXOffset: BYTE,
    pub ViewYOffset: BYTE,
    pub ViewInitX: WORD,
    pub ViewInitY: WORD,
    pub EnableCLI: BOOL,
    pub PrinterType: UWORD,
    pub PrinterFilename: [TEXT; 30usize],
    pub PrintPitch: UWORD,
    pub PrintQuality: UWORD,
    pub PrintSpacing: UWORD,
    pub PrintLeftMargin: UWORD,
    pub PrintRightMargin: UWORD,
    pub PrintImage: UWORD,
    pub PrintAspect: UWORD,
    pub PrintShade: UWORD,
    pub PrintThreshold: WORD,
    pub PaperSize: UWORD,
    pub PaperLength: UWORD,
    pub PaperType: UWORD,
    pub SerRWBits: UBYTE,
    pub SerStopBuf: UBYTE,
    pub SerParShk: UBYTE,
    pub LaceWB: UBYTE,
    pub Pad: [UBYTE; 12usize],
    pub PrtDevName: [TEXT; 16usize],
    pub DefaultPrtUnit: UBYTE,
    pub DefaultSerUnit: UBYTE,
    pub RowSizeChange: BYTE,
    pub ColumnSizeChange: BYTE,
    pub PrintFlags: UWORD,
    pub PrintMaxWidth: UWORD,
    pub PrintMaxHeight: UWORD,
    pub PrintDensity: UBYTE,
    pub PrintXOffset: UBYTE,
    pub wb_Width: UWORD,
    pub wb_Height: UWORD,
    pub wb_Depth: UBYTE,
    pub ext_size: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Preferences"][::core::mem::size_of::<Preferences>() - 232usize];
    ["Alignment of Preferences"][::core::mem::align_of::<Preferences>() - 2usize];
    ["Offset of field: Preferences::FontHeight"]
        [::core::mem::offset_of!(Preferences, FontHeight) - 0usize];
    ["Offset of field: Preferences::PrinterPort"]
        [::core::mem::offset_of!(Preferences, PrinterPort) - 1usize];
    ["Offset of field: Preferences::BaudRate"]
        [::core::mem::offset_of!(Preferences, BaudRate) - 2usize];
    ["Offset of field: Preferences::KeyRptSpeed"]
        [::core::mem::offset_of!(Preferences, KeyRptSpeed) - 4usize];
    ["Offset of field: Preferences::KeyRptDelay"]
        [::core::mem::offset_of!(Preferences, KeyRptDelay) - 12usize];
    ["Offset of field: Preferences::DoubleClick"]
        [::core::mem::offset_of!(Preferences, DoubleClick) - 20usize];
    ["Offset of field: Preferences::PointerMatrix"]
        [::core::mem::offset_of!(Preferences, PointerMatrix) - 28usize];
    ["Offset of field: Preferences::XOffset"]
        [::core::mem::offset_of!(Preferences, XOffset) - 100usize];
    ["Offset of field: Preferences::YOffset"]
        [::core::mem::offset_of!(Preferences, YOffset) - 101usize];
    ["Offset of field: Preferences::color17"]
        [::core::mem::offset_of!(Preferences, color17) - 102usize];
    ["Offset of field: Preferences::color18"]
        [::core::mem::offset_of!(Preferences, color18) - 104usize];
    ["Offset of field: Preferences::color19"]
        [::core::mem::offset_of!(Preferences, color19) - 106usize];
    ["Offset of field: Preferences::PointerTicks"]
        [::core::mem::offset_of!(Preferences, PointerTicks) - 108usize];
    ["Offset of field: Preferences::color0"]
        [::core::mem::offset_of!(Preferences, color0) - 110usize];
    ["Offset of field: Preferences::color1"]
        [::core::mem::offset_of!(Preferences, color1) - 112usize];
    ["Offset of field: Preferences::color2"]
        [::core::mem::offset_of!(Preferences, color2) - 114usize];
    ["Offset of field: Preferences::color3"]
        [::core::mem::offset_of!(Preferences, color3) - 116usize];
    ["Offset of field: Preferences::ViewXOffset"]
        [::core::mem::offset_of!(Preferences, ViewXOffset) - 118usize];
    ["Offset of field: Preferences::ViewYOffset"]
        [::core::mem::offset_of!(Preferences, ViewYOffset) - 119usize];
    ["Offset of field: Preferences::ViewInitX"]
        [::core::mem::offset_of!(Preferences, ViewInitX) - 120usize];
    ["Offset of field: Preferences::ViewInitY"]
        [::core::mem::offset_of!(Preferences, ViewInitY) - 122usize];
    ["Offset of field: Preferences::EnableCLI"]
        [::core::mem::offset_of!(Preferences, EnableCLI) - 124usize];
    ["Offset of field: Preferences::PrinterType"]
        [::core::mem::offset_of!(Preferences, PrinterType) - 126usize];
    ["Offset of field: Preferences::PrinterFilename"]
        [::core::mem::offset_of!(Preferences, PrinterFilename) - 128usize];
    ["Offset of field: Preferences::PrintPitch"]
        [::core::mem::offset_of!(Preferences, PrintPitch) - 158usize];
    ["Offset of field: Preferences::PrintQuality"]
        [::core::mem::offset_of!(Preferences, PrintQuality) - 160usize];
    ["Offset of field: Preferences::PrintSpacing"]
        [::core::mem::offset_of!(Preferences, PrintSpacing) - 162usize];
    ["Offset of field: Preferences::PrintLeftMargin"]
        [::core::mem::offset_of!(Preferences, PrintLeftMargin) - 164usize];
    ["Offset of field: Preferences::PrintRightMargin"]
        [::core::mem::offset_of!(Preferences, PrintRightMargin) - 166usize];
    ["Offset of field: Preferences::PrintImage"]
        [::core::mem::offset_of!(Preferences, PrintImage) - 168usize];
    ["Offset of field: Preferences::PrintAspect"]
        [::core::mem::offset_of!(Preferences, PrintAspect) - 170usize];
    ["Offset of field: Preferences::PrintShade"]
        [::core::mem::offset_of!(Preferences, PrintShade) - 172usize];
    ["Offset of field: Preferences::PrintThreshold"]
        [::core::mem::offset_of!(Preferences, PrintThreshold) - 174usize];
    ["Offset of field: Preferences::PaperSize"]
        [::core::mem::offset_of!(Preferences, PaperSize) - 176usize];
    ["Offset of field: Preferences::PaperLength"]
        [::core::mem::offset_of!(Preferences, PaperLength) - 178usize];
    ["Offset of field: Preferences::PaperType"]
        [::core::mem::offset_of!(Preferences, PaperType) - 180usize];
    ["Offset of field: Preferences::SerRWBits"]
        [::core::mem::offset_of!(Preferences, SerRWBits) - 182usize];
    ["Offset of field: Preferences::SerStopBuf"]
        [::core::mem::offset_of!(Preferences, SerStopBuf) - 183usize];
    ["Offset of field: Preferences::SerParShk"]
        [::core::mem::offset_of!(Preferences, SerParShk) - 184usize];
    ["Offset of field: Preferences::LaceWB"]
        [::core::mem::offset_of!(Preferences, LaceWB) - 185usize];
    ["Offset of field: Preferences::Pad"][::core::mem::offset_of!(Preferences, Pad) - 186usize];
    ["Offset of field: Preferences::PrtDevName"]
        [::core::mem::offset_of!(Preferences, PrtDevName) - 198usize];
    ["Offset of field: Preferences::DefaultPrtUnit"]
        [::core::mem::offset_of!(Preferences, DefaultPrtUnit) - 214usize];
    ["Offset of field: Preferences::DefaultSerUnit"]
        [::core::mem::offset_of!(Preferences, DefaultSerUnit) - 215usize];
    ["Offset of field: Preferences::RowSizeChange"]
        [::core::mem::offset_of!(Preferences, RowSizeChange) - 216usize];
    ["Offset of field: Preferences::ColumnSizeChange"]
        [::core::mem::offset_of!(Preferences, ColumnSizeChange) - 217usize];
    ["Offset of field: Preferences::PrintFlags"]
        [::core::mem::offset_of!(Preferences, PrintFlags) - 218usize];
    ["Offset of field: Preferences::PrintMaxWidth"]
        [::core::mem::offset_of!(Preferences, PrintMaxWidth) - 220usize];
    ["Offset of field: Preferences::PrintMaxHeight"]
        [::core::mem::offset_of!(Preferences, PrintMaxHeight) - 222usize];
    ["Offset of field: Preferences::PrintDensity"]
        [::core::mem::offset_of!(Preferences, PrintDensity) - 224usize];
    ["Offset of field: Preferences::PrintXOffset"]
        [::core::mem::offset_of!(Preferences, PrintXOffset) - 225usize];
    ["Offset of field: Preferences::wb_Width"]
        [::core::mem::offset_of!(Preferences, wb_Width) - 226usize];
    ["Offset of field: Preferences::wb_Height"]
        [::core::mem::offset_of!(Preferences, wb_Height) - 228usize];
    ["Offset of field: Preferences::wb_Depth"]
        [::core::mem::offset_of!(Preferences, wb_Depth) - 230usize];
    ["Offset of field: Preferences::ext_size"]
        [::core::mem::offset_of!(Preferences, ext_size) - 231usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Remember {
    pub NextRemember: *mut Remember,
    pub RememberSize: ULONG,
    pub Memory: *mut UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Remember"][::core::mem::size_of::<Remember>() - 12usize];
    ["Alignment of Remember"][::core::mem::align_of::<Remember>() - 2usize];
    ["Offset of field: Remember::NextRemember"]
        [::core::mem::offset_of!(Remember, NextRemember) - 0usize];
    ["Offset of field: Remember::RememberSize"]
        [::core::mem::offset_of!(Remember, RememberSize) - 4usize];
    ["Offset of field: Remember::Memory"][::core::mem::offset_of!(Remember, Memory) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ColorSpec {
    pub ColorIndex: WORD,
    pub Red: UWORD,
    pub Green: UWORD,
    pub Blue: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorSpec"][::core::mem::size_of::<ColorSpec>() - 8usize];
    ["Alignment of ColorSpec"][::core::mem::align_of::<ColorSpec>() - 2usize];
    ["Offset of field: ColorSpec::ColorIndex"]
        [::core::mem::offset_of!(ColorSpec, ColorIndex) - 0usize];
    ["Offset of field: ColorSpec::Red"][::core::mem::offset_of!(ColorSpec, Red) - 2usize];
    ["Offset of field: ColorSpec::Green"][::core::mem::offset_of!(ColorSpec, Green) - 4usize];
    ["Offset of field: ColorSpec::Blue"][::core::mem::offset_of!(ColorSpec, Blue) - 6usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct EasyStruct {
    pub es_StructSize: ULONG,
    pub es_Flags: ULONG,
    pub es_Title: CONST_STRPTR,
    pub es_TextFormat: CONST_STRPTR,
    pub es_GadgetFormat: CONST_STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EasyStruct"][::core::mem::size_of::<EasyStruct>() - 20usize];
    ["Alignment of EasyStruct"][::core::mem::align_of::<EasyStruct>() - 2usize];
    ["Offset of field: EasyStruct::es_StructSize"]
        [::core::mem::offset_of!(EasyStruct, es_StructSize) - 0usize];
    ["Offset of field: EasyStruct::es_Flags"]
        [::core::mem::offset_of!(EasyStruct, es_Flags) - 4usize];
    ["Offset of field: EasyStruct::es_Title"]
        [::core::mem::offset_of!(EasyStruct, es_Title) - 8usize];
    ["Offset of field: EasyStruct::es_TextFormat"]
        [::core::mem::offset_of!(EasyStruct, es_TextFormat) - 12usize];
    ["Offset of field: EasyStruct::es_GadgetFormat"]
        [::core::mem::offset_of!(EasyStruct, es_GadgetFormat) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TabletData {
    pub td_XFraction: UWORD,
    pub td_YFraction: UWORD,
    pub td_TabletX: ULONG,
    pub td_TabletY: ULONG,
    pub td_RangeX: ULONG,
    pub td_RangeY: ULONG,
    pub td_TagList: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TabletData"][::core::mem::size_of::<TabletData>() - 24usize];
    ["Alignment of TabletData"][::core::mem::align_of::<TabletData>() - 2usize];
    ["Offset of field: TabletData::td_XFraction"]
        [::core::mem::offset_of!(TabletData, td_XFraction) - 0usize];
    ["Offset of field: TabletData::td_YFraction"]
        [::core::mem::offset_of!(TabletData, td_YFraction) - 2usize];
    ["Offset of field: TabletData::td_TabletX"]
        [::core::mem::offset_of!(TabletData, td_TabletX) - 4usize];
    ["Offset of field: TabletData::td_TabletY"]
        [::core::mem::offset_of!(TabletData, td_TabletY) - 8usize];
    ["Offset of field: TabletData::td_RangeX"]
        [::core::mem::offset_of!(TabletData, td_RangeX) - 12usize];
    ["Offset of field: TabletData::td_RangeY"]
        [::core::mem::offset_of!(TabletData, td_RangeY) - 16usize];
    ["Offset of field: TabletData::td_TagList"]
        [::core::mem::offset_of!(TabletData, td_TagList) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TabletHookData {
    pub thd_Screen: *mut Screen,
    pub thd_Width: ULONG,
    pub thd_Height: ULONG,
    pub thd_ScreenChanged: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TabletHookData"][::core::mem::size_of::<TabletHookData>() - 16usize];
    ["Alignment of TabletHookData"][::core::mem::align_of::<TabletHookData>() - 2usize];
    ["Offset of field: TabletHookData::thd_Screen"]
        [::core::mem::offset_of!(TabletHookData, thd_Screen) - 0usize];
    ["Offset of field: TabletHookData::thd_Width"]
        [::core::mem::offset_of!(TabletHookData, thd_Width) - 4usize];
    ["Offset of field: TabletHookData::thd_Height"]
        [::core::mem::offset_of!(TabletHookData, thd_Height) - 8usize];
    ["Offset of field: TabletHookData::thd_ScreenChanged"]
        [::core::mem::offset_of!(TabletHookData, thd_ScreenChanged) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOPrtCmdReq {
    pub io_Message: Message,
    pub io_Device: *mut Device,
    pub io_Unit: *mut Unit,
    pub io_Command: UWORD,
    pub io_Flags: UBYTE,
    pub io_Error: BYTE,
    pub io_PrtCommand: UWORD,
    pub io_Parm0: UBYTE,
    pub io_Parm1: UBYTE,
    pub io_Parm2: UBYTE,
    pub io_Parm3: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOPrtCmdReq"][::core::mem::size_of::<IOPrtCmdReq>() - 38usize];
    ["Alignment of IOPrtCmdReq"][::core::mem::align_of::<IOPrtCmdReq>() - 2usize];
    ["Offset of field: IOPrtCmdReq::io_Message"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Message) - 0usize];
    ["Offset of field: IOPrtCmdReq::io_Device"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Device) - 20usize];
    ["Offset of field: IOPrtCmdReq::io_Unit"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Unit) - 24usize];
    ["Offset of field: IOPrtCmdReq::io_Command"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Command) - 28usize];
    ["Offset of field: IOPrtCmdReq::io_Flags"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Flags) - 30usize];
    ["Offset of field: IOPrtCmdReq::io_Error"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Error) - 31usize];
    ["Offset of field: IOPrtCmdReq::io_PrtCommand"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_PrtCommand) - 32usize];
    ["Offset of field: IOPrtCmdReq::io_Parm0"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Parm0) - 34usize];
    ["Offset of field: IOPrtCmdReq::io_Parm1"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Parm1) - 35usize];
    ["Offset of field: IOPrtCmdReq::io_Parm2"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Parm2) - 36usize];
    ["Offset of field: IOPrtCmdReq::io_Parm3"]
        [::core::mem::offset_of!(IOPrtCmdReq, io_Parm3) - 37usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IODRPReq {
    pub io_Message: Message,
    pub io_Device: *mut Device,
    pub io_Unit: *mut Unit,
    pub io_Command: UWORD,
    pub io_Flags: UBYTE,
    pub io_Error: BYTE,
    pub io_RastPort: *mut RastPort,
    pub io_ColorMap: *mut ColorMap,
    pub io_Modes: ULONG,
    pub io_SrcX: UWORD,
    pub io_SrcY: UWORD,
    pub io_SrcWidth: UWORD,
    pub io_SrcHeight: UWORD,
    pub io_DestCols: LONG,
    pub io_DestRows: LONG,
    pub io_Special: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IODRPReq"][::core::mem::size_of::<IODRPReq>() - 62usize];
    ["Alignment of IODRPReq"][::core::mem::align_of::<IODRPReq>() - 2usize];
    ["Offset of field: IODRPReq::io_Message"]
        [::core::mem::offset_of!(IODRPReq, io_Message) - 0usize];
    ["Offset of field: IODRPReq::io_Device"]
        [::core::mem::offset_of!(IODRPReq, io_Device) - 20usize];
    ["Offset of field: IODRPReq::io_Unit"][::core::mem::offset_of!(IODRPReq, io_Unit) - 24usize];
    ["Offset of field: IODRPReq::io_Command"]
        [::core::mem::offset_of!(IODRPReq, io_Command) - 28usize];
    ["Offset of field: IODRPReq::io_Flags"][::core::mem::offset_of!(IODRPReq, io_Flags) - 30usize];
    ["Offset of field: IODRPReq::io_Error"][::core::mem::offset_of!(IODRPReq, io_Error) - 31usize];
    ["Offset of field: IODRPReq::io_RastPort"]
        [::core::mem::offset_of!(IODRPReq, io_RastPort) - 32usize];
    ["Offset of field: IODRPReq::io_ColorMap"]
        [::core::mem::offset_of!(IODRPReq, io_ColorMap) - 36usize];
    ["Offset of field: IODRPReq::io_Modes"][::core::mem::offset_of!(IODRPReq, io_Modes) - 40usize];
    ["Offset of field: IODRPReq::io_SrcX"][::core::mem::offset_of!(IODRPReq, io_SrcX) - 44usize];
    ["Offset of field: IODRPReq::io_SrcY"][::core::mem::offset_of!(IODRPReq, io_SrcY) - 46usize];
    ["Offset of field: IODRPReq::io_SrcWidth"]
        [::core::mem::offset_of!(IODRPReq, io_SrcWidth) - 48usize];
    ["Offset of field: IODRPReq::io_SrcHeight"]
        [::core::mem::offset_of!(IODRPReq, io_SrcHeight) - 50usize];
    ["Offset of field: IODRPReq::io_DestCols"]
        [::core::mem::offset_of!(IODRPReq, io_DestCols) - 52usize];
    ["Offset of field: IODRPReq::io_DestRows"]
        [::core::mem::offset_of!(IODRPReq, io_DestRows) - 56usize];
    ["Offset of field: IODRPReq::io_Special"]
        [::core::mem::offset_of!(IODRPReq, io_Special) - 60usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IODRPTagsReq {
    pub io_Message: Message,
    pub io_Device: *mut Device,
    pub io_Unit: *mut Unit,
    pub io_Command: UWORD,
    pub io_Flags: UBYTE,
    pub io_Error: BYTE,
    pub io_RastPort: *mut RastPort,
    pub io_ColorMap: *mut ColorMap,
    pub io_Modes: ULONG,
    pub io_SrcX: UWORD,
    pub io_SrcY: UWORD,
    pub io_SrcWidth: UWORD,
    pub io_SrcHeight: UWORD,
    pub io_DestCols: LONG,
    pub io_DestRows: LONG,
    pub io_Special: UWORD,
    pub io_TagList: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IODRPTagsReq"][::core::mem::size_of::<IODRPTagsReq>() - 66usize];
    ["Alignment of IODRPTagsReq"][::core::mem::align_of::<IODRPTagsReq>() - 2usize];
    ["Offset of field: IODRPTagsReq::io_Message"]
        [::core::mem::offset_of!(IODRPTagsReq, io_Message) - 0usize];
    ["Offset of field: IODRPTagsReq::io_Device"]
        [::core::mem::offset_of!(IODRPTagsReq, io_Device) - 20usize];
    ["Offset of field: IODRPTagsReq::io_Unit"]
        [::core::mem::offset_of!(IODRPTagsReq, io_Unit) - 24usize];
    ["Offset of field: IODRPTagsReq::io_Command"]
        [::core::mem::offset_of!(IODRPTagsReq, io_Command) - 28usize];
    ["Offset of field: IODRPTagsReq::io_Flags"]
        [::core::mem::offset_of!(IODRPTagsReq, io_Flags) - 30usize];
    ["Offset of field: IODRPTagsReq::io_Error"]
        [::core::mem::offset_of!(IODRPTagsReq, io_Error) - 31usize];
    ["Offset of field: IODRPTagsReq::io_RastPort"]
        [::core::mem::offset_of!(IODRPTagsReq, io_RastPort) - 32usize];
    ["Offset of field: IODRPTagsReq::io_ColorMap"]
        [::core::mem::offset_of!(IODRPTagsReq, io_ColorMap) - 36usize];
    ["Offset of field: IODRPTagsReq::io_Modes"]
        [::core::mem::offset_of!(IODRPTagsReq, io_Modes) - 40usize];
    ["Offset of field: IODRPTagsReq::io_SrcX"]
        [::core::mem::offset_of!(IODRPTagsReq, io_SrcX) - 44usize];
    ["Offset of field: IODRPTagsReq::io_SrcY"]
        [::core::mem::offset_of!(IODRPTagsReq, io_SrcY) - 46usize];
    ["Offset of field: IODRPTagsReq::io_SrcWidth"]
        [::core::mem::offset_of!(IODRPTagsReq, io_SrcWidth) - 48usize];
    ["Offset of field: IODRPTagsReq::io_SrcHeight"]
        [::core::mem::offset_of!(IODRPTagsReq, io_SrcHeight) - 50usize];
    ["Offset of field: IODRPTagsReq::io_DestCols"]
        [::core::mem::offset_of!(IODRPTagsReq, io_DestCols) - 52usize];
    ["Offset of field: IODRPTagsReq::io_DestRows"]
        [::core::mem::offset_of!(IODRPTagsReq, io_DestRows) - 56usize];
    ["Offset of field: IODRPTagsReq::io_Special"]
        [::core::mem::offset_of!(IODRPTagsReq, io_Special) - 60usize];
    ["Offset of field: IODRPTagsReq::io_TagList"]
        [::core::mem::offset_of!(IODRPTagsReq, io_TagList) - 62usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DRPSourceMsg {
    pub x: LONG,
    pub y: LONG,
    pub width: LONG,
    pub height: LONG,
    pub buf: *mut ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DRPSourceMsg"][::core::mem::size_of::<DRPSourceMsg>() - 20usize];
    ["Alignment of DRPSourceMsg"][::core::mem::align_of::<DRPSourceMsg>() - 2usize];
    ["Offset of field: DRPSourceMsg::x"][::core::mem::offset_of!(DRPSourceMsg, x) - 0usize];
    ["Offset of field: DRPSourceMsg::y"][::core::mem::offset_of!(DRPSourceMsg, y) - 4usize];
    ["Offset of field: DRPSourceMsg::width"][::core::mem::offset_of!(DRPSourceMsg, width) - 8usize];
    ["Offset of field: DRPSourceMsg::height"]
        [::core::mem::offset_of!(DRPSourceMsg, height) - 12usize];
    ["Offset of field: DRPSourceMsg::buf"][::core::mem::offset_of!(DRPSourceMsg, buf) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOPrtPrefsReq {
    pub io_Message: Message,
    pub io_Device: *mut Device,
    pub io_Unit: *mut Unit,
    pub io_Command: UWORD,
    pub io_Flags: UBYTE,
    pub io_Error: BYTE,
    pub io_TagList: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOPrtPrefsReq"][::core::mem::size_of::<IOPrtPrefsReq>() - 36usize];
    ["Alignment of IOPrtPrefsReq"][::core::mem::align_of::<IOPrtPrefsReq>() - 2usize];
    ["Offset of field: IOPrtPrefsReq::io_Message"]
        [::core::mem::offset_of!(IOPrtPrefsReq, io_Message) - 0usize];
    ["Offset of field: IOPrtPrefsReq::io_Device"]
        [::core::mem::offset_of!(IOPrtPrefsReq, io_Device) - 20usize];
    ["Offset of field: IOPrtPrefsReq::io_Unit"]
        [::core::mem::offset_of!(IOPrtPrefsReq, io_Unit) - 24usize];
    ["Offset of field: IOPrtPrefsReq::io_Command"]
        [::core::mem::offset_of!(IOPrtPrefsReq, io_Command) - 28usize];
    ["Offset of field: IOPrtPrefsReq::io_Flags"]
        [::core::mem::offset_of!(IOPrtPrefsReq, io_Flags) - 30usize];
    ["Offset of field: IOPrtPrefsReq::io_Error"]
        [::core::mem::offset_of!(IOPrtPrefsReq, io_Error) - 31usize];
    ["Offset of field: IOPrtPrefsReq::io_TagList"]
        [::core::mem::offset_of!(IOPrtPrefsReq, io_TagList) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOPrtErrReq {
    pub io_Message: Message,
    pub io_Device: *mut Device,
    pub io_Unit: *mut Unit,
    pub io_Command: UWORD,
    pub io_Flags: UBYTE,
    pub io_Error: BYTE,
    pub io_Hook: *mut Hook,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOPrtErrReq"][::core::mem::size_of::<IOPrtErrReq>() - 36usize];
    ["Alignment of IOPrtErrReq"][::core::mem::align_of::<IOPrtErrReq>() - 2usize];
    ["Offset of field: IOPrtErrReq::io_Message"]
        [::core::mem::offset_of!(IOPrtErrReq, io_Message) - 0usize];
    ["Offset of field: IOPrtErrReq::io_Device"]
        [::core::mem::offset_of!(IOPrtErrReq, io_Device) - 20usize];
    ["Offset of field: IOPrtErrReq::io_Unit"]
        [::core::mem::offset_of!(IOPrtErrReq, io_Unit) - 24usize];
    ["Offset of field: IOPrtErrReq::io_Command"]
        [::core::mem::offset_of!(IOPrtErrReq, io_Command) - 28usize];
    ["Offset of field: IOPrtErrReq::io_Flags"]
        [::core::mem::offset_of!(IOPrtErrReq, io_Flags) - 30usize];
    ["Offset of field: IOPrtErrReq::io_Error"]
        [::core::mem::offset_of!(IOPrtErrReq, io_Error) - 31usize];
    ["Offset of field: IOPrtErrReq::io_Hook"]
        [::core::mem::offset_of!(IOPrtErrReq, io_Hook) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrtErrMsg {
    pub pe_Version: ULONG,
    pub pe_ErrorLevel: ULONG,
    pub pe_Window: *mut Window,
    pub pe_ES: *mut EasyStruct,
    pub pe_IDCMP: *mut ULONG,
    pub pe_ArgList: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrtErrMsg"][::core::mem::size_of::<PrtErrMsg>() - 24usize];
    ["Alignment of PrtErrMsg"][::core::mem::align_of::<PrtErrMsg>() - 2usize];
    ["Offset of field: PrtErrMsg::pe_Version"]
        [::core::mem::offset_of!(PrtErrMsg, pe_Version) - 0usize];
    ["Offset of field: PrtErrMsg::pe_ErrorLevel"]
        [::core::mem::offset_of!(PrtErrMsg, pe_ErrorLevel) - 4usize];
    ["Offset of field: PrtErrMsg::pe_Window"]
        [::core::mem::offset_of!(PrtErrMsg, pe_Window) - 8usize];
    ["Offset of field: PrtErrMsg::pe_ES"][::core::mem::offset_of!(PrtErrMsg, pe_ES) - 12usize];
    ["Offset of field: PrtErrMsg::pe_IDCMP"]
        [::core::mem::offset_of!(PrtErrMsg, pe_IDCMP) - 16usize];
    ["Offset of field: PrtErrMsg::pe_ArgList"]
        [::core::mem::offset_of!(PrtErrMsg, pe_ArgList) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOPrefsReq {
    pub io_Message: Message,
    pub io_Device: *mut Device,
    pub io_Unit: *mut Unit,
    pub io_Command: UWORD,
    pub io_Flags: UBYTE,
    pub io_Error: BYTE,
    pub io_TxtPrefs: *mut PrinterTxtPrefs,
    pub io_UnitPrefs: *mut PrinterUnitPrefs,
    pub io_DevUnitPrefs: *mut PrinterDeviceUnitPrefs,
    pub io_GfxPrefs: *mut PrinterGfxPrefs,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOPrefsReq"][::core::mem::size_of::<IOPrefsReq>() - 48usize];
    ["Alignment of IOPrefsReq"][::core::mem::align_of::<IOPrefsReq>() - 2usize];
    ["Offset of field: IOPrefsReq::io_Message"]
        [::core::mem::offset_of!(IOPrefsReq, io_Message) - 0usize];
    ["Offset of field: IOPrefsReq::io_Device"]
        [::core::mem::offset_of!(IOPrefsReq, io_Device) - 20usize];
    ["Offset of field: IOPrefsReq::io_Unit"]
        [::core::mem::offset_of!(IOPrefsReq, io_Unit) - 24usize];
    ["Offset of field: IOPrefsReq::io_Command"]
        [::core::mem::offset_of!(IOPrefsReq, io_Command) - 28usize];
    ["Offset of field: IOPrefsReq::io_Flags"]
        [::core::mem::offset_of!(IOPrefsReq, io_Flags) - 30usize];
    ["Offset of field: IOPrefsReq::io_Error"]
        [::core::mem::offset_of!(IOPrefsReq, io_Error) - 31usize];
    ["Offset of field: IOPrefsReq::io_TxtPrefs"]
        [::core::mem::offset_of!(IOPrefsReq, io_TxtPrefs) - 32usize];
    ["Offset of field: IOPrefsReq::io_UnitPrefs"]
        [::core::mem::offset_of!(IOPrefsReq, io_UnitPrefs) - 36usize];
    ["Offset of field: IOPrefsReq::io_DevUnitPrefs"]
        [::core::mem::offset_of!(IOPrefsReq, io_DevUnitPrefs) - 40usize];
    ["Offset of field: IOPrefsReq::io_GfxPrefs"]
        [::core::mem::offset_of!(IOPrefsReq, io_GfxPrefs) - 44usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOPArray {
    pub PTermArray0: ULONG,
    pub PTermArray1: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOPArray"][::core::mem::size_of::<IOPArray>() - 8usize];
    ["Alignment of IOPArray"][::core::mem::align_of::<IOPArray>() - 2usize];
    ["Offset of field: IOPArray::PTermArray0"]
        [::core::mem::offset_of!(IOPArray, PTermArray0) - 0usize];
    ["Offset of field: IOPArray::PTermArray1"]
        [::core::mem::offset_of!(IOPArray, PTermArray1) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOExtPar {
    pub IOPar: IOStdReq,
    pub io_PExtFlags: ULONG,
    pub io_Status: UBYTE,
    pub io_ParFlags: UBYTE,
    pub io_PTermArray: IOPArray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOExtPar"][::core::mem::size_of::<IOExtPar>() - 62usize];
    ["Alignment of IOExtPar"][::core::mem::align_of::<IOExtPar>() - 2usize];
    ["Offset of field: IOExtPar::IOPar"][::core::mem::offset_of!(IOExtPar, IOPar) - 0usize];
    ["Offset of field: IOExtPar::io_PExtFlags"]
        [::core::mem::offset_of!(IOExtPar, io_PExtFlags) - 48usize];
    ["Offset of field: IOExtPar::io_Status"]
        [::core::mem::offset_of!(IOExtPar, io_Status) - 52usize];
    ["Offset of field: IOExtPar::io_ParFlags"]
        [::core::mem::offset_of!(IOExtPar, io_ParFlags) - 53usize];
    ["Offset of field: IOExtPar::io_PTermArray"]
        [::core::mem::offset_of!(IOExtPar, io_PTermArray) - 54usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOTArray {
    pub TermArray0: ULONG,
    pub TermArray1: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOTArray"][::core::mem::size_of::<IOTArray>() - 8usize];
    ["Alignment of IOTArray"][::core::mem::align_of::<IOTArray>() - 2usize];
    ["Offset of field: IOTArray::TermArray0"]
        [::core::mem::offset_of!(IOTArray, TermArray0) - 0usize];
    ["Offset of field: IOTArray::TermArray1"]
        [::core::mem::offset_of!(IOTArray, TermArray1) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOExtSer {
    pub IOSer: IOStdReq,
    pub io_CtlChar: ULONG,
    pub io_RBufLen: ULONG,
    pub io_ExtFlags: ULONG,
    pub io_Baud: ULONG,
    pub io_BrkTime: ULONG,
    pub io_TermArray: IOTArray,
    pub io_ReadLen: UBYTE,
    pub io_WriteLen: UBYTE,
    pub io_StopBits: UBYTE,
    pub io_SerFlags: UBYTE,
    pub io_Status: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOExtSer"][::core::mem::size_of::<IOExtSer>() - 82usize];
    ["Alignment of IOExtSer"][::core::mem::align_of::<IOExtSer>() - 2usize];
    ["Offset of field: IOExtSer::IOSer"][::core::mem::offset_of!(IOExtSer, IOSer) - 0usize];
    ["Offset of field: IOExtSer::io_CtlChar"]
        [::core::mem::offset_of!(IOExtSer, io_CtlChar) - 48usize];
    ["Offset of field: IOExtSer::io_RBufLen"]
        [::core::mem::offset_of!(IOExtSer, io_RBufLen) - 52usize];
    ["Offset of field: IOExtSer::io_ExtFlags"]
        [::core::mem::offset_of!(IOExtSer, io_ExtFlags) - 56usize];
    ["Offset of field: IOExtSer::io_Baud"][::core::mem::offset_of!(IOExtSer, io_Baud) - 60usize];
    ["Offset of field: IOExtSer::io_BrkTime"]
        [::core::mem::offset_of!(IOExtSer, io_BrkTime) - 64usize];
    ["Offset of field: IOExtSer::io_TermArray"]
        [::core::mem::offset_of!(IOExtSer, io_TermArray) - 68usize];
    ["Offset of field: IOExtSer::io_ReadLen"]
        [::core::mem::offset_of!(IOExtSer, io_ReadLen) - 76usize];
    ["Offset of field: IOExtSer::io_WriteLen"]
        [::core::mem::offset_of!(IOExtSer, io_WriteLen) - 77usize];
    ["Offset of field: IOExtSer::io_StopBits"]
        [::core::mem::offset_of!(IOExtSer, io_StopBits) - 78usize];
    ["Offset of field: IOExtSer::io_SerFlags"]
        [::core::mem::offset_of!(IOExtSer, io_SerFlags) - 79usize];
    ["Offset of field: IOExtSer::io_Status"]
        [::core::mem::offset_of!(IOExtSer, io_Status) - 80usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Process {
    pub pr_Task: Task,
    pub pr_MsgPort: MsgPort,
    pub pr_Pad: WORD,
    pub pr_SegList: BPTR,
    pub pr_StackSize: LONG,
    pub pr_GlobVec: APTR,
    pub pr_TaskNum: LONG,
    pub pr_StackBase: BPTR,
    pub pr_Result2: LONG,
    pub pr_CurrentDir: BPTR,
    pub pr_CIS: BPTR,
    pub pr_COS: BPTR,
    pub pr_ConsoleTask: APTR,
    pub pr_FileSystemTask: APTR,
    pub pr_CLI: BPTR,
    pub pr_ReturnAddr: APTR,
    pub pr_PktWait: APTR,
    pub pr_WindowPtr: APTR,
    pub pr_HomeDir: BPTR,
    pub pr_Flags: LONG,
    pub pr_ExitCode: FPTR,
    pub pr_ExitData: LONG,
    pub pr_Arguments: STRPTR,
    pub pr_LocalVars: MinList,
    pub pr_ShellPrivate: ULONG,
    pub pr_CES: BPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Process"][::core::mem::size_of::<Process>() - 228usize];
    ["Alignment of Process"][::core::mem::align_of::<Process>() - 2usize];
    ["Offset of field: Process::pr_Task"][::core::mem::offset_of!(Process, pr_Task) - 0usize];
    ["Offset of field: Process::pr_MsgPort"]
        [::core::mem::offset_of!(Process, pr_MsgPort) - 92usize];
    ["Offset of field: Process::pr_Pad"][::core::mem::offset_of!(Process, pr_Pad) - 126usize];
    ["Offset of field: Process::pr_SegList"]
        [::core::mem::offset_of!(Process, pr_SegList) - 128usize];
    ["Offset of field: Process::pr_StackSize"]
        [::core::mem::offset_of!(Process, pr_StackSize) - 132usize];
    ["Offset of field: Process::pr_GlobVec"]
        [::core::mem::offset_of!(Process, pr_GlobVec) - 136usize];
    ["Offset of field: Process::pr_TaskNum"]
        [::core::mem::offset_of!(Process, pr_TaskNum) - 140usize];
    ["Offset of field: Process::pr_StackBase"]
        [::core::mem::offset_of!(Process, pr_StackBase) - 144usize];
    ["Offset of field: Process::pr_Result2"]
        [::core::mem::offset_of!(Process, pr_Result2) - 148usize];
    ["Offset of field: Process::pr_CurrentDir"]
        [::core::mem::offset_of!(Process, pr_CurrentDir) - 152usize];
    ["Offset of field: Process::pr_CIS"][::core::mem::offset_of!(Process, pr_CIS) - 156usize];
    ["Offset of field: Process::pr_COS"][::core::mem::offset_of!(Process, pr_COS) - 160usize];
    ["Offset of field: Process::pr_ConsoleTask"]
        [::core::mem::offset_of!(Process, pr_ConsoleTask) - 164usize];
    ["Offset of field: Process::pr_FileSystemTask"]
        [::core::mem::offset_of!(Process, pr_FileSystemTask) - 168usize];
    ["Offset of field: Process::pr_CLI"][::core::mem::offset_of!(Process, pr_CLI) - 172usize];
    ["Offset of field: Process::pr_ReturnAddr"]
        [::core::mem::offset_of!(Process, pr_ReturnAddr) - 176usize];
    ["Offset of field: Process::pr_PktWait"]
        [::core::mem::offset_of!(Process, pr_PktWait) - 180usize];
    ["Offset of field: Process::pr_WindowPtr"]
        [::core::mem::offset_of!(Process, pr_WindowPtr) - 184usize];
    ["Offset of field: Process::pr_HomeDir"]
        [::core::mem::offset_of!(Process, pr_HomeDir) - 188usize];
    ["Offset of field: Process::pr_Flags"][::core::mem::offset_of!(Process, pr_Flags) - 192usize];
    ["Offset of field: Process::pr_ExitCode"]
        [::core::mem::offset_of!(Process, pr_ExitCode) - 196usize];
    ["Offset of field: Process::pr_ExitData"]
        [::core::mem::offset_of!(Process, pr_ExitData) - 200usize];
    ["Offset of field: Process::pr_Arguments"]
        [::core::mem::offset_of!(Process, pr_Arguments) - 204usize];
    ["Offset of field: Process::pr_LocalVars"]
        [::core::mem::offset_of!(Process, pr_LocalVars) - 208usize];
    ["Offset of field: Process::pr_ShellPrivate"]
        [::core::mem::offset_of!(Process, pr_ShellPrivate) - 220usize];
    ["Offset of field: Process::pr_CES"][::core::mem::offset_of!(Process, pr_CES) - 224usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FileHandle {
    pub fh_Link: *mut Message,
    pub fh_Port: *mut MsgPort,
    pub fh_Type: *mut MsgPort,
    pub fh_Buf: BPTR,
    pub fh_Pos: LONG,
    pub fh_End: LONG,
    pub fh_Funcs: LONG,
    pub fh_Func2: LONG,
    pub fh_Func3: LONG,
    pub fh_Args: LONG,
    pub fh_Arg2: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileHandle"][::core::mem::size_of::<FileHandle>() - 44usize];
    ["Alignment of FileHandle"][::core::mem::align_of::<FileHandle>() - 2usize];
    ["Offset of field: FileHandle::fh_Link"][::core::mem::offset_of!(FileHandle, fh_Link) - 0usize];
    ["Offset of field: FileHandle::fh_Port"][::core::mem::offset_of!(FileHandle, fh_Port) - 4usize];
    ["Offset of field: FileHandle::fh_Type"][::core::mem::offset_of!(FileHandle, fh_Type) - 8usize];
    ["Offset of field: FileHandle::fh_Buf"][::core::mem::offset_of!(FileHandle, fh_Buf) - 12usize];
    ["Offset of field: FileHandle::fh_Pos"][::core::mem::offset_of!(FileHandle, fh_Pos) - 16usize];
    ["Offset of field: FileHandle::fh_End"][::core::mem::offset_of!(FileHandle, fh_End) - 20usize];
    ["Offset of field: FileHandle::fh_Funcs"]
        [::core::mem::offset_of!(FileHandle, fh_Funcs) - 24usize];
    ["Offset of field: FileHandle::fh_Func2"]
        [::core::mem::offset_of!(FileHandle, fh_Func2) - 28usize];
    ["Offset of field: FileHandle::fh_Func3"]
        [::core::mem::offset_of!(FileHandle, fh_Func3) - 32usize];
    ["Offset of field: FileHandle::fh_Args"]
        [::core::mem::offset_of!(FileHandle, fh_Args) - 36usize];
    ["Offset of field: FileHandle::fh_Arg2"]
        [::core::mem::offset_of!(FileHandle, fh_Arg2) - 40usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DosPacket {
    pub dp_Link: *mut Message,
    pub dp_Port: *mut MsgPort,
    pub dp_Type: LONG,
    pub dp_Res1: LONG,
    pub dp_Res2: LONG,
    pub dp_Arg1: LONG,
    pub dp_Arg2: LONG,
    pub dp_Arg3: LONG,
    pub dp_Arg4: LONG,
    pub dp_Arg5: LONG,
    pub dp_Arg6: LONG,
    pub dp_Arg7: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DosPacket"][::core::mem::size_of::<DosPacket>() - 48usize];
    ["Alignment of DosPacket"][::core::mem::align_of::<DosPacket>() - 2usize];
    ["Offset of field: DosPacket::dp_Link"][::core::mem::offset_of!(DosPacket, dp_Link) - 0usize];
    ["Offset of field: DosPacket::dp_Port"][::core::mem::offset_of!(DosPacket, dp_Port) - 4usize];
    ["Offset of field: DosPacket::dp_Type"][::core::mem::offset_of!(DosPacket, dp_Type) - 8usize];
    ["Offset of field: DosPacket::dp_Res1"][::core::mem::offset_of!(DosPacket, dp_Res1) - 12usize];
    ["Offset of field: DosPacket::dp_Res2"][::core::mem::offset_of!(DosPacket, dp_Res2) - 16usize];
    ["Offset of field: DosPacket::dp_Arg1"][::core::mem::offset_of!(DosPacket, dp_Arg1) - 20usize];
    ["Offset of field: DosPacket::dp_Arg2"][::core::mem::offset_of!(DosPacket, dp_Arg2) - 24usize];
    ["Offset of field: DosPacket::dp_Arg3"][::core::mem::offset_of!(DosPacket, dp_Arg3) - 28usize];
    ["Offset of field: DosPacket::dp_Arg4"][::core::mem::offset_of!(DosPacket, dp_Arg4) - 32usize];
    ["Offset of field: DosPacket::dp_Arg5"][::core::mem::offset_of!(DosPacket, dp_Arg5) - 36usize];
    ["Offset of field: DosPacket::dp_Arg6"][::core::mem::offset_of!(DosPacket, dp_Arg6) - 40usize];
    ["Offset of field: DosPacket::dp_Arg7"][::core::mem::offset_of!(DosPacket, dp_Arg7) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StandardPacket {
    pub sp_Msg: Message,
    pub sp_Pkt: DosPacket,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StandardPacket"][::core::mem::size_of::<StandardPacket>() - 68usize];
    ["Alignment of StandardPacket"][::core::mem::align_of::<StandardPacket>() - 2usize];
    ["Offset of field: StandardPacket::sp_Msg"]
        [::core::mem::offset_of!(StandardPacket, sp_Msg) - 0usize];
    ["Offset of field: StandardPacket::sp_Pkt"]
        [::core::mem::offset_of!(StandardPacket, sp_Pkt) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ErrorString {
    pub estr_Nums: *mut LONG,
    pub estr_Strings: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ErrorString"][::core::mem::size_of::<ErrorString>() - 8usize];
    ["Alignment of ErrorString"][::core::mem::align_of::<ErrorString>() - 2usize];
    ["Offset of field: ErrorString::estr_Nums"]
        [::core::mem::offset_of!(ErrorString, estr_Nums) - 0usize];
    ["Offset of field: ErrorString::estr_Strings"]
        [::core::mem::offset_of!(ErrorString, estr_Strings) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DosLibrary {
    pub dl_lib: Library,
    pub dl_Root: *mut RootNode,
    pub dl_GV: APTR,
    pub dl_A2: LONG,
    pub dl_A5: LONG,
    pub dl_A6: LONG,
    pub dl_Errors: *mut ErrorString,
    pub dl_TimeReq: *mut timerequest,
    pub dl_UtilityBase: *mut Library,
    pub dl_IntuitionBase: *mut Library,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DosLibrary"][::core::mem::size_of::<DosLibrary>() - 70usize];
    ["Alignment of DosLibrary"][::core::mem::align_of::<DosLibrary>() - 2usize];
    ["Offset of field: DosLibrary::dl_lib"][::core::mem::offset_of!(DosLibrary, dl_lib) - 0usize];
    ["Offset of field: DosLibrary::dl_Root"]
        [::core::mem::offset_of!(DosLibrary, dl_Root) - 34usize];
    ["Offset of field: DosLibrary::dl_GV"][::core::mem::offset_of!(DosLibrary, dl_GV) - 38usize];
    ["Offset of field: DosLibrary::dl_A2"][::core::mem::offset_of!(DosLibrary, dl_A2) - 42usize];
    ["Offset of field: DosLibrary::dl_A5"][::core::mem::offset_of!(DosLibrary, dl_A5) - 46usize];
    ["Offset of field: DosLibrary::dl_A6"][::core::mem::offset_of!(DosLibrary, dl_A6) - 50usize];
    ["Offset of field: DosLibrary::dl_Errors"]
        [::core::mem::offset_of!(DosLibrary, dl_Errors) - 54usize];
    ["Offset of field: DosLibrary::dl_TimeReq"]
        [::core::mem::offset_of!(DosLibrary, dl_TimeReq) - 58usize];
    ["Offset of field: DosLibrary::dl_UtilityBase"]
        [::core::mem::offset_of!(DosLibrary, dl_UtilityBase) - 62usize];
    ["Offset of field: DosLibrary::dl_IntuitionBase"]
        [::core::mem::offset_of!(DosLibrary, dl_IntuitionBase) - 66usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RootNode {
    pub rn_TaskArray: BPTR,
    pub rn_ConsoleSegment: BPTR,
    pub rn_Time: DateStamp,
    pub rn_RestartSeg: LONG,
    pub rn_Info: BPTR,
    pub rn_FileHandlerSegment: BPTR,
    pub rn_CliList: MinList,
    pub rn_BootProc: *mut MsgPort,
    pub rn_ShellSegment: BPTR,
    pub rn_Flags: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RootNode"][::core::mem::size_of::<RootNode>() - 56usize];
    ["Alignment of RootNode"][::core::mem::align_of::<RootNode>() - 2usize];
    ["Offset of field: RootNode::rn_TaskArray"]
        [::core::mem::offset_of!(RootNode, rn_TaskArray) - 0usize];
    ["Offset of field: RootNode::rn_ConsoleSegment"]
        [::core::mem::offset_of!(RootNode, rn_ConsoleSegment) - 4usize];
    ["Offset of field: RootNode::rn_Time"][::core::mem::offset_of!(RootNode, rn_Time) - 8usize];
    ["Offset of field: RootNode::rn_RestartSeg"]
        [::core::mem::offset_of!(RootNode, rn_RestartSeg) - 20usize];
    ["Offset of field: RootNode::rn_Info"][::core::mem::offset_of!(RootNode, rn_Info) - 24usize];
    ["Offset of field: RootNode::rn_FileHandlerSegment"]
        [::core::mem::offset_of!(RootNode, rn_FileHandlerSegment) - 28usize];
    ["Offset of field: RootNode::rn_CliList"]
        [::core::mem::offset_of!(RootNode, rn_CliList) - 32usize];
    ["Offset of field: RootNode::rn_BootProc"]
        [::core::mem::offset_of!(RootNode, rn_BootProc) - 44usize];
    ["Offset of field: RootNode::rn_ShellSegment"]
        [::core::mem::offset_of!(RootNode, rn_ShellSegment) - 48usize];
    ["Offset of field: RootNode::rn_Flags"][::core::mem::offset_of!(RootNode, rn_Flags) - 52usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CliProcList {
    pub cpl_Node: MinNode,
    pub cpl_First: LONG,
    pub cpl_Array: *mut *mut MsgPort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CliProcList"][::core::mem::size_of::<CliProcList>() - 16usize];
    ["Alignment of CliProcList"][::core::mem::align_of::<CliProcList>() - 2usize];
    ["Offset of field: CliProcList::cpl_Node"]
        [::core::mem::offset_of!(CliProcList, cpl_Node) - 0usize];
    ["Offset of field: CliProcList::cpl_First"]
        [::core::mem::offset_of!(CliProcList, cpl_First) - 8usize];
    ["Offset of field: CliProcList::cpl_Array"]
        [::core::mem::offset_of!(CliProcList, cpl_Array) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DosInfo {
    pub di_McName: BPTR,
    pub di_DevInfo: BPTR,
    pub di_Devices: BPTR,
    pub di_Handlers: BPTR,
    pub di_NetHand: APTR,
    pub di_DevLock: SignalSemaphore,
    pub di_EntryLock: SignalSemaphore,
    pub di_DeleteLock: SignalSemaphore,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DosInfo"][::core::mem::size_of::<DosInfo>() - 158usize];
    ["Alignment of DosInfo"][::core::mem::align_of::<DosInfo>() - 2usize];
    ["Offset of field: DosInfo::di_McName"][::core::mem::offset_of!(DosInfo, di_McName) - 0usize];
    ["Offset of field: DosInfo::di_DevInfo"][::core::mem::offset_of!(DosInfo, di_DevInfo) - 4usize];
    ["Offset of field: DosInfo::di_Devices"][::core::mem::offset_of!(DosInfo, di_Devices) - 8usize];
    ["Offset of field: DosInfo::di_Handlers"]
        [::core::mem::offset_of!(DosInfo, di_Handlers) - 12usize];
    ["Offset of field: DosInfo::di_NetHand"]
        [::core::mem::offset_of!(DosInfo, di_NetHand) - 16usize];
    ["Offset of field: DosInfo::di_DevLock"]
        [::core::mem::offset_of!(DosInfo, di_DevLock) - 20usize];
    ["Offset of field: DosInfo::di_EntryLock"]
        [::core::mem::offset_of!(DosInfo, di_EntryLock) - 66usize];
    ["Offset of field: DosInfo::di_DeleteLock"]
        [::core::mem::offset_of!(DosInfo, di_DeleteLock) - 112usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Segment {
    pub seg_Next: BPTR,
    pub seg_UC: LONG,
    pub seg_Seg: BPTR,
    pub seg_Name: [UBYTE; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Segment"][::core::mem::size_of::<Segment>() - 16usize];
    ["Alignment of Segment"][::core::mem::align_of::<Segment>() - 2usize];
    ["Offset of field: Segment::seg_Next"][::core::mem::offset_of!(Segment, seg_Next) - 0usize];
    ["Offset of field: Segment::seg_UC"][::core::mem::offset_of!(Segment, seg_UC) - 4usize];
    ["Offset of field: Segment::seg_Seg"][::core::mem::offset_of!(Segment, seg_Seg) - 8usize];
    ["Offset of field: Segment::seg_Name"][::core::mem::offset_of!(Segment, seg_Name) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CommandLineInterface {
    pub cli_Result2: LONG,
    pub cli_SetName: BSTR,
    pub cli_CommandDir: BPTR,
    pub cli_ReturnCode: LONG,
    pub cli_CommandName: BSTR,
    pub cli_FailLevel: LONG,
    pub cli_Prompt: BSTR,
    pub cli_StandardInput: BPTR,
    pub cli_CurrentInput: BPTR,
    pub cli_CommandFile: BSTR,
    pub cli_Interactive: LONG,
    pub cli_Background: LONG,
    pub cli_CurrentOutput: BPTR,
    pub cli_DefaultStack: LONG,
    pub cli_StandardOutput: BPTR,
    pub cli_Module: BPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CommandLineInterface"][::core::mem::size_of::<CommandLineInterface>() - 64usize];
    ["Alignment of CommandLineInterface"][::core::mem::align_of::<CommandLineInterface>() - 2usize];
    ["Offset of field: CommandLineInterface::cli_Result2"]
        [::core::mem::offset_of!(CommandLineInterface, cli_Result2) - 0usize];
    ["Offset of field: CommandLineInterface::cli_SetName"]
        [::core::mem::offset_of!(CommandLineInterface, cli_SetName) - 4usize];
    ["Offset of field: CommandLineInterface::cli_CommandDir"]
        [::core::mem::offset_of!(CommandLineInterface, cli_CommandDir) - 8usize];
    ["Offset of field: CommandLineInterface::cli_ReturnCode"]
        [::core::mem::offset_of!(CommandLineInterface, cli_ReturnCode) - 12usize];
    ["Offset of field: CommandLineInterface::cli_CommandName"]
        [::core::mem::offset_of!(CommandLineInterface, cli_CommandName) - 16usize];
    ["Offset of field: CommandLineInterface::cli_FailLevel"]
        [::core::mem::offset_of!(CommandLineInterface, cli_FailLevel) - 20usize];
    ["Offset of field: CommandLineInterface::cli_Prompt"]
        [::core::mem::offset_of!(CommandLineInterface, cli_Prompt) - 24usize];
    ["Offset of field: CommandLineInterface::cli_StandardInput"]
        [::core::mem::offset_of!(CommandLineInterface, cli_StandardInput) - 28usize];
    ["Offset of field: CommandLineInterface::cli_CurrentInput"]
        [::core::mem::offset_of!(CommandLineInterface, cli_CurrentInput) - 32usize];
    ["Offset of field: CommandLineInterface::cli_CommandFile"]
        [::core::mem::offset_of!(CommandLineInterface, cli_CommandFile) - 36usize];
    ["Offset of field: CommandLineInterface::cli_Interactive"]
        [::core::mem::offset_of!(CommandLineInterface, cli_Interactive) - 40usize];
    ["Offset of field: CommandLineInterface::cli_Background"]
        [::core::mem::offset_of!(CommandLineInterface, cli_Background) - 44usize];
    ["Offset of field: CommandLineInterface::cli_CurrentOutput"]
        [::core::mem::offset_of!(CommandLineInterface, cli_CurrentOutput) - 48usize];
    ["Offset of field: CommandLineInterface::cli_DefaultStack"]
        [::core::mem::offset_of!(CommandLineInterface, cli_DefaultStack) - 52usize];
    ["Offset of field: CommandLineInterface::cli_StandardOutput"]
        [::core::mem::offset_of!(CommandLineInterface, cli_StandardOutput) - 56usize];
    ["Offset of field: CommandLineInterface::cli_Module"]
        [::core::mem::offset_of!(CommandLineInterface, cli_Module) - 60usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DeviceList {
    pub dl_Next: BPTR,
    pub dl_Type: LONG,
    pub dl_Task: *mut MsgPort,
    pub dl_Lock: BPTR,
    pub dl_VolumeDate: DateStamp,
    pub dl_LockList: BPTR,
    pub dl_DiskType: LONG,
    pub dl_unused: LONG,
    pub dl_Name: BSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DeviceList"][::core::mem::size_of::<DeviceList>() - 44usize];
    ["Alignment of DeviceList"][::core::mem::align_of::<DeviceList>() - 2usize];
    ["Offset of field: DeviceList::dl_Next"][::core::mem::offset_of!(DeviceList, dl_Next) - 0usize];
    ["Offset of field: DeviceList::dl_Type"][::core::mem::offset_of!(DeviceList, dl_Type) - 4usize];
    ["Offset of field: DeviceList::dl_Task"][::core::mem::offset_of!(DeviceList, dl_Task) - 8usize];
    ["Offset of field: DeviceList::dl_Lock"]
        [::core::mem::offset_of!(DeviceList, dl_Lock) - 12usize];
    ["Offset of field: DeviceList::dl_VolumeDate"]
        [::core::mem::offset_of!(DeviceList, dl_VolumeDate) - 16usize];
    ["Offset of field: DeviceList::dl_LockList"]
        [::core::mem::offset_of!(DeviceList, dl_LockList) - 28usize];
    ["Offset of field: DeviceList::dl_DiskType"]
        [::core::mem::offset_of!(DeviceList, dl_DiskType) - 32usize];
    ["Offset of field: DeviceList::dl_unused"]
        [::core::mem::offset_of!(DeviceList, dl_unused) - 36usize];
    ["Offset of field: DeviceList::dl_Name"]
        [::core::mem::offset_of!(DeviceList, dl_Name) - 40usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DevInfo {
    pub dvi_Next: BPTR,
    pub dvi_Type: LONG,
    pub dvi_Task: APTR,
    pub dvi_Lock: BPTR,
    pub dvi_Handler: BSTR,
    pub dvi_StackSize: LONG,
    pub dvi_Priority: LONG,
    pub dvi_Startup: LONG,
    pub dvi_SegList: BPTR,
    pub dvi_GlobVec: BPTR,
    pub dvi_Name: BSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DevInfo"][::core::mem::size_of::<DevInfo>() - 44usize];
    ["Alignment of DevInfo"][::core::mem::align_of::<DevInfo>() - 2usize];
    ["Offset of field: DevInfo::dvi_Next"][::core::mem::offset_of!(DevInfo, dvi_Next) - 0usize];
    ["Offset of field: DevInfo::dvi_Type"][::core::mem::offset_of!(DevInfo, dvi_Type) - 4usize];
    ["Offset of field: DevInfo::dvi_Task"][::core::mem::offset_of!(DevInfo, dvi_Task) - 8usize];
    ["Offset of field: DevInfo::dvi_Lock"][::core::mem::offset_of!(DevInfo, dvi_Lock) - 12usize];
    ["Offset of field: DevInfo::dvi_Handler"]
        [::core::mem::offset_of!(DevInfo, dvi_Handler) - 16usize];
    ["Offset of field: DevInfo::dvi_StackSize"]
        [::core::mem::offset_of!(DevInfo, dvi_StackSize) - 20usize];
    ["Offset of field: DevInfo::dvi_Priority"]
        [::core::mem::offset_of!(DevInfo, dvi_Priority) - 24usize];
    ["Offset of field: DevInfo::dvi_Startup"]
        [::core::mem::offset_of!(DevInfo, dvi_Startup) - 28usize];
    ["Offset of field: DevInfo::dvi_SegList"]
        [::core::mem::offset_of!(DevInfo, dvi_SegList) - 32usize];
    ["Offset of field: DevInfo::dvi_GlobVec"]
        [::core::mem::offset_of!(DevInfo, dvi_GlobVec) - 36usize];
    ["Offset of field: DevInfo::dvi_Name"][::core::mem::offset_of!(DevInfo, dvi_Name) - 40usize];
};
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct DosList {
    pub dol_Next: BPTR,
    pub dol_Type: LONG,
    pub dol_Task: *mut MsgPort,
    pub dol_Lock: BPTR,
    pub dol_misc: DosList__bindgen_ty_1,
    pub dol_Name: BSTR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DosList__bindgen_ty_1 {
    pub dol_handler: DosList__bindgen_ty_1__bindgen_ty_1,
    pub dol_volume: DosList__bindgen_ty_1__bindgen_ty_2,
    pub dol_assign: DosList__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DosList__bindgen_ty_1__bindgen_ty_1 {
    pub dol_Handler: BSTR,
    pub dol_StackSize: LONG,
    pub dol_Priority: LONG,
    pub dol_Startup: ULONG,
    pub dol_SegList: BPTR,
    pub dol_GlobVec: BPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DosList__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<DosList__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of DosList__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<DosList__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_1::dol_Handler"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_1, dol_Handler) - 0usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_1::dol_StackSize"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_1, dol_StackSize) - 4usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_1::dol_Priority"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_1, dol_Priority) - 8usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_1::dol_Startup"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_1, dol_Startup) - 12usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_1::dol_SegList"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_1, dol_SegList) - 16usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_1::dol_GlobVec"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_1, dol_GlobVec) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DosList__bindgen_ty_1__bindgen_ty_2 {
    pub dol_VolumeDate: DateStamp,
    pub dol_LockList: BPTR,
    pub dol_DiskType: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DosList__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<DosList__bindgen_ty_1__bindgen_ty_2>() - 20usize];
    ["Alignment of DosList__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<DosList__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_2::dol_VolumeDate"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_2, dol_VolumeDate) - 0usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_2::dol_LockList"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_2, dol_LockList) - 12usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_2::dol_DiskType"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_2, dol_DiskType) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DosList__bindgen_ty_1__bindgen_ty_3 {
    pub dol_AssignName: STRPTR,
    pub dol_List: *mut AssignList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DosList__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::size_of::<DosList__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Alignment of DosList__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<DosList__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_3::dol_AssignName"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_3, dol_AssignName) - 0usize];
    ["Offset of field: DosList__bindgen_ty_1__bindgen_ty_3::dol_List"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1__bindgen_ty_3, dol_List) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DosList__bindgen_ty_1"][::core::mem::size_of::<DosList__bindgen_ty_1>() - 24usize];
    ["Alignment of DosList__bindgen_ty_1"]
        [::core::mem::align_of::<DosList__bindgen_ty_1>() - 2usize];
    ["Offset of field: DosList__bindgen_ty_1::dol_handler"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1, dol_handler) - 0usize];
    ["Offset of field: DosList__bindgen_ty_1::dol_volume"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1, dol_volume) - 0usize];
    ["Offset of field: DosList__bindgen_ty_1::dol_assign"]
        [::core::mem::offset_of!(DosList__bindgen_ty_1, dol_assign) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DosList"][::core::mem::size_of::<DosList>() - 44usize];
    ["Alignment of DosList"][::core::mem::align_of::<DosList>() - 2usize];
    ["Offset of field: DosList::dol_Next"][::core::mem::offset_of!(DosList, dol_Next) - 0usize];
    ["Offset of field: DosList::dol_Type"][::core::mem::offset_of!(DosList, dol_Type) - 4usize];
    ["Offset of field: DosList::dol_Task"][::core::mem::offset_of!(DosList, dol_Task) - 8usize];
    ["Offset of field: DosList::dol_Lock"][::core::mem::offset_of!(DosList, dol_Lock) - 12usize];
    ["Offset of field: DosList::dol_misc"][::core::mem::offset_of!(DosList, dol_misc) - 16usize];
    ["Offset of field: DosList::dol_Name"][::core::mem::offset_of!(DosList, dol_Name) - 40usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AssignList {
    pub al_Next: *mut AssignList,
    pub al_Lock: BPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AssignList"][::core::mem::size_of::<AssignList>() - 8usize];
    ["Alignment of AssignList"][::core::mem::align_of::<AssignList>() - 2usize];
    ["Offset of field: AssignList::al_Next"][::core::mem::offset_of!(AssignList, al_Next) - 0usize];
    ["Offset of field: AssignList::al_Lock"][::core::mem::offset_of!(AssignList, al_Lock) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DevProc {
    pub dvp_Port: *mut MsgPort,
    pub dvp_Lock: BPTR,
    pub dvp_Flags: ULONG,
    pub dvp_DevNode: *mut DosList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DevProc"][::core::mem::size_of::<DevProc>() - 16usize];
    ["Alignment of DevProc"][::core::mem::align_of::<DevProc>() - 2usize];
    ["Offset of field: DevProc::dvp_Port"][::core::mem::offset_of!(DevProc, dvp_Port) - 0usize];
    ["Offset of field: DevProc::dvp_Lock"][::core::mem::offset_of!(DevProc, dvp_Lock) - 4usize];
    ["Offset of field: DevProc::dvp_Flags"][::core::mem::offset_of!(DevProc, dvp_Flags) - 8usize];
    ["Offset of field: DevProc::dvp_DevNode"]
        [::core::mem::offset_of!(DevProc, dvp_DevNode) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FileLock {
    pub fl_Link: BPTR,
    pub fl_Key: LONG,
    pub fl_Access: LONG,
    pub fl_Task: *mut MsgPort,
    pub fl_Volume: BPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileLock"][::core::mem::size_of::<FileLock>() - 20usize];
    ["Alignment of FileLock"][::core::mem::align_of::<FileLock>() - 2usize];
    ["Offset of field: FileLock::fl_Link"][::core::mem::offset_of!(FileLock, fl_Link) - 0usize];
    ["Offset of field: FileLock::fl_Key"][::core::mem::offset_of!(FileLock, fl_Key) - 4usize];
    ["Offset of field: FileLock::fl_Access"][::core::mem::offset_of!(FileLock, fl_Access) - 8usize];
    ["Offset of field: FileLock::fl_Task"][::core::mem::offset_of!(FileLock, fl_Task) - 12usize];
    ["Offset of field: FileLock::fl_Volume"]
        [::core::mem::offset_of!(FileLock, fl_Volume) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DeviceData {
    pub dd_Device: Library,
    pub dd_Segment: APTR,
    pub dd_ExecBase: APTR,
    pub dd_CmdVectors: APTR,
    pub dd_CmdBytes: APTR,
    pub dd_NumCommands: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DeviceData"][::core::mem::size_of::<DeviceData>() - 52usize];
    ["Alignment of DeviceData"][::core::mem::align_of::<DeviceData>() - 2usize];
    ["Offset of field: DeviceData::dd_Device"]
        [::core::mem::offset_of!(DeviceData, dd_Device) - 0usize];
    ["Offset of field: DeviceData::dd_Segment"]
        [::core::mem::offset_of!(DeviceData, dd_Segment) - 34usize];
    ["Offset of field: DeviceData::dd_ExecBase"]
        [::core::mem::offset_of!(DeviceData, dd_ExecBase) - 38usize];
    ["Offset of field: DeviceData::dd_CmdVectors"]
        [::core::mem::offset_of!(DeviceData, dd_CmdVectors) - 42usize];
    ["Offset of field: DeviceData::dd_CmdBytes"]
        [::core::mem::offset_of!(DeviceData, dd_CmdBytes) - 46usize];
    ["Offset of field: DeviceData::dd_NumCommands"]
        [::core::mem::offset_of!(DeviceData, dd_NumCommands) - 50usize];
};
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct PrinterData {
    pub pd_Device: DeviceData,
    pub pd_Unit: MsgPort,
    pub pd_PrinterSegment: BPTR,
    pub pd_PrinterType: UWORD,
    pub pd_SegmentData: *mut PrinterSegment,
    pub pd_PrintBuf: *mut UBYTE,
    pub pd_PWrite: FPTR,
    pub pd_PBothReady: FPTR,
    pub pd_ior0: PrinterData__bindgen_ty_1,
    pub pd_ior1: PrinterData__bindgen_ty_2,
    pub pd_TIOR: timerequest,
    pub pd_IORPort: MsgPort,
    pub pd_TC: Task,
    pub pd_OldStk: [UBYTE; 2048usize],
    pub pd_Flags: UBYTE,
    pub pd_pad: UBYTE,
    pub pd_Preferences: Preferences,
    pub pd_PWaitEnabled: UBYTE,
    pub pd_Flags1: UBYTE,
    pub pd_Stk: [UBYTE; 4096usize],
    pub pd_PUnit: *mut PrinterUnit,
    pub pd_PRead: FPTR,
    pub pd_CallErrHook: FPTR,
    pub pd_UnitNumber: ULONG,
    pub pd_DriverName: STRPTR,
    pub pd_PQuery: FPTR,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PrinterData__bindgen_ty_1 {
    pub pd_p0: IOExtPar,
    pub pd_s0: IOExtSer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterData__bindgen_ty_1"]
        [::core::mem::size_of::<PrinterData__bindgen_ty_1>() - 82usize];
    ["Alignment of PrinterData__bindgen_ty_1"]
        [::core::mem::align_of::<PrinterData__bindgen_ty_1>() - 2usize];
    ["Offset of field: PrinterData__bindgen_ty_1::pd_p0"]
        [::core::mem::offset_of!(PrinterData__bindgen_ty_1, pd_p0) - 0usize];
    ["Offset of field: PrinterData__bindgen_ty_1::pd_s0"]
        [::core::mem::offset_of!(PrinterData__bindgen_ty_1, pd_s0) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union PrinterData__bindgen_ty_2 {
    pub pd_p1: IOExtPar,
    pub pd_s1: IOExtSer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterData__bindgen_ty_2"]
        [::core::mem::size_of::<PrinterData__bindgen_ty_2>() - 82usize];
    ["Alignment of PrinterData__bindgen_ty_2"]
        [::core::mem::align_of::<PrinterData__bindgen_ty_2>() - 2usize];
    ["Offset of field: PrinterData__bindgen_ty_2::pd_p1"]
        [::core::mem::offset_of!(PrinterData__bindgen_ty_2, pd_p1) - 0usize];
    ["Offset of field: PrinterData__bindgen_ty_2::pd_s1"]
        [::core::mem::offset_of!(PrinterData__bindgen_ty_2, pd_s1) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterData"][::core::mem::size_of::<PrinterData>() - 6842usize];
    ["Alignment of PrinterData"][::core::mem::align_of::<PrinterData>() - 2usize];
    ["Offset of field: PrinterData::pd_Device"]
        [::core::mem::offset_of!(PrinterData, pd_Device) - 0usize];
    ["Offset of field: PrinterData::pd_Unit"]
        [::core::mem::offset_of!(PrinterData, pd_Unit) - 52usize];
    ["Offset of field: PrinterData::pd_PrinterSegment"]
        [::core::mem::offset_of!(PrinterData, pd_PrinterSegment) - 86usize];
    ["Offset of field: PrinterData::pd_PrinterType"]
        [::core::mem::offset_of!(PrinterData, pd_PrinterType) - 90usize];
    ["Offset of field: PrinterData::pd_SegmentData"]
        [::core::mem::offset_of!(PrinterData, pd_SegmentData) - 92usize];
    ["Offset of field: PrinterData::pd_PrintBuf"]
        [::core::mem::offset_of!(PrinterData, pd_PrintBuf) - 96usize];
    ["Offset of field: PrinterData::pd_PWrite"]
        [::core::mem::offset_of!(PrinterData, pd_PWrite) - 100usize];
    ["Offset of field: PrinterData::pd_PBothReady"]
        [::core::mem::offset_of!(PrinterData, pd_PBothReady) - 104usize];
    ["Offset of field: PrinterData::pd_ior0"]
        [::core::mem::offset_of!(PrinterData, pd_ior0) - 108usize];
    ["Offset of field: PrinterData::pd_ior1"]
        [::core::mem::offset_of!(PrinterData, pd_ior1) - 190usize];
    ["Offset of field: PrinterData::pd_TIOR"]
        [::core::mem::offset_of!(PrinterData, pd_TIOR) - 272usize];
    ["Offset of field: PrinterData::pd_IORPort"]
        [::core::mem::offset_of!(PrinterData, pd_IORPort) - 312usize];
    ["Offset of field: PrinterData::pd_TC"][::core::mem::offset_of!(PrinterData, pd_TC) - 346usize];
    ["Offset of field: PrinterData::pd_OldStk"]
        [::core::mem::offset_of!(PrinterData, pd_OldStk) - 438usize];
    ["Offset of field: PrinterData::pd_Flags"]
        [::core::mem::offset_of!(PrinterData, pd_Flags) - 2486usize];
    ["Offset of field: PrinterData::pd_pad"]
        [::core::mem::offset_of!(PrinterData, pd_pad) - 2487usize];
    ["Offset of field: PrinterData::pd_Preferences"]
        [::core::mem::offset_of!(PrinterData, pd_Preferences) - 2488usize];
    ["Offset of field: PrinterData::pd_PWaitEnabled"]
        [::core::mem::offset_of!(PrinterData, pd_PWaitEnabled) - 2720usize];
    ["Offset of field: PrinterData::pd_Flags1"]
        [::core::mem::offset_of!(PrinterData, pd_Flags1) - 2721usize];
    ["Offset of field: PrinterData::pd_Stk"]
        [::core::mem::offset_of!(PrinterData, pd_Stk) - 2722usize];
    ["Offset of field: PrinterData::pd_PUnit"]
        [::core::mem::offset_of!(PrinterData, pd_PUnit) - 6818usize];
    ["Offset of field: PrinterData::pd_PRead"]
        [::core::mem::offset_of!(PrinterData, pd_PRead) - 6822usize];
    ["Offset of field: PrinterData::pd_CallErrHook"]
        [::core::mem::offset_of!(PrinterData, pd_CallErrHook) - 6826usize];
    ["Offset of field: PrinterData::pd_UnitNumber"]
        [::core::mem::offset_of!(PrinterData, pd_UnitNumber) - 6830usize];
    ["Offset of field: PrinterData::pd_DriverName"]
        [::core::mem::offset_of!(PrinterData, pd_DriverName) - 6834usize];
    ["Offset of field: PrinterData::pd_PQuery"]
        [::core::mem::offset_of!(PrinterData, pd_PQuery) - 6838usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrinterExtendedData {
    pub ped_PrinterName: STRPTR,
    pub ped_Init: FPTR,
    pub ped_Expunge: FPTR,
    pub ped_Open: FPTR,
    pub ped_Close: FPTR,
    pub ped_PrinterClass: UBYTE,
    pub ped_ColorClass: UBYTE,
    pub ped_MaxColumns: UBYTE,
    pub ped_NumCharSets: UBYTE,
    pub ped_NumRows: UWORD,
    pub ped_MaxXDots: ULONG,
    pub ped_MaxYDots: ULONG,
    pub ped_XDotsInch: UWORD,
    pub ped_YDotsInch: UWORD,
    pub ped_Commands: *mut *mut STRPTR,
    pub ped_DoSpecial: FPTR,
    pub ped_Render: FPTR,
    pub ped_TimeoutSecs: LONG,
    pub ped_8BitChars: *mut STRPTR,
    pub ped_PrintMode: LONG,
    pub ped_ConvFunc: FPTR,
    pub ped_TagList: *mut TagItem,
    pub ped_DoPreferences: FPTR,
    pub ped_CallErrHook: FPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterExtendedData"][::core::mem::size_of::<PrinterExtendedData>() - 78usize];
    ["Alignment of PrinterExtendedData"][::core::mem::align_of::<PrinterExtendedData>() - 2usize];
    ["Offset of field: PrinterExtendedData::ped_PrinterName"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_PrinterName) - 0usize];
    ["Offset of field: PrinterExtendedData::ped_Init"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_Init) - 4usize];
    ["Offset of field: PrinterExtendedData::ped_Expunge"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_Expunge) - 8usize];
    ["Offset of field: PrinterExtendedData::ped_Open"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_Open) - 12usize];
    ["Offset of field: PrinterExtendedData::ped_Close"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_Close) - 16usize];
    ["Offset of field: PrinterExtendedData::ped_PrinterClass"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_PrinterClass) - 20usize];
    ["Offset of field: PrinterExtendedData::ped_ColorClass"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_ColorClass) - 21usize];
    ["Offset of field: PrinterExtendedData::ped_MaxColumns"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_MaxColumns) - 22usize];
    ["Offset of field: PrinterExtendedData::ped_NumCharSets"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_NumCharSets) - 23usize];
    ["Offset of field: PrinterExtendedData::ped_NumRows"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_NumRows) - 24usize];
    ["Offset of field: PrinterExtendedData::ped_MaxXDots"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_MaxXDots) - 26usize];
    ["Offset of field: PrinterExtendedData::ped_MaxYDots"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_MaxYDots) - 30usize];
    ["Offset of field: PrinterExtendedData::ped_XDotsInch"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_XDotsInch) - 34usize];
    ["Offset of field: PrinterExtendedData::ped_YDotsInch"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_YDotsInch) - 36usize];
    ["Offset of field: PrinterExtendedData::ped_Commands"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_Commands) - 38usize];
    ["Offset of field: PrinterExtendedData::ped_DoSpecial"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_DoSpecial) - 42usize];
    ["Offset of field: PrinterExtendedData::ped_Render"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_Render) - 46usize];
    ["Offset of field: PrinterExtendedData::ped_TimeoutSecs"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_TimeoutSecs) - 50usize];
    ["Offset of field: PrinterExtendedData::ped_8BitChars"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_8BitChars) - 54usize];
    ["Offset of field: PrinterExtendedData::ped_PrintMode"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_PrintMode) - 58usize];
    ["Offset of field: PrinterExtendedData::ped_ConvFunc"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_ConvFunc) - 62usize];
    ["Offset of field: PrinterExtendedData::ped_TagList"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_TagList) - 66usize];
    ["Offset of field: PrinterExtendedData::ped_DoPreferences"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_DoPreferences) - 70usize];
    ["Offset of field: PrinterExtendedData::ped_CallErrHook"]
        [::core::mem::offset_of!(PrinterExtendedData, ped_CallErrHook) - 74usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrinterSegment {
    pub ps_NextSegment: ULONG,
    pub ps_runAlert: ULONG,
    pub ps_Version: UWORD,
    pub ps_Revision: UWORD,
    pub ps_PED: PrinterExtendedData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterSegment"][::core::mem::size_of::<PrinterSegment>() - 90usize];
    ["Alignment of PrinterSegment"][::core::mem::align_of::<PrinterSegment>() - 2usize];
    ["Offset of field: PrinterSegment::ps_NextSegment"]
        [::core::mem::offset_of!(PrinterSegment, ps_NextSegment) - 0usize];
    ["Offset of field: PrinterSegment::ps_runAlert"]
        [::core::mem::offset_of!(PrinterSegment, ps_runAlert) - 4usize];
    ["Offset of field: PrinterSegment::ps_Version"]
        [::core::mem::offset_of!(PrinterSegment, ps_Version) - 8usize];
    ["Offset of field: PrinterSegment::ps_Revision"]
        [::core::mem::offset_of!(PrinterSegment, ps_Revision) - 10usize];
    ["Offset of field: PrinterSegment::ps_PED"]
        [::core::mem::offset_of!(PrinterSegment, ps_PED) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DTSpecialInfo {
    pub si_Lock: SignalSemaphore,
    pub si_Flags: ULONG,
    pub si_TopVert: LONG,
    pub si_VisVert: LONG,
    pub si_TotVert: LONG,
    pub si_OTopVert: LONG,
    pub si_VertUnit: LONG,
    pub si_TopHoriz: LONG,
    pub si_VisHoriz: LONG,
    pub si_TotHoriz: LONG,
    pub si_OTopHoriz: LONG,
    pub si_HorizUnit: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DTSpecialInfo"][::core::mem::size_of::<DTSpecialInfo>() - 90usize];
    ["Alignment of DTSpecialInfo"][::core::mem::align_of::<DTSpecialInfo>() - 2usize];
    ["Offset of field: DTSpecialInfo::si_Lock"]
        [::core::mem::offset_of!(DTSpecialInfo, si_Lock) - 0usize];
    ["Offset of field: DTSpecialInfo::si_Flags"]
        [::core::mem::offset_of!(DTSpecialInfo, si_Flags) - 46usize];
    ["Offset of field: DTSpecialInfo::si_TopVert"]
        [::core::mem::offset_of!(DTSpecialInfo, si_TopVert) - 50usize];
    ["Offset of field: DTSpecialInfo::si_VisVert"]
        [::core::mem::offset_of!(DTSpecialInfo, si_VisVert) - 54usize];
    ["Offset of field: DTSpecialInfo::si_TotVert"]
        [::core::mem::offset_of!(DTSpecialInfo, si_TotVert) - 58usize];
    ["Offset of field: DTSpecialInfo::si_OTopVert"]
        [::core::mem::offset_of!(DTSpecialInfo, si_OTopVert) - 62usize];
    ["Offset of field: DTSpecialInfo::si_VertUnit"]
        [::core::mem::offset_of!(DTSpecialInfo, si_VertUnit) - 66usize];
    ["Offset of field: DTSpecialInfo::si_TopHoriz"]
        [::core::mem::offset_of!(DTSpecialInfo, si_TopHoriz) - 70usize];
    ["Offset of field: DTSpecialInfo::si_VisHoriz"]
        [::core::mem::offset_of!(DTSpecialInfo, si_VisHoriz) - 74usize];
    ["Offset of field: DTSpecialInfo::si_TotHoriz"]
        [::core::mem::offset_of!(DTSpecialInfo, si_TotHoriz) - 78usize];
    ["Offset of field: DTSpecialInfo::si_OTopHoriz"]
        [::core::mem::offset_of!(DTSpecialInfo, si_OTopHoriz) - 82usize];
    ["Offset of field: DTSpecialInfo::si_HorizUnit"]
        [::core::mem::offset_of!(DTSpecialInfo, si_HorizUnit) - 86usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DTMethod {
    pub dtm_Label: STRPTR,
    pub dtm_Command: STRPTR,
    pub dtm_Method: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DTMethod"][::core::mem::size_of::<DTMethod>() - 12usize];
    ["Alignment of DTMethod"][::core::mem::align_of::<DTMethod>() - 2usize];
    ["Offset of field: DTMethod::dtm_Label"][::core::mem::offset_of!(DTMethod, dtm_Label) - 0usize];
    ["Offset of field: DTMethod::dtm_Command"]
        [::core::mem::offset_of!(DTMethod, dtm_Command) - 4usize];
    ["Offset of field: DTMethod::dtm_Method"]
        [::core::mem::offset_of!(DTMethod, dtm_Method) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FrameInfo {
    pub fri_PropertyFlags: ULONG,
    pub fri_Resolution: Point,
    pub fri_RedBits: UBYTE,
    pub fri_GreenBits: UBYTE,
    pub fri_BlueBits: UBYTE,
    pub fri_Dimensions: FrameInfo__bindgen_ty_1,
    pub fri_Screen: *mut Screen,
    pub fri_ColorMap: *mut ColorMap,
    pub fri_Flags: ULONG,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FrameInfo__bindgen_ty_1 {
    pub Width: ULONG,
    pub Height: ULONG,
    pub Depth: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FrameInfo__bindgen_ty_1"]
        [::core::mem::size_of::<FrameInfo__bindgen_ty_1>() - 12usize];
    ["Alignment of FrameInfo__bindgen_ty_1"]
        [::core::mem::align_of::<FrameInfo__bindgen_ty_1>() - 2usize];
    ["Offset of field: FrameInfo__bindgen_ty_1::Width"]
        [::core::mem::offset_of!(FrameInfo__bindgen_ty_1, Width) - 0usize];
    ["Offset of field: FrameInfo__bindgen_ty_1::Height"]
        [::core::mem::offset_of!(FrameInfo__bindgen_ty_1, Height) - 4usize];
    ["Offset of field: FrameInfo__bindgen_ty_1::Depth"]
        [::core::mem::offset_of!(FrameInfo__bindgen_ty_1, Depth) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FrameInfo"][::core::mem::size_of::<FrameInfo>() - 36usize];
    ["Alignment of FrameInfo"][::core::mem::align_of::<FrameInfo>() - 2usize];
    ["Offset of field: FrameInfo::fri_PropertyFlags"]
        [::core::mem::offset_of!(FrameInfo, fri_PropertyFlags) - 0usize];
    ["Offset of field: FrameInfo::fri_Resolution"]
        [::core::mem::offset_of!(FrameInfo, fri_Resolution) - 4usize];
    ["Offset of field: FrameInfo::fri_RedBits"]
        [::core::mem::offset_of!(FrameInfo, fri_RedBits) - 8usize];
    ["Offset of field: FrameInfo::fri_GreenBits"]
        [::core::mem::offset_of!(FrameInfo, fri_GreenBits) - 9usize];
    ["Offset of field: FrameInfo::fri_BlueBits"]
        [::core::mem::offset_of!(FrameInfo, fri_BlueBits) - 10usize];
    ["Offset of field: FrameInfo::fri_Dimensions"]
        [::core::mem::offset_of!(FrameInfo, fri_Dimensions) - 12usize];
    ["Offset of field: FrameInfo::fri_Screen"]
        [::core::mem::offset_of!(FrameInfo, fri_Screen) - 24usize];
    ["Offset of field: FrameInfo::fri_ColorMap"]
        [::core::mem::offset_of!(FrameInfo, fri_ColorMap) - 28usize];
    ["Offset of field: FrameInfo::fri_Flags"]
        [::core::mem::offset_of!(FrameInfo, fri_Flags) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct dtGeneral {
    pub MethodID: ULONG,
    pub dtg_GInfo: *mut GadgetInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtGeneral"][::core::mem::size_of::<dtGeneral>() - 8usize];
    ["Alignment of dtGeneral"][::core::mem::align_of::<dtGeneral>() - 2usize];
    ["Offset of field: dtGeneral::MethodID"][::core::mem::offset_of!(dtGeneral, MethodID) - 0usize];
    ["Offset of field: dtGeneral::dtg_GInfo"]
        [::core::mem::offset_of!(dtGeneral, dtg_GInfo) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct dtSelect {
    pub MethodID: ULONG,
    pub dts_GInfo: *mut GadgetInfo,
    pub dts_Select: Rectangle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtSelect"][::core::mem::size_of::<dtSelect>() - 16usize];
    ["Alignment of dtSelect"][::core::mem::align_of::<dtSelect>() - 2usize];
    ["Offset of field: dtSelect::MethodID"][::core::mem::offset_of!(dtSelect, MethodID) - 0usize];
    ["Offset of field: dtSelect::dts_GInfo"][::core::mem::offset_of!(dtSelect, dts_GInfo) - 4usize];
    ["Offset of field: dtSelect::dts_Select"]
        [::core::mem::offset_of!(dtSelect, dts_Select) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct dtFrameBox {
    pub MethodID: ULONG,
    pub dtf_GInfo: *mut GadgetInfo,
    pub dtf_ContentsInfo: *mut FrameInfo,
    pub dtf_FrameInfo: *mut FrameInfo,
    pub dtf_SizeFrameInfo: ULONG,
    pub dtf_FrameFlags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtFrameBox"][::core::mem::size_of::<dtFrameBox>() - 24usize];
    ["Alignment of dtFrameBox"][::core::mem::align_of::<dtFrameBox>() - 2usize];
    ["Offset of field: dtFrameBox::MethodID"]
        [::core::mem::offset_of!(dtFrameBox, MethodID) - 0usize];
    ["Offset of field: dtFrameBox::dtf_GInfo"]
        [::core::mem::offset_of!(dtFrameBox, dtf_GInfo) - 4usize];
    ["Offset of field: dtFrameBox::dtf_ContentsInfo"]
        [::core::mem::offset_of!(dtFrameBox, dtf_ContentsInfo) - 8usize];
    ["Offset of field: dtFrameBox::dtf_FrameInfo"]
        [::core::mem::offset_of!(dtFrameBox, dtf_FrameInfo) - 12usize];
    ["Offset of field: dtFrameBox::dtf_SizeFrameInfo"]
        [::core::mem::offset_of!(dtFrameBox, dtf_SizeFrameInfo) - 16usize];
    ["Offset of field: dtFrameBox::dtf_FrameFlags"]
        [::core::mem::offset_of!(dtFrameBox, dtf_FrameFlags) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct dtGoto {
    pub MethodID: ULONG,
    pub dtg_GInfo: *mut GadgetInfo,
    pub dtg_NodeName: STRPTR,
    pub dtg_AttrList: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtGoto"][::core::mem::size_of::<dtGoto>() - 16usize];
    ["Alignment of dtGoto"][::core::mem::align_of::<dtGoto>() - 2usize];
    ["Offset of field: dtGoto::MethodID"][::core::mem::offset_of!(dtGoto, MethodID) - 0usize];
    ["Offset of field: dtGoto::dtg_GInfo"][::core::mem::offset_of!(dtGoto, dtg_GInfo) - 4usize];
    ["Offset of field: dtGoto::dtg_NodeName"]
        [::core::mem::offset_of!(dtGoto, dtg_NodeName) - 8usize];
    ["Offset of field: dtGoto::dtg_AttrList"]
        [::core::mem::offset_of!(dtGoto, dtg_AttrList) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct dtTrigger {
    pub MethodID: ULONG,
    pub dtt_GInfo: *mut GadgetInfo,
    pub dtt_Function: ULONG,
    pub dtt_Data: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtTrigger"][::core::mem::size_of::<dtTrigger>() - 16usize];
    ["Alignment of dtTrigger"][::core::mem::align_of::<dtTrigger>() - 2usize];
    ["Offset of field: dtTrigger::MethodID"][::core::mem::offset_of!(dtTrigger, MethodID) - 0usize];
    ["Offset of field: dtTrigger::dtt_GInfo"]
        [::core::mem::offset_of!(dtTrigger, dtt_GInfo) - 4usize];
    ["Offset of field: dtTrigger::dtt_Function"]
        [::core::mem::offset_of!(dtTrigger, dtt_Function) - 8usize];
    ["Offset of field: dtTrigger::dtt_Data"]
        [::core::mem::offset_of!(dtTrigger, dtt_Data) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union printerIO {
    pub ios: IOStdReq,
    pub iodrp: IODRPReq,
    pub iopc: IOPrtCmdReq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of printerIO"][::core::mem::size_of::<printerIO>() - 62usize];
    ["Alignment of printerIO"][::core::mem::align_of::<printerIO>() - 2usize];
    ["Offset of field: printerIO::ios"][::core::mem::offset_of!(printerIO, ios) - 0usize];
    ["Offset of field: printerIO::iodrp"][::core::mem::offset_of!(printerIO, iodrp) - 0usize];
    ["Offset of field: printerIO::iopc"][::core::mem::offset_of!(printerIO, iopc) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct dtPrint {
    pub MethodID: ULONG,
    pub dtp_GInfo: *mut GadgetInfo,
    pub dtp_PIO: *mut printerIO,
    pub dtp_AttrList: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtPrint"][::core::mem::size_of::<dtPrint>() - 16usize];
    ["Alignment of dtPrint"][::core::mem::align_of::<dtPrint>() - 2usize];
    ["Offset of field: dtPrint::MethodID"][::core::mem::offset_of!(dtPrint, MethodID) - 0usize];
    ["Offset of field: dtPrint::dtp_GInfo"][::core::mem::offset_of!(dtPrint, dtp_GInfo) - 4usize];
    ["Offset of field: dtPrint::dtp_PIO"][::core::mem::offset_of!(dtPrint, dtp_PIO) - 8usize];
    ["Offset of field: dtPrint::dtp_AttrList"]
        [::core::mem::offset_of!(dtPrint, dtp_AttrList) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct dtDraw {
    pub MethodID: ULONG,
    pub dtd_RPort: *mut RastPort,
    pub dtd_Left: LONG,
    pub dtd_Top: LONG,
    pub dtd_Width: LONG,
    pub dtd_Height: LONG,
    pub dtd_TopHoriz: LONG,
    pub dtd_TopVert: LONG,
    pub dtd_AttrList: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtDraw"][::core::mem::size_of::<dtDraw>() - 36usize];
    ["Alignment of dtDraw"][::core::mem::align_of::<dtDraw>() - 2usize];
    ["Offset of field: dtDraw::MethodID"][::core::mem::offset_of!(dtDraw, MethodID) - 0usize];
    ["Offset of field: dtDraw::dtd_RPort"][::core::mem::offset_of!(dtDraw, dtd_RPort) - 4usize];
    ["Offset of field: dtDraw::dtd_Left"][::core::mem::offset_of!(dtDraw, dtd_Left) - 8usize];
    ["Offset of field: dtDraw::dtd_Top"][::core::mem::offset_of!(dtDraw, dtd_Top) - 12usize];
    ["Offset of field: dtDraw::dtd_Width"][::core::mem::offset_of!(dtDraw, dtd_Width) - 16usize];
    ["Offset of field: dtDraw::dtd_Height"][::core::mem::offset_of!(dtDraw, dtd_Height) - 20usize];
    ["Offset of field: dtDraw::dtd_TopHoriz"]
        [::core::mem::offset_of!(dtDraw, dtd_TopHoriz) - 24usize];
    ["Offset of field: dtDraw::dtd_TopVert"]
        [::core::mem::offset_of!(dtDraw, dtd_TopVert) - 28usize];
    ["Offset of field: dtDraw::dtd_AttrList"]
        [::core::mem::offset_of!(dtDraw, dtd_AttrList) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct dtWrite {
    pub MethodID: ULONG,
    pub dtw_GInfo: *mut GadgetInfo,
    pub dtw_FileHandle: BPTR,
    pub dtw_Mode: ULONG,
    pub dtw_AttrList: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dtWrite"][::core::mem::size_of::<dtWrite>() - 20usize];
    ["Alignment of dtWrite"][::core::mem::align_of::<dtWrite>() - 2usize];
    ["Offset of field: dtWrite::MethodID"][::core::mem::offset_of!(dtWrite, MethodID) - 0usize];
    ["Offset of field: dtWrite::dtw_GInfo"][::core::mem::offset_of!(dtWrite, dtw_GInfo) - 4usize];
    ["Offset of field: dtWrite::dtw_FileHandle"]
        [::core::mem::offset_of!(dtWrite, dtw_FileHandle) - 8usize];
    ["Offset of field: dtWrite::dtw_Mode"][::core::mem::offset_of!(dtWrite, dtw_Mode) - 12usize];
    ["Offset of field: dtWrite::dtw_AttrList"]
        [::core::mem::offset_of!(dtWrite, dtw_AttrList) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pdtBlitPixelArray {
    pub MethodID: ULONG,
    pub pbpa_PixelData: APTR,
    pub pbpa_PixelFormat: ULONG,
    pub pbpa_PixelArrayMod: ULONG,
    pub pbpa_Left: ULONG,
    pub pbpa_Top: ULONG,
    pub pbpa_Width: ULONG,
    pub pbpa_Height: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pdtBlitPixelArray"][::core::mem::size_of::<pdtBlitPixelArray>() - 32usize];
    ["Alignment of pdtBlitPixelArray"][::core::mem::align_of::<pdtBlitPixelArray>() - 2usize];
    ["Offset of field: pdtBlitPixelArray::MethodID"]
        [::core::mem::offset_of!(pdtBlitPixelArray, MethodID) - 0usize];
    ["Offset of field: pdtBlitPixelArray::pbpa_PixelData"]
        [::core::mem::offset_of!(pdtBlitPixelArray, pbpa_PixelData) - 4usize];
    ["Offset of field: pdtBlitPixelArray::pbpa_PixelFormat"]
        [::core::mem::offset_of!(pdtBlitPixelArray, pbpa_PixelFormat) - 8usize];
    ["Offset of field: pdtBlitPixelArray::pbpa_PixelArrayMod"]
        [::core::mem::offset_of!(pdtBlitPixelArray, pbpa_PixelArrayMod) - 12usize];
    ["Offset of field: pdtBlitPixelArray::pbpa_Left"]
        [::core::mem::offset_of!(pdtBlitPixelArray, pbpa_Left) - 16usize];
    ["Offset of field: pdtBlitPixelArray::pbpa_Top"]
        [::core::mem::offset_of!(pdtBlitPixelArray, pbpa_Top) - 20usize];
    ["Offset of field: pdtBlitPixelArray::pbpa_Width"]
        [::core::mem::offset_of!(pdtBlitPixelArray, pbpa_Width) - 24usize];
    ["Offset of field: pdtBlitPixelArray::pbpa_Height"]
        [::core::mem::offset_of!(pdtBlitPixelArray, pbpa_Height) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pdtScale {
    pub MethodID: ULONG,
    pub ps_NewWidth: ULONG,
    pub ps_NewHeight: ULONG,
    pub ps_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pdtScale"][::core::mem::size_of::<pdtScale>() - 16usize];
    ["Alignment of pdtScale"][::core::mem::align_of::<pdtScale>() - 2usize];
    ["Offset of field: pdtScale::MethodID"][::core::mem::offset_of!(pdtScale, MethodID) - 0usize];
    ["Offset of field: pdtScale::ps_NewWidth"]
        [::core::mem::offset_of!(pdtScale, ps_NewWidth) - 4usize];
    ["Offset of field: pdtScale::ps_NewHeight"]
        [::core::mem::offset_of!(pdtScale, ps_NewHeight) - 8usize];
    ["Offset of field: pdtScale::ps_Flags"][::core::mem::offset_of!(pdtScale, ps_Flags) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pdtObtainPixelArray {
    pub MethodID: ULONG,
    pub popa_PixelArray: *mut pdtBlitPixelArray,
    pub popa_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pdtObtainPixelArray"][::core::mem::size_of::<pdtObtainPixelArray>() - 12usize];
    ["Alignment of pdtObtainPixelArray"][::core::mem::align_of::<pdtObtainPixelArray>() - 2usize];
    ["Offset of field: pdtObtainPixelArray::MethodID"]
        [::core::mem::offset_of!(pdtObtainPixelArray, MethodID) - 0usize];
    ["Offset of field: pdtObtainPixelArray::popa_PixelArray"]
        [::core::mem::offset_of!(pdtObtainPixelArray, popa_PixelArray) - 4usize];
    ["Offset of field: pdtObtainPixelArray::popa_Flags"]
        [::core::mem::offset_of!(pdtObtainPixelArray, popa_Flags) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitMapHeader {
    pub bmh_Width: UWORD,
    pub bmh_Height: UWORD,
    pub bmh_Left: WORD,
    pub bmh_Top: WORD,
    pub bmh_Depth: UBYTE,
    pub bmh_Masking: UBYTE,
    pub bmh_Compression: UBYTE,
    pub bmh_Pad: UBYTE,
    pub bmh_Transparent: UWORD,
    pub bmh_XAspect: UBYTE,
    pub bmh_YAspect: UBYTE,
    pub bmh_PageWidth: WORD,
    pub bmh_PageHeight: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BitMapHeader"][::core::mem::size_of::<BitMapHeader>() - 20usize];
    ["Alignment of BitMapHeader"][::core::mem::align_of::<BitMapHeader>() - 2usize];
    ["Offset of field: BitMapHeader::bmh_Width"]
        [::core::mem::offset_of!(BitMapHeader, bmh_Width) - 0usize];
    ["Offset of field: BitMapHeader::bmh_Height"]
        [::core::mem::offset_of!(BitMapHeader, bmh_Height) - 2usize];
    ["Offset of field: BitMapHeader::bmh_Left"]
        [::core::mem::offset_of!(BitMapHeader, bmh_Left) - 4usize];
    ["Offset of field: BitMapHeader::bmh_Top"]
        [::core::mem::offset_of!(BitMapHeader, bmh_Top) - 6usize];
    ["Offset of field: BitMapHeader::bmh_Depth"]
        [::core::mem::offset_of!(BitMapHeader, bmh_Depth) - 8usize];
    ["Offset of field: BitMapHeader::bmh_Masking"]
        [::core::mem::offset_of!(BitMapHeader, bmh_Masking) - 9usize];
    ["Offset of field: BitMapHeader::bmh_Compression"]
        [::core::mem::offset_of!(BitMapHeader, bmh_Compression) - 10usize];
    ["Offset of field: BitMapHeader::bmh_Pad"]
        [::core::mem::offset_of!(BitMapHeader, bmh_Pad) - 11usize];
    ["Offset of field: BitMapHeader::bmh_Transparent"]
        [::core::mem::offset_of!(BitMapHeader, bmh_Transparent) - 12usize];
    ["Offset of field: BitMapHeader::bmh_XAspect"]
        [::core::mem::offset_of!(BitMapHeader, bmh_XAspect) - 14usize];
    ["Offset of field: BitMapHeader::bmh_YAspect"]
        [::core::mem::offset_of!(BitMapHeader, bmh_YAspect) - 15usize];
    ["Offset of field: BitMapHeader::bmh_PageWidth"]
        [::core::mem::offset_of!(BitMapHeader, bmh_PageWidth) - 16usize];
    ["Offset of field: BitMapHeader::bmh_PageHeight"]
        [::core::mem::offset_of!(BitMapHeader, bmh_PageHeight) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[repr(align(2))]
pub struct ColorRegister {
    pub red: UBYTE,
    pub green: UBYTE,
    pub blue: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorRegister"][::core::mem::size_of::<ColorRegister>() - 4usize];
    ["Alignment of ColorRegister"][::core::mem::align_of::<ColorRegister>() - 2usize];
    ["Offset of field: ColorRegister::red"][::core::mem::offset_of!(ColorRegister, red) - 0usize];
    ["Offset of field: ColorRegister::green"]
        [::core::mem::offset_of!(ColorRegister, green) - 1usize];
    ["Offset of field: ColorRegister::blue"][::core::mem::offset_of!(ColorRegister, blue) - 2usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct VoiceHeader {
    pub vh_OneShotHiSamples: ULONG,
    pub vh_RepeatHiSamples: ULONG,
    pub vh_SamplesPerHiCycle: ULONG,
    pub vh_SamplesPerSec: UWORD,
    pub vh_Octaves: UBYTE,
    pub vh_Compression: UBYTE,
    pub vh_Volume: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoiceHeader"][::core::mem::size_of::<VoiceHeader>() - 20usize];
    ["Alignment of VoiceHeader"][::core::mem::align_of::<VoiceHeader>() - 2usize];
    ["Offset of field: VoiceHeader::vh_OneShotHiSamples"]
        [::core::mem::offset_of!(VoiceHeader, vh_OneShotHiSamples) - 0usize];
    ["Offset of field: VoiceHeader::vh_RepeatHiSamples"]
        [::core::mem::offset_of!(VoiceHeader, vh_RepeatHiSamples) - 4usize];
    ["Offset of field: VoiceHeader::vh_SamplesPerHiCycle"]
        [::core::mem::offset_of!(VoiceHeader, vh_SamplesPerHiCycle) - 8usize];
    ["Offset of field: VoiceHeader::vh_SamplesPerSec"]
        [::core::mem::offset_of!(VoiceHeader, vh_SamplesPerSec) - 12usize];
    ["Offset of field: VoiceHeader::vh_Octaves"]
        [::core::mem::offset_of!(VoiceHeader, vh_Octaves) - 14usize];
    ["Offset of field: VoiceHeader::vh_Compression"]
        [::core::mem::offset_of!(VoiceHeader, vh_Compression) - 15usize];
    ["Offset of field: VoiceHeader::vh_Volume"]
        [::core::mem::offset_of!(VoiceHeader, vh_Volume) - 16usize];
};
pub type SampleType = ::core::ffi::c_long;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AnimHeader {
    pub ah_Operation: UBYTE,
    pub ah_Mask: UBYTE,
    pub ah_Width: UWORD,
    pub ah_Height: UWORD,
    pub ah_Left: WORD,
    pub ah_Top: WORD,
    pub ah_AbsTime: ULONG,
    pub ah_RelTime: ULONG,
    pub ah_Interleave: UBYTE,
    pub ah_Pad0: UBYTE,
    pub ah_Flags: ULONG,
    pub ah_Pad: [UBYTE; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnimHeader"][::core::mem::size_of::<AnimHeader>() - 40usize];
    ["Alignment of AnimHeader"][::core::mem::align_of::<AnimHeader>() - 2usize];
    ["Offset of field: AnimHeader::ah_Operation"]
        [::core::mem::offset_of!(AnimHeader, ah_Operation) - 0usize];
    ["Offset of field: AnimHeader::ah_Mask"][::core::mem::offset_of!(AnimHeader, ah_Mask) - 1usize];
    ["Offset of field: AnimHeader::ah_Width"]
        [::core::mem::offset_of!(AnimHeader, ah_Width) - 2usize];
    ["Offset of field: AnimHeader::ah_Height"]
        [::core::mem::offset_of!(AnimHeader, ah_Height) - 4usize];
    ["Offset of field: AnimHeader::ah_Left"][::core::mem::offset_of!(AnimHeader, ah_Left) - 6usize];
    ["Offset of field: AnimHeader::ah_Top"][::core::mem::offset_of!(AnimHeader, ah_Top) - 8usize];
    ["Offset of field: AnimHeader::ah_AbsTime"]
        [::core::mem::offset_of!(AnimHeader, ah_AbsTime) - 10usize];
    ["Offset of field: AnimHeader::ah_RelTime"]
        [::core::mem::offset_of!(AnimHeader, ah_RelTime) - 14usize];
    ["Offset of field: AnimHeader::ah_Interleave"]
        [::core::mem::offset_of!(AnimHeader, ah_Interleave) - 18usize];
    ["Offset of field: AnimHeader::ah_Pad0"]
        [::core::mem::offset_of!(AnimHeader, ah_Pad0) - 19usize];
    ["Offset of field: AnimHeader::ah_Flags"]
        [::core::mem::offset_of!(AnimHeader, ah_Flags) - 20usize];
    ["Offset of field: AnimHeader::ah_Pad"][::core::mem::offset_of!(AnimHeader, ah_Pad) - 24usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct adtFrame {
    pub MethodID: ULONG,
    pub alf_TimeStamp: ULONG,
    pub alf_Frame: ULONG,
    pub alf_Duration: ULONG,
    pub alf_BitMap: *mut BitMap,
    pub alf_CMap: *mut ColorMap,
    pub alf_Sample: *mut BYTE,
    pub alf_SampleLength: ULONG,
    pub alf_Period: ULONG,
    pub alf_UserData: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of adtFrame"][::core::mem::size_of::<adtFrame>() - 40usize];
    ["Alignment of adtFrame"][::core::mem::align_of::<adtFrame>() - 2usize];
    ["Offset of field: adtFrame::MethodID"][::core::mem::offset_of!(adtFrame, MethodID) - 0usize];
    ["Offset of field: adtFrame::alf_TimeStamp"]
        [::core::mem::offset_of!(adtFrame, alf_TimeStamp) - 4usize];
    ["Offset of field: adtFrame::alf_Frame"][::core::mem::offset_of!(adtFrame, alf_Frame) - 8usize];
    ["Offset of field: adtFrame::alf_Duration"]
        [::core::mem::offset_of!(adtFrame, alf_Duration) - 12usize];
    ["Offset of field: adtFrame::alf_BitMap"]
        [::core::mem::offset_of!(adtFrame, alf_BitMap) - 16usize];
    ["Offset of field: adtFrame::alf_CMap"][::core::mem::offset_of!(adtFrame, alf_CMap) - 20usize];
    ["Offset of field: adtFrame::alf_Sample"]
        [::core::mem::offset_of!(adtFrame, alf_Sample) - 24usize];
    ["Offset of field: adtFrame::alf_SampleLength"]
        [::core::mem::offset_of!(adtFrame, alf_SampleLength) - 28usize];
    ["Offset of field: adtFrame::alf_Period"]
        [::core::mem::offset_of!(adtFrame, alf_Period) - 32usize];
    ["Offset of field: adtFrame::alf_UserData"]
        [::core::mem::offset_of!(adtFrame, alf_UserData) - 36usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct adtNewFormatFrame {
    pub MethodID: ULONG,
    pub alf_TimeStamp: ULONG,
    pub alf_Frame: ULONG,
    pub alf_Duration: ULONG,
    pub alf_BitMap: *mut BitMap,
    pub alf_CMap: *mut ColorMap,
    pub alf_Sample: *mut BYTE,
    pub alf_SampleLength: ULONG,
    pub alf_Period: ULONG,
    pub alf_UserData: APTR,
    pub alf_Size: ULONG,
    pub alf_LeftSample: *mut BYTE,
    pub alf_RightSample: *mut BYTE,
    pub alf_SamplesPerSec: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of adtNewFormatFrame"][::core::mem::size_of::<adtNewFormatFrame>() - 56usize];
    ["Alignment of adtNewFormatFrame"][::core::mem::align_of::<adtNewFormatFrame>() - 2usize];
    ["Offset of field: adtNewFormatFrame::MethodID"]
        [::core::mem::offset_of!(adtNewFormatFrame, MethodID) - 0usize];
    ["Offset of field: adtNewFormatFrame::alf_TimeStamp"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_TimeStamp) - 4usize];
    ["Offset of field: adtNewFormatFrame::alf_Frame"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_Frame) - 8usize];
    ["Offset of field: adtNewFormatFrame::alf_Duration"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_Duration) - 12usize];
    ["Offset of field: adtNewFormatFrame::alf_BitMap"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_BitMap) - 16usize];
    ["Offset of field: adtNewFormatFrame::alf_CMap"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_CMap) - 20usize];
    ["Offset of field: adtNewFormatFrame::alf_Sample"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_Sample) - 24usize];
    ["Offset of field: adtNewFormatFrame::alf_SampleLength"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_SampleLength) - 28usize];
    ["Offset of field: adtNewFormatFrame::alf_Period"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_Period) - 32usize];
    ["Offset of field: adtNewFormatFrame::alf_UserData"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_UserData) - 36usize];
    ["Offset of field: adtNewFormatFrame::alf_Size"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_Size) - 40usize];
    ["Offset of field: adtNewFormatFrame::alf_LeftSample"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_LeftSample) - 44usize];
    ["Offset of field: adtNewFormatFrame::alf_RightSample"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_RightSample) - 48usize];
    ["Offset of field: adtNewFormatFrame::alf_SamplesPerSec"]
        [::core::mem::offset_of!(adtNewFormatFrame, alf_SamplesPerSec) - 52usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct adtStart {
    pub MethodID: ULONG,
    pub asa_Frame: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of adtStart"][::core::mem::size_of::<adtStart>() - 8usize];
    ["Alignment of adtStart"][::core::mem::align_of::<adtStart>() - 2usize];
    ["Offset of field: adtStart::MethodID"][::core::mem::offset_of!(adtStart, MethodID) - 0usize];
    ["Offset of field: adtStart::asa_Frame"][::core::mem::offset_of!(adtStart, asa_Frame) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Line {
    pub ln_Link: MinNode,
    pub ln_Text: STRPTR,
    pub ln_TextLen: ULONG,
    pub ln_XOffset: UWORD,
    pub ln_YOffset: UWORD,
    pub ln_Width: UWORD,
    pub ln_Height: UWORD,
    pub ln_Flags: UWORD,
    pub ln_FgPen: BYTE,
    pub ln_BgPen: BYTE,
    pub ln_Style: ULONG,
    pub ln_Data: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Line"][::core::mem::size_of::<Line>() - 36usize];
    ["Alignment of Line"][::core::mem::align_of::<Line>() - 2usize];
    ["Offset of field: Line::ln_Link"][::core::mem::offset_of!(Line, ln_Link) - 0usize];
    ["Offset of field: Line::ln_Text"][::core::mem::offset_of!(Line, ln_Text) - 8usize];
    ["Offset of field: Line::ln_TextLen"][::core::mem::offset_of!(Line, ln_TextLen) - 12usize];
    ["Offset of field: Line::ln_XOffset"][::core::mem::offset_of!(Line, ln_XOffset) - 16usize];
    ["Offset of field: Line::ln_YOffset"][::core::mem::offset_of!(Line, ln_YOffset) - 18usize];
    ["Offset of field: Line::ln_Width"][::core::mem::offset_of!(Line, ln_Width) - 20usize];
    ["Offset of field: Line::ln_Height"][::core::mem::offset_of!(Line, ln_Height) - 22usize];
    ["Offset of field: Line::ln_Flags"][::core::mem::offset_of!(Line, ln_Flags) - 24usize];
    ["Offset of field: Line::ln_FgPen"][::core::mem::offset_of!(Line, ln_FgPen) - 26usize];
    ["Offset of field: Line::ln_BgPen"][::core::mem::offset_of!(Line, ln_BgPen) - 27usize];
    ["Offset of field: Line::ln_Style"][::core::mem::offset_of!(Line, ln_Style) - 28usize];
    ["Offset of field: Line::ln_Data"][::core::mem::offset_of!(Line, ln_Data) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOAudio {
    pub ioa_Request: IORequest,
    pub ioa_AllocKey: WORD,
    pub ioa_Data: *mut UBYTE,
    pub ioa_Length: ULONG,
    pub ioa_Period: UWORD,
    pub ioa_Volume: UWORD,
    pub ioa_Cycles: UWORD,
    pub ioa_WriteMsg: Message,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOAudio"][::core::mem::size_of::<IOAudio>() - 68usize];
    ["Alignment of IOAudio"][::core::mem::align_of::<IOAudio>() - 2usize];
    ["Offset of field: IOAudio::ioa_Request"]
        [::core::mem::offset_of!(IOAudio, ioa_Request) - 0usize];
    ["Offset of field: IOAudio::ioa_AllocKey"]
        [::core::mem::offset_of!(IOAudio, ioa_AllocKey) - 32usize];
    ["Offset of field: IOAudio::ioa_Data"][::core::mem::offset_of!(IOAudio, ioa_Data) - 34usize];
    ["Offset of field: IOAudio::ioa_Length"]
        [::core::mem::offset_of!(IOAudio, ioa_Length) - 38usize];
    ["Offset of field: IOAudio::ioa_Period"]
        [::core::mem::offset_of!(IOAudio, ioa_Period) - 42usize];
    ["Offset of field: IOAudio::ioa_Volume"]
        [::core::mem::offset_of!(IOAudio, ioa_Volume) - 44usize];
    ["Offset of field: IOAudio::ioa_Cycles"]
        [::core::mem::offset_of!(IOAudio, ioa_Cycles) - 46usize];
    ["Offset of field: IOAudio::ioa_WriteMsg"]
        [::core::mem::offset_of!(IOAudio, ioa_WriteMsg) - 48usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BootBlock {
    pub bb_id: [UBYTE; 4usize],
    pub bb_chksum: LONG,
    pub bb_dosblock: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BootBlock"][::core::mem::size_of::<BootBlock>() - 12usize];
    ["Alignment of BootBlock"][::core::mem::align_of::<BootBlock>() - 2usize];
    ["Offset of field: BootBlock::bb_id"][::core::mem::offset_of!(BootBlock, bb_id) - 0usize];
    ["Offset of field: BootBlock::bb_chksum"]
        [::core::mem::offset_of!(BootBlock, bb_chksum) - 4usize];
    ["Offset of field: BootBlock::bb_dosblock"]
        [::core::mem::offset_of!(BootBlock, bb_dosblock) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDInfo {
    pub PlaySpeed: UWORD,
    pub ReadSpeed: UWORD,
    pub ReadXLSpeed: UWORD,
    pub SectorSize: UWORD,
    pub XLECC: UWORD,
    pub EjectReset: UWORD,
    pub Reserved1: [UWORD; 4usize],
    pub MaxSpeed: UWORD,
    pub AudioPrecision: UWORD,
    pub Status: UWORD,
    pub Reserved2: [UWORD; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CDInfo"][::core::mem::size_of::<CDInfo>() - 34usize];
    ["Alignment of CDInfo"][::core::mem::align_of::<CDInfo>() - 2usize];
    ["Offset of field: CDInfo::PlaySpeed"][::core::mem::offset_of!(CDInfo, PlaySpeed) - 0usize];
    ["Offset of field: CDInfo::ReadSpeed"][::core::mem::offset_of!(CDInfo, ReadSpeed) - 2usize];
    ["Offset of field: CDInfo::ReadXLSpeed"][::core::mem::offset_of!(CDInfo, ReadXLSpeed) - 4usize];
    ["Offset of field: CDInfo::SectorSize"][::core::mem::offset_of!(CDInfo, SectorSize) - 6usize];
    ["Offset of field: CDInfo::XLECC"][::core::mem::offset_of!(CDInfo, XLECC) - 8usize];
    ["Offset of field: CDInfo::EjectReset"][::core::mem::offset_of!(CDInfo, EjectReset) - 10usize];
    ["Offset of field: CDInfo::Reserved1"][::core::mem::offset_of!(CDInfo, Reserved1) - 12usize];
    ["Offset of field: CDInfo::MaxSpeed"][::core::mem::offset_of!(CDInfo, MaxSpeed) - 20usize];
    ["Offset of field: CDInfo::AudioPrecision"]
        [::core::mem::offset_of!(CDInfo, AudioPrecision) - 22usize];
    ["Offset of field: CDInfo::Status"][::core::mem::offset_of!(CDInfo, Status) - 24usize];
    ["Offset of field: CDInfo::Reserved2"][::core::mem::offset_of!(CDInfo, Reserved2) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RMSF {
    pub Reserved: UBYTE,
    pub Minute: UBYTE,
    pub Second: UBYTE,
    pub Frame: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RMSF"][::core::mem::size_of::<RMSF>() - 4usize];
    ["Alignment of RMSF"][::core::mem::align_of::<RMSF>() - 1usize];
    ["Offset of field: RMSF::Reserved"][::core::mem::offset_of!(RMSF, Reserved) - 0usize];
    ["Offset of field: RMSF::Minute"][::core::mem::offset_of!(RMSF, Minute) - 1usize];
    ["Offset of field: RMSF::Second"][::core::mem::offset_of!(RMSF, Second) - 2usize];
    ["Offset of field: RMSF::Frame"][::core::mem::offset_of!(RMSF, Frame) - 3usize];
};
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union LSNMSF {
    pub MSF: RMSF,
    pub LSN: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LSNMSF"][::core::mem::size_of::<LSNMSF>() - 4usize];
    ["Alignment of LSNMSF"][::core::mem::align_of::<LSNMSF>() - 2usize];
    ["Offset of field: LSNMSF::MSF"][::core::mem::offset_of!(LSNMSF, MSF) - 0usize];
    ["Offset of field: LSNMSF::LSN"][::core::mem::offset_of!(LSNMSF, LSN) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CDXL {
    pub Node: MinNode,
    pub Buffer: *mut BYTE,
    pub Length: LONG,
    pub Actual: LONG,
    pub IntData: APTR,
    pub IntCode: FPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CDXL"][::core::mem::size_of::<CDXL>() - 28usize];
    ["Alignment of CDXL"][::core::mem::align_of::<CDXL>() - 2usize];
    ["Offset of field: CDXL::Node"][::core::mem::offset_of!(CDXL, Node) - 0usize];
    ["Offset of field: CDXL::Buffer"][::core::mem::offset_of!(CDXL, Buffer) - 8usize];
    ["Offset of field: CDXL::Length"][::core::mem::offset_of!(CDXL, Length) - 12usize];
    ["Offset of field: CDXL::Actual"][::core::mem::offset_of!(CDXL, Actual) - 16usize];
    ["Offset of field: CDXL::IntData"][::core::mem::offset_of!(CDXL, IntData) - 20usize];
    ["Offset of field: CDXL::IntCode"][::core::mem::offset_of!(CDXL, IntCode) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TOCSummary {
    pub FirstTrack: UBYTE,
    pub LastTrack: UBYTE,
    pub LeadOut: LSNMSF,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TOCSummary"][::core::mem::size_of::<TOCSummary>() - 6usize];
    ["Alignment of TOCSummary"][::core::mem::align_of::<TOCSummary>() - 2usize];
    ["Offset of field: TOCSummary::FirstTrack"]
        [::core::mem::offset_of!(TOCSummary, FirstTrack) - 0usize];
    ["Offset of field: TOCSummary::LastTrack"]
        [::core::mem::offset_of!(TOCSummary, LastTrack) - 1usize];
    ["Offset of field: TOCSummary::LeadOut"][::core::mem::offset_of!(TOCSummary, LeadOut) - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TOCEntry {
    pub CtlAdr: UBYTE,
    pub Track: UBYTE,
    pub Position: LSNMSF,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TOCEntry"][::core::mem::size_of::<TOCEntry>() - 6usize];
    ["Alignment of TOCEntry"][::core::mem::align_of::<TOCEntry>() - 2usize];
    ["Offset of field: TOCEntry::CtlAdr"][::core::mem::offset_of!(TOCEntry, CtlAdr) - 0usize];
    ["Offset of field: TOCEntry::Track"][::core::mem::offset_of!(TOCEntry, Track) - 1usize];
    ["Offset of field: TOCEntry::Position"][::core::mem::offset_of!(TOCEntry, Position) - 2usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union CDTOC {
    pub Summary: TOCSummary,
    pub Entry: TOCEntry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CDTOC"][::core::mem::size_of::<CDTOC>() - 6usize];
    ["Alignment of CDTOC"][::core::mem::align_of::<CDTOC>() - 2usize];
    ["Offset of field: CDTOC::Summary"][::core::mem::offset_of!(CDTOC, Summary) - 0usize];
    ["Offset of field: CDTOC::Entry"][::core::mem::offset_of!(CDTOC, Entry) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct QCode {
    pub CtlAdr: UBYTE,
    pub Track: UBYTE,
    pub Index: UBYTE,
    pub Zero: UBYTE,
    pub TrackPosition: LSNMSF,
    pub DiskPosition: LSNMSF,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of QCode"][::core::mem::size_of::<QCode>() - 12usize];
    ["Alignment of QCode"][::core::mem::align_of::<QCode>() - 2usize];
    ["Offset of field: QCode::CtlAdr"][::core::mem::offset_of!(QCode, CtlAdr) - 0usize];
    ["Offset of field: QCode::Track"][::core::mem::offset_of!(QCode, Track) - 1usize];
    ["Offset of field: QCode::Index"][::core::mem::offset_of!(QCode, Index) - 2usize];
    ["Offset of field: QCode::Zero"][::core::mem::offset_of!(QCode, Zero) - 3usize];
    ["Offset of field: QCode::TrackPosition"]
        [::core::mem::offset_of!(QCode, TrackPosition) - 4usize];
    ["Offset of field: QCode::DiskPosition"][::core::mem::offset_of!(QCode, DiskPosition) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ConsoleScrollback {
    pub cs_ScrollerGadget: APTR,
    pub cs_NumLines: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ConsoleScrollback"][::core::mem::size_of::<ConsoleScrollback>() - 6usize];
    ["Alignment of ConsoleScrollback"][::core::mem::align_of::<ConsoleScrollback>() - 2usize];
    ["Offset of field: ConsoleScrollback::cs_ScrollerGadget"]
        [::core::mem::offset_of!(ConsoleScrollback, cs_ScrollerGadget) - 0usize];
    ["Offset of field: ConsoleScrollback::cs_NumLines"]
        [::core::mem::offset_of!(ConsoleScrollback, cs_NumLines) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KeyMapResource {
    pub kr_Node: Node,
    pub kr_List: List,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KeyMapResource"][::core::mem::size_of::<KeyMapResource>() - 28usize];
    ["Alignment of KeyMapResource"][::core::mem::align_of::<KeyMapResource>() - 2usize];
    ["Offset of field: KeyMapResource::kr_Node"]
        [::core::mem::offset_of!(KeyMapResource, kr_Node) - 0usize];
    ["Offset of field: KeyMapResource::kr_List"]
        [::core::mem::offset_of!(KeyMapResource, kr_List) - 14usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct KeyMap {
    pub km_LoKeyMapTypes: *mut UBYTE,
    pub km_LoKeyMap: *mut ULONG,
    pub km_LoCapsable: *mut UBYTE,
    pub km_LoRepeatable: *mut UBYTE,
    pub km_HiKeyMapTypes: *mut UBYTE,
    pub km_HiKeyMap: *mut ULONG,
    pub km_HiCapsable: *mut UBYTE,
    pub km_HiRepeatable: *mut UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KeyMap"][::core::mem::size_of::<KeyMap>() - 32usize];
    ["Alignment of KeyMap"][::core::mem::align_of::<KeyMap>() - 2usize];
    ["Offset of field: KeyMap::km_LoKeyMapTypes"]
        [::core::mem::offset_of!(KeyMap, km_LoKeyMapTypes) - 0usize];
    ["Offset of field: KeyMap::km_LoKeyMap"][::core::mem::offset_of!(KeyMap, km_LoKeyMap) - 4usize];
    ["Offset of field: KeyMap::km_LoCapsable"]
        [::core::mem::offset_of!(KeyMap, km_LoCapsable) - 8usize];
    ["Offset of field: KeyMap::km_LoRepeatable"]
        [::core::mem::offset_of!(KeyMap, km_LoRepeatable) - 12usize];
    ["Offset of field: KeyMap::km_HiKeyMapTypes"]
        [::core::mem::offset_of!(KeyMap, km_HiKeyMapTypes) - 16usize];
    ["Offset of field: KeyMap::km_HiKeyMap"]
        [::core::mem::offset_of!(KeyMap, km_HiKeyMap) - 20usize];
    ["Offset of field: KeyMap::km_HiCapsable"]
        [::core::mem::offset_of!(KeyMap, km_HiCapsable) - 24usize];
    ["Offset of field: KeyMap::km_HiRepeatable"]
        [::core::mem::offset_of!(KeyMap, km_HiRepeatable) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KeyMapNode {
    pub kn_Node: Node,
    pub kn_KeyMap: KeyMap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KeyMapNode"][::core::mem::size_of::<KeyMapNode>() - 46usize];
    ["Alignment of KeyMapNode"][::core::mem::align_of::<KeyMapNode>() - 2usize];
    ["Offset of field: KeyMapNode::kn_Node"][::core::mem::offset_of!(KeyMapNode, kn_Node) - 0usize];
    ["Offset of field: KeyMapNode::kn_KeyMap"]
        [::core::mem::offset_of!(KeyMapNode, kn_KeyMap) - 14usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ConUnit {
    pub cu_MP: MsgPort,
    pub cu_Window: *mut Window,
    pub cu_XCP: WORD,
    pub cu_YCP: WORD,
    pub cu_XMax: WORD,
    pub cu_YMax: WORD,
    pub cu_XRSize: WORD,
    pub cu_YRSize: WORD,
    pub cu_XROrigin: WORD,
    pub cu_YROrigin: WORD,
    pub cu_XRExtant: WORD,
    pub cu_YRExtant: WORD,
    pub cu_XMinShrink: WORD,
    pub cu_YMinShrink: WORD,
    pub cu_XCCP: WORD,
    pub cu_YCCP: WORD,
    pub cu_KeyMapStruct: KeyMap,
    pub cu_TabStops: [UWORD; 80usize],
    pub cu_Mask: BYTE,
    pub cu_FgPen: BYTE,
    pub cu_BgPen: BYTE,
    pub cu_AOLPen: BYTE,
    pub cu_DrawMode: BYTE,
    pub cu_Obsolete1: BYTE,
    pub cu_Obsolete2: APTR,
    pub cu_Minterms: [UBYTE; 8usize],
    pub cu_Font: *mut TextFont,
    pub cu_AlgoStyle: UBYTE,
    pub cu_TxFlags: UBYTE,
    pub cu_TxHeight: UWORD,
    pub cu_TxWidth: UWORD,
    pub cu_TxBaseline: UWORD,
    pub cu_TxSpacing: WORD,
    pub cu_Modes: [UBYTE; 3usize],
    pub cu_RawEvents: [UBYTE; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ConUnit"][::core::mem::size_of::<ConUnit>() - 296usize];
    ["Alignment of ConUnit"][::core::mem::align_of::<ConUnit>() - 2usize];
    ["Offset of field: ConUnit::cu_MP"][::core::mem::offset_of!(ConUnit, cu_MP) - 0usize];
    ["Offset of field: ConUnit::cu_Window"][::core::mem::offset_of!(ConUnit, cu_Window) - 34usize];
    ["Offset of field: ConUnit::cu_XCP"][::core::mem::offset_of!(ConUnit, cu_XCP) - 38usize];
    ["Offset of field: ConUnit::cu_YCP"][::core::mem::offset_of!(ConUnit, cu_YCP) - 40usize];
    ["Offset of field: ConUnit::cu_XMax"][::core::mem::offset_of!(ConUnit, cu_XMax) - 42usize];
    ["Offset of field: ConUnit::cu_YMax"][::core::mem::offset_of!(ConUnit, cu_YMax) - 44usize];
    ["Offset of field: ConUnit::cu_XRSize"][::core::mem::offset_of!(ConUnit, cu_XRSize) - 46usize];
    ["Offset of field: ConUnit::cu_YRSize"][::core::mem::offset_of!(ConUnit, cu_YRSize) - 48usize];
    ["Offset of field: ConUnit::cu_XROrigin"]
        [::core::mem::offset_of!(ConUnit, cu_XROrigin) - 50usize];
    ["Offset of field: ConUnit::cu_YROrigin"]
        [::core::mem::offset_of!(ConUnit, cu_YROrigin) - 52usize];
    ["Offset of field: ConUnit::cu_XRExtant"]
        [::core::mem::offset_of!(ConUnit, cu_XRExtant) - 54usize];
    ["Offset of field: ConUnit::cu_YRExtant"]
        [::core::mem::offset_of!(ConUnit, cu_YRExtant) - 56usize];
    ["Offset of field: ConUnit::cu_XMinShrink"]
        [::core::mem::offset_of!(ConUnit, cu_XMinShrink) - 58usize];
    ["Offset of field: ConUnit::cu_YMinShrink"]
        [::core::mem::offset_of!(ConUnit, cu_YMinShrink) - 60usize];
    ["Offset of field: ConUnit::cu_XCCP"][::core::mem::offset_of!(ConUnit, cu_XCCP) - 62usize];
    ["Offset of field: ConUnit::cu_YCCP"][::core::mem::offset_of!(ConUnit, cu_YCCP) - 64usize];
    ["Offset of field: ConUnit::cu_KeyMapStruct"]
        [::core::mem::offset_of!(ConUnit, cu_KeyMapStruct) - 66usize];
    ["Offset of field: ConUnit::cu_TabStops"]
        [::core::mem::offset_of!(ConUnit, cu_TabStops) - 98usize];
    ["Offset of field: ConUnit::cu_Mask"][::core::mem::offset_of!(ConUnit, cu_Mask) - 258usize];
    ["Offset of field: ConUnit::cu_FgPen"][::core::mem::offset_of!(ConUnit, cu_FgPen) - 259usize];
    ["Offset of field: ConUnit::cu_BgPen"][::core::mem::offset_of!(ConUnit, cu_BgPen) - 260usize];
    ["Offset of field: ConUnit::cu_AOLPen"][::core::mem::offset_of!(ConUnit, cu_AOLPen) - 261usize];
    ["Offset of field: ConUnit::cu_DrawMode"]
        [::core::mem::offset_of!(ConUnit, cu_DrawMode) - 262usize];
    ["Offset of field: ConUnit::cu_Obsolete1"]
        [::core::mem::offset_of!(ConUnit, cu_Obsolete1) - 263usize];
    ["Offset of field: ConUnit::cu_Obsolete2"]
        [::core::mem::offset_of!(ConUnit, cu_Obsolete2) - 264usize];
    ["Offset of field: ConUnit::cu_Minterms"]
        [::core::mem::offset_of!(ConUnit, cu_Minterms) - 268usize];
    ["Offset of field: ConUnit::cu_Font"][::core::mem::offset_of!(ConUnit, cu_Font) - 276usize];
    ["Offset of field: ConUnit::cu_AlgoStyle"]
        [::core::mem::offset_of!(ConUnit, cu_AlgoStyle) - 280usize];
    ["Offset of field: ConUnit::cu_TxFlags"]
        [::core::mem::offset_of!(ConUnit, cu_TxFlags) - 281usize];
    ["Offset of field: ConUnit::cu_TxHeight"]
        [::core::mem::offset_of!(ConUnit, cu_TxHeight) - 282usize];
    ["Offset of field: ConUnit::cu_TxWidth"]
        [::core::mem::offset_of!(ConUnit, cu_TxWidth) - 284usize];
    ["Offset of field: ConUnit::cu_TxBaseline"]
        [::core::mem::offset_of!(ConUnit, cu_TxBaseline) - 286usize];
    ["Offset of field: ConUnit::cu_TxSpacing"]
        [::core::mem::offset_of!(ConUnit, cu_TxSpacing) - 288usize];
    ["Offset of field: ConUnit::cu_Modes"][::core::mem::offset_of!(ConUnit, cu_Modes) - 290usize];
    ["Offset of field: ConUnit::cu_RawEvents"]
        [::core::mem::offset_of!(ConUnit, cu_RawEvents) - 293usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GamePortTrigger {
    pub gpt_Keys: UWORD,
    pub gpt_Timeout: UWORD,
    pub gpt_XDelta: UWORD,
    pub gpt_YDelta: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GamePortTrigger"][::core::mem::size_of::<GamePortTrigger>() - 8usize];
    ["Alignment of GamePortTrigger"][::core::mem::align_of::<GamePortTrigger>() - 2usize];
    ["Offset of field: GamePortTrigger::gpt_Keys"]
        [::core::mem::offset_of!(GamePortTrigger, gpt_Keys) - 0usize];
    ["Offset of field: GamePortTrigger::gpt_Timeout"]
        [::core::mem::offset_of!(GamePortTrigger, gpt_Timeout) - 2usize];
    ["Offset of field: GamePortTrigger::gpt_XDelta"]
        [::core::mem::offset_of!(GamePortTrigger, gpt_XDelta) - 4usize];
    ["Offset of field: GamePortTrigger::gpt_YDelta"]
        [::core::mem::offset_of!(GamePortTrigger, gpt_YDelta) - 6usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RigidDiskBlock {
    pub rdb_ID: ULONG,
    pub rdb_SummedLongs: ULONG,
    pub rdb_ChkSum: LONG,
    pub rdb_HostID: ULONG,
    pub rdb_BlockBytes: ULONG,
    pub rdb_Flags: ULONG,
    pub rdb_BadBlockList: ULONG,
    pub rdb_PartitionList: ULONG,
    pub rdb_FileSysHeaderList: ULONG,
    pub rdb_DriveInit: ULONG,
    pub rdb_Reserved1: [ULONG; 6usize],
    pub rdb_Cylinders: ULONG,
    pub rdb_Sectors: ULONG,
    pub rdb_Heads: ULONG,
    pub rdb_Interleave: ULONG,
    pub rdb_Park: ULONG,
    pub rdb_Reserved2: [ULONG; 3usize],
    pub rdb_WritePreComp: ULONG,
    pub rdb_ReducedWrite: ULONG,
    pub rdb_StepRate: ULONG,
    pub rdb_Reserved3: [ULONG; 5usize],
    pub rdb_RDBBlocksLo: ULONG,
    pub rdb_RDBBlocksHi: ULONG,
    pub rdb_LoCylinder: ULONG,
    pub rdb_HiCylinder: ULONG,
    pub rdb_CylBlocks: ULONG,
    pub rdb_AutoParkSeconds: ULONG,
    pub rdb_HighRDSKBlock: ULONG,
    pub rdb_Reserved4: ULONG,
    pub rdb_DiskVendor: [::core::ffi::c_char; 8usize],
    pub rdb_DiskProduct: [::core::ffi::c_char; 16usize],
    pub rdb_DiskRevision: [::core::ffi::c_char; 4usize],
    pub rdb_ControllerVendor: [::core::ffi::c_char; 8usize],
    pub rdb_ControllerProduct: [::core::ffi::c_char; 16usize],
    pub rdb_ControllerRevision: [::core::ffi::c_char; 4usize],
    pub rdb_DriveInitName: [::core::ffi::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RigidDiskBlock"][::core::mem::size_of::<RigidDiskBlock>() - 256usize];
    ["Alignment of RigidDiskBlock"][::core::mem::align_of::<RigidDiskBlock>() - 2usize];
    ["Offset of field: RigidDiskBlock::rdb_ID"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_ID) - 0usize];
    ["Offset of field: RigidDiskBlock::rdb_SummedLongs"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_SummedLongs) - 4usize];
    ["Offset of field: RigidDiskBlock::rdb_ChkSum"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_ChkSum) - 8usize];
    ["Offset of field: RigidDiskBlock::rdb_HostID"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_HostID) - 12usize];
    ["Offset of field: RigidDiskBlock::rdb_BlockBytes"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_BlockBytes) - 16usize];
    ["Offset of field: RigidDiskBlock::rdb_Flags"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Flags) - 20usize];
    ["Offset of field: RigidDiskBlock::rdb_BadBlockList"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_BadBlockList) - 24usize];
    ["Offset of field: RigidDiskBlock::rdb_PartitionList"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_PartitionList) - 28usize];
    ["Offset of field: RigidDiskBlock::rdb_FileSysHeaderList"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_FileSysHeaderList) - 32usize];
    ["Offset of field: RigidDiskBlock::rdb_DriveInit"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_DriveInit) - 36usize];
    ["Offset of field: RigidDiskBlock::rdb_Reserved1"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Reserved1) - 40usize];
    ["Offset of field: RigidDiskBlock::rdb_Cylinders"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Cylinders) - 64usize];
    ["Offset of field: RigidDiskBlock::rdb_Sectors"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Sectors) - 68usize];
    ["Offset of field: RigidDiskBlock::rdb_Heads"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Heads) - 72usize];
    ["Offset of field: RigidDiskBlock::rdb_Interleave"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Interleave) - 76usize];
    ["Offset of field: RigidDiskBlock::rdb_Park"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Park) - 80usize];
    ["Offset of field: RigidDiskBlock::rdb_Reserved2"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Reserved2) - 84usize];
    ["Offset of field: RigidDiskBlock::rdb_WritePreComp"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_WritePreComp) - 96usize];
    ["Offset of field: RigidDiskBlock::rdb_ReducedWrite"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_ReducedWrite) - 100usize];
    ["Offset of field: RigidDiskBlock::rdb_StepRate"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_StepRate) - 104usize];
    ["Offset of field: RigidDiskBlock::rdb_Reserved3"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Reserved3) - 108usize];
    ["Offset of field: RigidDiskBlock::rdb_RDBBlocksLo"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_RDBBlocksLo) - 128usize];
    ["Offset of field: RigidDiskBlock::rdb_RDBBlocksHi"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_RDBBlocksHi) - 132usize];
    ["Offset of field: RigidDiskBlock::rdb_LoCylinder"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_LoCylinder) - 136usize];
    ["Offset of field: RigidDiskBlock::rdb_HiCylinder"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_HiCylinder) - 140usize];
    ["Offset of field: RigidDiskBlock::rdb_CylBlocks"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_CylBlocks) - 144usize];
    ["Offset of field: RigidDiskBlock::rdb_AutoParkSeconds"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_AutoParkSeconds) - 148usize];
    ["Offset of field: RigidDiskBlock::rdb_HighRDSKBlock"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_HighRDSKBlock) - 152usize];
    ["Offset of field: RigidDiskBlock::rdb_Reserved4"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_Reserved4) - 156usize];
    ["Offset of field: RigidDiskBlock::rdb_DiskVendor"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_DiskVendor) - 160usize];
    ["Offset of field: RigidDiskBlock::rdb_DiskProduct"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_DiskProduct) - 168usize];
    ["Offset of field: RigidDiskBlock::rdb_DiskRevision"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_DiskRevision) - 184usize];
    ["Offset of field: RigidDiskBlock::rdb_ControllerVendor"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_ControllerVendor) - 188usize];
    ["Offset of field: RigidDiskBlock::rdb_ControllerProduct"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_ControllerProduct) - 196usize];
    ["Offset of field: RigidDiskBlock::rdb_ControllerRevision"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_ControllerRevision) - 212usize];
    ["Offset of field: RigidDiskBlock::rdb_DriveInitName"]
        [::core::mem::offset_of!(RigidDiskBlock, rdb_DriveInitName) - 216usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BadBlockEntry {
    pub bbe_BadBlock: ULONG,
    pub bbe_GoodBlock: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BadBlockEntry"][::core::mem::size_of::<BadBlockEntry>() - 8usize];
    ["Alignment of BadBlockEntry"][::core::mem::align_of::<BadBlockEntry>() - 2usize];
    ["Offset of field: BadBlockEntry::bbe_BadBlock"]
        [::core::mem::offset_of!(BadBlockEntry, bbe_BadBlock) - 0usize];
    ["Offset of field: BadBlockEntry::bbe_GoodBlock"]
        [::core::mem::offset_of!(BadBlockEntry, bbe_GoodBlock) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BadBlockBlock {
    pub bbb_ID: ULONG,
    pub bbb_SummedLongs: ULONG,
    pub bbb_ChkSum: LONG,
    pub bbb_HostID: ULONG,
    pub bbb_Next: ULONG,
    pub bbb_Reserved: ULONG,
    pub bbb_BlockPairs: [BadBlockEntry; 61usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BadBlockBlock"][::core::mem::size_of::<BadBlockBlock>() - 512usize];
    ["Alignment of BadBlockBlock"][::core::mem::align_of::<BadBlockBlock>() - 2usize];
    ["Offset of field: BadBlockBlock::bbb_ID"]
        [::core::mem::offset_of!(BadBlockBlock, bbb_ID) - 0usize];
    ["Offset of field: BadBlockBlock::bbb_SummedLongs"]
        [::core::mem::offset_of!(BadBlockBlock, bbb_SummedLongs) - 4usize];
    ["Offset of field: BadBlockBlock::bbb_ChkSum"]
        [::core::mem::offset_of!(BadBlockBlock, bbb_ChkSum) - 8usize];
    ["Offset of field: BadBlockBlock::bbb_HostID"]
        [::core::mem::offset_of!(BadBlockBlock, bbb_HostID) - 12usize];
    ["Offset of field: BadBlockBlock::bbb_Next"]
        [::core::mem::offset_of!(BadBlockBlock, bbb_Next) - 16usize];
    ["Offset of field: BadBlockBlock::bbb_Reserved"]
        [::core::mem::offset_of!(BadBlockBlock, bbb_Reserved) - 20usize];
    ["Offset of field: BadBlockBlock::bbb_BlockPairs"]
        [::core::mem::offset_of!(BadBlockBlock, bbb_BlockPairs) - 24usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PartitionBlock {
    pub pb_ID: ULONG,
    pub pb_SummedLongs: ULONG,
    pub pb_ChkSum: LONG,
    pub pb_HostID: ULONG,
    pub pb_Next: ULONG,
    pub pb_Flags: ULONG,
    pub pb_Reserved1: [ULONG; 2usize],
    pub pb_DevFlags: ULONG,
    pub pb_DriveName: [UBYTE; 32usize],
    pub pb_Reserved2: [ULONG; 15usize],
    pub pb_Environment: [ULONG; 20usize],
    pub pb_EReserved: [ULONG; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PartitionBlock"][::core::mem::size_of::<PartitionBlock>() - 256usize];
    ["Alignment of PartitionBlock"][::core::mem::align_of::<PartitionBlock>() - 2usize];
    ["Offset of field: PartitionBlock::pb_ID"]
        [::core::mem::offset_of!(PartitionBlock, pb_ID) - 0usize];
    ["Offset of field: PartitionBlock::pb_SummedLongs"]
        [::core::mem::offset_of!(PartitionBlock, pb_SummedLongs) - 4usize];
    ["Offset of field: PartitionBlock::pb_ChkSum"]
        [::core::mem::offset_of!(PartitionBlock, pb_ChkSum) - 8usize];
    ["Offset of field: PartitionBlock::pb_HostID"]
        [::core::mem::offset_of!(PartitionBlock, pb_HostID) - 12usize];
    ["Offset of field: PartitionBlock::pb_Next"]
        [::core::mem::offset_of!(PartitionBlock, pb_Next) - 16usize];
    ["Offset of field: PartitionBlock::pb_Flags"]
        [::core::mem::offset_of!(PartitionBlock, pb_Flags) - 20usize];
    ["Offset of field: PartitionBlock::pb_Reserved1"]
        [::core::mem::offset_of!(PartitionBlock, pb_Reserved1) - 24usize];
    ["Offset of field: PartitionBlock::pb_DevFlags"]
        [::core::mem::offset_of!(PartitionBlock, pb_DevFlags) - 32usize];
    ["Offset of field: PartitionBlock::pb_DriveName"]
        [::core::mem::offset_of!(PartitionBlock, pb_DriveName) - 36usize];
    ["Offset of field: PartitionBlock::pb_Reserved2"]
        [::core::mem::offset_of!(PartitionBlock, pb_Reserved2) - 68usize];
    ["Offset of field: PartitionBlock::pb_Environment"]
        [::core::mem::offset_of!(PartitionBlock, pb_Environment) - 128usize];
    ["Offset of field: PartitionBlock::pb_EReserved"]
        [::core::mem::offset_of!(PartitionBlock, pb_EReserved) - 208usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FileSysHeaderBlock {
    pub fhb_ID: ULONG,
    pub fhb_SummedLongs: ULONG,
    pub fhb_ChkSum: LONG,
    pub fhb_HostID: ULONG,
    pub fhb_Next: ULONG,
    pub fhb_Flags: ULONG,
    pub fhb_Reserved1: [ULONG; 2usize],
    pub fhb_DosType: ULONG,
    pub fhb_Version: ULONG,
    pub fhb_PatchFlags: ULONG,
    pub fhb_Type: ULONG,
    pub fhb_Task: ULONG,
    pub fhb_Lock: ULONG,
    pub fhb_Handler: ULONG,
    pub fhb_StackSize: ULONG,
    pub fhb_Priority: LONG,
    pub fhb_Startup: LONG,
    pub fhb_SegListBlocks: LONG,
    pub fhb_GlobalVec: LONG,
    pub fhb_Reserved2: [ULONG; 23usize],
    pub fhb_FileSysName: [::core::ffi::c_char; 84usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileSysHeaderBlock"][::core::mem::size_of::<FileSysHeaderBlock>() - 256usize];
    ["Alignment of FileSysHeaderBlock"][::core::mem::align_of::<FileSysHeaderBlock>() - 2usize];
    ["Offset of field: FileSysHeaderBlock::fhb_ID"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_ID) - 0usize];
    ["Offset of field: FileSysHeaderBlock::fhb_SummedLongs"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_SummedLongs) - 4usize];
    ["Offset of field: FileSysHeaderBlock::fhb_ChkSum"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_ChkSum) - 8usize];
    ["Offset of field: FileSysHeaderBlock::fhb_HostID"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_HostID) - 12usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Next"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Next) - 16usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Flags"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Flags) - 20usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Reserved1"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Reserved1) - 24usize];
    ["Offset of field: FileSysHeaderBlock::fhb_DosType"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_DosType) - 32usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Version"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Version) - 36usize];
    ["Offset of field: FileSysHeaderBlock::fhb_PatchFlags"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_PatchFlags) - 40usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Type"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Type) - 44usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Task"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Task) - 48usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Lock"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Lock) - 52usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Handler"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Handler) - 56usize];
    ["Offset of field: FileSysHeaderBlock::fhb_StackSize"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_StackSize) - 60usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Priority"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Priority) - 64usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Startup"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Startup) - 68usize];
    ["Offset of field: FileSysHeaderBlock::fhb_SegListBlocks"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_SegListBlocks) - 72usize];
    ["Offset of field: FileSysHeaderBlock::fhb_GlobalVec"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_GlobalVec) - 76usize];
    ["Offset of field: FileSysHeaderBlock::fhb_Reserved2"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_Reserved2) - 80usize];
    ["Offset of field: FileSysHeaderBlock::fhb_FileSysName"]
        [::core::mem::offset_of!(FileSysHeaderBlock, fhb_FileSysName) - 172usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct LoadSegBlock {
    pub lsb_ID: ULONG,
    pub lsb_SummedLongs: ULONG,
    pub lsb_ChkSum: LONG,
    pub lsb_HostID: ULONG,
    pub lsb_Next: ULONG,
    pub lsb_LoadData: [ULONG; 123usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LoadSegBlock"][::core::mem::size_of::<LoadSegBlock>() - 512usize];
    ["Alignment of LoadSegBlock"][::core::mem::align_of::<LoadSegBlock>() - 2usize];
    ["Offset of field: LoadSegBlock::lsb_ID"]
        [::core::mem::offset_of!(LoadSegBlock, lsb_ID) - 0usize];
    ["Offset of field: LoadSegBlock::lsb_SummedLongs"]
        [::core::mem::offset_of!(LoadSegBlock, lsb_SummedLongs) - 4usize];
    ["Offset of field: LoadSegBlock::lsb_ChkSum"]
        [::core::mem::offset_of!(LoadSegBlock, lsb_ChkSum) - 8usize];
    ["Offset of field: LoadSegBlock::lsb_HostID"]
        [::core::mem::offset_of!(LoadSegBlock, lsb_HostID) - 12usize];
    ["Offset of field: LoadSegBlock::lsb_Next"]
        [::core::mem::offset_of!(LoadSegBlock, lsb_Next) - 16usize];
    ["Offset of field: LoadSegBlock::lsb_LoadData"]
        [::core::mem::offset_of!(LoadSegBlock, lsb_LoadData) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct narrator_rb {
    pub message: IOStdReq,
    pub rate: UWORD,
    pub pitch: UWORD,
    pub mode: UWORD,
    pub sex: UWORD,
    pub ch_masks: *mut UBYTE,
    pub nm_masks: UWORD,
    pub volume: UWORD,
    pub sampfreq: UWORD,
    pub mouths: UBYTE,
    pub chanmask: UBYTE,
    pub numchan: UBYTE,
    pub flags: UBYTE,
    pub F0enthusiasm: UBYTE,
    pub F0perturb: UBYTE,
    pub F1adj: BYTE,
    pub F2adj: BYTE,
    pub F3adj: BYTE,
    pub A1adj: BYTE,
    pub A2adj: BYTE,
    pub A3adj: BYTE,
    pub articulate: UBYTE,
    pub centralize: UBYTE,
    pub centphon: *mut ::core::ffi::c_char,
    pub AVbias: BYTE,
    pub AFbias: BYTE,
    pub priority: BYTE,
    pub pad1: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of narrator_rb"][::core::mem::size_of::<narrator_rb>() - 88usize];
    ["Alignment of narrator_rb"][::core::mem::align_of::<narrator_rb>() - 2usize];
    ["Offset of field: narrator_rb::message"]
        [::core::mem::offset_of!(narrator_rb, message) - 0usize];
    ["Offset of field: narrator_rb::rate"][::core::mem::offset_of!(narrator_rb, rate) - 48usize];
    ["Offset of field: narrator_rb::pitch"][::core::mem::offset_of!(narrator_rb, pitch) - 50usize];
    ["Offset of field: narrator_rb::mode"][::core::mem::offset_of!(narrator_rb, mode) - 52usize];
    ["Offset of field: narrator_rb::sex"][::core::mem::offset_of!(narrator_rb, sex) - 54usize];
    ["Offset of field: narrator_rb::ch_masks"]
        [::core::mem::offset_of!(narrator_rb, ch_masks) - 56usize];
    ["Offset of field: narrator_rb::nm_masks"]
        [::core::mem::offset_of!(narrator_rb, nm_masks) - 60usize];
    ["Offset of field: narrator_rb::volume"]
        [::core::mem::offset_of!(narrator_rb, volume) - 62usize];
    ["Offset of field: narrator_rb::sampfreq"]
        [::core::mem::offset_of!(narrator_rb, sampfreq) - 64usize];
    ["Offset of field: narrator_rb::mouths"]
        [::core::mem::offset_of!(narrator_rb, mouths) - 66usize];
    ["Offset of field: narrator_rb::chanmask"]
        [::core::mem::offset_of!(narrator_rb, chanmask) - 67usize];
    ["Offset of field: narrator_rb::numchan"]
        [::core::mem::offset_of!(narrator_rb, numchan) - 68usize];
    ["Offset of field: narrator_rb::flags"][::core::mem::offset_of!(narrator_rb, flags) - 69usize];
    ["Offset of field: narrator_rb::F0enthusiasm"]
        [::core::mem::offset_of!(narrator_rb, F0enthusiasm) - 70usize];
    ["Offset of field: narrator_rb::F0perturb"]
        [::core::mem::offset_of!(narrator_rb, F0perturb) - 71usize];
    ["Offset of field: narrator_rb::F1adj"][::core::mem::offset_of!(narrator_rb, F1adj) - 72usize];
    ["Offset of field: narrator_rb::F2adj"][::core::mem::offset_of!(narrator_rb, F2adj) - 73usize];
    ["Offset of field: narrator_rb::F3adj"][::core::mem::offset_of!(narrator_rb, F3adj) - 74usize];
    ["Offset of field: narrator_rb::A1adj"][::core::mem::offset_of!(narrator_rb, A1adj) - 75usize];
    ["Offset of field: narrator_rb::A2adj"][::core::mem::offset_of!(narrator_rb, A2adj) - 76usize];
    ["Offset of field: narrator_rb::A3adj"][::core::mem::offset_of!(narrator_rb, A3adj) - 77usize];
    ["Offset of field: narrator_rb::articulate"]
        [::core::mem::offset_of!(narrator_rb, articulate) - 78usize];
    ["Offset of field: narrator_rb::centralize"]
        [::core::mem::offset_of!(narrator_rb, centralize) - 79usize];
    ["Offset of field: narrator_rb::centphon"]
        [::core::mem::offset_of!(narrator_rb, centphon) - 80usize];
    ["Offset of field: narrator_rb::AVbias"]
        [::core::mem::offset_of!(narrator_rb, AVbias) - 84usize];
    ["Offset of field: narrator_rb::AFbias"]
        [::core::mem::offset_of!(narrator_rb, AFbias) - 85usize];
    ["Offset of field: narrator_rb::priority"]
        [::core::mem::offset_of!(narrator_rb, priority) - 86usize];
    ["Offset of field: narrator_rb::pad1"][::core::mem::offset_of!(narrator_rb, pad1) - 87usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mouth_rb {
    pub voice: narrator_rb,
    pub width: UBYTE,
    pub height: UBYTE,
    pub shape: UBYTE,
    pub sync: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mouth_rb"][::core::mem::size_of::<mouth_rb>() - 92usize];
    ["Alignment of mouth_rb"][::core::mem::align_of::<mouth_rb>() - 2usize];
    ["Offset of field: mouth_rb::voice"][::core::mem::offset_of!(mouth_rb, voice) - 0usize];
    ["Offset of field: mouth_rb::width"][::core::mem::offset_of!(mouth_rb, width) - 88usize];
    ["Offset of field: mouth_rb::height"][::core::mem::offset_of!(mouth_rb, height) - 89usize];
    ["Offset of field: mouth_rb::shape"][::core::mem::offset_of!(mouth_rb, shape) - 90usize];
    ["Offset of field: mouth_rb::sync"][::core::mem::offset_of!(mouth_rb, sync) - 91usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NSDeviceQueryResult {
    pub nsdqr_DevQueryFormat: ULONG,
    pub nsdqr_SizeAvailable: ULONG,
    pub nsdqr_DeviceType: UWORD,
    pub nsdqr_DeviceSubType: UWORD,
    pub nsdqr_SupportedCommands: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NSDeviceQueryResult"][::core::mem::size_of::<NSDeviceQueryResult>() - 16usize];
    ["Alignment of NSDeviceQueryResult"][::core::mem::align_of::<NSDeviceQueryResult>() - 2usize];
    ["Offset of field: NSDeviceQueryResult::nsdqr_DevQueryFormat"]
        [::core::mem::offset_of!(NSDeviceQueryResult, nsdqr_DevQueryFormat) - 0usize];
    ["Offset of field: NSDeviceQueryResult::nsdqr_SizeAvailable"]
        [::core::mem::offset_of!(NSDeviceQueryResult, nsdqr_SizeAvailable) - 4usize];
    ["Offset of field: NSDeviceQueryResult::nsdqr_DeviceType"]
        [::core::mem::offset_of!(NSDeviceQueryResult, nsdqr_DeviceType) - 8usize];
    ["Offset of field: NSDeviceQueryResult::nsdqr_DeviceSubType"]
        [::core::mem::offset_of!(NSDeviceQueryResult, nsdqr_DeviceSubType) - 10usize];
    ["Offset of field: NSDeviceQueryResult::nsdqr_SupportedCommands"]
        [::core::mem::offset_of!(NSDeviceQueryResult, nsdqr_SupportedCommands) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union colorEntry {
    pub colorLong: ULONG,
    pub colorByte: [UBYTE; 4usize],
    pub colorSByte: [BYTE; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of colorEntry"][::core::mem::size_of::<colorEntry>() - 4usize];
    ["Alignment of colorEntry"][::core::mem::align_of::<colorEntry>() - 2usize];
    ["Offset of field: colorEntry::colorLong"]
        [::core::mem::offset_of!(colorEntry, colorLong) - 0usize];
    ["Offset of field: colorEntry::colorByte"]
        [::core::mem::offset_of!(colorEntry, colorByte) - 0usize];
    ["Offset of field: colorEntry::colorSByte"]
        [::core::mem::offset_of!(colorEntry, colorSByte) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WordColorEntry {
    pub ColorWord: [WORD; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WordColorEntry"][::core::mem::size_of::<WordColorEntry>() - 8usize];
    ["Alignment of WordColorEntry"][::core::mem::align_of::<WordColorEntry>() - 2usize];
    ["Offset of field: WordColorEntry::ColorWord"]
        [::core::mem::offset_of!(WordColorEntry, ColorWord) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrtInfo {
    pub pi_render: FPTR,
    pub pi_rp: *mut RastPort,
    pub pi_temprp: *mut RastPort,
    pub pi_RowBuf: *mut UWORD,
    pub pi_HamBuf: *mut UWORD,
    pub pi_ColorMap: *mut colorEntry,
    pub pi_ColorInt: *mut colorEntry,
    pub pi_HamInt: *mut colorEntry,
    pub pi_Dest1Int: *mut colorEntry,
    pub pi_Dest2Int: *mut colorEntry,
    pub pi_ScaleX: *mut UWORD,
    pub pi_ScaleXAlt: *mut UWORD,
    pub pi_dmatrix: *mut UBYTE,
    pub pi_TopBuf: *mut UWORD,
    pub pi_BotBuf: *mut UWORD,
    pub pi_RowBufSize: UWORD,
    pub pi_HamBufSize: UWORD,
    pub pi_ColorMapSize: UWORD,
    pub pi_ColorIntSize: UWORD,
    pub pi_HamIntSize: UWORD,
    pub pi_Dest1IntSize: UWORD,
    pub pi_Dest2IntSize: UWORD,
    pub pi_ScaleXSize: UWORD,
    pub pi_ScaleXAltSize: UWORD,
    pub pi_PrefsFlags: UWORD,
    pub pi_special: ULONG,
    pub pi_xstart: UWORD,
    pub pi_ystart: UWORD,
    pub pi_width: UWORD,
    pub pi_height: UWORD,
    pub pi_pc: ULONG,
    pub pi_pr: ULONG,
    pub pi_ymult: UWORD,
    pub pi_ymod: UWORD,
    pub pi_ety: WORD,
    pub pi_xpos: UWORD,
    pub pi_threshold: UWORD,
    pub pi_tempwidth: UWORD,
    pub pi_flags: UWORD,
    pub pi_ReduceBuf: *mut UWORD,
    pub pi_ReduceBufSize: UWORD,
    pub pi_SourceHook: *mut Hook,
    pub pi_InvertHookBuf: *mut ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrtInfo"][::core::mem::size_of::<PrtInfo>() - 128usize];
    ["Alignment of PrtInfo"][::core::mem::align_of::<PrtInfo>() - 2usize];
    ["Offset of field: PrtInfo::pi_render"][::core::mem::offset_of!(PrtInfo, pi_render) - 0usize];
    ["Offset of field: PrtInfo::pi_rp"][::core::mem::offset_of!(PrtInfo, pi_rp) - 4usize];
    ["Offset of field: PrtInfo::pi_temprp"][::core::mem::offset_of!(PrtInfo, pi_temprp) - 8usize];
    ["Offset of field: PrtInfo::pi_RowBuf"][::core::mem::offset_of!(PrtInfo, pi_RowBuf) - 12usize];
    ["Offset of field: PrtInfo::pi_HamBuf"][::core::mem::offset_of!(PrtInfo, pi_HamBuf) - 16usize];
    ["Offset of field: PrtInfo::pi_ColorMap"]
        [::core::mem::offset_of!(PrtInfo, pi_ColorMap) - 20usize];
    ["Offset of field: PrtInfo::pi_ColorInt"]
        [::core::mem::offset_of!(PrtInfo, pi_ColorInt) - 24usize];
    ["Offset of field: PrtInfo::pi_HamInt"][::core::mem::offset_of!(PrtInfo, pi_HamInt) - 28usize];
    ["Offset of field: PrtInfo::pi_Dest1Int"]
        [::core::mem::offset_of!(PrtInfo, pi_Dest1Int) - 32usize];
    ["Offset of field: PrtInfo::pi_Dest2Int"]
        [::core::mem::offset_of!(PrtInfo, pi_Dest2Int) - 36usize];
    ["Offset of field: PrtInfo::pi_ScaleX"][::core::mem::offset_of!(PrtInfo, pi_ScaleX) - 40usize];
    ["Offset of field: PrtInfo::pi_ScaleXAlt"]
        [::core::mem::offset_of!(PrtInfo, pi_ScaleXAlt) - 44usize];
    ["Offset of field: PrtInfo::pi_dmatrix"]
        [::core::mem::offset_of!(PrtInfo, pi_dmatrix) - 48usize];
    ["Offset of field: PrtInfo::pi_TopBuf"][::core::mem::offset_of!(PrtInfo, pi_TopBuf) - 52usize];
    ["Offset of field: PrtInfo::pi_BotBuf"][::core::mem::offset_of!(PrtInfo, pi_BotBuf) - 56usize];
    ["Offset of field: PrtInfo::pi_RowBufSize"]
        [::core::mem::offset_of!(PrtInfo, pi_RowBufSize) - 60usize];
    ["Offset of field: PrtInfo::pi_HamBufSize"]
        [::core::mem::offset_of!(PrtInfo, pi_HamBufSize) - 62usize];
    ["Offset of field: PrtInfo::pi_ColorMapSize"]
        [::core::mem::offset_of!(PrtInfo, pi_ColorMapSize) - 64usize];
    ["Offset of field: PrtInfo::pi_ColorIntSize"]
        [::core::mem::offset_of!(PrtInfo, pi_ColorIntSize) - 66usize];
    ["Offset of field: PrtInfo::pi_HamIntSize"]
        [::core::mem::offset_of!(PrtInfo, pi_HamIntSize) - 68usize];
    ["Offset of field: PrtInfo::pi_Dest1IntSize"]
        [::core::mem::offset_of!(PrtInfo, pi_Dest1IntSize) - 70usize];
    ["Offset of field: PrtInfo::pi_Dest2IntSize"]
        [::core::mem::offset_of!(PrtInfo, pi_Dest2IntSize) - 72usize];
    ["Offset of field: PrtInfo::pi_ScaleXSize"]
        [::core::mem::offset_of!(PrtInfo, pi_ScaleXSize) - 74usize];
    ["Offset of field: PrtInfo::pi_ScaleXAltSize"]
        [::core::mem::offset_of!(PrtInfo, pi_ScaleXAltSize) - 76usize];
    ["Offset of field: PrtInfo::pi_PrefsFlags"]
        [::core::mem::offset_of!(PrtInfo, pi_PrefsFlags) - 78usize];
    ["Offset of field: PrtInfo::pi_special"]
        [::core::mem::offset_of!(PrtInfo, pi_special) - 80usize];
    ["Offset of field: PrtInfo::pi_xstart"][::core::mem::offset_of!(PrtInfo, pi_xstart) - 84usize];
    ["Offset of field: PrtInfo::pi_ystart"][::core::mem::offset_of!(PrtInfo, pi_ystart) - 86usize];
    ["Offset of field: PrtInfo::pi_width"][::core::mem::offset_of!(PrtInfo, pi_width) - 88usize];
    ["Offset of field: PrtInfo::pi_height"][::core::mem::offset_of!(PrtInfo, pi_height) - 90usize];
    ["Offset of field: PrtInfo::pi_pc"][::core::mem::offset_of!(PrtInfo, pi_pc) - 92usize];
    ["Offset of field: PrtInfo::pi_pr"][::core::mem::offset_of!(PrtInfo, pi_pr) - 96usize];
    ["Offset of field: PrtInfo::pi_ymult"][::core::mem::offset_of!(PrtInfo, pi_ymult) - 100usize];
    ["Offset of field: PrtInfo::pi_ymod"][::core::mem::offset_of!(PrtInfo, pi_ymod) - 102usize];
    ["Offset of field: PrtInfo::pi_ety"][::core::mem::offset_of!(PrtInfo, pi_ety) - 104usize];
    ["Offset of field: PrtInfo::pi_xpos"][::core::mem::offset_of!(PrtInfo, pi_xpos) - 106usize];
    ["Offset of field: PrtInfo::pi_threshold"]
        [::core::mem::offset_of!(PrtInfo, pi_threshold) - 108usize];
    ["Offset of field: PrtInfo::pi_tempwidth"]
        [::core::mem::offset_of!(PrtInfo, pi_tempwidth) - 110usize];
    ["Offset of field: PrtInfo::pi_flags"][::core::mem::offset_of!(PrtInfo, pi_flags) - 112usize];
    ["Offset of field: PrtInfo::pi_ReduceBuf"]
        [::core::mem::offset_of!(PrtInfo, pi_ReduceBuf) - 114usize];
    ["Offset of field: PrtInfo::pi_ReduceBufSize"]
        [::core::mem::offset_of!(PrtInfo, pi_ReduceBufSize) - 118usize];
    ["Offset of field: PrtInfo::pi_SourceHook"]
        [::core::mem::offset_of!(PrtInfo, pi_SourceHook) - 120usize];
    ["Offset of field: PrtInfo::pi_InvertHookBuf"]
        [::core::mem::offset_of!(PrtInfo, pi_InvertHookBuf) - 124usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd {
    pub scsi_Data: *mut UWORD,
    pub scsi_Length: ULONG,
    pub scsi_Actual: ULONG,
    pub scsi_Command: *mut UBYTE,
    pub scsi_CmdLength: UWORD,
    pub scsi_CmdActual: UWORD,
    pub scsi_Flags: UBYTE,
    pub scsi_Status: UBYTE,
    pub scsi_SenseData: *mut UBYTE,
    pub scsi_SenseLength: UWORD,
    pub scsi_SenseActual: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SCSICmd"][::core::mem::size_of::<SCSICmd>() - 30usize];
    ["Alignment of SCSICmd"][::core::mem::align_of::<SCSICmd>() - 2usize];
    ["Offset of field: SCSICmd::scsi_Data"][::core::mem::offset_of!(SCSICmd, scsi_Data) - 0usize];
    ["Offset of field: SCSICmd::scsi_Length"]
        [::core::mem::offset_of!(SCSICmd, scsi_Length) - 4usize];
    ["Offset of field: SCSICmd::scsi_Actual"]
        [::core::mem::offset_of!(SCSICmd, scsi_Actual) - 8usize];
    ["Offset of field: SCSICmd::scsi_Command"]
        [::core::mem::offset_of!(SCSICmd, scsi_Command) - 12usize];
    ["Offset of field: SCSICmd::scsi_CmdLength"]
        [::core::mem::offset_of!(SCSICmd, scsi_CmdLength) - 16usize];
    ["Offset of field: SCSICmd::scsi_CmdActual"]
        [::core::mem::offset_of!(SCSICmd, scsi_CmdActual) - 18usize];
    ["Offset of field: SCSICmd::scsi_Flags"]
        [::core::mem::offset_of!(SCSICmd, scsi_Flags) - 20usize];
    ["Offset of field: SCSICmd::scsi_Status"]
        [::core::mem::offset_of!(SCSICmd, scsi_Status) - 21usize];
    ["Offset of field: SCSICmd::scsi_SenseData"]
        [::core::mem::offset_of!(SCSICmd, scsi_SenseData) - 22usize];
    ["Offset of field: SCSICmd::scsi_SenseLength"]
        [::core::mem::offset_of!(SCSICmd, scsi_SenseLength) - 26usize];
    ["Offset of field: SCSICmd::scsi_SenseActual"]
        [::core::mem::offset_of!(SCSICmd, scsi_SenseActual) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IOExtTD {
    pub iotd_Req: IOStdReq,
    pub iotd_Count: ULONG,
    pub iotd_SecLabel: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IOExtTD"][::core::mem::size_of::<IOExtTD>() - 56usize];
    ["Alignment of IOExtTD"][::core::mem::align_of::<IOExtTD>() - 2usize];
    ["Offset of field: IOExtTD::iotd_Req"][::core::mem::offset_of!(IOExtTD, iotd_Req) - 0usize];
    ["Offset of field: IOExtTD::iotd_Count"]
        [::core::mem::offset_of!(IOExtTD, iotd_Count) - 48usize];
    ["Offset of field: IOExtTD::iotd_SecLabel"]
        [::core::mem::offset_of!(IOExtTD, iotd_SecLabel) - 52usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DriveGeometry {
    pub dg_SectorSize: ULONG,
    pub dg_TotalSectors: ULONG,
    pub dg_Cylinders: ULONG,
    pub dg_CylSectors: ULONG,
    pub dg_Heads: ULONG,
    pub dg_TrackSectors: ULONG,
    pub dg_BufMemType: ULONG,
    pub dg_DeviceType: UBYTE,
    pub dg_Flags: UBYTE,
    pub dg_Reserved: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DriveGeometry"][::core::mem::size_of::<DriveGeometry>() - 32usize];
    ["Alignment of DriveGeometry"][::core::mem::align_of::<DriveGeometry>() - 2usize];
    ["Offset of field: DriveGeometry::dg_SectorSize"]
        [::core::mem::offset_of!(DriveGeometry, dg_SectorSize) - 0usize];
    ["Offset of field: DriveGeometry::dg_TotalSectors"]
        [::core::mem::offset_of!(DriveGeometry, dg_TotalSectors) - 4usize];
    ["Offset of field: DriveGeometry::dg_Cylinders"]
        [::core::mem::offset_of!(DriveGeometry, dg_Cylinders) - 8usize];
    ["Offset of field: DriveGeometry::dg_CylSectors"]
        [::core::mem::offset_of!(DriveGeometry, dg_CylSectors) - 12usize];
    ["Offset of field: DriveGeometry::dg_Heads"]
        [::core::mem::offset_of!(DriveGeometry, dg_Heads) - 16usize];
    ["Offset of field: DriveGeometry::dg_TrackSectors"]
        [::core::mem::offset_of!(DriveGeometry, dg_TrackSectors) - 20usize];
    ["Offset of field: DriveGeometry::dg_BufMemType"]
        [::core::mem::offset_of!(DriveGeometry, dg_BufMemType) - 24usize];
    ["Offset of field: DriveGeometry::dg_DeviceType"]
        [::core::mem::offset_of!(DriveGeometry, dg_DeviceType) - 28usize];
    ["Offset of field: DriveGeometry::dg_Flags"]
        [::core::mem::offset_of!(DriveGeometry, dg_Flags) - 29usize];
    ["Offset of field: DriveGeometry::dg_Reserved"]
        [::core::mem::offset_of!(DriveGeometry, dg_Reserved) - 30usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TDU_PublicUnit {
    pub tdu_Unit: Unit,
    pub tdu_Comp01Track: UWORD,
    pub tdu_Comp10Track: UWORD,
    pub tdu_Comp11Track: UWORD,
    pub tdu_StepDelay: ULONG,
    pub tdu_SettleDelay: ULONG,
    pub tdu_RetryCnt: UBYTE,
    pub tdu_PubFlags: UBYTE,
    pub tdu_CurrTrk: UWORD,
    pub tdu_CalibrateDelay: ULONG,
    pub tdu_Counter: ULONG,
    pub tdu_PostWriteDelay: ULONG,
    pub tdu_SideSelectDelay: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TDU_PublicUnit"][::core::mem::size_of::<TDU_PublicUnit>() - 72usize];
    ["Alignment of TDU_PublicUnit"][::core::mem::align_of::<TDU_PublicUnit>() - 2usize];
    ["Offset of field: TDU_PublicUnit::tdu_Unit"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_Unit) - 0usize];
    ["Offset of field: TDU_PublicUnit::tdu_Comp01Track"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_Comp01Track) - 38usize];
    ["Offset of field: TDU_PublicUnit::tdu_Comp10Track"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_Comp10Track) - 40usize];
    ["Offset of field: TDU_PublicUnit::tdu_Comp11Track"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_Comp11Track) - 42usize];
    ["Offset of field: TDU_PublicUnit::tdu_StepDelay"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_StepDelay) - 44usize];
    ["Offset of field: TDU_PublicUnit::tdu_SettleDelay"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_SettleDelay) - 48usize];
    ["Offset of field: TDU_PublicUnit::tdu_RetryCnt"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_RetryCnt) - 52usize];
    ["Offset of field: TDU_PublicUnit::tdu_PubFlags"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_PubFlags) - 53usize];
    ["Offset of field: TDU_PublicUnit::tdu_CurrTrk"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_CurrTrk) - 54usize];
    ["Offset of field: TDU_PublicUnit::tdu_CalibrateDelay"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_CalibrateDelay) - 56usize];
    ["Offset of field: TDU_PublicUnit::tdu_Counter"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_Counter) - 60usize];
    ["Offset of field: TDU_PublicUnit::tdu_PostWriteDelay"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_PostWriteDelay) - 64usize];
    ["Offset of field: TDU_PublicUnit::tdu_SideSelectDelay"]
        [::core::mem::offset_of!(TDU_PublicUnit, tdu_SideSelectDelay) - 68usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TrackFileChecksum {
    pub tfc_high: ULONG,
    pub tfc_low: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TrackFileChecksum"][::core::mem::size_of::<TrackFileChecksum>() - 8usize];
    ["Alignment of TrackFileChecksum"][::core::mem::align_of::<TrackFileChecksum>() - 2usize];
    ["Offset of field: TrackFileChecksum::tfc_high"]
        [::core::mem::offset_of!(TrackFileChecksum, tfc_high) - 0usize];
    ["Offset of field: TrackFileChecksum::tfc_low"]
        [::core::mem::offset_of!(TrackFileChecksum, tfc_low) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TrackFileUnitData {
    pub tfud_Next: *mut TrackFileUnitData,
    pub tfud_Size: ULONG,
    pub tfud_UnitNumber: LONG,
    pub tfud_DriveType: LONG,
    pub tfud_DeviceName: STRPTR,
    pub tfud_FileName: STRPTR,
    pub tfud_IsActive: BOOL,
    pub tfud_IsWritable: BOOL,
    pub tfud_MediumIsPresent: BOOL,
    pub tfud_IsBusy: BOOL,
    pub tfud_ChecksumsEnabled: BOOL,
    pub tfud_Checksum: TrackFileChecksum,
    pub tfud_VolumeValid: BOOL,
    pub tfud_VolumeName: [TEXT; 32usize],
    pub tfud_VolumeDate: DateStamp,
    pub tfud_FileSysSignature: ULONG,
    pub tfud_BootBlockChecksum: ULONG,
    pub tfud_CacheEnabled: BOOL,
    pub tfud_CacheAccesses: ULONG,
    pub tfud_CacheMisses: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TrackFileUnitData"][::core::mem::size_of::<TrackFileUnitData>() - 106usize];
    ["Alignment of TrackFileUnitData"][::core::mem::align_of::<TrackFileUnitData>() - 2usize];
    ["Offset of field: TrackFileUnitData::tfud_Next"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_Next) - 0usize];
    ["Offset of field: TrackFileUnitData::tfud_Size"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_Size) - 4usize];
    ["Offset of field: TrackFileUnitData::tfud_UnitNumber"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_UnitNumber) - 8usize];
    ["Offset of field: TrackFileUnitData::tfud_DriveType"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_DriveType) - 12usize];
    ["Offset of field: TrackFileUnitData::tfud_DeviceName"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_DeviceName) - 16usize];
    ["Offset of field: TrackFileUnitData::tfud_FileName"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_FileName) - 20usize];
    ["Offset of field: TrackFileUnitData::tfud_IsActive"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_IsActive) - 24usize];
    ["Offset of field: TrackFileUnitData::tfud_IsWritable"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_IsWritable) - 26usize];
    ["Offset of field: TrackFileUnitData::tfud_MediumIsPresent"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_MediumIsPresent) - 28usize];
    ["Offset of field: TrackFileUnitData::tfud_IsBusy"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_IsBusy) - 30usize];
    ["Offset of field: TrackFileUnitData::tfud_ChecksumsEnabled"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_ChecksumsEnabled) - 32usize];
    ["Offset of field: TrackFileUnitData::tfud_Checksum"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_Checksum) - 34usize];
    ["Offset of field: TrackFileUnitData::tfud_VolumeValid"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_VolumeValid) - 42usize];
    ["Offset of field: TrackFileUnitData::tfud_VolumeName"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_VolumeName) - 44usize];
    ["Offset of field: TrackFileUnitData::tfud_VolumeDate"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_VolumeDate) - 76usize];
    ["Offset of field: TrackFileUnitData::tfud_FileSysSignature"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_FileSysSignature) - 88usize];
    ["Offset of field: TrackFileUnitData::tfud_BootBlockChecksum"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_BootBlockChecksum) - 92usize];
    ["Offset of field: TrackFileUnitData::tfud_CacheEnabled"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_CacheEnabled) - 96usize];
    ["Offset of field: TrackFileUnitData::tfud_CacheAccesses"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_CacheAccesses) - 98usize];
    ["Offset of field: TrackFileUnitData::tfud_CacheMisses"]
        [::core::mem::offset_of!(TrackFileUnitData, tfud_CacheMisses) - 102usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FontContents {
    pub fc_FileName: [TEXT; 256usize],
    pub fc_YSize: UWORD,
    pub fc_Style: UBYTE,
    pub fc_Flags: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FontContents"][::core::mem::size_of::<FontContents>() - 260usize];
    ["Alignment of FontContents"][::core::mem::align_of::<FontContents>() - 2usize];
    ["Offset of field: FontContents::fc_FileName"]
        [::core::mem::offset_of!(FontContents, fc_FileName) - 0usize];
    ["Offset of field: FontContents::fc_YSize"]
        [::core::mem::offset_of!(FontContents, fc_YSize) - 256usize];
    ["Offset of field: FontContents::fc_Style"]
        [::core::mem::offset_of!(FontContents, fc_Style) - 258usize];
    ["Offset of field: FontContents::fc_Flags"]
        [::core::mem::offset_of!(FontContents, fc_Flags) - 259usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TFontContents {
    pub tfc_FileName: [TEXT; 254usize],
    pub tfc_TagCount: UWORD,
    pub tfc_YSize: UWORD,
    pub tfc_Style: UBYTE,
    pub tfc_Flags: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TFontContents"][::core::mem::size_of::<TFontContents>() - 260usize];
    ["Alignment of TFontContents"][::core::mem::align_of::<TFontContents>() - 2usize];
    ["Offset of field: TFontContents::tfc_FileName"]
        [::core::mem::offset_of!(TFontContents, tfc_FileName) - 0usize];
    ["Offset of field: TFontContents::tfc_TagCount"]
        [::core::mem::offset_of!(TFontContents, tfc_TagCount) - 254usize];
    ["Offset of field: TFontContents::tfc_YSize"]
        [::core::mem::offset_of!(TFontContents, tfc_YSize) - 256usize];
    ["Offset of field: TFontContents::tfc_Style"]
        [::core::mem::offset_of!(TFontContents, tfc_Style) - 258usize];
    ["Offset of field: TFontContents::tfc_Flags"]
        [::core::mem::offset_of!(TFontContents, tfc_Flags) - 259usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FontContentsHeader {
    pub fch_FileID: UWORD,
    pub fch_NumEntries: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FontContentsHeader"][::core::mem::size_of::<FontContentsHeader>() - 4usize];
    ["Alignment of FontContentsHeader"][::core::mem::align_of::<FontContentsHeader>() - 2usize];
    ["Offset of field: FontContentsHeader::fch_FileID"]
        [::core::mem::offset_of!(FontContentsHeader, fch_FileID) - 0usize];
    ["Offset of field: FontContentsHeader::fch_NumEntries"]
        [::core::mem::offset_of!(FontContentsHeader, fch_NumEntries) - 2usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DiskFontHeader {
    pub dfh_DF: Node,
    pub dfh_FileID: UWORD,
    pub dfh_Revision: UWORD,
    pub dfh_Segment: LONG,
    pub dfh_Name: [TEXT; 32usize],
    pub dfh_TF: TextFont,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DiskFontHeader"][::core::mem::size_of::<DiskFontHeader>() - 106usize];
    ["Alignment of DiskFontHeader"][::core::mem::align_of::<DiskFontHeader>() - 2usize];
    ["Offset of field: DiskFontHeader::dfh_DF"]
        [::core::mem::offset_of!(DiskFontHeader, dfh_DF) - 0usize];
    ["Offset of field: DiskFontHeader::dfh_FileID"]
        [::core::mem::offset_of!(DiskFontHeader, dfh_FileID) - 14usize];
    ["Offset of field: DiskFontHeader::dfh_Revision"]
        [::core::mem::offset_of!(DiskFontHeader, dfh_Revision) - 16usize];
    ["Offset of field: DiskFontHeader::dfh_Segment"]
        [::core::mem::offset_of!(DiskFontHeader, dfh_Segment) - 18usize];
    ["Offset of field: DiskFontHeader::dfh_Name"]
        [::core::mem::offset_of!(DiskFontHeader, dfh_Name) - 22usize];
    ["Offset of field: DiskFontHeader::dfh_TF"]
        [::core::mem::offset_of!(DiskFontHeader, dfh_TF) - 54usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AvailFonts {
    pub af_Type: UWORD,
    pub af_Attr: TextAttr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AvailFonts"][::core::mem::size_of::<AvailFonts>() - 10usize];
    ["Alignment of AvailFonts"][::core::mem::align_of::<AvailFonts>() - 2usize];
    ["Offset of field: AvailFonts::af_Type"][::core::mem::offset_of!(AvailFonts, af_Type) - 0usize];
    ["Offset of field: AvailFonts::af_Attr"][::core::mem::offset_of!(AvailFonts, af_Attr) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAvailFonts {
    pub taf_Type: UWORD,
    pub taf_Attr: TTextAttr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAvailFonts"][::core::mem::size_of::<TAvailFonts>() - 14usize];
    ["Alignment of TAvailFonts"][::core::mem::align_of::<TAvailFonts>() - 2usize];
    ["Offset of field: TAvailFonts::taf_Type"]
        [::core::mem::offset_of!(TAvailFonts, taf_Type) - 0usize];
    ["Offset of field: TAvailFonts::taf_Attr"]
        [::core::mem::offset_of!(TAvailFonts, taf_Attr) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AvailFontsHeader {
    pub afh_NumEntries: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AvailFontsHeader"][::core::mem::size_of::<AvailFontsHeader>() - 2usize];
    ["Alignment of AvailFontsHeader"][::core::mem::align_of::<AvailFontsHeader>() - 2usize];
    ["Offset of field: AvailFontsHeader::afh_NumEntries"]
        [::core::mem::offset_of!(AvailFontsHeader, afh_NumEntries) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct EGlyphEngine {
    pub ege_Reserved: APTR,
    pub ege_BulletBase: *mut Library,
    pub ege_GlyphEngine: *mut GlyphEngine,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EGlyphEngine"][::core::mem::size_of::<EGlyphEngine>() - 12usize];
    ["Alignment of EGlyphEngine"][::core::mem::align_of::<EGlyphEngine>() - 2usize];
    ["Offset of field: EGlyphEngine::ege_Reserved"]
        [::core::mem::offset_of!(EGlyphEngine, ege_Reserved) - 0usize];
    ["Offset of field: EGlyphEngine::ege_BulletBase"]
        [::core::mem::offset_of!(EGlyphEngine, ege_BulletBase) - 4usize];
    ["Offset of field: EGlyphEngine::ege_GlyphEngine"]
        [::core::mem::offset_of!(EGlyphEngine, ege_GlyphEngine) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct OutlineFont {
    pub olf_OTagPath: STRPTR,
    pub olf_OTagList: *mut TagItem,
    pub olf_EngineName: STRPTR,
    pub olf_LibraryName: STRPTR,
    pub olf_EEngine: EGlyphEngine,
    pub olf_Reserved: APTR,
    pub olf_UserData: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OutlineFont"][::core::mem::size_of::<OutlineFont>() - 36usize];
    ["Alignment of OutlineFont"][::core::mem::align_of::<OutlineFont>() - 2usize];
    ["Offset of field: OutlineFont::olf_OTagPath"]
        [::core::mem::offset_of!(OutlineFont, olf_OTagPath) - 0usize];
    ["Offset of field: OutlineFont::olf_OTagList"]
        [::core::mem::offset_of!(OutlineFont, olf_OTagList) - 4usize];
    ["Offset of field: OutlineFont::olf_EngineName"]
        [::core::mem::offset_of!(OutlineFont, olf_EngineName) - 8usize];
    ["Offset of field: OutlineFont::olf_LibraryName"]
        [::core::mem::offset_of!(OutlineFont, olf_LibraryName) - 12usize];
    ["Offset of field: OutlineFont::olf_EEngine"]
        [::core::mem::offset_of!(OutlineFont, olf_EEngine) - 16usize];
    ["Offset of field: OutlineFont::olf_Reserved"]
        [::core::mem::offset_of!(OutlineFont, olf_Reserved) - 28usize];
    ["Offset of field: OutlineFont::olf_UserData"]
        [::core::mem::offset_of!(OutlineFont, olf_UserData) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GlyphEngine {
    pub gle_Library: *mut Library,
    pub gle_Name: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GlyphEngine"][::core::mem::size_of::<GlyphEngine>() - 8usize];
    ["Alignment of GlyphEngine"][::core::mem::align_of::<GlyphEngine>() - 2usize];
    ["Offset of field: GlyphEngine::gle_Library"]
        [::core::mem::offset_of!(GlyphEngine, gle_Library) - 0usize];
    ["Offset of field: GlyphEngine::gle_Name"]
        [::core::mem::offset_of!(GlyphEngine, gle_Name) - 4usize];
};
pub type FIXED = LONG;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GlyphMap {
    pub glm_BMModulo: UWORD,
    pub glm_BMRows: UWORD,
    pub glm_BlackLeft: UWORD,
    pub glm_BlackTop: UWORD,
    pub glm_BlackWidth: UWORD,
    pub glm_BlackHeight: UWORD,
    pub glm_XOrigin: FIXED,
    pub glm_YOrigin: FIXED,
    pub glm_X0: WORD,
    pub glm_Y0: WORD,
    pub glm_X1: WORD,
    pub glm_Y1: WORD,
    pub glm_Width: FIXED,
    pub glm_BitMap: *mut UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GlyphMap"][::core::mem::size_of::<GlyphMap>() - 36usize];
    ["Alignment of GlyphMap"][::core::mem::align_of::<GlyphMap>() - 2usize];
    ["Offset of field: GlyphMap::glm_BMModulo"]
        [::core::mem::offset_of!(GlyphMap, glm_BMModulo) - 0usize];
    ["Offset of field: GlyphMap::glm_BMRows"]
        [::core::mem::offset_of!(GlyphMap, glm_BMRows) - 2usize];
    ["Offset of field: GlyphMap::glm_BlackLeft"]
        [::core::mem::offset_of!(GlyphMap, glm_BlackLeft) - 4usize];
    ["Offset of field: GlyphMap::glm_BlackTop"]
        [::core::mem::offset_of!(GlyphMap, glm_BlackTop) - 6usize];
    ["Offset of field: GlyphMap::glm_BlackWidth"]
        [::core::mem::offset_of!(GlyphMap, glm_BlackWidth) - 8usize];
    ["Offset of field: GlyphMap::glm_BlackHeight"]
        [::core::mem::offset_of!(GlyphMap, glm_BlackHeight) - 10usize];
    ["Offset of field: GlyphMap::glm_XOrigin"]
        [::core::mem::offset_of!(GlyphMap, glm_XOrigin) - 12usize];
    ["Offset of field: GlyphMap::glm_YOrigin"]
        [::core::mem::offset_of!(GlyphMap, glm_YOrigin) - 16usize];
    ["Offset of field: GlyphMap::glm_X0"][::core::mem::offset_of!(GlyphMap, glm_X0) - 20usize];
    ["Offset of field: GlyphMap::glm_Y0"][::core::mem::offset_of!(GlyphMap, glm_Y0) - 22usize];
    ["Offset of field: GlyphMap::glm_X1"][::core::mem::offset_of!(GlyphMap, glm_X1) - 24usize];
    ["Offset of field: GlyphMap::glm_Y1"][::core::mem::offset_of!(GlyphMap, glm_Y1) - 26usize];
    ["Offset of field: GlyphMap::glm_Width"]
        [::core::mem::offset_of!(GlyphMap, glm_Width) - 28usize];
    ["Offset of field: GlyphMap::glm_BitMap"]
        [::core::mem::offset_of!(GlyphMap, glm_BitMap) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GlyphWidthEntry {
    pub gwe_Node: MinNode,
    pub gwe_Code: UWORD,
    pub gwe_Width: FIXED,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GlyphWidthEntry"][::core::mem::size_of::<GlyphWidthEntry>() - 14usize];
    ["Alignment of GlyphWidthEntry"][::core::mem::align_of::<GlyphWidthEntry>() - 2usize];
    ["Offset of field: GlyphWidthEntry::gwe_Node"]
        [::core::mem::offset_of!(GlyphWidthEntry, gwe_Node) - 0usize];
    ["Offset of field: GlyphWidthEntry::gwe_Code"]
        [::core::mem::offset_of!(GlyphWidthEntry, gwe_Code) - 8usize];
    ["Offset of field: GlyphWidthEntry::gwe_Width"]
        [::core::mem::offset_of!(GlyphWidthEntry, gwe_Width) - 10usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GlyphWidthEntry32 {
    pub gwe32_Node: MinNode,
    pub gwe32_reserved: UWORD,
    pub gwe32_Width: FIXED,
    pub gwe32_Code: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GlyphWidthEntry32"][::core::mem::size_of::<GlyphWidthEntry32>() - 18usize];
    ["Alignment of GlyphWidthEntry32"][::core::mem::align_of::<GlyphWidthEntry32>() - 2usize];
    ["Offset of field: GlyphWidthEntry32::gwe32_Node"]
        [::core::mem::offset_of!(GlyphWidthEntry32, gwe32_Node) - 0usize];
    ["Offset of field: GlyphWidthEntry32::gwe32_reserved"]
        [::core::mem::offset_of!(GlyphWidthEntry32, gwe32_reserved) - 8usize];
    ["Offset of field: GlyphWidthEntry32::gwe32_Width"]
        [::core::mem::offset_of!(GlyphWidthEntry32, gwe32_Width) - 10usize];
    ["Offset of field: GlyphWidthEntry32::gwe32_Code"]
        [::core::mem::offset_of!(GlyphWidthEntry32, gwe32_Code) - 14usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DateTime {
    pub dat_Stamp: DateStamp,
    pub dat_Format: UBYTE,
    pub dat_Flags: UBYTE,
    pub dat_StrDay: STRPTR,
    pub dat_StrDate: STRPTR,
    pub dat_StrTime: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DateTime"][::core::mem::size_of::<DateTime>() - 26usize];
    ["Alignment of DateTime"][::core::mem::align_of::<DateTime>() - 2usize];
    ["Offset of field: DateTime::dat_Stamp"][::core::mem::offset_of!(DateTime, dat_Stamp) - 0usize];
    ["Offset of field: DateTime::dat_Format"]
        [::core::mem::offset_of!(DateTime, dat_Format) - 12usize];
    ["Offset of field: DateTime::dat_Flags"]
        [::core::mem::offset_of!(DateTime, dat_Flags) - 13usize];
    ["Offset of field: DateTime::dat_StrDay"]
        [::core::mem::offset_of!(DateTime, dat_StrDay) - 14usize];
    ["Offset of field: DateTime::dat_StrDate"]
        [::core::mem::offset_of!(DateTime, dat_StrDate) - 18usize];
    ["Offset of field: DateTime::dat_StrTime"]
        [::core::mem::offset_of!(DateTime, dat_StrTime) - 22usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AnchorPath {
    pub ap_Base: *mut AChain,
    pub ap_Last: *mut AChain,
    pub ap_BreakBits: LONG,
    pub ap_FoundBreak: LONG,
    pub ap_Flags: BYTE,
    pub ap_Reserved: BYTE,
    pub ap_Strlen: WORD,
    pub ap_Info: FileInfoBlock,
    pub ap_Buf: [TEXT; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnchorPath"][::core::mem::size_of::<AnchorPath>() - 282usize];
    ["Alignment of AnchorPath"][::core::mem::align_of::<AnchorPath>() - 2usize];
    ["Offset of field: AnchorPath::ap_Base"][::core::mem::offset_of!(AnchorPath, ap_Base) - 0usize];
    ["Offset of field: AnchorPath::ap_Last"][::core::mem::offset_of!(AnchorPath, ap_Last) - 4usize];
    ["Offset of field: AnchorPath::ap_BreakBits"]
        [::core::mem::offset_of!(AnchorPath, ap_BreakBits) - 8usize];
    ["Offset of field: AnchorPath::ap_FoundBreak"]
        [::core::mem::offset_of!(AnchorPath, ap_FoundBreak) - 12usize];
    ["Offset of field: AnchorPath::ap_Flags"]
        [::core::mem::offset_of!(AnchorPath, ap_Flags) - 16usize];
    ["Offset of field: AnchorPath::ap_Reserved"]
        [::core::mem::offset_of!(AnchorPath, ap_Reserved) - 17usize];
    ["Offset of field: AnchorPath::ap_Strlen"]
        [::core::mem::offset_of!(AnchorPath, ap_Strlen) - 18usize];
    ["Offset of field: AnchorPath::ap_Info"]
        [::core::mem::offset_of!(AnchorPath, ap_Info) - 20usize];
    ["Offset of field: AnchorPath::ap_Buf"][::core::mem::offset_of!(AnchorPath, ap_Buf) - 280usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AChain {
    pub an_Child: *mut AChain,
    pub an_Parent: *mut AChain,
    pub an_Lock: BPTR,
    pub an_Info: FileInfoBlock,
    pub an_Flags: BYTE,
    pub an_String: [TEXT; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AChain"][::core::mem::size_of::<AChain>() - 274usize];
    ["Alignment of AChain"][::core::mem::align_of::<AChain>() - 2usize];
    ["Offset of field: AChain::an_Child"][::core::mem::offset_of!(AChain, an_Child) - 0usize];
    ["Offset of field: AChain::an_Parent"][::core::mem::offset_of!(AChain, an_Parent) - 4usize];
    ["Offset of field: AChain::an_Lock"][::core::mem::offset_of!(AChain, an_Lock) - 8usize];
    ["Offset of field: AChain::an_Info"][::core::mem::offset_of!(AChain, an_Info) - 12usize];
    ["Offset of field: AChain::an_Flags"][::core::mem::offset_of!(AChain, an_Flags) - 272usize];
    ["Offset of field: AChain::an_String"][::core::mem::offset_of!(AChain, an_String) - 273usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExAllData {
    pub ed_Next: *mut ExAllData,
    pub ed_Name: STRPTR,
    pub ed_Type: LONG,
    pub ed_Size: ULONG,
    pub ed_Prot: ULONG,
    pub ed_Days: ULONG,
    pub ed_Mins: ULONG,
    pub ed_Ticks: ULONG,
    pub ed_Comment: STRPTR,
    pub ed_OwnerUID: UWORD,
    pub ed_OwnerGID: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExAllData"][::core::mem::size_of::<ExAllData>() - 40usize];
    ["Alignment of ExAllData"][::core::mem::align_of::<ExAllData>() - 2usize];
    ["Offset of field: ExAllData::ed_Next"][::core::mem::offset_of!(ExAllData, ed_Next) - 0usize];
    ["Offset of field: ExAllData::ed_Name"][::core::mem::offset_of!(ExAllData, ed_Name) - 4usize];
    ["Offset of field: ExAllData::ed_Type"][::core::mem::offset_of!(ExAllData, ed_Type) - 8usize];
    ["Offset of field: ExAllData::ed_Size"][::core::mem::offset_of!(ExAllData, ed_Size) - 12usize];
    ["Offset of field: ExAllData::ed_Prot"][::core::mem::offset_of!(ExAllData, ed_Prot) - 16usize];
    ["Offset of field: ExAllData::ed_Days"][::core::mem::offset_of!(ExAllData, ed_Days) - 20usize];
    ["Offset of field: ExAllData::ed_Mins"][::core::mem::offset_of!(ExAllData, ed_Mins) - 24usize];
    ["Offset of field: ExAllData::ed_Ticks"]
        [::core::mem::offset_of!(ExAllData, ed_Ticks) - 28usize];
    ["Offset of field: ExAllData::ed_Comment"]
        [::core::mem::offset_of!(ExAllData, ed_Comment) - 32usize];
    ["Offset of field: ExAllData::ed_OwnerUID"]
        [::core::mem::offset_of!(ExAllData, ed_OwnerUID) - 36usize];
    ["Offset of field: ExAllData::ed_OwnerGID"]
        [::core::mem::offset_of!(ExAllData, ed_OwnerGID) - 38usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExAllControl {
    pub eac_Entries: ULONG,
    pub eac_LastKey: ULONG,
    pub eac_MatchString: STRPTR,
    pub eac_MatchFunc: *mut Hook,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExAllControl"][::core::mem::size_of::<ExAllControl>() - 16usize];
    ["Alignment of ExAllControl"][::core::mem::align_of::<ExAllControl>() - 2usize];
    ["Offset of field: ExAllControl::eac_Entries"]
        [::core::mem::offset_of!(ExAllControl, eac_Entries) - 0usize];
    ["Offset of field: ExAllControl::eac_LastKey"]
        [::core::mem::offset_of!(ExAllControl, eac_LastKey) - 4usize];
    ["Offset of field: ExAllControl::eac_MatchString"]
        [::core::mem::offset_of!(ExAllControl, eac_MatchString) - 8usize];
    ["Offset of field: ExAllControl::eac_MatchFunc"]
        [::core::mem::offset_of!(ExAllControl, eac_MatchFunc) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DosEnvec {
    pub de_TableSize: ULONG,
    pub de_SizeBlock: ULONG,
    pub de_SecOrg: ULONG,
    pub de_Surfaces: ULONG,
    pub de_SectorPerBlock: ULONG,
    pub de_BlocksPerTrack: ULONG,
    pub de_Reserved: ULONG,
    pub de_PreAlloc: ULONG,
    pub de_Interleave: ULONG,
    pub de_LowCyl: ULONG,
    pub de_HighCyl: ULONG,
    pub de_NumBuffers: ULONG,
    pub de_BufMemType: ULONG,
    pub de_MaxTransfer: ULONG,
    pub de_Mask: ULONG,
    pub de_BootPri: LONG,
    pub de_DosType: ULONG,
    pub de_Baud: ULONG,
    pub de_Control: ULONG,
    pub de_BootBlocks: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DosEnvec"][::core::mem::size_of::<DosEnvec>() - 80usize];
    ["Alignment of DosEnvec"][::core::mem::align_of::<DosEnvec>() - 2usize];
    ["Offset of field: DosEnvec::de_TableSize"]
        [::core::mem::offset_of!(DosEnvec, de_TableSize) - 0usize];
    ["Offset of field: DosEnvec::de_SizeBlock"]
        [::core::mem::offset_of!(DosEnvec, de_SizeBlock) - 4usize];
    ["Offset of field: DosEnvec::de_SecOrg"][::core::mem::offset_of!(DosEnvec, de_SecOrg) - 8usize];
    ["Offset of field: DosEnvec::de_Surfaces"]
        [::core::mem::offset_of!(DosEnvec, de_Surfaces) - 12usize];
    ["Offset of field: DosEnvec::de_SectorPerBlock"]
        [::core::mem::offset_of!(DosEnvec, de_SectorPerBlock) - 16usize];
    ["Offset of field: DosEnvec::de_BlocksPerTrack"]
        [::core::mem::offset_of!(DosEnvec, de_BlocksPerTrack) - 20usize];
    ["Offset of field: DosEnvec::de_Reserved"]
        [::core::mem::offset_of!(DosEnvec, de_Reserved) - 24usize];
    ["Offset of field: DosEnvec::de_PreAlloc"]
        [::core::mem::offset_of!(DosEnvec, de_PreAlloc) - 28usize];
    ["Offset of field: DosEnvec::de_Interleave"]
        [::core::mem::offset_of!(DosEnvec, de_Interleave) - 32usize];
    ["Offset of field: DosEnvec::de_LowCyl"]
        [::core::mem::offset_of!(DosEnvec, de_LowCyl) - 36usize];
    ["Offset of field: DosEnvec::de_HighCyl"]
        [::core::mem::offset_of!(DosEnvec, de_HighCyl) - 40usize];
    ["Offset of field: DosEnvec::de_NumBuffers"]
        [::core::mem::offset_of!(DosEnvec, de_NumBuffers) - 44usize];
    ["Offset of field: DosEnvec::de_BufMemType"]
        [::core::mem::offset_of!(DosEnvec, de_BufMemType) - 48usize];
    ["Offset of field: DosEnvec::de_MaxTransfer"]
        [::core::mem::offset_of!(DosEnvec, de_MaxTransfer) - 52usize];
    ["Offset of field: DosEnvec::de_Mask"][::core::mem::offset_of!(DosEnvec, de_Mask) - 56usize];
    ["Offset of field: DosEnvec::de_BootPri"]
        [::core::mem::offset_of!(DosEnvec, de_BootPri) - 60usize];
    ["Offset of field: DosEnvec::de_DosType"]
        [::core::mem::offset_of!(DosEnvec, de_DosType) - 64usize];
    ["Offset of field: DosEnvec::de_Baud"][::core::mem::offset_of!(DosEnvec, de_Baud) - 68usize];
    ["Offset of field: DosEnvec::de_Control"]
        [::core::mem::offset_of!(DosEnvec, de_Control) - 72usize];
    ["Offset of field: DosEnvec::de_BootBlocks"]
        [::core::mem::offset_of!(DosEnvec, de_BootBlocks) - 76usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FileSysStartupMsg {
    pub fssm_Unit: ULONG,
    pub fssm_Device: BSTR,
    pub fssm_Environ: BPTR,
    pub fssm_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileSysStartupMsg"][::core::mem::size_of::<FileSysStartupMsg>() - 16usize];
    ["Alignment of FileSysStartupMsg"][::core::mem::align_of::<FileSysStartupMsg>() - 2usize];
    ["Offset of field: FileSysStartupMsg::fssm_Unit"]
        [::core::mem::offset_of!(FileSysStartupMsg, fssm_Unit) - 0usize];
    ["Offset of field: FileSysStartupMsg::fssm_Device"]
        [::core::mem::offset_of!(FileSysStartupMsg, fssm_Device) - 4usize];
    ["Offset of field: FileSysStartupMsg::fssm_Environ"]
        [::core::mem::offset_of!(FileSysStartupMsg, fssm_Environ) - 8usize];
    ["Offset of field: FileSysStartupMsg::fssm_Flags"]
        [::core::mem::offset_of!(FileSysStartupMsg, fssm_Flags) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DeviceNode {
    pub dn_Next: BPTR,
    pub dn_Type: ULONG,
    pub dn_Task: *mut MsgPort,
    pub dn_Lock: BPTR,
    pub dn_Handler: BSTR,
    pub dn_StackSize: ULONG,
    pub dn_Priority: LONG,
    pub dn_Startup: BPTR,
    pub dn_SegList: BPTR,
    pub dn_GlobalVec: BPTR,
    pub dn_Name: BSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DeviceNode"][::core::mem::size_of::<DeviceNode>() - 44usize];
    ["Alignment of DeviceNode"][::core::mem::align_of::<DeviceNode>() - 2usize];
    ["Offset of field: DeviceNode::dn_Next"][::core::mem::offset_of!(DeviceNode, dn_Next) - 0usize];
    ["Offset of field: DeviceNode::dn_Type"][::core::mem::offset_of!(DeviceNode, dn_Type) - 4usize];
    ["Offset of field: DeviceNode::dn_Task"][::core::mem::offset_of!(DeviceNode, dn_Task) - 8usize];
    ["Offset of field: DeviceNode::dn_Lock"]
        [::core::mem::offset_of!(DeviceNode, dn_Lock) - 12usize];
    ["Offset of field: DeviceNode::dn_Handler"]
        [::core::mem::offset_of!(DeviceNode, dn_Handler) - 16usize];
    ["Offset of field: DeviceNode::dn_StackSize"]
        [::core::mem::offset_of!(DeviceNode, dn_StackSize) - 20usize];
    ["Offset of field: DeviceNode::dn_Priority"]
        [::core::mem::offset_of!(DeviceNode, dn_Priority) - 24usize];
    ["Offset of field: DeviceNode::dn_Startup"]
        [::core::mem::offset_of!(DeviceNode, dn_Startup) - 28usize];
    ["Offset of field: DeviceNode::dn_SegList"]
        [::core::mem::offset_of!(DeviceNode, dn_SegList) - 32usize];
    ["Offset of field: DeviceNode::dn_GlobalVec"]
        [::core::mem::offset_of!(DeviceNode, dn_GlobalVec) - 36usize];
    ["Offset of field: DeviceNode::dn_Name"]
        [::core::mem::offset_of!(DeviceNode, dn_Name) - 40usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NotifyMessage {
    pub nm_ExecMessage: Message,
    pub nm_Class: ULONG,
    pub nm_Code: UWORD,
    pub nm_NReq: *mut NotifyRequest,
    pub nm_DoNotTouch: ULONG,
    pub nm_DoNotTouch2: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NotifyMessage"][::core::mem::size_of::<NotifyMessage>() - 38usize];
    ["Alignment of NotifyMessage"][::core::mem::align_of::<NotifyMessage>() - 2usize];
    ["Offset of field: NotifyMessage::nm_ExecMessage"]
        [::core::mem::offset_of!(NotifyMessage, nm_ExecMessage) - 0usize];
    ["Offset of field: NotifyMessage::nm_Class"]
        [::core::mem::offset_of!(NotifyMessage, nm_Class) - 20usize];
    ["Offset of field: NotifyMessage::nm_Code"]
        [::core::mem::offset_of!(NotifyMessage, nm_Code) - 24usize];
    ["Offset of field: NotifyMessage::nm_NReq"]
        [::core::mem::offset_of!(NotifyMessage, nm_NReq) - 26usize];
    ["Offset of field: NotifyMessage::nm_DoNotTouch"]
        [::core::mem::offset_of!(NotifyMessage, nm_DoNotTouch) - 30usize];
    ["Offset of field: NotifyMessage::nm_DoNotTouch2"]
        [::core::mem::offset_of!(NotifyMessage, nm_DoNotTouch2) - 34usize];
};
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct NotifyRequest {
    pub nr_Name: STRPTR,
    pub nr_FullName: STRPTR,
    pub nr_UserData: ULONG,
    pub nr_Flags: ULONG,
    pub nr_stuff: NotifyRequest__bindgen_ty_1,
    pub nr_Reserved: [ULONG; 4usize],
    pub nr_MsgCount: ULONG,
    pub nr_Handler: *mut MsgPort,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NotifyRequest__bindgen_ty_1 {
    pub nr_Msg: NotifyRequest__bindgen_ty_1__bindgen_ty_1,
    pub nr_Signal: NotifyRequest__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NotifyRequest__bindgen_ty_1__bindgen_ty_1 {
    pub nr_Port: *mut MsgPort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NotifyRequest__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<NotifyRequest__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of NotifyRequest__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<NotifyRequest__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: NotifyRequest__bindgen_ty_1__bindgen_ty_1::nr_Port"]
        [::core::mem::offset_of!(NotifyRequest__bindgen_ty_1__bindgen_ty_1, nr_Port) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NotifyRequest__bindgen_ty_1__bindgen_ty_2 {
    pub nr_Task: *mut Task,
    pub nr_SignalNum: UBYTE,
    pub nr_pad: [UBYTE; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NotifyRequest__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<NotifyRequest__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of NotifyRequest__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<NotifyRequest__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: NotifyRequest__bindgen_ty_1__bindgen_ty_2::nr_Task"]
        [::core::mem::offset_of!(NotifyRequest__bindgen_ty_1__bindgen_ty_2, nr_Task) - 0usize];
    ["Offset of field: NotifyRequest__bindgen_ty_1__bindgen_ty_2::nr_SignalNum"]
        [::core::mem::offset_of!(NotifyRequest__bindgen_ty_1__bindgen_ty_2, nr_SignalNum) - 4usize];
    ["Offset of field: NotifyRequest__bindgen_ty_1__bindgen_ty_2::nr_pad"]
        [::core::mem::offset_of!(NotifyRequest__bindgen_ty_1__bindgen_ty_2, nr_pad) - 5usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NotifyRequest__bindgen_ty_1"]
        [::core::mem::size_of::<NotifyRequest__bindgen_ty_1>() - 8usize];
    ["Alignment of NotifyRequest__bindgen_ty_1"]
        [::core::mem::align_of::<NotifyRequest__bindgen_ty_1>() - 2usize];
    ["Offset of field: NotifyRequest__bindgen_ty_1::nr_Msg"]
        [::core::mem::offset_of!(NotifyRequest__bindgen_ty_1, nr_Msg) - 0usize];
    ["Offset of field: NotifyRequest__bindgen_ty_1::nr_Signal"]
        [::core::mem::offset_of!(NotifyRequest__bindgen_ty_1, nr_Signal) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NotifyRequest"][::core::mem::size_of::<NotifyRequest>() - 48usize];
    ["Alignment of NotifyRequest"][::core::mem::align_of::<NotifyRequest>() - 2usize];
    ["Offset of field: NotifyRequest::nr_Name"]
        [::core::mem::offset_of!(NotifyRequest, nr_Name) - 0usize];
    ["Offset of field: NotifyRequest::nr_FullName"]
        [::core::mem::offset_of!(NotifyRequest, nr_FullName) - 4usize];
    ["Offset of field: NotifyRequest::nr_UserData"]
        [::core::mem::offset_of!(NotifyRequest, nr_UserData) - 8usize];
    ["Offset of field: NotifyRequest::nr_Flags"]
        [::core::mem::offset_of!(NotifyRequest, nr_Flags) - 12usize];
    ["Offset of field: NotifyRequest::nr_stuff"]
        [::core::mem::offset_of!(NotifyRequest, nr_stuff) - 16usize];
    ["Offset of field: NotifyRequest::nr_Reserved"]
        [::core::mem::offset_of!(NotifyRequest, nr_Reserved) - 24usize];
    ["Offset of field: NotifyRequest::nr_MsgCount"]
        [::core::mem::offset_of!(NotifyRequest, nr_MsgCount) - 40usize];
    ["Offset of field: NotifyRequest::nr_Handler"]
        [::core::mem::offset_of!(NotifyRequest, nr_Handler) - 44usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RecordLock {
    pub rec_FH: BPTR,
    pub rec_Offset: ULONG,
    pub rec_Length: ULONG,
    pub rec_Mode: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecordLock"][::core::mem::size_of::<RecordLock>() - 16usize];
    ["Alignment of RecordLock"][::core::mem::align_of::<RecordLock>() - 2usize];
    ["Offset of field: RecordLock::rec_FH"][::core::mem::offset_of!(RecordLock, rec_FH) - 0usize];
    ["Offset of field: RecordLock::rec_Offset"]
        [::core::mem::offset_of!(RecordLock, rec_Offset) - 4usize];
    ["Offset of field: RecordLock::rec_Length"]
        [::core::mem::offset_of!(RecordLock, rec_Length) - 8usize];
    ["Offset of field: RecordLock::rec_Mode"]
        [::core::mem::offset_of!(RecordLock, rec_Mode) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExtendedCommandLineInterface {
    pub cle_Result2: LONG,
    pub cle_SetName: BSTR,
    pub cle_CommandDir: BPTR,
    pub cle_ReturnCode: LONG,
    pub cle_CommandName: BSTR,
    pub cle_FailLevel: LONG,
    pub cle_Prompt: BSTR,
    pub cle_StandardInput: BPTR,
    pub cle_CurrentInput: BPTR,
    pub cle_CommandFile: BSTR,
    pub cle_Interactive: LONG,
    pub cle_Background: LONG,
    pub cle_CurrentOutput: BPTR,
    pub cle_DefaultStack: LONG,
    pub cle_StandardOutput: BPTR,
    pub cle_Module: BPTR,
    pub cle_Hook: Hook,
    pub cle_This: *mut ExtendedCommandLineInterface,
    pub cle_Version: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExtendedCommandLineInterface"]
        [::core::mem::size_of::<ExtendedCommandLineInterface>() - 92usize];
    ["Alignment of ExtendedCommandLineInterface"]
        [::core::mem::align_of::<ExtendedCommandLineInterface>() - 2usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_Result2"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_Result2) - 0usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_SetName"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_SetName) - 4usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_CommandDir"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_CommandDir) - 8usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_ReturnCode"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_ReturnCode) - 12usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_CommandName"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_CommandName) - 16usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_FailLevel"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_FailLevel) - 20usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_Prompt"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_Prompt) - 24usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_StandardInput"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_StandardInput) - 28usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_CurrentInput"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_CurrentInput) - 32usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_CommandFile"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_CommandFile) - 36usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_Interactive"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_Interactive) - 40usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_Background"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_Background) - 44usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_CurrentOutput"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_CurrentOutput) - 48usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_DefaultStack"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_DefaultStack) - 52usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_StandardOutput"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_StandardOutput) - 56usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_Module"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_Module) - 60usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_Hook"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_Hook) - 64usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_This"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_This) - 84usize];
    ["Offset of field: ExtendedCommandLineInterface::cle_Version"]
        [::core::mem::offset_of!(ExtendedCommandLineInterface, cle_Version) - 88usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HistoryNode {
    pub hn_Node: MinNode,
    pub hn_Line: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HistoryNode"][::core::mem::size_of::<HistoryNode>() - 12usize];
    ["Alignment of HistoryNode"][::core::mem::align_of::<HistoryNode>() - 2usize];
    ["Offset of field: HistoryNode::hn_Node"]
        [::core::mem::offset_of!(HistoryNode, hn_Node) - 0usize];
    ["Offset of field: HistoryNode::hn_Line"]
        [::core::mem::offset_of!(HistoryNode, hn_Line) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct LocalVar {
    pub lv_Node: Node,
    pub lv_Flags: UWORD,
    pub lv_Value: STRPTR,
    pub lv_Len: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LocalVar"][::core::mem::size_of::<LocalVar>() - 24usize];
    ["Alignment of LocalVar"][::core::mem::align_of::<LocalVar>() - 2usize];
    ["Offset of field: LocalVar::lv_Node"][::core::mem::offset_of!(LocalVar, lv_Node) - 0usize];
    ["Offset of field: LocalVar::lv_Flags"][::core::mem::offset_of!(LocalVar, lv_Flags) - 14usize];
    ["Offset of field: LocalVar::lv_Value"][::core::mem::offset_of!(LocalVar, lv_Value) - 16usize];
    ["Offset of field: LocalVar::lv_Len"][::core::mem::offset_of!(LocalVar, lv_Len) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpHitTest {
    pub MethodID: ULONG,
    pub gpht_GInfo: *mut GadgetInfo,
    pub gpht_Mouse: gpHitTest__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpHitTest__bindgen_ty_1 {
    pub X: WORD,
    pub Y: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpHitTest__bindgen_ty_1"][::core::mem::size_of::<gpHitTest__bindgen_ty_1>() - 4usize];
    ["Alignment of gpHitTest__bindgen_ty_1"]
        [::core::mem::align_of::<gpHitTest__bindgen_ty_1>() - 2usize];
    ["Offset of field: gpHitTest__bindgen_ty_1::X"]
        [::core::mem::offset_of!(gpHitTest__bindgen_ty_1, X) - 0usize];
    ["Offset of field: gpHitTest__bindgen_ty_1::Y"]
        [::core::mem::offset_of!(gpHitTest__bindgen_ty_1, Y) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpHitTest"][::core::mem::size_of::<gpHitTest>() - 12usize];
    ["Alignment of gpHitTest"][::core::mem::align_of::<gpHitTest>() - 2usize];
    ["Offset of field: gpHitTest::MethodID"][::core::mem::offset_of!(gpHitTest, MethodID) - 0usize];
    ["Offset of field: gpHitTest::gpht_GInfo"]
        [::core::mem::offset_of!(gpHitTest, gpht_GInfo) - 4usize];
    ["Offset of field: gpHitTest::gpht_Mouse"]
        [::core::mem::offset_of!(gpHitTest, gpht_Mouse) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpRender {
    pub MethodID: ULONG,
    pub gpr_GInfo: *mut GadgetInfo,
    pub gpr_RPort: *mut RastPort,
    pub gpr_Redraw: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpRender"][::core::mem::size_of::<gpRender>() - 16usize];
    ["Alignment of gpRender"][::core::mem::align_of::<gpRender>() - 2usize];
    ["Offset of field: gpRender::MethodID"][::core::mem::offset_of!(gpRender, MethodID) - 0usize];
    ["Offset of field: gpRender::gpr_GInfo"][::core::mem::offset_of!(gpRender, gpr_GInfo) - 4usize];
    ["Offset of field: gpRender::gpr_RPort"][::core::mem::offset_of!(gpRender, gpr_RPort) - 8usize];
    ["Offset of field: gpRender::gpr_Redraw"]
        [::core::mem::offset_of!(gpRender, gpr_Redraw) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpInput {
    pub MethodID: ULONG,
    pub gpi_GInfo: *mut GadgetInfo,
    pub gpi_IEvent: *mut InputEvent,
    pub gpi_Termination: *mut LONG,
    pub gpi_Mouse: gpInput__bindgen_ty_1,
    pub gpi_TabletData: *mut TabletData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpInput__bindgen_ty_1 {
    pub X: WORD,
    pub Y: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpInput__bindgen_ty_1"][::core::mem::size_of::<gpInput__bindgen_ty_1>() - 4usize];
    ["Alignment of gpInput__bindgen_ty_1"]
        [::core::mem::align_of::<gpInput__bindgen_ty_1>() - 2usize];
    ["Offset of field: gpInput__bindgen_ty_1::X"]
        [::core::mem::offset_of!(gpInput__bindgen_ty_1, X) - 0usize];
    ["Offset of field: gpInput__bindgen_ty_1::Y"]
        [::core::mem::offset_of!(gpInput__bindgen_ty_1, Y) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpInput"][::core::mem::size_of::<gpInput>() - 24usize];
    ["Alignment of gpInput"][::core::mem::align_of::<gpInput>() - 2usize];
    ["Offset of field: gpInput::MethodID"][::core::mem::offset_of!(gpInput, MethodID) - 0usize];
    ["Offset of field: gpInput::gpi_GInfo"][::core::mem::offset_of!(gpInput, gpi_GInfo) - 4usize];
    ["Offset of field: gpInput::gpi_IEvent"][::core::mem::offset_of!(gpInput, gpi_IEvent) - 8usize];
    ["Offset of field: gpInput::gpi_Termination"]
        [::core::mem::offset_of!(gpInput, gpi_Termination) - 12usize];
    ["Offset of field: gpInput::gpi_Mouse"][::core::mem::offset_of!(gpInput, gpi_Mouse) - 16usize];
    ["Offset of field: gpInput::gpi_TabletData"]
        [::core::mem::offset_of!(gpInput, gpi_TabletData) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpGoInactive {
    pub MethodID: ULONG,
    pub gpgi_GInfo: *mut GadgetInfo,
    pub gpgi_Abort: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpGoInactive"][::core::mem::size_of::<gpGoInactive>() - 12usize];
    ["Alignment of gpGoInactive"][::core::mem::align_of::<gpGoInactive>() - 2usize];
    ["Offset of field: gpGoInactive::MethodID"]
        [::core::mem::offset_of!(gpGoInactive, MethodID) - 0usize];
    ["Offset of field: gpGoInactive::gpgi_GInfo"]
        [::core::mem::offset_of!(gpGoInactive, gpgi_GInfo) - 4usize];
    ["Offset of field: gpGoInactive::gpgi_Abort"]
        [::core::mem::offset_of!(gpGoInactive, gpgi_Abort) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpLayout {
    pub MethodID: ULONG,
    pub gpl_GInfo: *mut GadgetInfo,
    pub gpl_Initial: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpLayout"][::core::mem::size_of::<gpLayout>() - 12usize];
    ["Alignment of gpLayout"][::core::mem::align_of::<gpLayout>() - 2usize];
    ["Offset of field: gpLayout::MethodID"][::core::mem::offset_of!(gpLayout, MethodID) - 0usize];
    ["Offset of field: gpLayout::gpl_GInfo"][::core::mem::offset_of!(gpLayout, gpl_GInfo) - 4usize];
    ["Offset of field: gpLayout::gpl_Initial"]
        [::core::mem::offset_of!(gpLayout, gpl_Initial) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpDomain {
    pub MethodID: ULONG,
    pub gpd_GInfo: *mut GadgetInfo,
    pub gpd_RPort: *mut RastPort,
    pub gpd_Which: LONG,
    pub gpd_Domain: IBox,
    pub gpd_Attrs: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpDomain"][::core::mem::size_of::<gpDomain>() - 28usize];
    ["Alignment of gpDomain"][::core::mem::align_of::<gpDomain>() - 2usize];
    ["Offset of field: gpDomain::MethodID"][::core::mem::offset_of!(gpDomain, MethodID) - 0usize];
    ["Offset of field: gpDomain::gpd_GInfo"][::core::mem::offset_of!(gpDomain, gpd_GInfo) - 4usize];
    ["Offset of field: gpDomain::gpd_RPort"][::core::mem::offset_of!(gpDomain, gpd_RPort) - 8usize];
    ["Offset of field: gpDomain::gpd_Which"]
        [::core::mem::offset_of!(gpDomain, gpd_Which) - 12usize];
    ["Offset of field: gpDomain::gpd_Domain"]
        [::core::mem::offset_of!(gpDomain, gpd_Domain) - 16usize];
    ["Offset of field: gpDomain::gpd_Attrs"]
        [::core::mem::offset_of!(gpDomain, gpd_Attrs) - 24usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpKeyTest {
    pub MethodID: ULONG,
    pub gpkt_GInfo: *mut GadgetInfo,
    pub gpkt_IMsg: *mut IntuiMessage,
    pub gpkt_VanillaKey: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpKeyTest"][::core::mem::size_of::<gpKeyTest>() - 16usize];
    ["Alignment of gpKeyTest"][::core::mem::align_of::<gpKeyTest>() - 2usize];
    ["Offset of field: gpKeyTest::MethodID"][::core::mem::offset_of!(gpKeyTest, MethodID) - 0usize];
    ["Offset of field: gpKeyTest::gpkt_GInfo"]
        [::core::mem::offset_of!(gpKeyTest, gpkt_GInfo) - 4usize];
    ["Offset of field: gpKeyTest::gpkt_IMsg"]
        [::core::mem::offset_of!(gpKeyTest, gpkt_IMsg) - 8usize];
    ["Offset of field: gpKeyTest::gpkt_VanillaKey"]
        [::core::mem::offset_of!(gpKeyTest, gpkt_VanillaKey) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpKeyInput {
    pub MethodID: ULONG,
    pub gpk_GInfo: *mut GadgetInfo,
    pub gpk_IEvent: *mut InputEvent,
    pub gpk_Termination: *mut LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpKeyInput"][::core::mem::size_of::<gpKeyInput>() - 16usize];
    ["Alignment of gpKeyInput"][::core::mem::align_of::<gpKeyInput>() - 2usize];
    ["Offset of field: gpKeyInput::MethodID"]
        [::core::mem::offset_of!(gpKeyInput, MethodID) - 0usize];
    ["Offset of field: gpKeyInput::gpk_GInfo"]
        [::core::mem::offset_of!(gpKeyInput, gpk_GInfo) - 4usize];
    ["Offset of field: gpKeyInput::gpk_IEvent"]
        [::core::mem::offset_of!(gpKeyInput, gpk_IEvent) - 8usize];
    ["Offset of field: gpKeyInput::gpk_Termination"]
        [::core::mem::offset_of!(gpKeyInput, gpk_Termination) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpKeyGoInactive {
    pub MethodID: ULONG,
    pub gpki_GInfo: *mut GadgetInfo,
    pub gpki_Abort: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpKeyGoInactive"][::core::mem::size_of::<gpKeyGoInactive>() - 12usize];
    ["Alignment of gpKeyGoInactive"][::core::mem::align_of::<gpKeyGoInactive>() - 2usize];
    ["Offset of field: gpKeyGoInactive::MethodID"]
        [::core::mem::offset_of!(gpKeyGoInactive, MethodID) - 0usize];
    ["Offset of field: gpKeyGoInactive::gpki_GInfo"]
        [::core::mem::offset_of!(gpKeyGoInactive, gpki_GInfo) - 4usize];
    ["Offset of field: gpKeyGoInactive::gpki_Abort"]
        [::core::mem::offset_of!(gpKeyGoInactive, gpki_Abort) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct impFrameBox {
    pub MethodID: ULONG,
    pub imp_ContentsBox: *mut IBox,
    pub imp_FrameBox: *mut IBox,
    pub imp_DrInfo: *mut DrawInfo,
    pub imp_FrameFlags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impFrameBox"][::core::mem::size_of::<impFrameBox>() - 20usize];
    ["Alignment of impFrameBox"][::core::mem::align_of::<impFrameBox>() - 2usize];
    ["Offset of field: impFrameBox::MethodID"]
        [::core::mem::offset_of!(impFrameBox, MethodID) - 0usize];
    ["Offset of field: impFrameBox::imp_ContentsBox"]
        [::core::mem::offset_of!(impFrameBox, imp_ContentsBox) - 4usize];
    ["Offset of field: impFrameBox::imp_FrameBox"]
        [::core::mem::offset_of!(impFrameBox, imp_FrameBox) - 8usize];
    ["Offset of field: impFrameBox::imp_DrInfo"]
        [::core::mem::offset_of!(impFrameBox, imp_DrInfo) - 12usize];
    ["Offset of field: impFrameBox::imp_FrameFlags"]
        [::core::mem::offset_of!(impFrameBox, imp_FrameFlags) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct impDraw {
    pub MethodID: ULONG,
    pub imp_RPort: *mut RastPort,
    pub imp_Offset: impDraw__bindgen_ty_1,
    pub imp_State: ULONG,
    pub imp_DrInfo: *mut DrawInfo,
    pub imp_Dimensions: impDraw__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct impDraw__bindgen_ty_1 {
    pub X: WORD,
    pub Y: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impDraw__bindgen_ty_1"][::core::mem::size_of::<impDraw__bindgen_ty_1>() - 4usize];
    ["Alignment of impDraw__bindgen_ty_1"]
        [::core::mem::align_of::<impDraw__bindgen_ty_1>() - 2usize];
    ["Offset of field: impDraw__bindgen_ty_1::X"]
        [::core::mem::offset_of!(impDraw__bindgen_ty_1, X) - 0usize];
    ["Offset of field: impDraw__bindgen_ty_1::Y"]
        [::core::mem::offset_of!(impDraw__bindgen_ty_1, Y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct impDraw__bindgen_ty_2 {
    pub Width: WORD,
    pub Height: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impDraw__bindgen_ty_2"][::core::mem::size_of::<impDraw__bindgen_ty_2>() - 4usize];
    ["Alignment of impDraw__bindgen_ty_2"]
        [::core::mem::align_of::<impDraw__bindgen_ty_2>() - 2usize];
    ["Offset of field: impDraw__bindgen_ty_2::Width"]
        [::core::mem::offset_of!(impDraw__bindgen_ty_2, Width) - 0usize];
    ["Offset of field: impDraw__bindgen_ty_2::Height"]
        [::core::mem::offset_of!(impDraw__bindgen_ty_2, Height) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impDraw"][::core::mem::size_of::<impDraw>() - 24usize];
    ["Alignment of impDraw"][::core::mem::align_of::<impDraw>() - 2usize];
    ["Offset of field: impDraw::MethodID"][::core::mem::offset_of!(impDraw, MethodID) - 0usize];
    ["Offset of field: impDraw::imp_RPort"][::core::mem::offset_of!(impDraw, imp_RPort) - 4usize];
    ["Offset of field: impDraw::imp_Offset"][::core::mem::offset_of!(impDraw, imp_Offset) - 8usize];
    ["Offset of field: impDraw::imp_State"][::core::mem::offset_of!(impDraw, imp_State) - 12usize];
    ["Offset of field: impDraw::imp_DrInfo"]
        [::core::mem::offset_of!(impDraw, imp_DrInfo) - 16usize];
    ["Offset of field: impDraw::imp_Dimensions"]
        [::core::mem::offset_of!(impDraw, imp_Dimensions) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct impErase {
    pub MethodID: ULONG,
    pub imp_RPort: *mut RastPort,
    pub imp_Offset: impErase__bindgen_ty_1,
    pub imp_Dimensions: impErase__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct impErase__bindgen_ty_1 {
    pub X: WORD,
    pub Y: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impErase__bindgen_ty_1"][::core::mem::size_of::<impErase__bindgen_ty_1>() - 4usize];
    ["Alignment of impErase__bindgen_ty_1"]
        [::core::mem::align_of::<impErase__bindgen_ty_1>() - 2usize];
    ["Offset of field: impErase__bindgen_ty_1::X"]
        [::core::mem::offset_of!(impErase__bindgen_ty_1, X) - 0usize];
    ["Offset of field: impErase__bindgen_ty_1::Y"]
        [::core::mem::offset_of!(impErase__bindgen_ty_1, Y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct impErase__bindgen_ty_2 {
    pub Width: WORD,
    pub Height: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impErase__bindgen_ty_2"][::core::mem::size_of::<impErase__bindgen_ty_2>() - 4usize];
    ["Alignment of impErase__bindgen_ty_2"]
        [::core::mem::align_of::<impErase__bindgen_ty_2>() - 2usize];
    ["Offset of field: impErase__bindgen_ty_2::Width"]
        [::core::mem::offset_of!(impErase__bindgen_ty_2, Width) - 0usize];
    ["Offset of field: impErase__bindgen_ty_2::Height"]
        [::core::mem::offset_of!(impErase__bindgen_ty_2, Height) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impErase"][::core::mem::size_of::<impErase>() - 16usize];
    ["Alignment of impErase"][::core::mem::align_of::<impErase>() - 2usize];
    ["Offset of field: impErase::MethodID"][::core::mem::offset_of!(impErase, MethodID) - 0usize];
    ["Offset of field: impErase::imp_RPort"][::core::mem::offset_of!(impErase, imp_RPort) - 4usize];
    ["Offset of field: impErase::imp_Offset"]
        [::core::mem::offset_of!(impErase, imp_Offset) - 8usize];
    ["Offset of field: impErase::imp_Dimensions"]
        [::core::mem::offset_of!(impErase, imp_Dimensions) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct impHitTest {
    pub MethodID: ULONG,
    pub imp_Point: impHitTest__bindgen_ty_1,
    pub imp_Dimensions: impHitTest__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct impHitTest__bindgen_ty_1 {
    pub X: WORD,
    pub Y: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impHitTest__bindgen_ty_1"]
        [::core::mem::size_of::<impHitTest__bindgen_ty_1>() - 4usize];
    ["Alignment of impHitTest__bindgen_ty_1"]
        [::core::mem::align_of::<impHitTest__bindgen_ty_1>() - 2usize];
    ["Offset of field: impHitTest__bindgen_ty_1::X"]
        [::core::mem::offset_of!(impHitTest__bindgen_ty_1, X) - 0usize];
    ["Offset of field: impHitTest__bindgen_ty_1::Y"]
        [::core::mem::offset_of!(impHitTest__bindgen_ty_1, Y) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct impHitTest__bindgen_ty_2 {
    pub Width: WORD,
    pub Height: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impHitTest__bindgen_ty_2"]
        [::core::mem::size_of::<impHitTest__bindgen_ty_2>() - 4usize];
    ["Alignment of impHitTest__bindgen_ty_2"]
        [::core::mem::align_of::<impHitTest__bindgen_ty_2>() - 2usize];
    ["Offset of field: impHitTest__bindgen_ty_2::Width"]
        [::core::mem::offset_of!(impHitTest__bindgen_ty_2, Width) - 0usize];
    ["Offset of field: impHitTest__bindgen_ty_2::Height"]
        [::core::mem::offset_of!(impHitTest__bindgen_ty_2, Height) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impHitTest"][::core::mem::size_of::<impHitTest>() - 12usize];
    ["Alignment of impHitTest"][::core::mem::align_of::<impHitTest>() - 2usize];
    ["Offset of field: impHitTest::MethodID"]
        [::core::mem::offset_of!(impHitTest, MethodID) - 0usize];
    ["Offset of field: impHitTest::imp_Point"]
        [::core::mem::offset_of!(impHitTest, imp_Point) - 4usize];
    ["Offset of field: impHitTest::imp_Dimensions"]
        [::core::mem::offset_of!(impHitTest, imp_Dimensions) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct impDomainFrame {
    pub MethodID: ULONG,
    pub imp_DrInfo: *mut DrawInfo,
    pub imp_RPort: *mut RastPort,
    pub imp_Which: LONG,
    pub imp_Domain: IBox,
    pub imp_Attrs: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of impDomainFrame"][::core::mem::size_of::<impDomainFrame>() - 28usize];
    ["Alignment of impDomainFrame"][::core::mem::align_of::<impDomainFrame>() - 2usize];
    ["Offset of field: impDomainFrame::MethodID"]
        [::core::mem::offset_of!(impDomainFrame, MethodID) - 0usize];
    ["Offset of field: impDomainFrame::imp_DrInfo"]
        [::core::mem::offset_of!(impDomainFrame, imp_DrInfo) - 4usize];
    ["Offset of field: impDomainFrame::imp_RPort"]
        [::core::mem::offset_of!(impDomainFrame, imp_RPort) - 8usize];
    ["Offset of field: impDomainFrame::imp_Which"]
        [::core::mem::offset_of!(impDomainFrame, imp_Which) - 12usize];
    ["Offset of field: impDomainFrame::imp_Domain"]
        [::core::mem::offset_of!(impDomainFrame, imp_Domain) - 16usize];
    ["Offset of field: impDomainFrame::imp_Attrs"]
        [::core::mem::offset_of!(impDomainFrame, imp_Attrs) - 24usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ColorWheelHSB {
    pub cw_Hue: ULONG,
    pub cw_Saturation: ULONG,
    pub cw_Brightness: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorWheelHSB"][::core::mem::size_of::<ColorWheelHSB>() - 12usize];
    ["Alignment of ColorWheelHSB"][::core::mem::align_of::<ColorWheelHSB>() - 2usize];
    ["Offset of field: ColorWheelHSB::cw_Hue"]
        [::core::mem::offset_of!(ColorWheelHSB, cw_Hue) - 0usize];
    ["Offset of field: ColorWheelHSB::cw_Saturation"]
        [::core::mem::offset_of!(ColorWheelHSB, cw_Saturation) - 4usize];
    ["Offset of field: ColorWheelHSB::cw_Brightness"]
        [::core::mem::offset_of!(ColorWheelHSB, cw_Brightness) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ColorWheelRGB {
    pub cw_Red: ULONG,
    pub cw_Green: ULONG,
    pub cw_Blue: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColorWheelRGB"][::core::mem::size_of::<ColorWheelRGB>() - 12usize];
    ["Alignment of ColorWheelRGB"][::core::mem::align_of::<ColorWheelRGB>() - 2usize];
    ["Offset of field: ColorWheelRGB::cw_Red"]
        [::core::mem::offset_of!(ColorWheelRGB, cw_Red) - 0usize];
    ["Offset of field: ColorWheelRGB::cw_Green"]
        [::core::mem::offset_of!(ColorWheelRGB, cw_Green) - 4usize];
    ["Offset of field: ColorWheelRGB::cw_Blue"]
        [::core::mem::offset_of!(ColorWheelRGB, cw_Blue) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gcRequest {
    pub MethodID: ULONG,
    pub gcr_Window: *mut Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gcRequest"][::core::mem::size_of::<gcRequest>() - 8usize];
    ["Alignment of gcRequest"][::core::mem::align_of::<gcRequest>() - 2usize];
    ["Offset of field: gcRequest::MethodID"][::core::mem::offset_of!(gcRequest, MethodID) - 0usize];
    ["Offset of field: gcRequest::gcr_Window"]
        [::core::mem::offset_of!(gcRequest, gcr_Window) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gfileRequest {
    pub MethodID: ULONG,
    pub gfile_Window: *mut Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gfileRequest"][::core::mem::size_of::<gfileRequest>() - 8usize];
    ["Alignment of gfileRequest"][::core::mem::align_of::<gfileRequest>() - 2usize];
    ["Offset of field: gfileRequest::MethodID"]
        [::core::mem::offset_of!(gfileRequest, MethodID) - 0usize];
    ["Offset of field: gfileRequest::gfile_Window"]
        [::core::mem::offset_of!(gfileRequest, gfile_Window) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gfileFreelist {
    pub MethodID: ULONG,
    pub gfile_Filelist: *mut List,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gfileFreelist"][::core::mem::size_of::<gfileFreelist>() - 8usize];
    ["Alignment of gfileFreelist"][::core::mem::align_of::<gfileFreelist>() - 2usize];
    ["Offset of field: gfileFreelist::MethodID"]
        [::core::mem::offset_of!(gfileFreelist, MethodID) - 0usize];
    ["Offset of field: gfileFreelist::gfile_Filelist"]
        [::core::mem::offset_of!(gfileFreelist, gfile_Filelist) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gfRequest {
    pub MethodID: ULONG,
    pub gfr_Window: *mut Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gfRequest"][::core::mem::size_of::<gfRequest>() - 8usize];
    ["Alignment of gfRequest"][::core::mem::align_of::<gfRequest>() - 2usize];
    ["Offset of field: gfRequest::MethodID"][::core::mem::offset_of!(gfRequest, MethodID) - 0usize];
    ["Offset of field: gfRequest::gfr_Window"]
        [::core::mem::offset_of!(gfRequest, gfr_Window) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gsmRequest {
    pub MethodID: ULONG,
    pub gsmr_Window: *mut Window,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gsmRequest"][::core::mem::size_of::<gsmRequest>() - 8usize];
    ["Alignment of gsmRequest"][::core::mem::align_of::<gsmRequest>() - 2usize];
    ["Offset of field: gsmRequest::MethodID"]
        [::core::mem::offset_of!(gsmRequest, MethodID) - 0usize];
    ["Offset of field: gsmRequest::gsmr_Window"]
        [::core::mem::offset_of!(gsmRequest, gsmr_Window) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct WeightObject {
    pub wb_SuccHeight: ULONG,
    pub wb_PredHeight: ULONG,
    pub wb_Reserved1: ULONG,
    pub wb_SuccWidth: ULONG,
    pub wb_PredWidth: ULONG,
    pub wb_Reserved2: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WeightObject"][::core::mem::size_of::<WeightObject>() - 24usize];
    ["Alignment of WeightObject"][::core::mem::align_of::<WeightObject>() - 2usize];
    ["Offset of field: WeightObject::wb_SuccHeight"]
        [::core::mem::offset_of!(WeightObject, wb_SuccHeight) - 0usize];
    ["Offset of field: WeightObject::wb_PredHeight"]
        [::core::mem::offset_of!(WeightObject, wb_PredHeight) - 4usize];
    ["Offset of field: WeightObject::wb_Reserved1"]
        [::core::mem::offset_of!(WeightObject, wb_Reserved1) - 8usize];
    ["Offset of field: WeightObject::wb_SuccWidth"]
        [::core::mem::offset_of!(WeightObject, wb_SuccWidth) - 12usize];
    ["Offset of field: WeightObject::wb_PredWidth"]
        [::core::mem::offset_of!(WeightObject, wb_PredWidth) - 16usize];
    ["Offset of field: WeightObject::wb_Reserved2"]
        [::core::mem::offset_of!(WeightObject, wb_Reserved2) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LayoutLimits {
    pub MinWidth: UWORD,
    pub MinHeight: UWORD,
    pub MaxWidth: UWORD,
    pub MaxHeight: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LayoutLimits"][::core::mem::size_of::<LayoutLimits>() - 8usize];
    ["Alignment of LayoutLimits"][::core::mem::align_of::<LayoutLimits>() - 2usize];
    ["Offset of field: LayoutLimits::MinWidth"]
        [::core::mem::offset_of!(LayoutLimits, MinWidth) - 0usize];
    ["Offset of field: LayoutLimits::MinHeight"]
        [::core::mem::offset_of!(LayoutLimits, MinHeight) - 2usize];
    ["Offset of field: LayoutLimits::MaxWidth"]
        [::core::mem::offset_of!(LayoutLimits, MaxWidth) - 4usize];
    ["Offset of field: LayoutLimits::MaxHeight"]
        [::core::mem::offset_of!(LayoutLimits, MaxHeight) - 6usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lmAddChild {
    pub MethodID: ULONG,
    pub lm_Window: *mut Window,
    pub lm_Object: *mut Object,
    pub lm_ObjectAttrs: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lmAddChild"][::core::mem::size_of::<lmAddChild>() - 16usize];
    ["Alignment of lmAddChild"][::core::mem::align_of::<lmAddChild>() - 2usize];
    ["Offset of field: lmAddChild::MethodID"]
        [::core::mem::offset_of!(lmAddChild, MethodID) - 0usize];
    ["Offset of field: lmAddChild::lm_Window"]
        [::core::mem::offset_of!(lmAddChild, lm_Window) - 4usize];
    ["Offset of field: lmAddChild::lm_Object"]
        [::core::mem::offset_of!(lmAddChild, lm_Object) - 8usize];
    ["Offset of field: lmAddChild::lm_ObjectAttrs"]
        [::core::mem::offset_of!(lmAddChild, lm_ObjectAttrs) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lmAddImage {
    pub MethodID: ULONG,
    pub lm_Window: *mut Window,
    pub lm_Object: *mut Object,
    pub lm_ObjectAttrs: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lmAddImage"][::core::mem::size_of::<lmAddImage>() - 16usize];
    ["Alignment of lmAddImage"][::core::mem::align_of::<lmAddImage>() - 2usize];
    ["Offset of field: lmAddImage::MethodID"]
        [::core::mem::offset_of!(lmAddImage, MethodID) - 0usize];
    ["Offset of field: lmAddImage::lm_Window"]
        [::core::mem::offset_of!(lmAddImage, lm_Window) - 4usize];
    ["Offset of field: lmAddImage::lm_Object"]
        [::core::mem::offset_of!(lmAddImage, lm_Object) - 8usize];
    ["Offset of field: lmAddImage::lm_ObjectAttrs"]
        [::core::mem::offset_of!(lmAddImage, lm_ObjectAttrs) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lmRemoveChild {
    pub MethodID: ULONG,
    pub lm_Window: *mut Window,
    pub lm_Object: *mut Object,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lmRemoveChild"][::core::mem::size_of::<lmRemoveChild>() - 12usize];
    ["Alignment of lmRemoveChild"][::core::mem::align_of::<lmRemoveChild>() - 2usize];
    ["Offset of field: lmRemoveChild::MethodID"]
        [::core::mem::offset_of!(lmRemoveChild, MethodID) - 0usize];
    ["Offset of field: lmRemoveChild::lm_Window"]
        [::core::mem::offset_of!(lmRemoveChild, lm_Window) - 4usize];
    ["Offset of field: lmRemoveChild::lm_Object"]
        [::core::mem::offset_of!(lmRemoveChild, lm_Object) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lmModifyChild {
    pub MethodID: ULONG,
    pub lm_Window: *mut Window,
    pub lm_Object: *mut Object,
    pub lm_ObjectAttrs: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lmModifyChild"][::core::mem::size_of::<lmModifyChild>() - 16usize];
    ["Alignment of lmModifyChild"][::core::mem::align_of::<lmModifyChild>() - 2usize];
    ["Offset of field: lmModifyChild::MethodID"]
        [::core::mem::offset_of!(lmModifyChild, MethodID) - 0usize];
    ["Offset of field: lmModifyChild::lm_Window"]
        [::core::mem::offset_of!(lmModifyChild, lm_Window) - 4usize];
    ["Offset of field: lmModifyChild::lm_Object"]
        [::core::mem::offset_of!(lmModifyChild, lm_Object) - 8usize];
    ["Offset of field: lmModifyChild::lm_ObjectAttrs"]
        [::core::mem::offset_of!(lmModifyChild, lm_ObjectAttrs) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lbAddNode {
    pub MethodID: ULONG,
    pub lba_GInfo: *mut GadgetInfo,
    pub lba_Node: *mut Node,
    pub lba_NodeAttrs: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lbAddNode"][::core::mem::size_of::<lbAddNode>() - 16usize];
    ["Alignment of lbAddNode"][::core::mem::align_of::<lbAddNode>() - 2usize];
    ["Offset of field: lbAddNode::MethodID"][::core::mem::offset_of!(lbAddNode, MethodID) - 0usize];
    ["Offset of field: lbAddNode::lba_GInfo"]
        [::core::mem::offset_of!(lbAddNode, lba_GInfo) - 4usize];
    ["Offset of field: lbAddNode::lba_Node"][::core::mem::offset_of!(lbAddNode, lba_Node) - 8usize];
    ["Offset of field: lbAddNode::lba_NodeAttrs"]
        [::core::mem::offset_of!(lbAddNode, lba_NodeAttrs) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lbRemNode {
    pub MethodID: ULONG,
    pub lbr_GInfo: *mut GadgetInfo,
    pub lbr_Node: *mut Node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lbRemNode"][::core::mem::size_of::<lbRemNode>() - 12usize];
    ["Alignment of lbRemNode"][::core::mem::align_of::<lbRemNode>() - 2usize];
    ["Offset of field: lbRemNode::MethodID"][::core::mem::offset_of!(lbRemNode, MethodID) - 0usize];
    ["Offset of field: lbRemNode::lbr_GInfo"]
        [::core::mem::offset_of!(lbRemNode, lbr_GInfo) - 4usize];
    ["Offset of field: lbRemNode::lbr_Node"][::core::mem::offset_of!(lbRemNode, lbr_Node) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lbEditNode {
    pub MethodID: ULONG,
    pub lbe_GInfo: *mut GadgetInfo,
    pub lbe_Node: *mut Node,
    pub lbe_NodeAttrs: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lbEditNode"][::core::mem::size_of::<lbEditNode>() - 16usize];
    ["Alignment of lbEditNode"][::core::mem::align_of::<lbEditNode>() - 2usize];
    ["Offset of field: lbEditNode::MethodID"]
        [::core::mem::offset_of!(lbEditNode, MethodID) - 0usize];
    ["Offset of field: lbEditNode::lbe_GInfo"]
        [::core::mem::offset_of!(lbEditNode, lbe_GInfo) - 4usize];
    ["Offset of field: lbEditNode::lbe_Node"]
        [::core::mem::offset_of!(lbEditNode, lbe_Node) - 8usize];
    ["Offset of field: lbEditNode::lbe_NodeAttrs"]
        [::core::mem::offset_of!(lbEditNode, lbe_NodeAttrs) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lbSort {
    pub MethodID: ULONG,
    pub lbs_GInfo: *mut GadgetInfo,
    pub lbs_Column: ULONG,
    pub lbs_Direction: ULONG,
    pub lbs_CompareHook: *mut Hook,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lbSort"][::core::mem::size_of::<lbSort>() - 20usize];
    ["Alignment of lbSort"][::core::mem::align_of::<lbSort>() - 2usize];
    ["Offset of field: lbSort::MethodID"][::core::mem::offset_of!(lbSort, MethodID) - 0usize];
    ["Offset of field: lbSort::lbs_GInfo"][::core::mem::offset_of!(lbSort, lbs_GInfo) - 4usize];
    ["Offset of field: lbSort::lbs_Column"][::core::mem::offset_of!(lbSort, lbs_Column) - 8usize];
    ["Offset of field: lbSort::lbs_Direction"]
        [::core::mem::offset_of!(lbSort, lbs_Direction) - 12usize];
    ["Offset of field: lbSort::lbs_CompareHook"]
        [::core::mem::offset_of!(lbSort, lbs_CompareHook) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lbShowChildren {
    pub MethodID: ULONG,
    pub lbsc_GInfo: *mut GadgetInfo,
    pub lbsc_Node: *mut Node,
    pub lbsc_Depth: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lbShowChildren"][::core::mem::size_of::<lbShowChildren>() - 14usize];
    ["Alignment of lbShowChildren"][::core::mem::align_of::<lbShowChildren>() - 2usize];
    ["Offset of field: lbShowChildren::MethodID"]
        [::core::mem::offset_of!(lbShowChildren, MethodID) - 0usize];
    ["Offset of field: lbShowChildren::lbsc_GInfo"]
        [::core::mem::offset_of!(lbShowChildren, lbsc_GInfo) - 4usize];
    ["Offset of field: lbShowChildren::lbsc_Node"]
        [::core::mem::offset_of!(lbShowChildren, lbsc_Node) - 8usize];
    ["Offset of field: lbShowChildren::lbsc_Depth"]
        [::core::mem::offset_of!(lbShowChildren, lbsc_Depth) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct lbHideChildren {
    pub MethodID: ULONG,
    pub lbhc_GInfo: *mut GadgetInfo,
    pub lbhc_Node: *mut Node,
    pub lbhc_Depth: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lbHideChildren"][::core::mem::size_of::<lbHideChildren>() - 14usize];
    ["Alignment of lbHideChildren"][::core::mem::align_of::<lbHideChildren>() - 2usize];
    ["Offset of field: lbHideChildren::MethodID"]
        [::core::mem::offset_of!(lbHideChildren, MethodID) - 0usize];
    ["Offset of field: lbHideChildren::lbhc_GInfo"]
        [::core::mem::offset_of!(lbHideChildren, lbhc_GInfo) - 4usize];
    ["Offset of field: lbHideChildren::lbhc_Node"]
        [::core::mem::offset_of!(lbHideChildren, lbhc_Node) - 8usize];
    ["Offset of field: lbHideChildren::lbhc_Depth"]
        [::core::mem::offset_of!(lbHideChildren, lbhc_Depth) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct LBDrawMsg {
    pub lbdm_MethodID: ULONG,
    pub lbdm_RastPort: *mut RastPort,
    pub lbdm_DrawInfo: *mut DrawInfo,
    pub lbdm_Bounds: Rectangle,
    pub lbdm_State: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LBDrawMsg"][::core::mem::size_of::<LBDrawMsg>() - 24usize];
    ["Alignment of LBDrawMsg"][::core::mem::align_of::<LBDrawMsg>() - 2usize];
    ["Offset of field: LBDrawMsg::lbdm_MethodID"]
        [::core::mem::offset_of!(LBDrawMsg, lbdm_MethodID) - 0usize];
    ["Offset of field: LBDrawMsg::lbdm_RastPort"]
        [::core::mem::offset_of!(LBDrawMsg, lbdm_RastPort) - 4usize];
    ["Offset of field: LBDrawMsg::lbdm_DrawInfo"]
        [::core::mem::offset_of!(LBDrawMsg, lbdm_DrawInfo) - 8usize];
    ["Offset of field: LBDrawMsg::lbdm_Bounds"]
        [::core::mem::offset_of!(LBDrawMsg, lbdm_Bounds) - 12usize];
    ["Offset of field: LBDrawMsg::lbdm_State"]
        [::core::mem::offset_of!(LBDrawMsg, lbdm_State) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct LBSortMsg {
    pub lbsm_TypeA: ULONG,
    pub lbsm_DataA: LBSortMsg__bindgen_ty_1,
    pub lbsm_UserDataA: APTR,
    pub lbsm_TypeB: ULONG,
    pub lbsm_DataB: LBSortMsg__bindgen_ty_2,
    pub lbsm_UserDataB: APTR,
    pub lbsm_Column: WORD,
    pub lbsm_Direction: ULONG,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union LBSortMsg__bindgen_ty_1 {
    pub Integer: LONG,
    pub Text: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LBSortMsg__bindgen_ty_1"][::core::mem::size_of::<LBSortMsg__bindgen_ty_1>() - 4usize];
    ["Alignment of LBSortMsg__bindgen_ty_1"]
        [::core::mem::align_of::<LBSortMsg__bindgen_ty_1>() - 2usize];
    ["Offset of field: LBSortMsg__bindgen_ty_1::Integer"]
        [::core::mem::offset_of!(LBSortMsg__bindgen_ty_1, Integer) - 0usize];
    ["Offset of field: LBSortMsg__bindgen_ty_1::Text"]
        [::core::mem::offset_of!(LBSortMsg__bindgen_ty_1, Text) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union LBSortMsg__bindgen_ty_2 {
    pub Integer: LONG,
    pub Text: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LBSortMsg__bindgen_ty_2"][::core::mem::size_of::<LBSortMsg__bindgen_ty_2>() - 4usize];
    ["Alignment of LBSortMsg__bindgen_ty_2"]
        [::core::mem::align_of::<LBSortMsg__bindgen_ty_2>() - 2usize];
    ["Offset of field: LBSortMsg__bindgen_ty_2::Integer"]
        [::core::mem::offset_of!(LBSortMsg__bindgen_ty_2, Integer) - 0usize];
    ["Offset of field: LBSortMsg__bindgen_ty_2::Text"]
        [::core::mem::offset_of!(LBSortMsg__bindgen_ty_2, Text) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LBSortMsg"][::core::mem::size_of::<LBSortMsg>() - 30usize];
    ["Alignment of LBSortMsg"][::core::mem::align_of::<LBSortMsg>() - 2usize];
    ["Offset of field: LBSortMsg::lbsm_TypeA"]
        [::core::mem::offset_of!(LBSortMsg, lbsm_TypeA) - 0usize];
    ["Offset of field: LBSortMsg::lbsm_DataA"]
        [::core::mem::offset_of!(LBSortMsg, lbsm_DataA) - 4usize];
    ["Offset of field: LBSortMsg::lbsm_UserDataA"]
        [::core::mem::offset_of!(LBSortMsg, lbsm_UserDataA) - 8usize];
    ["Offset of field: LBSortMsg::lbsm_TypeB"]
        [::core::mem::offset_of!(LBSortMsg, lbsm_TypeB) - 12usize];
    ["Offset of field: LBSortMsg::lbsm_DataB"]
        [::core::mem::offset_of!(LBSortMsg, lbsm_DataB) - 16usize];
    ["Offset of field: LBSortMsg::lbsm_UserDataB"]
        [::core::mem::offset_of!(LBSortMsg, lbsm_UserDataB) - 20usize];
    ["Offset of field: LBSortMsg::lbsm_Column"]
        [::core::mem::offset_of!(LBSortMsg, lbsm_Column) - 24usize];
    ["Offset of field: LBSortMsg::lbsm_Direction"]
        [::core::mem::offset_of!(LBSortMsg, lbsm_Direction) - 26usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ColumnInfo {
    pub ci_Width: WORD,
    pub ci_Title: STRPTR,
    pub ci_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ColumnInfo"][::core::mem::size_of::<ColumnInfo>() - 10usize];
    ["Alignment of ColumnInfo"][::core::mem::align_of::<ColumnInfo>() - 2usize];
    ["Offset of field: ColumnInfo::ci_Width"]
        [::core::mem::offset_of!(ColumnInfo, ci_Width) - 0usize];
    ["Offset of field: ColumnInfo::ci_Title"]
        [::core::mem::offset_of!(ColumnInfo, ci_Title) - 2usize];
    ["Offset of field: ColumnInfo::ci_Flags"]
        [::core::mem::offset_of!(ColumnInfo, ci_Flags) - 6usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ListLabelNode {
    pub lvn_Node: Node,
    pub lvn_UserData: ULONG,
    pub lvn_RenderForeground: WORD,
    pub lvn_RenderBackground: WORD,
    pub lvn_SelectForeground: WORD,
    pub lvn_SelectBackground: WORD,
    pub lvn_RenderImage: *mut Image,
    pub lvn_SelectImage: *mut Image,
    pub lvn_TextLength: WORD,
    pub lvn_LeftEdge: WORD,
    pub lvn_TopEdge: WORD,
    pub lvn_Width: WORD,
    pub lvn_Height: WORD,
    pub lvn_Justification: WORD,
    pub lvn_Selected: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ListLabelNode"][::core::mem::size_of::<ListLabelNode>() - 48usize];
    ["Alignment of ListLabelNode"][::core::mem::align_of::<ListLabelNode>() - 2usize];
    ["Offset of field: ListLabelNode::lvn_Node"]
        [::core::mem::offset_of!(ListLabelNode, lvn_Node) - 0usize];
    ["Offset of field: ListLabelNode::lvn_UserData"]
        [::core::mem::offset_of!(ListLabelNode, lvn_UserData) - 14usize];
    ["Offset of field: ListLabelNode::lvn_RenderForeground"]
        [::core::mem::offset_of!(ListLabelNode, lvn_RenderForeground) - 18usize];
    ["Offset of field: ListLabelNode::lvn_RenderBackground"]
        [::core::mem::offset_of!(ListLabelNode, lvn_RenderBackground) - 20usize];
    ["Offset of field: ListLabelNode::lvn_SelectForeground"]
        [::core::mem::offset_of!(ListLabelNode, lvn_SelectForeground) - 22usize];
    ["Offset of field: ListLabelNode::lvn_SelectBackground"]
        [::core::mem::offset_of!(ListLabelNode, lvn_SelectBackground) - 24usize];
    ["Offset of field: ListLabelNode::lvn_RenderImage"]
        [::core::mem::offset_of!(ListLabelNode, lvn_RenderImage) - 26usize];
    ["Offset of field: ListLabelNode::lvn_SelectImage"]
        [::core::mem::offset_of!(ListLabelNode, lvn_SelectImage) - 30usize];
    ["Offset of field: ListLabelNode::lvn_TextLength"]
        [::core::mem::offset_of!(ListLabelNode, lvn_TextLength) - 34usize];
    ["Offset of field: ListLabelNode::lvn_LeftEdge"]
        [::core::mem::offset_of!(ListLabelNode, lvn_LeftEdge) - 36usize];
    ["Offset of field: ListLabelNode::lvn_TopEdge"]
        [::core::mem::offset_of!(ListLabelNode, lvn_TopEdge) - 38usize];
    ["Offset of field: ListLabelNode::lvn_Width"]
        [::core::mem::offset_of!(ListLabelNode, lvn_Width) - 40usize];
    ["Offset of field: ListLabelNode::lvn_Height"]
        [::core::mem::offset_of!(ListLabelNode, lvn_Height) - 42usize];
    ["Offset of field: ListLabelNode::lvn_Justification"]
        [::core::mem::offset_of!(ListLabelNode, lvn_Justification) - 44usize];
    ["Offset of field: ListLabelNode::lvn_Selected"]
        [::core::mem::offset_of!(ListLabelNode, lvn_Selected) - 46usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PBoxDrawMsg {
    pub pbdm_MethodID: ULONG,
    pub pbdm_RastPort: *mut RastPort,
    pub pbdm_DrawInfo: *mut DrawInfo,
    pub pbdm_Bounds: Rectangle,
    pub pbdm_State: ULONG,
    pub pbdm_Color: ULONG,
    pub pbdm_Gadget: *mut Gadget,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PBoxDrawMsg"][::core::mem::size_of::<PBoxDrawMsg>() - 32usize];
    ["Alignment of PBoxDrawMsg"][::core::mem::align_of::<PBoxDrawMsg>() - 2usize];
    ["Offset of field: PBoxDrawMsg::pbdm_MethodID"]
        [::core::mem::offset_of!(PBoxDrawMsg, pbdm_MethodID) - 0usize];
    ["Offset of field: PBoxDrawMsg::pbdm_RastPort"]
        [::core::mem::offset_of!(PBoxDrawMsg, pbdm_RastPort) - 4usize];
    ["Offset of field: PBoxDrawMsg::pbdm_DrawInfo"]
        [::core::mem::offset_of!(PBoxDrawMsg, pbdm_DrawInfo) - 8usize];
    ["Offset of field: PBoxDrawMsg::pbdm_Bounds"]
        [::core::mem::offset_of!(PBoxDrawMsg, pbdm_Bounds) - 12usize];
    ["Offset of field: PBoxDrawMsg::pbdm_State"]
        [::core::mem::offset_of!(PBoxDrawMsg, pbdm_State) - 20usize];
    ["Offset of field: PBoxDrawMsg::pbdm_Color"]
        [::core::mem::offset_of!(PBoxDrawMsg, pbdm_Color) - 24usize];
    ["Offset of field: PBoxDrawMsg::pbdm_Gadget"]
        [::core::mem::offset_of!(PBoxDrawMsg, pbdm_Gadget) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GadgetInfo {
    pub gi_Screen: *mut Screen,
    pub gi_Window: *mut Window,
    pub gi_Requester: *mut Requester,
    pub gi_RastPort: *mut RastPort,
    pub gi_Layer: *mut Layer,
    pub gi_Domain: IBox,
    pub gi_Pens: GadgetInfo__bindgen_ty_1,
    pub gi_DrInfo: *mut DrawInfo,
    pub gi_Reserved: [ULONG; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GadgetInfo__bindgen_ty_1 {
    pub DetailPen: UBYTE,
    pub BlockPen: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GadgetInfo__bindgen_ty_1"]
        [::core::mem::size_of::<GadgetInfo__bindgen_ty_1>() - 2usize];
    ["Alignment of GadgetInfo__bindgen_ty_1"]
        [::core::mem::align_of::<GadgetInfo__bindgen_ty_1>() - 1usize];
    ["Offset of field: GadgetInfo__bindgen_ty_1::DetailPen"]
        [::core::mem::offset_of!(GadgetInfo__bindgen_ty_1, DetailPen) - 0usize];
    ["Offset of field: GadgetInfo__bindgen_ty_1::BlockPen"]
        [::core::mem::offset_of!(GadgetInfo__bindgen_ty_1, BlockPen) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GadgetInfo"][::core::mem::size_of::<GadgetInfo>() - 58usize];
    ["Alignment of GadgetInfo"][::core::mem::align_of::<GadgetInfo>() - 2usize];
    ["Offset of field: GadgetInfo::gi_Screen"]
        [::core::mem::offset_of!(GadgetInfo, gi_Screen) - 0usize];
    ["Offset of field: GadgetInfo::gi_Window"]
        [::core::mem::offset_of!(GadgetInfo, gi_Window) - 4usize];
    ["Offset of field: GadgetInfo::gi_Requester"]
        [::core::mem::offset_of!(GadgetInfo, gi_Requester) - 8usize];
    ["Offset of field: GadgetInfo::gi_RastPort"]
        [::core::mem::offset_of!(GadgetInfo, gi_RastPort) - 12usize];
    ["Offset of field: GadgetInfo::gi_Layer"]
        [::core::mem::offset_of!(GadgetInfo, gi_Layer) - 16usize];
    ["Offset of field: GadgetInfo::gi_Domain"]
        [::core::mem::offset_of!(GadgetInfo, gi_Domain) - 20usize];
    ["Offset of field: GadgetInfo::gi_Pens"]
        [::core::mem::offset_of!(GadgetInfo, gi_Pens) - 28usize];
    ["Offset of field: GadgetInfo::gi_DrInfo"]
        [::core::mem::offset_of!(GadgetInfo, gi_DrInfo) - 30usize];
    ["Offset of field: GadgetInfo::gi_Reserved"]
        [::core::mem::offset_of!(GadgetInfo, gi_Reserved) - 34usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGX {
    pub pgx_Container: IBox,
    pub pgx_NewKnob: IBox,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PGX"][::core::mem::size_of::<PGX>() - 16usize];
    ["Alignment of PGX"][::core::mem::align_of::<PGX>() - 2usize];
    ["Offset of field: PGX::pgx_Container"][::core::mem::offset_of!(PGX, pgx_Container) - 0usize];
    ["Offset of field: PGX::pgx_NewKnob"][::core::mem::offset_of!(PGX, pgx_NewKnob) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct spGeneral {
    pub MethodID: ULONG,
    pub GInfo: GadgetInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spGeneral"][::core::mem::size_of::<spGeneral>() - 62usize];
    ["Alignment of spGeneral"][::core::mem::align_of::<spGeneral>() - 2usize];
    ["Offset of field: spGeneral::MethodID"][::core::mem::offset_of!(spGeneral, MethodID) - 0usize];
    ["Offset of field: spGeneral::GInfo"][::core::mem::offset_of!(spGeneral, GInfo) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct spScrollRaster {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
    pub DeltaX: LONG,
    pub DeltaY: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spScrollRaster"][::core::mem::size_of::<spScrollRaster>() - 16usize];
    ["Alignment of spScrollRaster"][::core::mem::align_of::<spScrollRaster>() - 2usize];
    ["Offset of field: spScrollRaster::MethodID"]
        [::core::mem::offset_of!(spScrollRaster, MethodID) - 0usize];
    ["Offset of field: spScrollRaster::GInfo"]
        [::core::mem::offset_of!(spScrollRaster, GInfo) - 4usize];
    ["Offset of field: spScrollRaster::DeltaX"]
        [::core::mem::offset_of!(spScrollRaster, DeltaX) - 8usize];
    ["Offset of field: spScrollRaster::DeltaY"]
        [::core::mem::offset_of!(spScrollRaster, DeltaY) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct sbSetNodeAttrs {
    pub MethodID: ULONG,
    pub sb_GInfo: *mut GadgetInfo,
    pub sb_Node: *mut Node,
    pub sb_AttrList: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sbSetNodeAttrs"][::core::mem::size_of::<sbSetNodeAttrs>() - 16usize];
    ["Alignment of sbSetNodeAttrs"][::core::mem::align_of::<sbSetNodeAttrs>() - 2usize];
    ["Offset of field: sbSetNodeAttrs::MethodID"]
        [::core::mem::offset_of!(sbSetNodeAttrs, MethodID) - 0usize];
    ["Offset of field: sbSetNodeAttrs::sb_GInfo"]
        [::core::mem::offset_of!(sbSetNodeAttrs, sb_GInfo) - 4usize];
    ["Offset of field: sbSetNodeAttrs::sb_Node"]
        [::core::mem::offset_of!(sbSetNodeAttrs, sb_Node) - 8usize];
    ["Offset of field: sbSetNodeAttrs::sb_AttrList"]
        [::core::mem::offset_of!(sbSetNodeAttrs, sb_AttrList) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct tagTabLabel {
    pub tl_Label: STRPTR,
    pub tl_Pens: [WORD; 4usize],
    pub tl_Attrs: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTabLabel"][::core::mem::size_of::<tagTabLabel>() - 16usize];
    ["Alignment of tagTabLabel"][::core::mem::align_of::<tagTabLabel>() - 2usize];
    ["Offset of field: tagTabLabel::tl_Label"]
        [::core::mem::offset_of!(tagTabLabel, tl_Label) - 0usize];
    ["Offset of field: tagTabLabel::tl_Pens"]
        [::core::mem::offset_of!(tagTabLabel, tl_Pens) - 4usize];
    ["Offset of field: tagTabLabel::tl_Attrs"]
        [::core::mem::offset_of!(tagTabLabel, tl_Attrs) - 12usize];
};
pub type TabLabel = tagTabLabel;
pub type TabLabelP = *mut tagTabLabel;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ChangeListener {
    pub onCharsInserted: FPTR,
    pub onCharsDeleted: FPTR,
    pub onCharEntered: FPTR,
    pub Reserved1: ULONG,
    pub Reserved2: ULONG,
    pub Reserved3: ULONG,
    pub Reserved4: ULONG,
    pub Reserved5: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ChangeListener"][::core::mem::size_of::<ChangeListener>() - 32usize];
    ["Alignment of ChangeListener"][::core::mem::align_of::<ChangeListener>() - 2usize];
    ["Offset of field: ChangeListener::onCharsInserted"]
        [::core::mem::offset_of!(ChangeListener, onCharsInserted) - 0usize];
    ["Offset of field: ChangeListener::onCharsDeleted"]
        [::core::mem::offset_of!(ChangeListener, onCharsDeleted) - 4usize];
    ["Offset of field: ChangeListener::onCharEntered"]
        [::core::mem::offset_of!(ChangeListener, onCharEntered) - 8usize];
    ["Offset of field: ChangeListener::Reserved1"]
        [::core::mem::offset_of!(ChangeListener, Reserved1) - 12usize];
    ["Offset of field: ChangeListener::Reserved2"]
        [::core::mem::offset_of!(ChangeListener, Reserved2) - 16usize];
    ["Offset of field: ChangeListener::Reserved3"]
        [::core::mem::offset_of!(ChangeListener, Reserved3) - 20usize];
    ["Offset of field: ChangeListener::Reserved4"]
        [::core::mem::offset_of!(ChangeListener, Reserved4) - 24usize];
    ["Offset of field: ChangeListener::Reserved5"]
        [::core::mem::offset_of!(ChangeListener, Reserved5) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_ARexxCmd {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
    pub command: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_ARexxCmd"][::core::mem::size_of::<GP_TEXTEDITOR_ARexxCmd>() - 12usize];
    ["Alignment of GP_TEXTEDITOR_ARexxCmd"]
        [::core::mem::align_of::<GP_TEXTEDITOR_ARexxCmd>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_ARexxCmd::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ARexxCmd, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_ARexxCmd::GInfo"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ARexxCmd, GInfo) - 4usize];
    ["Offset of field: GP_TEXTEDITOR_ARexxCmd::command"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ARexxCmd, command) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_BlockInfo {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
    pub startx: *mut ULONG,
    pub starty: *mut ULONG,
    pub stopx: *mut ULONG,
    pub stopy: *mut ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_BlockInfo"]
        [::core::mem::size_of::<GP_TEXTEDITOR_BlockInfo>() - 24usize];
    ["Alignment of GP_TEXTEDITOR_BlockInfo"]
        [::core::mem::align_of::<GP_TEXTEDITOR_BlockInfo>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_BlockInfo::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_BlockInfo, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_BlockInfo::GInfo"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_BlockInfo, GInfo) - 4usize];
    ["Offset of field: GP_TEXTEDITOR_BlockInfo::startx"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_BlockInfo, startx) - 8usize];
    ["Offset of field: GP_TEXTEDITOR_BlockInfo::starty"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_BlockInfo, starty) - 12usize];
    ["Offset of field: GP_TEXTEDITOR_BlockInfo::stopx"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_BlockInfo, stopx) - 16usize];
    ["Offset of field: GP_TEXTEDITOR_BlockInfo::stopy"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_BlockInfo, stopy) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_ClearText {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_ClearText"][::core::mem::size_of::<GP_TEXTEDITOR_ClearText>() - 8usize];
    ["Alignment of GP_TEXTEDITOR_ClearText"]
        [::core::mem::align_of::<GP_TEXTEDITOR_ClearText>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_ClearText::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ClearText, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_ClearText::GInfo"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ClearText, GInfo) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_ExportText {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_ExportText"]
        [::core::mem::size_of::<GP_TEXTEDITOR_ExportText>() - 8usize];
    ["Alignment of GP_TEXTEDITOR_ExportText"]
        [::core::mem::align_of::<GP_TEXTEDITOR_ExportText>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_ExportText::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ExportText, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_ExportText::GInfo"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ExportText, GInfo) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_HandleError {
    pub MethodID: ULONG,
    pub errorcode: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_HandleError"]
        [::core::mem::size_of::<GP_TEXTEDITOR_HandleError>() - 8usize];
    ["Alignment of GP_TEXTEDITOR_HandleError"]
        [::core::mem::align_of::<GP_TEXTEDITOR_HandleError>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_HandleError::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_HandleError, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_HandleError::errorcode"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_HandleError, errorcode) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_InsertText {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
    pub text: STRPTR,
    pub pos: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_InsertText"]
        [::core::mem::size_of::<GP_TEXTEDITOR_InsertText>() - 16usize];
    ["Alignment of GP_TEXTEDITOR_InsertText"]
        [::core::mem::align_of::<GP_TEXTEDITOR_InsertText>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_InsertText::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_InsertText, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_InsertText::GInfo"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_InsertText, GInfo) - 4usize];
    ["Offset of field: GP_TEXTEDITOR_InsertText::text"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_InsertText, text) - 8usize];
    ["Offset of field: GP_TEXTEDITOR_InsertText::pos"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_InsertText, pos) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_MarkText {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
    pub start_crsr_x: ULONG,
    pub start_crsr_y: ULONG,
    pub stop_crsr_x: ULONG,
    pub stop_crsr_y: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_MarkText"][::core::mem::size_of::<GP_TEXTEDITOR_MarkText>() - 24usize];
    ["Alignment of GP_TEXTEDITOR_MarkText"]
        [::core::mem::align_of::<GP_TEXTEDITOR_MarkText>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_MarkText::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_MarkText, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_MarkText::GInfo"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_MarkText, GInfo) - 4usize];
    ["Offset of field: GP_TEXTEDITOR_MarkText::start_crsr_x"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_MarkText, start_crsr_x) - 8usize];
    ["Offset of field: GP_TEXTEDITOR_MarkText::start_crsr_y"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_MarkText, start_crsr_y) - 12usize];
    ["Offset of field: GP_TEXTEDITOR_MarkText::stop_crsr_x"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_MarkText, stop_crsr_x) - 16usize];
    ["Offset of field: GP_TEXTEDITOR_MarkText::stop_crsr_y"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_MarkText, stop_crsr_y) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_Replace {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
    pub newstring: STRPTR,
    pub flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_Replace"][::core::mem::size_of::<GP_TEXTEDITOR_Replace>() - 16usize];
    ["Alignment of GP_TEXTEDITOR_Replace"]
        [::core::mem::align_of::<GP_TEXTEDITOR_Replace>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_Replace::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_Replace, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_Replace::GInfo"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_Replace, GInfo) - 4usize];
    ["Offset of field: GP_TEXTEDITOR_Replace::newstring"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_Replace, newstring) - 8usize];
    ["Offset of field: GP_TEXTEDITOR_Replace::flags"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_Replace, flags) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_Search {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
    pub string: STRPTR,
    pub flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_Search"][::core::mem::size_of::<GP_TEXTEDITOR_Search>() - 16usize];
    ["Alignment of GP_TEXTEDITOR_Search"][::core::mem::align_of::<GP_TEXTEDITOR_Search>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_Search::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_Search, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_Search::GInfo"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_Search, GInfo) - 4usize];
    ["Offset of field: GP_TEXTEDITOR_Search::string"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_Search, string) - 8usize];
    ["Offset of field: GP_TEXTEDITOR_Search::flags"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_Search, flags) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_AddChangeListener {
    pub MethodID: ULONG,
    pub listener: *mut ChangeListener,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_AddChangeListener"]
        [::core::mem::size_of::<GP_TEXTEDITOR_AddChangeListener>() - 8usize];
    ["Alignment of GP_TEXTEDITOR_AddChangeListener"]
        [::core::mem::align_of::<GP_TEXTEDITOR_AddChangeListener>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_AddChangeListener::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_AddChangeListener, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_AddChangeListener::listener"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_AddChangeListener, listener) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GP_TEXTEDITOR_ReplaceAll {
    pub MethodID: ULONG,
    pub GInfo: *mut GadgetInfo,
    pub string: STRPTR,
    pub newstring: STRPTR,
    pub flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GP_TEXTEDITOR_ReplaceAll"]
        [::core::mem::size_of::<GP_TEXTEDITOR_ReplaceAll>() - 20usize];
    ["Alignment of GP_TEXTEDITOR_ReplaceAll"]
        [::core::mem::align_of::<GP_TEXTEDITOR_ReplaceAll>() - 2usize];
    ["Offset of field: GP_TEXTEDITOR_ReplaceAll::MethodID"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ReplaceAll, MethodID) - 0usize];
    ["Offset of field: GP_TEXTEDITOR_ReplaceAll::GInfo"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ReplaceAll, GInfo) - 4usize];
    ["Offset of field: GP_TEXTEDITOR_ReplaceAll::string"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ReplaceAll, string) - 8usize];
    ["Offset of field: GP_TEXTEDITOR_ReplaceAll::newstring"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ReplaceAll, newstring) - 12usize];
    ["Offset of field: GP_TEXTEDITOR_ReplaceAll::flags"]
        [::core::mem::offset_of!(GP_TEXTEDITOR_ReplaceAll, flags) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ClickMessage {
    pub LineContents: STRPTR,
    pub ClickPosition: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClickMessage"][::core::mem::size_of::<ClickMessage>() - 8usize];
    ["Alignment of ClickMessage"][::core::mem::align_of::<ClickMessage>() - 2usize];
    ["Offset of field: ClickMessage::LineContents"]
        [::core::mem::offset_of!(ClickMessage, LineContents) - 0usize];
    ["Offset of field: ClickMessage::ClickPosition"]
        [::core::mem::offset_of!(ClickMessage, ClickPosition) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HighlightMessage {
    pub Version: ULONG,
    pub Text: STRPTR,
    pub StatusOfPrevBlock: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HighlightMessage"][::core::mem::size_of::<HighlightMessage>() - 12usize];
    ["Alignment of HighlightMessage"][::core::mem::align_of::<HighlightMessage>() - 2usize];
    ["Offset of field: HighlightMessage::Version"]
        [::core::mem::offset_of!(HighlightMessage, Version) - 0usize];
    ["Offset of field: HighlightMessage::Text"]
        [::core::mem::offset_of!(HighlightMessage, Text) - 4usize];
    ["Offset of field: HighlightMessage::StatusOfPrevBlock"]
        [::core::mem::offset_of!(HighlightMessage, StatusOfPrevBlock) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct LeftBarRenderMessage {
    pub Command: UWORD,
    pub Version: UWORD,
    pub BlockNum: ULONG,
    pub LineSubNum: ULONG,
    pub RastPort: *mut RastPort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LeftBarRenderMessage"][::core::mem::size_of::<LeftBarRenderMessage>() - 16usize];
    ["Alignment of LeftBarRenderMessage"][::core::mem::align_of::<LeftBarRenderMessage>() - 2usize];
    ["Offset of field: LeftBarRenderMessage::Command"]
        [::core::mem::offset_of!(LeftBarRenderMessage, Command) - 0usize];
    ["Offset of field: LeftBarRenderMessage::Version"]
        [::core::mem::offset_of!(LeftBarRenderMessage, Version) - 2usize];
    ["Offset of field: LeftBarRenderMessage::BlockNum"]
        [::core::mem::offset_of!(LeftBarRenderMessage, BlockNum) - 4usize];
    ["Offset of field: LeftBarRenderMessage::LineSubNum"]
        [::core::mem::offset_of!(LeftBarRenderMessage, LineSubNum) - 8usize];
    ["Offset of field: LeftBarRenderMessage::RastPort"]
        [::core::mem::offset_of!(LeftBarRenderMessage, RastPort) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct LeftBarMouseMessage {
    pub Command: UWORD,
    pub Version: UWORD,
    pub BlockNum: ULONG,
    pub Code: UWORD,
    pub Qualifier: UWORD,
    pub X: WORD,
    pub Y: WORD,
    pub TimeStamp: timeval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LeftBarMouseMessage"][::core::mem::size_of::<LeftBarMouseMessage>() - 24usize];
    ["Alignment of LeftBarMouseMessage"][::core::mem::align_of::<LeftBarMouseMessage>() - 2usize];
    ["Offset of field: LeftBarMouseMessage::Command"]
        [::core::mem::offset_of!(LeftBarMouseMessage, Command) - 0usize];
    ["Offset of field: LeftBarMouseMessage::Version"]
        [::core::mem::offset_of!(LeftBarMouseMessage, Version) - 2usize];
    ["Offset of field: LeftBarMouseMessage::BlockNum"]
        [::core::mem::offset_of!(LeftBarMouseMessage, BlockNum) - 4usize];
    ["Offset of field: LeftBarMouseMessage::Code"]
        [::core::mem::offset_of!(LeftBarMouseMessage, Code) - 8usize];
    ["Offset of field: LeftBarMouseMessage::Qualifier"]
        [::core::mem::offset_of!(LeftBarMouseMessage, Qualifier) - 10usize];
    ["Offset of field: LeftBarMouseMessage::X"]
        [::core::mem::offset_of!(LeftBarMouseMessage, X) - 12usize];
    ["Offset of field: LeftBarMouseMessage::Y"]
        [::core::mem::offset_of!(LeftBarMouseMessage, Y) - 14usize];
    ["Offset of field: LeftBarMouseMessage::TimeStamp"]
        [::core::mem::offset_of!(LeftBarMouseMessage, TimeStamp) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct VSprite {
    pub NextVSprite: *mut VSprite,
    pub PrevVSprite: *mut VSprite,
    pub DrawPath: *mut VSprite,
    pub ClearPath: *mut VSprite,
    pub OldY: WORD,
    pub OldX: WORD,
    pub Flags: WORD,
    pub Y: WORD,
    pub X: WORD,
    pub Height: WORD,
    pub Width: WORD,
    pub Depth: WORD,
    pub MeMask: WORD,
    pub HitMask: WORD,
    pub ImageData: *mut WORD,
    pub BorderLine: *mut WORD,
    pub CollMask: *mut WORD,
    pub SprColors: *mut WORD,
    pub VSBob: *mut Bob,
    pub PlanePick: BYTE,
    pub PlaneOnOff: BYTE,
    pub VUserExt: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VSprite"][::core::mem::size_of::<VSprite>() - 60usize];
    ["Alignment of VSprite"][::core::mem::align_of::<VSprite>() - 2usize];
    ["Offset of field: VSprite::NextVSprite"]
        [::core::mem::offset_of!(VSprite, NextVSprite) - 0usize];
    ["Offset of field: VSprite::PrevVSprite"]
        [::core::mem::offset_of!(VSprite, PrevVSprite) - 4usize];
    ["Offset of field: VSprite::DrawPath"][::core::mem::offset_of!(VSprite, DrawPath) - 8usize];
    ["Offset of field: VSprite::ClearPath"][::core::mem::offset_of!(VSprite, ClearPath) - 12usize];
    ["Offset of field: VSprite::OldY"][::core::mem::offset_of!(VSprite, OldY) - 16usize];
    ["Offset of field: VSprite::OldX"][::core::mem::offset_of!(VSprite, OldX) - 18usize];
    ["Offset of field: VSprite::Flags"][::core::mem::offset_of!(VSprite, Flags) - 20usize];
    ["Offset of field: VSprite::Y"][::core::mem::offset_of!(VSprite, Y) - 22usize];
    ["Offset of field: VSprite::X"][::core::mem::offset_of!(VSprite, X) - 24usize];
    ["Offset of field: VSprite::Height"][::core::mem::offset_of!(VSprite, Height) - 26usize];
    ["Offset of field: VSprite::Width"][::core::mem::offset_of!(VSprite, Width) - 28usize];
    ["Offset of field: VSprite::Depth"][::core::mem::offset_of!(VSprite, Depth) - 30usize];
    ["Offset of field: VSprite::MeMask"][::core::mem::offset_of!(VSprite, MeMask) - 32usize];
    ["Offset of field: VSprite::HitMask"][::core::mem::offset_of!(VSprite, HitMask) - 34usize];
    ["Offset of field: VSprite::ImageData"][::core::mem::offset_of!(VSprite, ImageData) - 36usize];
    ["Offset of field: VSprite::BorderLine"]
        [::core::mem::offset_of!(VSprite, BorderLine) - 40usize];
    ["Offset of field: VSprite::CollMask"][::core::mem::offset_of!(VSprite, CollMask) - 44usize];
    ["Offset of field: VSprite::SprColors"][::core::mem::offset_of!(VSprite, SprColors) - 48usize];
    ["Offset of field: VSprite::VSBob"][::core::mem::offset_of!(VSprite, VSBob) - 52usize];
    ["Offset of field: VSprite::PlanePick"][::core::mem::offset_of!(VSprite, PlanePick) - 56usize];
    ["Offset of field: VSprite::PlaneOnOff"]
        [::core::mem::offset_of!(VSprite, PlaneOnOff) - 57usize];
    ["Offset of field: VSprite::VUserExt"][::core::mem::offset_of!(VSprite, VUserExt) - 58usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Bob {
    pub Flags: WORD,
    pub SaveBuffer: *mut WORD,
    pub ImageShadow: *mut WORD,
    pub Before: *mut Bob,
    pub After: *mut Bob,
    pub BobVSprite: *mut VSprite,
    pub BobComp: *mut AnimComp,
    pub DBuffer: *mut DBufPacket,
    pub BUserExt: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Bob"][::core::mem::size_of::<Bob>() - 32usize];
    ["Alignment of Bob"][::core::mem::align_of::<Bob>() - 2usize];
    ["Offset of field: Bob::Flags"][::core::mem::offset_of!(Bob, Flags) - 0usize];
    ["Offset of field: Bob::SaveBuffer"][::core::mem::offset_of!(Bob, SaveBuffer) - 2usize];
    ["Offset of field: Bob::ImageShadow"][::core::mem::offset_of!(Bob, ImageShadow) - 6usize];
    ["Offset of field: Bob::Before"][::core::mem::offset_of!(Bob, Before) - 10usize];
    ["Offset of field: Bob::After"][::core::mem::offset_of!(Bob, After) - 14usize];
    ["Offset of field: Bob::BobVSprite"][::core::mem::offset_of!(Bob, BobVSprite) - 18usize];
    ["Offset of field: Bob::BobComp"][::core::mem::offset_of!(Bob, BobComp) - 22usize];
    ["Offset of field: Bob::DBuffer"][::core::mem::offset_of!(Bob, DBuffer) - 26usize];
    ["Offset of field: Bob::BUserExt"][::core::mem::offset_of!(Bob, BUserExt) - 30usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AnimComp {
    pub Flags: WORD,
    pub Timer: WORD,
    pub TimeSet: WORD,
    pub NextComp: *mut AnimComp,
    pub PrevComp: *mut AnimComp,
    pub NextSeq: *mut AnimComp,
    pub PrevSeq: *mut AnimComp,
    pub AnimCRoutine: FPTR,
    pub YTrans: WORD,
    pub XTrans: WORD,
    pub HeadOb: *mut AnimOb,
    pub AnimBob: *mut Bob,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnimComp"][::core::mem::size_of::<AnimComp>() - 38usize];
    ["Alignment of AnimComp"][::core::mem::align_of::<AnimComp>() - 2usize];
    ["Offset of field: AnimComp::Flags"][::core::mem::offset_of!(AnimComp, Flags) - 0usize];
    ["Offset of field: AnimComp::Timer"][::core::mem::offset_of!(AnimComp, Timer) - 2usize];
    ["Offset of field: AnimComp::TimeSet"][::core::mem::offset_of!(AnimComp, TimeSet) - 4usize];
    ["Offset of field: AnimComp::NextComp"][::core::mem::offset_of!(AnimComp, NextComp) - 6usize];
    ["Offset of field: AnimComp::PrevComp"][::core::mem::offset_of!(AnimComp, PrevComp) - 10usize];
    ["Offset of field: AnimComp::NextSeq"][::core::mem::offset_of!(AnimComp, NextSeq) - 14usize];
    ["Offset of field: AnimComp::PrevSeq"][::core::mem::offset_of!(AnimComp, PrevSeq) - 18usize];
    ["Offset of field: AnimComp::AnimCRoutine"]
        [::core::mem::offset_of!(AnimComp, AnimCRoutine) - 22usize];
    ["Offset of field: AnimComp::YTrans"][::core::mem::offset_of!(AnimComp, YTrans) - 26usize];
    ["Offset of field: AnimComp::XTrans"][::core::mem::offset_of!(AnimComp, XTrans) - 28usize];
    ["Offset of field: AnimComp::HeadOb"][::core::mem::offset_of!(AnimComp, HeadOb) - 30usize];
    ["Offset of field: AnimComp::AnimBob"][::core::mem::offset_of!(AnimComp, AnimBob) - 34usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AnimOb {
    pub NextOb: *mut AnimOb,
    pub PrevOb: *mut AnimOb,
    pub Clock: LONG,
    pub AnOldY: WORD,
    pub AnOldX: WORD,
    pub AnY: WORD,
    pub AnX: WORD,
    pub YVel: WORD,
    pub XVel: WORD,
    pub YAccel: WORD,
    pub XAccel: WORD,
    pub RingYTrans: WORD,
    pub RingXTrans: WORD,
    pub AnimORoutine: FPTR,
    pub HeadComp: *mut AnimComp,
    pub AUserExt: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnimOb"][::core::mem::size_of::<AnimOb>() - 42usize];
    ["Alignment of AnimOb"][::core::mem::align_of::<AnimOb>() - 2usize];
    ["Offset of field: AnimOb::NextOb"][::core::mem::offset_of!(AnimOb, NextOb) - 0usize];
    ["Offset of field: AnimOb::PrevOb"][::core::mem::offset_of!(AnimOb, PrevOb) - 4usize];
    ["Offset of field: AnimOb::Clock"][::core::mem::offset_of!(AnimOb, Clock) - 8usize];
    ["Offset of field: AnimOb::AnOldY"][::core::mem::offset_of!(AnimOb, AnOldY) - 12usize];
    ["Offset of field: AnimOb::AnOldX"][::core::mem::offset_of!(AnimOb, AnOldX) - 14usize];
    ["Offset of field: AnimOb::AnY"][::core::mem::offset_of!(AnimOb, AnY) - 16usize];
    ["Offset of field: AnimOb::AnX"][::core::mem::offset_of!(AnimOb, AnX) - 18usize];
    ["Offset of field: AnimOb::YVel"][::core::mem::offset_of!(AnimOb, YVel) - 20usize];
    ["Offset of field: AnimOb::XVel"][::core::mem::offset_of!(AnimOb, XVel) - 22usize];
    ["Offset of field: AnimOb::YAccel"][::core::mem::offset_of!(AnimOb, YAccel) - 24usize];
    ["Offset of field: AnimOb::XAccel"][::core::mem::offset_of!(AnimOb, XAccel) - 26usize];
    ["Offset of field: AnimOb::RingYTrans"][::core::mem::offset_of!(AnimOb, RingYTrans) - 28usize];
    ["Offset of field: AnimOb::RingXTrans"][::core::mem::offset_of!(AnimOb, RingXTrans) - 30usize];
    ["Offset of field: AnimOb::AnimORoutine"]
        [::core::mem::offset_of!(AnimOb, AnimORoutine) - 32usize];
    ["Offset of field: AnimOb::HeadComp"][::core::mem::offset_of!(AnimOb, HeadComp) - 36usize];
    ["Offset of field: AnimOb::AUserExt"][::core::mem::offset_of!(AnimOb, AUserExt) - 40usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DBufPacket {
    pub BufY: WORD,
    pub BufX: WORD,
    pub BufPath: *mut VSprite,
    pub BufBuffer: *mut WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DBufPacket"][::core::mem::size_of::<DBufPacket>() - 12usize];
    ["Alignment of DBufPacket"][::core::mem::align_of::<DBufPacket>() - 2usize];
    ["Offset of field: DBufPacket::BufY"][::core::mem::offset_of!(DBufPacket, BufY) - 0usize];
    ["Offset of field: DBufPacket::BufX"][::core::mem::offset_of!(DBufPacket, BufX) - 2usize];
    ["Offset of field: DBufPacket::BufPath"][::core::mem::offset_of!(DBufPacket, BufPath) - 4usize];
    ["Offset of field: DBufPacket::BufBuffer"]
        [::core::mem::offset_of!(DBufPacket, BufBuffer) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct collTable {
    pub collPtrs: [FPTR; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of collTable"][::core::mem::size_of::<collTable>() - 64usize];
    ["Alignment of collTable"][::core::mem::align_of::<collTable>() - 2usize];
    ["Offset of field: collTable::collPtrs"][::core::mem::offset_of!(collTable, collPtrs) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct GfxBase {
    pub LibNode: Library,
    pub ActiView: *mut View,
    pub copinit: *mut copinit,
    pub cia: *mut LONG,
    pub blitter: *mut LONG,
    pub LOFlist: *mut UWORD,
    pub SHFlist: *mut UWORD,
    pub blthd: *mut bltnode,
    pub blttl: *mut bltnode,
    pub bsblthd: *mut bltnode,
    pub bsblttl: *mut bltnode,
    pub vbsrv: Interrupt,
    pub timsrv: Interrupt,
    pub bltsrv: Interrupt,
    pub TextFonts: List,
    pub DefaultFont: *mut TextFont,
    pub Modes: UWORD,
    pub VBlank: BYTE,
    pub Debug: BYTE,
    pub BeamSync: WORD,
    pub system_bplcon0: WORD,
    pub SpriteReserved: UBYTE,
    pub bytereserved: UBYTE,
    pub Flags: UWORD,
    pub BlitLock: WORD,
    pub BlitNest: WORD,
    pub BlitWaitQ: List,
    pub BlitOwner: *mut Task,
    pub TOF_WaitQ: List,
    pub DisplayFlags: UWORD,
    pub SimpleSprites: *mut *mut SimpleSprite,
    pub MaxDisplayRow: UWORD,
    pub MaxDisplayColumn: UWORD,
    pub NormalDisplayRows: UWORD,
    pub NormalDisplayColumns: UWORD,
    pub NormalDPMX: UWORD,
    pub NormalDPMY: UWORD,
    pub LastChanceMemory: *mut SignalSemaphore,
    pub LCMptr: *mut UWORD,
    pub MicrosPerLine: UWORD,
    pub MinDisplayColumn: UWORD,
    pub ChipRevBits0: UBYTE,
    pub MemType: UBYTE,
    pub crb_reserved: [UBYTE; 4usize],
    pub monitor_id: UWORD,
    pub hedley: [ULONG; 8usize],
    pub hedley_sprites: [ULONG; 8usize],
    pub hedley_sprites1: [ULONG; 8usize],
    pub hedley_count: WORD,
    pub hedley_flags: UWORD,
    pub hedley_tmp: WORD,
    pub hash_table: *mut LONG,
    pub current_tot_rows: UWORD,
    pub current_tot_cclks: UWORD,
    pub hedley_hint: UBYTE,
    pub hedley_hint2: UBYTE,
    pub nreserved: [ULONG; 4usize],
    pub a2024_sync_raster: *mut LONG,
    pub control_delta_pal: UWORD,
    pub control_delta_ntsc: UWORD,
    pub current_monitor: *mut MonitorSpec,
    pub MonitorList: List,
    pub default_monitor: *mut MonitorSpec,
    pub MonitorListSemaphore: *mut SignalSemaphore,
    pub DisplayInfoDataBase: *mut ::core::ffi::c_void,
    pub TopLine: UWORD,
    pub ActiViewCprSemaphore: *mut SignalSemaphore,
    pub UtilBase: *mut Library,
    pub ExecBase: *mut Library,
    pub bwshifts: *mut UBYTE,
    pub StrtFetchMasks: *mut UWORD,
    pub StopFetchMasks: *mut UWORD,
    pub Overrun: *mut UWORD,
    pub RealStops: *mut WORD,
    pub SpriteWidth: UWORD,
    pub SpriteFMode: UWORD,
    pub SoftSprites: BYTE,
    pub arraywidth: BYTE,
    pub DefaultSpriteWidth: UWORD,
    pub SprMoveDisable: BYTE,
    pub WantChips: UBYTE,
    pub BoardMemType: UBYTE,
    pub Bugs: UBYTE,
    pub gb_LayersBase: *mut ULONG,
    pub ColorMask: ULONG,
    pub IVector: APTR,
    pub IData: APTR,
    pub SpecialCounter: ULONG,
    pub DBList: APTR,
    pub MonitorFlags: UWORD,
    pub ScanDoubledSprites: UBYTE,
    pub BP3Bits: UBYTE,
    pub MonitorVBlank: AnalogSignalInterval,
    pub natural_monitor: *mut MonitorSpec,
    pub ProgData: APTR,
    pub ExtSprites: UBYTE,
    pub pad3: UBYTE,
    pub GfxFlags: UWORD,
    pub VBCounter: ULONG,
    pub HashTableSemaphore: *mut SignalSemaphore,
    pub HWEmul: [*mut ULONG; 9usize],
    pub Scratch: *mut RegionRectangle,
    pub ScratchSize: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GfxBase"][::core::mem::size_of::<GfxBase>() - 552usize];
    ["Alignment of GfxBase"][::core::mem::align_of::<GfxBase>() - 2usize];
    ["Offset of field: GfxBase::LibNode"][::core::mem::offset_of!(GfxBase, LibNode) - 0usize];
    ["Offset of field: GfxBase::ActiView"][::core::mem::offset_of!(GfxBase, ActiView) - 34usize];
    ["Offset of field: GfxBase::copinit"][::core::mem::offset_of!(GfxBase, copinit) - 38usize];
    ["Offset of field: GfxBase::cia"][::core::mem::offset_of!(GfxBase, cia) - 42usize];
    ["Offset of field: GfxBase::blitter"][::core::mem::offset_of!(GfxBase, blitter) - 46usize];
    ["Offset of field: GfxBase::LOFlist"][::core::mem::offset_of!(GfxBase, LOFlist) - 50usize];
    ["Offset of field: GfxBase::SHFlist"][::core::mem::offset_of!(GfxBase, SHFlist) - 54usize];
    ["Offset of field: GfxBase::blthd"][::core::mem::offset_of!(GfxBase, blthd) - 58usize];
    ["Offset of field: GfxBase::blttl"][::core::mem::offset_of!(GfxBase, blttl) - 62usize];
    ["Offset of field: GfxBase::bsblthd"][::core::mem::offset_of!(GfxBase, bsblthd) - 66usize];
    ["Offset of field: GfxBase::bsblttl"][::core::mem::offset_of!(GfxBase, bsblttl) - 70usize];
    ["Offset of field: GfxBase::vbsrv"][::core::mem::offset_of!(GfxBase, vbsrv) - 74usize];
    ["Offset of field: GfxBase::timsrv"][::core::mem::offset_of!(GfxBase, timsrv) - 96usize];
    ["Offset of field: GfxBase::bltsrv"][::core::mem::offset_of!(GfxBase, bltsrv) - 118usize];
    ["Offset of field: GfxBase::TextFonts"][::core::mem::offset_of!(GfxBase, TextFonts) - 140usize];
    ["Offset of field: GfxBase::DefaultFont"]
        [::core::mem::offset_of!(GfxBase, DefaultFont) - 154usize];
    ["Offset of field: GfxBase::Modes"][::core::mem::offset_of!(GfxBase, Modes) - 158usize];
    ["Offset of field: GfxBase::VBlank"][::core::mem::offset_of!(GfxBase, VBlank) - 160usize];
    ["Offset of field: GfxBase::Debug"][::core::mem::offset_of!(GfxBase, Debug) - 161usize];
    ["Offset of field: GfxBase::BeamSync"][::core::mem::offset_of!(GfxBase, BeamSync) - 162usize];
    ["Offset of field: GfxBase::system_bplcon0"]
        [::core::mem::offset_of!(GfxBase, system_bplcon0) - 164usize];
    ["Offset of field: GfxBase::SpriteReserved"]
        [::core::mem::offset_of!(GfxBase, SpriteReserved) - 166usize];
    ["Offset of field: GfxBase::bytereserved"]
        [::core::mem::offset_of!(GfxBase, bytereserved) - 167usize];
    ["Offset of field: GfxBase::Flags"][::core::mem::offset_of!(GfxBase, Flags) - 168usize];
    ["Offset of field: GfxBase::BlitLock"][::core::mem::offset_of!(GfxBase, BlitLock) - 170usize];
    ["Offset of field: GfxBase::BlitNest"][::core::mem::offset_of!(GfxBase, BlitNest) - 172usize];
    ["Offset of field: GfxBase::BlitWaitQ"][::core::mem::offset_of!(GfxBase, BlitWaitQ) - 174usize];
    ["Offset of field: GfxBase::BlitOwner"][::core::mem::offset_of!(GfxBase, BlitOwner) - 188usize];
    ["Offset of field: GfxBase::TOF_WaitQ"][::core::mem::offset_of!(GfxBase, TOF_WaitQ) - 192usize];
    ["Offset of field: GfxBase::DisplayFlags"]
        [::core::mem::offset_of!(GfxBase, DisplayFlags) - 206usize];
    ["Offset of field: GfxBase::SimpleSprites"]
        [::core::mem::offset_of!(GfxBase, SimpleSprites) - 208usize];
    ["Offset of field: GfxBase::MaxDisplayRow"]
        [::core::mem::offset_of!(GfxBase, MaxDisplayRow) - 212usize];
    ["Offset of field: GfxBase::MaxDisplayColumn"]
        [::core::mem::offset_of!(GfxBase, MaxDisplayColumn) - 214usize];
    ["Offset of field: GfxBase::NormalDisplayRows"]
        [::core::mem::offset_of!(GfxBase, NormalDisplayRows) - 216usize];
    ["Offset of field: GfxBase::NormalDisplayColumns"]
        [::core::mem::offset_of!(GfxBase, NormalDisplayColumns) - 218usize];
    ["Offset of field: GfxBase::NormalDPMX"]
        [::core::mem::offset_of!(GfxBase, NormalDPMX) - 220usize];
    ["Offset of field: GfxBase::NormalDPMY"]
        [::core::mem::offset_of!(GfxBase, NormalDPMY) - 222usize];
    ["Offset of field: GfxBase::LastChanceMemory"]
        [::core::mem::offset_of!(GfxBase, LastChanceMemory) - 224usize];
    ["Offset of field: GfxBase::LCMptr"][::core::mem::offset_of!(GfxBase, LCMptr) - 228usize];
    ["Offset of field: GfxBase::MicrosPerLine"]
        [::core::mem::offset_of!(GfxBase, MicrosPerLine) - 232usize];
    ["Offset of field: GfxBase::MinDisplayColumn"]
        [::core::mem::offset_of!(GfxBase, MinDisplayColumn) - 234usize];
    ["Offset of field: GfxBase::ChipRevBits0"]
        [::core::mem::offset_of!(GfxBase, ChipRevBits0) - 236usize];
    ["Offset of field: GfxBase::MemType"][::core::mem::offset_of!(GfxBase, MemType) - 237usize];
    ["Offset of field: GfxBase::crb_reserved"]
        [::core::mem::offset_of!(GfxBase, crb_reserved) - 238usize];
    ["Offset of field: GfxBase::monitor_id"]
        [::core::mem::offset_of!(GfxBase, monitor_id) - 242usize];
    ["Offset of field: GfxBase::hedley"][::core::mem::offset_of!(GfxBase, hedley) - 244usize];
    ["Offset of field: GfxBase::hedley_sprites"]
        [::core::mem::offset_of!(GfxBase, hedley_sprites) - 276usize];
    ["Offset of field: GfxBase::hedley_sprites1"]
        [::core::mem::offset_of!(GfxBase, hedley_sprites1) - 308usize];
    ["Offset of field: GfxBase::hedley_count"]
        [::core::mem::offset_of!(GfxBase, hedley_count) - 340usize];
    ["Offset of field: GfxBase::hedley_flags"]
        [::core::mem::offset_of!(GfxBase, hedley_flags) - 342usize];
    ["Offset of field: GfxBase::hedley_tmp"]
        [::core::mem::offset_of!(GfxBase, hedley_tmp) - 344usize];
    ["Offset of field: GfxBase::hash_table"]
        [::core::mem::offset_of!(GfxBase, hash_table) - 346usize];
    ["Offset of field: GfxBase::current_tot_rows"]
        [::core::mem::offset_of!(GfxBase, current_tot_rows) - 350usize];
    ["Offset of field: GfxBase::current_tot_cclks"]
        [::core::mem::offset_of!(GfxBase, current_tot_cclks) - 352usize];
    ["Offset of field: GfxBase::hedley_hint"]
        [::core::mem::offset_of!(GfxBase, hedley_hint) - 354usize];
    ["Offset of field: GfxBase::hedley_hint2"]
        [::core::mem::offset_of!(GfxBase, hedley_hint2) - 355usize];
    ["Offset of field: GfxBase::nreserved"][::core::mem::offset_of!(GfxBase, nreserved) - 356usize];
    ["Offset of field: GfxBase::a2024_sync_raster"]
        [::core::mem::offset_of!(GfxBase, a2024_sync_raster) - 372usize];
    ["Offset of field: GfxBase::control_delta_pal"]
        [::core::mem::offset_of!(GfxBase, control_delta_pal) - 376usize];
    ["Offset of field: GfxBase::control_delta_ntsc"]
        [::core::mem::offset_of!(GfxBase, control_delta_ntsc) - 378usize];
    ["Offset of field: GfxBase::current_monitor"]
        [::core::mem::offset_of!(GfxBase, current_monitor) - 380usize];
    ["Offset of field: GfxBase::MonitorList"]
        [::core::mem::offset_of!(GfxBase, MonitorList) - 384usize];
    ["Offset of field: GfxBase::default_monitor"]
        [::core::mem::offset_of!(GfxBase, default_monitor) - 398usize];
    ["Offset of field: GfxBase::MonitorListSemaphore"]
        [::core::mem::offset_of!(GfxBase, MonitorListSemaphore) - 402usize];
    ["Offset of field: GfxBase::DisplayInfoDataBase"]
        [::core::mem::offset_of!(GfxBase, DisplayInfoDataBase) - 406usize];
    ["Offset of field: GfxBase::TopLine"][::core::mem::offset_of!(GfxBase, TopLine) - 410usize];
    ["Offset of field: GfxBase::ActiViewCprSemaphore"]
        [::core::mem::offset_of!(GfxBase, ActiViewCprSemaphore) - 412usize];
    ["Offset of field: GfxBase::UtilBase"][::core::mem::offset_of!(GfxBase, UtilBase) - 416usize];
    ["Offset of field: GfxBase::ExecBase"][::core::mem::offset_of!(GfxBase, ExecBase) - 420usize];
    ["Offset of field: GfxBase::bwshifts"][::core::mem::offset_of!(GfxBase, bwshifts) - 424usize];
    ["Offset of field: GfxBase::StrtFetchMasks"]
        [::core::mem::offset_of!(GfxBase, StrtFetchMasks) - 428usize];
    ["Offset of field: GfxBase::StopFetchMasks"]
        [::core::mem::offset_of!(GfxBase, StopFetchMasks) - 432usize];
    ["Offset of field: GfxBase::Overrun"][::core::mem::offset_of!(GfxBase, Overrun) - 436usize];
    ["Offset of field: GfxBase::RealStops"][::core::mem::offset_of!(GfxBase, RealStops) - 440usize];
    ["Offset of field: GfxBase::SpriteWidth"]
        [::core::mem::offset_of!(GfxBase, SpriteWidth) - 444usize];
    ["Offset of field: GfxBase::SpriteFMode"]
        [::core::mem::offset_of!(GfxBase, SpriteFMode) - 446usize];
    ["Offset of field: GfxBase::SoftSprites"]
        [::core::mem::offset_of!(GfxBase, SoftSprites) - 448usize];
    ["Offset of field: GfxBase::arraywidth"]
        [::core::mem::offset_of!(GfxBase, arraywidth) - 449usize];
    ["Offset of field: GfxBase::DefaultSpriteWidth"]
        [::core::mem::offset_of!(GfxBase, DefaultSpriteWidth) - 450usize];
    ["Offset of field: GfxBase::SprMoveDisable"]
        [::core::mem::offset_of!(GfxBase, SprMoveDisable) - 452usize];
    ["Offset of field: GfxBase::WantChips"][::core::mem::offset_of!(GfxBase, WantChips) - 453usize];
    ["Offset of field: GfxBase::BoardMemType"]
        [::core::mem::offset_of!(GfxBase, BoardMemType) - 454usize];
    ["Offset of field: GfxBase::Bugs"][::core::mem::offset_of!(GfxBase, Bugs) - 455usize];
    ["Offset of field: GfxBase::gb_LayersBase"]
        [::core::mem::offset_of!(GfxBase, gb_LayersBase) - 456usize];
    ["Offset of field: GfxBase::ColorMask"][::core::mem::offset_of!(GfxBase, ColorMask) - 460usize];
    ["Offset of field: GfxBase::IVector"][::core::mem::offset_of!(GfxBase, IVector) - 464usize];
    ["Offset of field: GfxBase::IData"][::core::mem::offset_of!(GfxBase, IData) - 468usize];
    ["Offset of field: GfxBase::SpecialCounter"]
        [::core::mem::offset_of!(GfxBase, SpecialCounter) - 472usize];
    ["Offset of field: GfxBase::DBList"][::core::mem::offset_of!(GfxBase, DBList) - 476usize];
    ["Offset of field: GfxBase::MonitorFlags"]
        [::core::mem::offset_of!(GfxBase, MonitorFlags) - 480usize];
    ["Offset of field: GfxBase::ScanDoubledSprites"]
        [::core::mem::offset_of!(GfxBase, ScanDoubledSprites) - 482usize];
    ["Offset of field: GfxBase::BP3Bits"][::core::mem::offset_of!(GfxBase, BP3Bits) - 483usize];
    ["Offset of field: GfxBase::MonitorVBlank"]
        [::core::mem::offset_of!(GfxBase, MonitorVBlank) - 484usize];
    ["Offset of field: GfxBase::natural_monitor"]
        [::core::mem::offset_of!(GfxBase, natural_monitor) - 488usize];
    ["Offset of field: GfxBase::ProgData"][::core::mem::offset_of!(GfxBase, ProgData) - 492usize];
    ["Offset of field: GfxBase::ExtSprites"]
        [::core::mem::offset_of!(GfxBase, ExtSprites) - 496usize];
    ["Offset of field: GfxBase::pad3"][::core::mem::offset_of!(GfxBase, pad3) - 497usize];
    ["Offset of field: GfxBase::GfxFlags"][::core::mem::offset_of!(GfxBase, GfxFlags) - 498usize];
    ["Offset of field: GfxBase::VBCounter"][::core::mem::offset_of!(GfxBase, VBCounter) - 500usize];
    ["Offset of field: GfxBase::HashTableSemaphore"]
        [::core::mem::offset_of!(GfxBase, HashTableSemaphore) - 504usize];
    ["Offset of field: GfxBase::HWEmul"][::core::mem::offset_of!(GfxBase, HWEmul) - 508usize];
    ["Offset of field: GfxBase::Scratch"][::core::mem::offset_of!(GfxBase, Scratch) - 544usize];
    ["Offset of field: GfxBase::ScratchSize"]
        [::core::mem::offset_of!(GfxBase, ScratchSize) - 548usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Isrvstr {
    pub is_Node: Node,
    pub Iptr: *mut Isrvstr,
    pub code: FPTR,
    pub ccode: FPTR,
    pub Carg: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Isrvstr"][::core::mem::size_of::<Isrvstr>() - 30usize];
    ["Alignment of Isrvstr"][::core::mem::align_of::<Isrvstr>() - 2usize];
    ["Offset of field: Isrvstr::is_Node"][::core::mem::offset_of!(Isrvstr, is_Node) - 0usize];
    ["Offset of field: Isrvstr::Iptr"][::core::mem::offset_of!(Isrvstr, Iptr) - 14usize];
    ["Offset of field: Isrvstr::code"][::core::mem::offset_of!(Isrvstr, code) - 18usize];
    ["Offset of field: Isrvstr::ccode"][::core::mem::offset_of!(Isrvstr, ccode) - 22usize];
    ["Offset of field: Isrvstr::Carg"][::core::mem::offset_of!(Isrvstr, Carg) - 26usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RegionRectangle {
    pub Next: *mut RegionRectangle,
    pub Prev: *mut RegionRectangle,
    pub bounds: Rectangle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RegionRectangle"][::core::mem::size_of::<RegionRectangle>() - 16usize];
    ["Alignment of RegionRectangle"][::core::mem::align_of::<RegionRectangle>() - 2usize];
    ["Offset of field: RegionRectangle::Next"]
        [::core::mem::offset_of!(RegionRectangle, Next) - 0usize];
    ["Offset of field: RegionRectangle::Prev"]
        [::core::mem::offset_of!(RegionRectangle, Prev) - 4usize];
    ["Offset of field: RegionRectangle::bounds"]
        [::core::mem::offset_of!(RegionRectangle, bounds) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Region {
    pub bounds: Rectangle,
    pub RegionRectangle: *mut RegionRectangle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Region"][::core::mem::size_of::<Region>() - 12usize];
    ["Alignment of Region"][::core::mem::align_of::<Region>() - 2usize];
    ["Offset of field: Region::bounds"][::core::mem::offset_of!(Region, bounds) - 0usize];
    ["Offset of field: Region::RegionRectangle"]
        [::core::mem::offset_of!(Region, RegionRectangle) - 8usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BitScaleArgs {
    pub bsa_SrcX: UWORD,
    pub bsa_SrcY: UWORD,
    pub bsa_SrcWidth: UWORD,
    pub bsa_SrcHeight: UWORD,
    pub bsa_XSrcFactor: UWORD,
    pub bsa_YSrcFactor: UWORD,
    pub bsa_DestX: UWORD,
    pub bsa_DestY: UWORD,
    pub bsa_DestWidth: UWORD,
    pub bsa_DestHeight: UWORD,
    pub bsa_XDestFactor: UWORD,
    pub bsa_YDestFactor: UWORD,
    pub bsa_SrcBitMap: *mut BitMap,
    pub bsa_DestBitMap: *mut BitMap,
    pub bsa_Flags: ULONG,
    pub bsa_XDDA: UWORD,
    pub bsa_YDDA: UWORD,
    pub bsa_Reserved1: LONG,
    pub bsa_Reserved2: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BitScaleArgs"][::core::mem::size_of::<BitScaleArgs>() - 48usize];
    ["Alignment of BitScaleArgs"][::core::mem::align_of::<BitScaleArgs>() - 2usize];
    ["Offset of field: BitScaleArgs::bsa_SrcX"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_SrcX) - 0usize];
    ["Offset of field: BitScaleArgs::bsa_SrcY"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_SrcY) - 2usize];
    ["Offset of field: BitScaleArgs::bsa_SrcWidth"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_SrcWidth) - 4usize];
    ["Offset of field: BitScaleArgs::bsa_SrcHeight"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_SrcHeight) - 6usize];
    ["Offset of field: BitScaleArgs::bsa_XSrcFactor"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_XSrcFactor) - 8usize];
    ["Offset of field: BitScaleArgs::bsa_YSrcFactor"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_YSrcFactor) - 10usize];
    ["Offset of field: BitScaleArgs::bsa_DestX"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_DestX) - 12usize];
    ["Offset of field: BitScaleArgs::bsa_DestY"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_DestY) - 14usize];
    ["Offset of field: BitScaleArgs::bsa_DestWidth"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_DestWidth) - 16usize];
    ["Offset of field: BitScaleArgs::bsa_DestHeight"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_DestHeight) - 18usize];
    ["Offset of field: BitScaleArgs::bsa_XDestFactor"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_XDestFactor) - 20usize];
    ["Offset of field: BitScaleArgs::bsa_YDestFactor"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_YDestFactor) - 22usize];
    ["Offset of field: BitScaleArgs::bsa_SrcBitMap"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_SrcBitMap) - 24usize];
    ["Offset of field: BitScaleArgs::bsa_DestBitMap"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_DestBitMap) - 28usize];
    ["Offset of field: BitScaleArgs::bsa_Flags"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_Flags) - 32usize];
    ["Offset of field: BitScaleArgs::bsa_XDDA"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_XDDA) - 36usize];
    ["Offset of field: BitScaleArgs::bsa_YDDA"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_YDDA) - 38usize];
    ["Offset of field: BitScaleArgs::bsa_Reserved1"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_Reserved1) - 40usize];
    ["Offset of field: BitScaleArgs::bsa_Reserved2"]
        [::core::mem::offset_of!(BitScaleArgs, bsa_Reserved2) - 44usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SimpleSprite {
    pub posctldata: *mut UWORD,
    pub height: UWORD,
    pub x: UWORD,
    pub y: UWORD,
    pub num: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SimpleSprite"][::core::mem::size_of::<SimpleSprite>() - 12usize];
    ["Alignment of SimpleSprite"][::core::mem::align_of::<SimpleSprite>() - 2usize];
    ["Offset of field: SimpleSprite::posctldata"]
        [::core::mem::offset_of!(SimpleSprite, posctldata) - 0usize];
    ["Offset of field: SimpleSprite::height"]
        [::core::mem::offset_of!(SimpleSprite, height) - 4usize];
    ["Offset of field: SimpleSprite::x"][::core::mem::offset_of!(SimpleSprite, x) - 6usize];
    ["Offset of field: SimpleSprite::y"][::core::mem::offset_of!(SimpleSprite, y) - 8usize];
    ["Offset of field: SimpleSprite::num"][::core::mem::offset_of!(SimpleSprite, num) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExtSprite {
    pub es_SimpleSprite: SimpleSprite,
    pub es_wordwidth: UWORD,
    pub es_flags: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExtSprite"][::core::mem::size_of::<ExtSprite>() - 16usize];
    ["Alignment of ExtSprite"][::core::mem::align_of::<ExtSprite>() - 2usize];
    ["Offset of field: ExtSprite::es_SimpleSprite"]
        [::core::mem::offset_of!(ExtSprite, es_SimpleSprite) - 0usize];
    ["Offset of field: ExtSprite::es_wordwidth"]
        [::core::mem::offset_of!(ExtSprite, es_wordwidth) - 12usize];
    ["Offset of field: ExtSprite::es_flags"]
        [::core::mem::offset_of!(ExtSprite, es_flags) - 14usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct bltnode {
    pub n: *mut bltnode,
    pub function: FPTR,
    pub stat: ::core::ffi::c_char,
    pub blitsize: ::core::ffi::c_short,
    pub beamsync: ::core::ffi::c_short,
    pub cleanup: FPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bltnode"][::core::mem::size_of::<bltnode>() - 18usize];
    ["Alignment of bltnode"][::core::mem::align_of::<bltnode>() - 2usize];
    ["Offset of field: bltnode::n"][::core::mem::offset_of!(bltnode, n) - 0usize];
    ["Offset of field: bltnode::function"][::core::mem::offset_of!(bltnode, function) - 4usize];
    ["Offset of field: bltnode::stat"][::core::mem::offset_of!(bltnode, stat) - 8usize];
    ["Offset of field: bltnode::blitsize"][::core::mem::offset_of!(bltnode, blitsize) - 10usize];
    ["Offset of field: bltnode::beamsync"][::core::mem::offset_of!(bltnode, beamsync) - 12usize];
    ["Offset of field: bltnode::cleanup"][::core::mem::offset_of!(bltnode, cleanup) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[repr(align(2))]
pub struct CIA {
    pub ciapra: UBYTE,
    pub pad0: [UBYTE; 255usize],
    pub ciaprb: UBYTE,
    pub pad1: [UBYTE; 255usize],
    pub ciaddra: UBYTE,
    pub pad2: [UBYTE; 255usize],
    pub ciaddrb: UBYTE,
    pub pad3: [UBYTE; 255usize],
    pub ciatalo: UBYTE,
    pub pad4: [UBYTE; 255usize],
    pub ciatahi: UBYTE,
    pub pad5: [UBYTE; 255usize],
    pub ciatblo: UBYTE,
    pub pad6: [UBYTE; 255usize],
    pub ciatbhi: UBYTE,
    pub pad7: [UBYTE; 255usize],
    pub ciatodlow: UBYTE,
    pub pad8: [UBYTE; 255usize],
    pub ciatodmid: UBYTE,
    pub pad9: [UBYTE; 255usize],
    pub ciatodhi: UBYTE,
    pub pad10: [UBYTE; 255usize],
    pub unusedreg: UBYTE,
    pub pad11: [UBYTE; 255usize],
    pub ciasdr: UBYTE,
    pub pad12: [UBYTE; 255usize],
    pub ciaicr: UBYTE,
    pub pad13: [UBYTE; 255usize],
    pub ciacra: UBYTE,
    pub pad14: [UBYTE; 255usize],
    pub ciacrb: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CIA"][::core::mem::size_of::<CIA>() - 3842usize];
    ["Alignment of CIA"][::core::mem::align_of::<CIA>() - 2usize];
    ["Offset of field: CIA::ciapra"][::core::mem::offset_of!(CIA, ciapra) - 0usize];
    ["Offset of field: CIA::pad0"][::core::mem::offset_of!(CIA, pad0) - 1usize];
    ["Offset of field: CIA::ciaprb"][::core::mem::offset_of!(CIA, ciaprb) - 256usize];
    ["Offset of field: CIA::pad1"][::core::mem::offset_of!(CIA, pad1) - 257usize];
    ["Offset of field: CIA::ciaddra"][::core::mem::offset_of!(CIA, ciaddra) - 512usize];
    ["Offset of field: CIA::pad2"][::core::mem::offset_of!(CIA, pad2) - 513usize];
    ["Offset of field: CIA::ciaddrb"][::core::mem::offset_of!(CIA, ciaddrb) - 768usize];
    ["Offset of field: CIA::pad3"][::core::mem::offset_of!(CIA, pad3) - 769usize];
    ["Offset of field: CIA::ciatalo"][::core::mem::offset_of!(CIA, ciatalo) - 1024usize];
    ["Offset of field: CIA::pad4"][::core::mem::offset_of!(CIA, pad4) - 1025usize];
    ["Offset of field: CIA::ciatahi"][::core::mem::offset_of!(CIA, ciatahi) - 1280usize];
    ["Offset of field: CIA::pad5"][::core::mem::offset_of!(CIA, pad5) - 1281usize];
    ["Offset of field: CIA::ciatblo"][::core::mem::offset_of!(CIA, ciatblo) - 1536usize];
    ["Offset of field: CIA::pad6"][::core::mem::offset_of!(CIA, pad6) - 1537usize];
    ["Offset of field: CIA::ciatbhi"][::core::mem::offset_of!(CIA, ciatbhi) - 1792usize];
    ["Offset of field: CIA::pad7"][::core::mem::offset_of!(CIA, pad7) - 1793usize];
    ["Offset of field: CIA::ciatodlow"][::core::mem::offset_of!(CIA, ciatodlow) - 2048usize];
    ["Offset of field: CIA::pad8"][::core::mem::offset_of!(CIA, pad8) - 2049usize];
    ["Offset of field: CIA::ciatodmid"][::core::mem::offset_of!(CIA, ciatodmid) - 2304usize];
    ["Offset of field: CIA::pad9"][::core::mem::offset_of!(CIA, pad9) - 2305usize];
    ["Offset of field: CIA::ciatodhi"][::core::mem::offset_of!(CIA, ciatodhi) - 2560usize];
    ["Offset of field: CIA::pad10"][::core::mem::offset_of!(CIA, pad10) - 2561usize];
    ["Offset of field: CIA::unusedreg"][::core::mem::offset_of!(CIA, unusedreg) - 2816usize];
    ["Offset of field: CIA::pad11"][::core::mem::offset_of!(CIA, pad11) - 2817usize];
    ["Offset of field: CIA::ciasdr"][::core::mem::offset_of!(CIA, ciasdr) - 3072usize];
    ["Offset of field: CIA::pad12"][::core::mem::offset_of!(CIA, pad12) - 3073usize];
    ["Offset of field: CIA::ciaicr"][::core::mem::offset_of!(CIA, ciaicr) - 3328usize];
    ["Offset of field: CIA::pad13"][::core::mem::offset_of!(CIA, pad13) - 3329usize];
    ["Offset of field: CIA::ciacra"][::core::mem::offset_of!(CIA, ciacra) - 3584usize];
    ["Offset of field: CIA::pad14"][::core::mem::offset_of!(CIA, pad14) - 3585usize];
    ["Offset of field: CIA::ciacrb"][::core::mem::offset_of!(CIA, ciacrb) - 3840usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawList {
    pub dl_Directive: WORD,
    pub dl_X1: UWORD,
    pub dl_Y1: UWORD,
    pub dl_X2: UWORD,
    pub dl_Y2: UWORD,
    pub dl_Pen: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DrawList"][::core::mem::size_of::<DrawList>() - 12usize];
    ["Alignment of DrawList"][::core::mem::align_of::<DrawList>() - 2usize];
    ["Offset of field: DrawList::dl_Directive"]
        [::core::mem::offset_of!(DrawList, dl_Directive) - 0usize];
    ["Offset of field: DrawList::dl_X1"][::core::mem::offset_of!(DrawList, dl_X1) - 2usize];
    ["Offset of field: DrawList::dl_Y1"][::core::mem::offset_of!(DrawList, dl_Y1) - 4usize];
    ["Offset of field: DrawList::dl_X2"][::core::mem::offset_of!(DrawList, dl_X2) - 6usize];
    ["Offset of field: DrawList::dl_Y2"][::core::mem::offset_of!(DrawList, dl_Y2) - 8usize];
    ["Offset of field: DrawList::dl_Pen"][::core::mem::offset_of!(DrawList, dl_Pen) - 10usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IntuitionBase {
    pub LibNode: Library,
    pub ViewLord: View,
    pub ActiveWindow: *mut Window,
    pub ActiveScreen: *mut Screen,
    pub FirstScreen: *mut Screen,
    pub Flags: ULONG,
    pub MouseY: WORD,
    pub MouseX: WORD,
    pub Seconds: ULONG,
    pub Micros: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IntuitionBase"][::core::mem::size_of::<IntuitionBase>() - 80usize];
    ["Alignment of IntuitionBase"][::core::mem::align_of::<IntuitionBase>() - 2usize];
    ["Offset of field: IntuitionBase::LibNode"]
        [::core::mem::offset_of!(IntuitionBase, LibNode) - 0usize];
    ["Offset of field: IntuitionBase::ViewLord"]
        [::core::mem::offset_of!(IntuitionBase, ViewLord) - 34usize];
    ["Offset of field: IntuitionBase::ActiveWindow"]
        [::core::mem::offset_of!(IntuitionBase, ActiveWindow) - 52usize];
    ["Offset of field: IntuitionBase::ActiveScreen"]
        [::core::mem::offset_of!(IntuitionBase, ActiveScreen) - 56usize];
    ["Offset of field: IntuitionBase::FirstScreen"]
        [::core::mem::offset_of!(IntuitionBase, FirstScreen) - 60usize];
    ["Offset of field: IntuitionBase::Flags"]
        [::core::mem::offset_of!(IntuitionBase, Flags) - 64usize];
    ["Offset of field: IntuitionBase::MouseY"]
        [::core::mem::offset_of!(IntuitionBase, MouseY) - 68usize];
    ["Offset of field: IntuitionBase::MouseX"]
        [::core::mem::offset_of!(IntuitionBase, MouseX) - 70usize];
    ["Offset of field: IntuitionBase::Seconds"]
        [::core::mem::offset_of!(IntuitionBase, Seconds) - 72usize];
    ["Offset of field: IntuitionBase::Micros"]
        [::core::mem::offset_of!(IntuitionBase, Micros) - 76usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct StringExtend {
    pub Font: *mut TextFont,
    pub Pens: [UBYTE; 2usize],
    pub ActivePens: [UBYTE; 2usize],
    pub InitialModes: ULONG,
    pub EditHook: *mut Hook,
    pub WorkBuffer: STRPTR,
    pub Reserved: [ULONG; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StringExtend"][::core::mem::size_of::<StringExtend>() - 36usize];
    ["Alignment of StringExtend"][::core::mem::align_of::<StringExtend>() - 2usize];
    ["Offset of field: StringExtend::Font"][::core::mem::offset_of!(StringExtend, Font) - 0usize];
    ["Offset of field: StringExtend::Pens"][::core::mem::offset_of!(StringExtend, Pens) - 4usize];
    ["Offset of field: StringExtend::ActivePens"]
        [::core::mem::offset_of!(StringExtend, ActivePens) - 6usize];
    ["Offset of field: StringExtend::InitialModes"]
        [::core::mem::offset_of!(StringExtend, InitialModes) - 8usize];
    ["Offset of field: StringExtend::EditHook"]
        [::core::mem::offset_of!(StringExtend, EditHook) - 12usize];
    ["Offset of field: StringExtend::WorkBuffer"]
        [::core::mem::offset_of!(StringExtend, WorkBuffer) - 16usize];
    ["Offset of field: StringExtend::Reserved"]
        [::core::mem::offset_of!(StringExtend, Reserved) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SGWork {
    pub Gadget: *mut Gadget,
    pub StringInfo: *mut StringInfo,
    pub WorkBuffer: STRPTR,
    pub PrevBuffer: STRPTR,
    pub Modes: ULONG,
    pub IEvent: *mut InputEvent,
    pub Code: UWORD,
    pub BufferPos: WORD,
    pub NumChars: WORD,
    pub Actions: ULONG,
    pub LongInt: LONG,
    pub GadgetInfo: *mut GadgetInfo,
    pub EditOp: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SGWork"][::core::mem::size_of::<SGWork>() - 44usize];
    ["Alignment of SGWork"][::core::mem::align_of::<SGWork>() - 2usize];
    ["Offset of field: SGWork::Gadget"][::core::mem::offset_of!(SGWork, Gadget) - 0usize];
    ["Offset of field: SGWork::StringInfo"][::core::mem::offset_of!(SGWork, StringInfo) - 4usize];
    ["Offset of field: SGWork::WorkBuffer"][::core::mem::offset_of!(SGWork, WorkBuffer) - 8usize];
    ["Offset of field: SGWork::PrevBuffer"][::core::mem::offset_of!(SGWork, PrevBuffer) - 12usize];
    ["Offset of field: SGWork::Modes"][::core::mem::offset_of!(SGWork, Modes) - 16usize];
    ["Offset of field: SGWork::IEvent"][::core::mem::offset_of!(SGWork, IEvent) - 20usize];
    ["Offset of field: SGWork::Code"][::core::mem::offset_of!(SGWork, Code) - 24usize];
    ["Offset of field: SGWork::BufferPos"][::core::mem::offset_of!(SGWork, BufferPos) - 26usize];
    ["Offset of field: SGWork::NumChars"][::core::mem::offset_of!(SGWork, NumChars) - 28usize];
    ["Offset of field: SGWork::Actions"][::core::mem::offset_of!(SGWork, Actions) - 30usize];
    ["Offset of field: SGWork::LongInt"][::core::mem::offset_of!(SGWork, LongInt) - 34usize];
    ["Offset of field: SGWork::GadgetInfo"][::core::mem::offset_of!(SGWork, GadgetInfo) - 38usize];
    ["Offset of field: SGWork::EditOp"][::core::mem::offset_of!(SGWork, EditOp) - 42usize];
};
pub type AMIGAGUIDECONTEXT = *mut ::core::ffi::c_void;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AmigaGuideMsg {
    pub agm_Msg: Message,
    pub agm_Type: ULONG,
    pub agm_Data: APTR,
    pub agm_DSize: ULONG,
    pub agm_DType: ULONG,
    pub agm_Pri_Ret: ULONG,
    pub agm_Sec_Ret: ULONG,
    pub agm_System1: APTR,
    pub agm_System2: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AmigaGuideMsg"][::core::mem::size_of::<AmigaGuideMsg>() - 52usize];
    ["Alignment of AmigaGuideMsg"][::core::mem::align_of::<AmigaGuideMsg>() - 2usize];
    ["Offset of field: AmigaGuideMsg::agm_Msg"]
        [::core::mem::offset_of!(AmigaGuideMsg, agm_Msg) - 0usize];
    ["Offset of field: AmigaGuideMsg::agm_Type"]
        [::core::mem::offset_of!(AmigaGuideMsg, agm_Type) - 20usize];
    ["Offset of field: AmigaGuideMsg::agm_Data"]
        [::core::mem::offset_of!(AmigaGuideMsg, agm_Data) - 24usize];
    ["Offset of field: AmigaGuideMsg::agm_DSize"]
        [::core::mem::offset_of!(AmigaGuideMsg, agm_DSize) - 28usize];
    ["Offset of field: AmigaGuideMsg::agm_DType"]
        [::core::mem::offset_of!(AmigaGuideMsg, agm_DType) - 32usize];
    ["Offset of field: AmigaGuideMsg::agm_Pri_Ret"]
        [::core::mem::offset_of!(AmigaGuideMsg, agm_Pri_Ret) - 36usize];
    ["Offset of field: AmigaGuideMsg::agm_Sec_Ret"]
        [::core::mem::offset_of!(AmigaGuideMsg, agm_Sec_Ret) - 40usize];
    ["Offset of field: AmigaGuideMsg::agm_System1"]
        [::core::mem::offset_of!(AmigaGuideMsg, agm_System1) - 44usize];
    ["Offset of field: AmigaGuideMsg::agm_System2"]
        [::core::mem::offset_of!(AmigaGuideMsg, agm_System2) - 48usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NewAmigaGuide {
    pub nag_Lock: BPTR,
    pub nag_Name: STRPTR,
    pub nag_Screen: *mut Screen,
    pub nag_PubScreen: STRPTR,
    pub nag_HostPort: STRPTR,
    pub nag_ClientPort: STRPTR,
    pub nag_BaseName: STRPTR,
    pub nag_Flags: ULONG,
    pub nag_Context: *mut STRPTR,
    pub nag_Node: STRPTR,
    pub nag_Line: LONG,
    pub nag_Extens: *mut TagItem,
    pub nag_Client: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NewAmigaGuide"][::core::mem::size_of::<NewAmigaGuide>() - 52usize];
    ["Alignment of NewAmigaGuide"][::core::mem::align_of::<NewAmigaGuide>() - 2usize];
    ["Offset of field: NewAmigaGuide::nag_Lock"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_Lock) - 0usize];
    ["Offset of field: NewAmigaGuide::nag_Name"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_Name) - 4usize];
    ["Offset of field: NewAmigaGuide::nag_Screen"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_Screen) - 8usize];
    ["Offset of field: NewAmigaGuide::nag_PubScreen"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_PubScreen) - 12usize];
    ["Offset of field: NewAmigaGuide::nag_HostPort"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_HostPort) - 16usize];
    ["Offset of field: NewAmigaGuide::nag_ClientPort"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_ClientPort) - 20usize];
    ["Offset of field: NewAmigaGuide::nag_BaseName"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_BaseName) - 24usize];
    ["Offset of field: NewAmigaGuide::nag_Flags"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_Flags) - 28usize];
    ["Offset of field: NewAmigaGuide::nag_Context"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_Context) - 32usize];
    ["Offset of field: NewAmigaGuide::nag_Node"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_Node) - 36usize];
    ["Offset of field: NewAmigaGuide::nag_Line"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_Line) - 40usize];
    ["Offset of field: NewAmigaGuide::nag_Extens"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_Extens) - 44usize];
    ["Offset of field: NewAmigaGuide::nag_Client"]
        [::core::mem::offset_of!(NewAmigaGuide, nag_Client) - 48usize];
};
pub type AMIGAGUIDEHOST = *mut AmigaGuideHost;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct XRef {
    pub xr_Node: Node,
    pub xr_Pad: UWORD,
    pub xr_DF: *mut DocFile,
    pub xr_File: STRPTR,
    pub xr_Name: STRPTR,
    pub xr_Line: LONG,
    pub xr_Reserved: [ULONG; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XRef"][::core::mem::size_of::<XRef>() - 40usize];
    ["Alignment of XRef"][::core::mem::align_of::<XRef>() - 2usize];
    ["Offset of field: XRef::xr_Node"][::core::mem::offset_of!(XRef, xr_Node) - 0usize];
    ["Offset of field: XRef::xr_Pad"][::core::mem::offset_of!(XRef, xr_Pad) - 14usize];
    ["Offset of field: XRef::xr_DF"][::core::mem::offset_of!(XRef, xr_DF) - 16usize];
    ["Offset of field: XRef::xr_File"][::core::mem::offset_of!(XRef, xr_File) - 20usize];
    ["Offset of field: XRef::xr_Name"][::core::mem::offset_of!(XRef, xr_Name) - 24usize];
    ["Offset of field: XRef::xr_Line"][::core::mem::offset_of!(XRef, xr_Line) - 28usize];
    ["Offset of field: XRef::xr_Reserved"][::core::mem::offset_of!(XRef, xr_Reserved) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AmigaGuideHost {
    pub agh_Dispatcher: Hook,
    pub agh_Reserved: ULONG,
    pub agh_Flags: ULONG,
    pub agh_UseCnt: ULONG,
    pub agh_SystemData: APTR,
    pub agh_UserData: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AmigaGuideHost"][::core::mem::size_of::<AmigaGuideHost>() - 40usize];
    ["Alignment of AmigaGuideHost"][::core::mem::align_of::<AmigaGuideHost>() - 2usize];
    ["Offset of field: AmigaGuideHost::agh_Dispatcher"]
        [::core::mem::offset_of!(AmigaGuideHost, agh_Dispatcher) - 0usize];
    ["Offset of field: AmigaGuideHost::agh_Reserved"]
        [::core::mem::offset_of!(AmigaGuideHost, agh_Reserved) - 20usize];
    ["Offset of field: AmigaGuideHost::agh_Flags"]
        [::core::mem::offset_of!(AmigaGuideHost, agh_Flags) - 24usize];
    ["Offset of field: AmigaGuideHost::agh_UseCnt"]
        [::core::mem::offset_of!(AmigaGuideHost, agh_UseCnt) - 28usize];
    ["Offset of field: AmigaGuideHost::agh_SystemData"]
        [::core::mem::offset_of!(AmigaGuideHost, agh_SystemData) - 32usize];
    ["Offset of field: AmigaGuideHost::agh_UserData"]
        [::core::mem::offset_of!(AmigaGuideHost, agh_UserData) - 36usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct opFindHost {
    pub MethodID: ULONG,
    pub ofh_Attrs: *mut TagItem,
    pub ofh_Node: STRPTR,
    pub ofh_TOC: STRPTR,
    pub ofh_Title: STRPTR,
    pub ofh_Next: STRPTR,
    pub ofh_Prev: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of opFindHost"][::core::mem::size_of::<opFindHost>() - 28usize];
    ["Alignment of opFindHost"][::core::mem::align_of::<opFindHost>() - 2usize];
    ["Offset of field: opFindHost::MethodID"]
        [::core::mem::offset_of!(opFindHost, MethodID) - 0usize];
    ["Offset of field: opFindHost::ofh_Attrs"]
        [::core::mem::offset_of!(opFindHost, ofh_Attrs) - 4usize];
    ["Offset of field: opFindHost::ofh_Node"]
        [::core::mem::offset_of!(opFindHost, ofh_Node) - 8usize];
    ["Offset of field: opFindHost::ofh_TOC"]
        [::core::mem::offset_of!(opFindHost, ofh_TOC) - 12usize];
    ["Offset of field: opFindHost::ofh_Title"]
        [::core::mem::offset_of!(opFindHost, ofh_Title) - 16usize];
    ["Offset of field: opFindHost::ofh_Next"]
        [::core::mem::offset_of!(opFindHost, ofh_Next) - 20usize];
    ["Offset of field: opFindHost::ofh_Prev"]
        [::core::mem::offset_of!(opFindHost, ofh_Prev) - 24usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct opNodeIO {
    pub MethodID: ULONG,
    pub onm_Attrs: *mut TagItem,
    pub onm_Node: STRPTR,
    pub onm_FileName: STRPTR,
    pub onm_DocBuffer: STRPTR,
    pub onm_BuffLen: ULONG,
    pub onm_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of opNodeIO"][::core::mem::size_of::<opNodeIO>() - 28usize];
    ["Alignment of opNodeIO"][::core::mem::align_of::<opNodeIO>() - 2usize];
    ["Offset of field: opNodeIO::MethodID"][::core::mem::offset_of!(opNodeIO, MethodID) - 0usize];
    ["Offset of field: opNodeIO::onm_Attrs"][::core::mem::offset_of!(opNodeIO, onm_Attrs) - 4usize];
    ["Offset of field: opNodeIO::onm_Node"][::core::mem::offset_of!(opNodeIO, onm_Node) - 8usize];
    ["Offset of field: opNodeIO::onm_FileName"]
        [::core::mem::offset_of!(opNodeIO, onm_FileName) - 12usize];
    ["Offset of field: opNodeIO::onm_DocBuffer"]
        [::core::mem::offset_of!(opNodeIO, onm_DocBuffer) - 16usize];
    ["Offset of field: opNodeIO::onm_BuffLen"]
        [::core::mem::offset_of!(opNodeIO, onm_BuffLen) - 20usize];
    ["Offset of field: opNodeIO::onm_Flags"]
        [::core::mem::offset_of!(opNodeIO, onm_Flags) - 24usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct opExpungeNode {
    pub MethodID: ULONG,
    pub oen_Attrs: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of opExpungeNode"][::core::mem::size_of::<opExpungeNode>() - 8usize];
    ["Alignment of opExpungeNode"][::core::mem::align_of::<opExpungeNode>() - 2usize];
    ["Offset of field: opExpungeNode::MethodID"]
        [::core::mem::offset_of!(opExpungeNode, MethodID) - 0usize];
    ["Offset of field: opExpungeNode::oen_Attrs"]
        [::core::mem::offset_of!(opExpungeNode, oen_Attrs) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct WBStartup {
    pub sm_Message: Message,
    pub sm_Process: *mut MsgPort,
    pub sm_Segment: BPTR,
    pub sm_NumArgs: LONG,
    pub sm_ToolWindow: STRPTR,
    pub sm_ArgList: *mut WBArg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WBStartup"][::core::mem::size_of::<WBStartup>() - 40usize];
    ["Alignment of WBStartup"][::core::mem::align_of::<WBStartup>() - 2usize];
    ["Offset of field: WBStartup::sm_Message"]
        [::core::mem::offset_of!(WBStartup, sm_Message) - 0usize];
    ["Offset of field: WBStartup::sm_Process"]
        [::core::mem::offset_of!(WBStartup, sm_Process) - 20usize];
    ["Offset of field: WBStartup::sm_Segment"]
        [::core::mem::offset_of!(WBStartup, sm_Segment) - 24usize];
    ["Offset of field: WBStartup::sm_NumArgs"]
        [::core::mem::offset_of!(WBStartup, sm_NumArgs) - 28usize];
    ["Offset of field: WBStartup::sm_ToolWindow"]
        [::core::mem::offset_of!(WBStartup, sm_ToolWindow) - 32usize];
    ["Offset of field: WBStartup::sm_ArgList"]
        [::core::mem::offset_of!(WBStartup, sm_ArgList) - 36usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct WBArg {
    pub wa_Lock: BPTR,
    pub wa_Name: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WBArg"][::core::mem::size_of::<WBArg>() - 8usize];
    ["Alignment of WBArg"][::core::mem::align_of::<WBArg>() - 2usize];
    ["Offset of field: WBArg::wa_Lock"][::core::mem::offset_of!(WBArg, wa_Lock) - 0usize];
    ["Offset of field: WBArg::wa_Name"][::core::mem::offset_of!(WBArg, wa_Name) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FileRequester {
    pub fr_Reserved0: [UBYTE; 4usize],
    pub fr_File: STRPTR,
    pub fr_Drawer: STRPTR,
    pub fr_Reserved1: [UBYTE; 10usize],
    pub fr_LeftEdge: WORD,
    pub fr_TopEdge: WORD,
    pub fr_Width: WORD,
    pub fr_Height: WORD,
    pub fr_Reserved2: [UBYTE; 2usize],
    pub fr_NumArgs: LONG,
    pub fr_ArgList: *mut WBArg,
    pub fr_UserData: APTR,
    pub fr_Reserved3: [UBYTE; 8usize],
    pub fr_Pattern: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileRequester"][::core::mem::size_of::<FileRequester>() - 56usize];
    ["Alignment of FileRequester"][::core::mem::align_of::<FileRequester>() - 2usize];
    ["Offset of field: FileRequester::fr_Reserved0"]
        [::core::mem::offset_of!(FileRequester, fr_Reserved0) - 0usize];
    ["Offset of field: FileRequester::fr_File"]
        [::core::mem::offset_of!(FileRequester, fr_File) - 4usize];
    ["Offset of field: FileRequester::fr_Drawer"]
        [::core::mem::offset_of!(FileRequester, fr_Drawer) - 8usize];
    ["Offset of field: FileRequester::fr_Reserved1"]
        [::core::mem::offset_of!(FileRequester, fr_Reserved1) - 12usize];
    ["Offset of field: FileRequester::fr_LeftEdge"]
        [::core::mem::offset_of!(FileRequester, fr_LeftEdge) - 22usize];
    ["Offset of field: FileRequester::fr_TopEdge"]
        [::core::mem::offset_of!(FileRequester, fr_TopEdge) - 24usize];
    ["Offset of field: FileRequester::fr_Width"]
        [::core::mem::offset_of!(FileRequester, fr_Width) - 26usize];
    ["Offset of field: FileRequester::fr_Height"]
        [::core::mem::offset_of!(FileRequester, fr_Height) - 28usize];
    ["Offset of field: FileRequester::fr_Reserved2"]
        [::core::mem::offset_of!(FileRequester, fr_Reserved2) - 30usize];
    ["Offset of field: FileRequester::fr_NumArgs"]
        [::core::mem::offset_of!(FileRequester, fr_NumArgs) - 32usize];
    ["Offset of field: FileRequester::fr_ArgList"]
        [::core::mem::offset_of!(FileRequester, fr_ArgList) - 36usize];
    ["Offset of field: FileRequester::fr_UserData"]
        [::core::mem::offset_of!(FileRequester, fr_UserData) - 40usize];
    ["Offset of field: FileRequester::fr_Reserved3"]
        [::core::mem::offset_of!(FileRequester, fr_Reserved3) - 44usize];
    ["Offset of field: FileRequester::fr_Pattern"]
        [::core::mem::offset_of!(FileRequester, fr_Pattern) - 52usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FontRequester {
    pub fo_Reserved0: [UBYTE; 8usize],
    pub fo_Attr: TextAttr,
    pub fo_FrontPen: UBYTE,
    pub fo_BackPen: UBYTE,
    pub fo_DrawMode: UBYTE,
    pub fo_SpecialDrawMode: UBYTE,
    pub fo_UserData: APTR,
    pub fo_LeftEdge: WORD,
    pub fo_TopEdge: WORD,
    pub fo_Width: WORD,
    pub fo_Height: WORD,
    pub fo_TAttr: TTextAttr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FontRequester"][::core::mem::size_of::<FontRequester>() - 44usize];
    ["Alignment of FontRequester"][::core::mem::align_of::<FontRequester>() - 2usize];
    ["Offset of field: FontRequester::fo_Reserved0"]
        [::core::mem::offset_of!(FontRequester, fo_Reserved0) - 0usize];
    ["Offset of field: FontRequester::fo_Attr"]
        [::core::mem::offset_of!(FontRequester, fo_Attr) - 8usize];
    ["Offset of field: FontRequester::fo_FrontPen"]
        [::core::mem::offset_of!(FontRequester, fo_FrontPen) - 16usize];
    ["Offset of field: FontRequester::fo_BackPen"]
        [::core::mem::offset_of!(FontRequester, fo_BackPen) - 17usize];
    ["Offset of field: FontRequester::fo_DrawMode"]
        [::core::mem::offset_of!(FontRequester, fo_DrawMode) - 18usize];
    ["Offset of field: FontRequester::fo_SpecialDrawMode"]
        [::core::mem::offset_of!(FontRequester, fo_SpecialDrawMode) - 19usize];
    ["Offset of field: FontRequester::fo_UserData"]
        [::core::mem::offset_of!(FontRequester, fo_UserData) - 20usize];
    ["Offset of field: FontRequester::fo_LeftEdge"]
        [::core::mem::offset_of!(FontRequester, fo_LeftEdge) - 24usize];
    ["Offset of field: FontRequester::fo_TopEdge"]
        [::core::mem::offset_of!(FontRequester, fo_TopEdge) - 26usize];
    ["Offset of field: FontRequester::fo_Width"]
        [::core::mem::offset_of!(FontRequester, fo_Width) - 28usize];
    ["Offset of field: FontRequester::fo_Height"]
        [::core::mem::offset_of!(FontRequester, fo_Height) - 30usize];
    ["Offset of field: FontRequester::fo_TAttr"]
        [::core::mem::offset_of!(FontRequester, fo_TAttr) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ScreenModeRequester {
    pub sm_DisplayID: ULONG,
    pub sm_DisplayWidth: ULONG,
    pub sm_DisplayHeight: ULONG,
    pub sm_DisplayDepth: UWORD,
    pub sm_OverscanType: UWORD,
    pub sm_AutoScroll: BOOL,
    pub sm_BitMapWidth: ULONG,
    pub sm_BitMapHeight: ULONG,
    pub sm_LeftEdge: WORD,
    pub sm_TopEdge: WORD,
    pub sm_Width: WORD,
    pub sm_Height: WORD,
    pub sm_InfoOpened: BOOL,
    pub sm_InfoLeftEdge: WORD,
    pub sm_InfoTopEdge: WORD,
    pub sm_InfoWidth: WORD,
    pub sm_InfoHeight: WORD,
    pub sm_UserData: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ScreenModeRequester"][::core::mem::size_of::<ScreenModeRequester>() - 48usize];
    ["Alignment of ScreenModeRequester"][::core::mem::align_of::<ScreenModeRequester>() - 2usize];
    ["Offset of field: ScreenModeRequester::sm_DisplayID"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_DisplayID) - 0usize];
    ["Offset of field: ScreenModeRequester::sm_DisplayWidth"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_DisplayWidth) - 4usize];
    ["Offset of field: ScreenModeRequester::sm_DisplayHeight"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_DisplayHeight) - 8usize];
    ["Offset of field: ScreenModeRequester::sm_DisplayDepth"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_DisplayDepth) - 12usize];
    ["Offset of field: ScreenModeRequester::sm_OverscanType"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_OverscanType) - 14usize];
    ["Offset of field: ScreenModeRequester::sm_AutoScroll"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_AutoScroll) - 16usize];
    ["Offset of field: ScreenModeRequester::sm_BitMapWidth"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_BitMapWidth) - 18usize];
    ["Offset of field: ScreenModeRequester::sm_BitMapHeight"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_BitMapHeight) - 22usize];
    ["Offset of field: ScreenModeRequester::sm_LeftEdge"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_LeftEdge) - 26usize];
    ["Offset of field: ScreenModeRequester::sm_TopEdge"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_TopEdge) - 28usize];
    ["Offset of field: ScreenModeRequester::sm_Width"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_Width) - 30usize];
    ["Offset of field: ScreenModeRequester::sm_Height"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_Height) - 32usize];
    ["Offset of field: ScreenModeRequester::sm_InfoOpened"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_InfoOpened) - 34usize];
    ["Offset of field: ScreenModeRequester::sm_InfoLeftEdge"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_InfoLeftEdge) - 36usize];
    ["Offset of field: ScreenModeRequester::sm_InfoTopEdge"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_InfoTopEdge) - 38usize];
    ["Offset of field: ScreenModeRequester::sm_InfoWidth"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_InfoWidth) - 40usize];
    ["Offset of field: ScreenModeRequester::sm_InfoHeight"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_InfoHeight) - 42usize];
    ["Offset of field: ScreenModeRequester::sm_UserData"]
        [::core::mem::offset_of!(ScreenModeRequester, sm_UserData) - 44usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DisplayMode {
    pub dm_Node: Node,
    pub dm_DimensionInfo: DimensionInfo,
    pub dm_PropertyFlags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DisplayMode"][::core::mem::size_of::<DisplayMode>() - 106usize];
    ["Alignment of DisplayMode"][::core::mem::align_of::<DisplayMode>() - 2usize];
    ["Offset of field: DisplayMode::dm_Node"]
        [::core::mem::offset_of!(DisplayMode, dm_Node) - 0usize];
    ["Offset of field: DisplayMode::dm_DimensionInfo"]
        [::core::mem::offset_of!(DisplayMode, dm_DimensionInfo) - 14usize];
    ["Offset of field: DisplayMode::dm_PropertyFlags"]
        [::core::mem::offset_of!(DisplayMode, dm_PropertyFlags) - 102usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AslSemaphore {
    pub as_Semaphore: SignalSemaphore,
    pub as_Version: UWORD,
    pub as_Size: ULONG,
    pub as_SortBy: UBYTE,
    pub as_SortDrawers: UBYTE,
    pub as_SortOrder: UBYTE,
    pub as_SizePosition: UBYTE,
    pub as_RelativeLeft: WORD,
    pub as_RelativeTop: WORD,
    pub as_RelativeWidth: UBYTE,
    pub as_RelativeHeight: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AslSemaphore"][::core::mem::size_of::<AslSemaphore>() - 62usize];
    ["Alignment of AslSemaphore"][::core::mem::align_of::<AslSemaphore>() - 2usize];
    ["Offset of field: AslSemaphore::as_Semaphore"]
        [::core::mem::offset_of!(AslSemaphore, as_Semaphore) - 0usize];
    ["Offset of field: AslSemaphore::as_Version"]
        [::core::mem::offset_of!(AslSemaphore, as_Version) - 46usize];
    ["Offset of field: AslSemaphore::as_Size"]
        [::core::mem::offset_of!(AslSemaphore, as_Size) - 48usize];
    ["Offset of field: AslSemaphore::as_SortBy"]
        [::core::mem::offset_of!(AslSemaphore, as_SortBy) - 52usize];
    ["Offset of field: AslSemaphore::as_SortDrawers"]
        [::core::mem::offset_of!(AslSemaphore, as_SortDrawers) - 53usize];
    ["Offset of field: AslSemaphore::as_SortOrder"]
        [::core::mem::offset_of!(AslSemaphore, as_SortOrder) - 54usize];
    ["Offset of field: AslSemaphore::as_SizePosition"]
        [::core::mem::offset_of!(AslSemaphore, as_SizePosition) - 55usize];
    ["Offset of field: AslSemaphore::as_RelativeLeft"]
        [::core::mem::offset_of!(AslSemaphore, as_RelativeLeft) - 56usize];
    ["Offset of field: AslSemaphore::as_RelativeTop"]
        [::core::mem::offset_of!(AslSemaphore, as_RelativeTop) - 58usize];
    ["Offset of field: AslSemaphore::as_RelativeWidth"]
        [::core::mem::offset_of!(AslSemaphore, as_RelativeWidth) - 60usize];
    ["Offset of field: AslSemaphore::as_RelativeHeight"]
        [::core::mem::offset_of!(AslSemaphore, as_RelativeHeight) - 61usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NewBroker {
    pub nb_Version: BYTE,
    pub nb_Name: STRPTR,
    pub nb_Title: STRPTR,
    pub nb_Descr: STRPTR,
    pub nb_Unique: WORD,
    pub nb_Flags: WORD,
    pub nb_Pri: BYTE,
    pub nb_Port: *mut MsgPort,
    pub nb_ReservedChannel: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NewBroker"][::core::mem::size_of::<NewBroker>() - 26usize];
    ["Alignment of NewBroker"][::core::mem::align_of::<NewBroker>() - 2usize];
    ["Offset of field: NewBroker::nb_Version"]
        [::core::mem::offset_of!(NewBroker, nb_Version) - 0usize];
    ["Offset of field: NewBroker::nb_Name"][::core::mem::offset_of!(NewBroker, nb_Name) - 2usize];
    ["Offset of field: NewBroker::nb_Title"][::core::mem::offset_of!(NewBroker, nb_Title) - 6usize];
    ["Offset of field: NewBroker::nb_Descr"]
        [::core::mem::offset_of!(NewBroker, nb_Descr) - 10usize];
    ["Offset of field: NewBroker::nb_Unique"]
        [::core::mem::offset_of!(NewBroker, nb_Unique) - 14usize];
    ["Offset of field: NewBroker::nb_Flags"]
        [::core::mem::offset_of!(NewBroker, nb_Flags) - 16usize];
    ["Offset of field: NewBroker::nb_Pri"][::core::mem::offset_of!(NewBroker, nb_Pri) - 18usize];
    ["Offset of field: NewBroker::nb_Port"][::core::mem::offset_of!(NewBroker, nb_Port) - 20usize];
    ["Offset of field: NewBroker::nb_ReservedChannel"]
        [::core::mem::offset_of!(NewBroker, nb_ReservedChannel) - 24usize];
};
pub type CxObj = LONG;
pub type CxMsg = LONG;
pub type PFL = FPTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputXpression {
    pub ix_Version: UBYTE,
    pub ix_Class: UBYTE,
    pub ix_Code: UWORD,
    pub ix_CodeMask: UWORD,
    pub ix_Qualifier: UWORD,
    pub ix_QualMask: UWORD,
    pub ix_QualSame: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputXpression"][::core::mem::size_of::<InputXpression>() - 12usize];
    ["Alignment of InputXpression"][::core::mem::align_of::<InputXpression>() - 2usize];
    ["Offset of field: InputXpression::ix_Version"]
        [::core::mem::offset_of!(InputXpression, ix_Version) - 0usize];
    ["Offset of field: InputXpression::ix_Class"]
        [::core::mem::offset_of!(InputXpression, ix_Class) - 1usize];
    ["Offset of field: InputXpression::ix_Code"]
        [::core::mem::offset_of!(InputXpression, ix_Code) - 2usize];
    ["Offset of field: InputXpression::ix_CodeMask"]
        [::core::mem::offset_of!(InputXpression, ix_CodeMask) - 4usize];
    ["Offset of field: InputXpression::ix_Qualifier"]
        [::core::mem::offset_of!(InputXpression, ix_Qualifier) - 6usize];
    ["Offset of field: InputXpression::ix_QualMask"]
        [::core::mem::offset_of!(InputXpression, ix_QualMask) - 8usize];
    ["Offset of field: InputXpression::ix_QualSame"]
        [::core::mem::offset_of!(InputXpression, ix_QualSame) - 10usize];
};
pub type IX = InputXpression;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExpansionRom {
    pub er_Type: UBYTE,
    pub er_Product: UBYTE,
    pub er_Flags: UBYTE,
    pub er_Reserved03: UBYTE,
    pub er_Manufacturer: UWORD,
    pub er_SerialNumber: ULONG,
    pub er_InitDiagVec: UWORD,
    pub er_Reserved0c: UBYTE,
    pub er_Reserved0d: UBYTE,
    pub er_Reserved0e: UBYTE,
    pub er_Reserved0f: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExpansionRom"][::core::mem::size_of::<ExpansionRom>() - 16usize];
    ["Alignment of ExpansionRom"][::core::mem::align_of::<ExpansionRom>() - 2usize];
    ["Offset of field: ExpansionRom::er_Type"]
        [::core::mem::offset_of!(ExpansionRom, er_Type) - 0usize];
    ["Offset of field: ExpansionRom::er_Product"]
        [::core::mem::offset_of!(ExpansionRom, er_Product) - 1usize];
    ["Offset of field: ExpansionRom::er_Flags"]
        [::core::mem::offset_of!(ExpansionRom, er_Flags) - 2usize];
    ["Offset of field: ExpansionRom::er_Reserved03"]
        [::core::mem::offset_of!(ExpansionRom, er_Reserved03) - 3usize];
    ["Offset of field: ExpansionRom::er_Manufacturer"]
        [::core::mem::offset_of!(ExpansionRom, er_Manufacturer) - 4usize];
    ["Offset of field: ExpansionRom::er_SerialNumber"]
        [::core::mem::offset_of!(ExpansionRom, er_SerialNumber) - 6usize];
    ["Offset of field: ExpansionRom::er_InitDiagVec"]
        [::core::mem::offset_of!(ExpansionRom, er_InitDiagVec) - 10usize];
    ["Offset of field: ExpansionRom::er_Reserved0c"]
        [::core::mem::offset_of!(ExpansionRom, er_Reserved0c) - 12usize];
    ["Offset of field: ExpansionRom::er_Reserved0d"]
        [::core::mem::offset_of!(ExpansionRom, er_Reserved0d) - 13usize];
    ["Offset of field: ExpansionRom::er_Reserved0e"]
        [::core::mem::offset_of!(ExpansionRom, er_Reserved0e) - 14usize];
    ["Offset of field: ExpansionRom::er_Reserved0f"]
        [::core::mem::offset_of!(ExpansionRom, er_Reserved0f) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExpansionControl {
    pub ec_Interrupt: UBYTE,
    pub ec_Z3_HighBase: UBYTE,
    pub ec_BaseAddress: UBYTE,
    pub ec_Shutup: UBYTE,
    pub ec_Reserved14: UBYTE,
    pub ec_Reserved15: UBYTE,
    pub ec_Reserved16: UBYTE,
    pub ec_Reserved17: UBYTE,
    pub ec_Reserved18: UBYTE,
    pub ec_Reserved19: UBYTE,
    pub ec_Reserved1a: UBYTE,
    pub ec_Reserved1b: UBYTE,
    pub ec_Reserved1c: UBYTE,
    pub ec_Reserved1d: UBYTE,
    pub ec_Reserved1e: UBYTE,
    pub ec_Reserved1f: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExpansionControl"][::core::mem::size_of::<ExpansionControl>() - 16usize];
    ["Alignment of ExpansionControl"][::core::mem::align_of::<ExpansionControl>() - 1usize];
    ["Offset of field: ExpansionControl::ec_Interrupt"]
        [::core::mem::offset_of!(ExpansionControl, ec_Interrupt) - 0usize];
    ["Offset of field: ExpansionControl::ec_Z3_HighBase"]
        [::core::mem::offset_of!(ExpansionControl, ec_Z3_HighBase) - 1usize];
    ["Offset of field: ExpansionControl::ec_BaseAddress"]
        [::core::mem::offset_of!(ExpansionControl, ec_BaseAddress) - 2usize];
    ["Offset of field: ExpansionControl::ec_Shutup"]
        [::core::mem::offset_of!(ExpansionControl, ec_Shutup) - 3usize];
    ["Offset of field: ExpansionControl::ec_Reserved14"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved14) - 4usize];
    ["Offset of field: ExpansionControl::ec_Reserved15"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved15) - 5usize];
    ["Offset of field: ExpansionControl::ec_Reserved16"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved16) - 6usize];
    ["Offset of field: ExpansionControl::ec_Reserved17"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved17) - 7usize];
    ["Offset of field: ExpansionControl::ec_Reserved18"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved18) - 8usize];
    ["Offset of field: ExpansionControl::ec_Reserved19"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved19) - 9usize];
    ["Offset of field: ExpansionControl::ec_Reserved1a"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved1a) - 10usize];
    ["Offset of field: ExpansionControl::ec_Reserved1b"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved1b) - 11usize];
    ["Offset of field: ExpansionControl::ec_Reserved1c"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved1c) - 12usize];
    ["Offset of field: ExpansionControl::ec_Reserved1d"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved1d) - 13usize];
    ["Offset of field: ExpansionControl::ec_Reserved1e"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved1e) - 14usize];
    ["Offset of field: ExpansionControl::ec_Reserved1f"]
        [::core::mem::offset_of!(ExpansionControl, ec_Reserved1f) - 15usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DiagArea {
    pub da_Config: UBYTE,
    pub da_Flags: UBYTE,
    pub da_Size: UWORD,
    pub da_DiagPoint: UWORD,
    pub da_BootPoint: UWORD,
    pub da_Name: UWORD,
    pub da_Reserved01: UWORD,
    pub da_Reserved02: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DiagArea"][::core::mem::size_of::<DiagArea>() - 14usize];
    ["Alignment of DiagArea"][::core::mem::align_of::<DiagArea>() - 2usize];
    ["Offset of field: DiagArea::da_Config"][::core::mem::offset_of!(DiagArea, da_Config) - 0usize];
    ["Offset of field: DiagArea::da_Flags"][::core::mem::offset_of!(DiagArea, da_Flags) - 1usize];
    ["Offset of field: DiagArea::da_Size"][::core::mem::offset_of!(DiagArea, da_Size) - 2usize];
    ["Offset of field: DiagArea::da_DiagPoint"]
        [::core::mem::offset_of!(DiagArea, da_DiagPoint) - 4usize];
    ["Offset of field: DiagArea::da_BootPoint"]
        [::core::mem::offset_of!(DiagArea, da_BootPoint) - 6usize];
    ["Offset of field: DiagArea::da_Name"][::core::mem::offset_of!(DiagArea, da_Name) - 8usize];
    ["Offset of field: DiagArea::da_Reserved01"]
        [::core::mem::offset_of!(DiagArea, da_Reserved01) - 10usize];
    ["Offset of field: DiagArea::da_Reserved02"]
        [::core::mem::offset_of!(DiagArea, da_Reserved02) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ConfigDev {
    pub cd_Node: Node,
    pub cd_Flags: UBYTE,
    pub cd_Pad: UBYTE,
    pub cd_Rom: ExpansionRom,
    pub cd_BoardAddr: APTR,
    pub cd_BoardSize: ULONG,
    pub cd_SlotAddr: UWORD,
    pub cd_SlotSize: UWORD,
    pub cd_Driver: APTR,
    pub cd_NextCD: *mut ConfigDev,
    pub cd_Unused: [ULONG; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ConfigDev"][::core::mem::size_of::<ConfigDev>() - 68usize];
    ["Alignment of ConfigDev"][::core::mem::align_of::<ConfigDev>() - 2usize];
    ["Offset of field: ConfigDev::cd_Node"][::core::mem::offset_of!(ConfigDev, cd_Node) - 0usize];
    ["Offset of field: ConfigDev::cd_Flags"]
        [::core::mem::offset_of!(ConfigDev, cd_Flags) - 14usize];
    ["Offset of field: ConfigDev::cd_Pad"][::core::mem::offset_of!(ConfigDev, cd_Pad) - 15usize];
    ["Offset of field: ConfigDev::cd_Rom"][::core::mem::offset_of!(ConfigDev, cd_Rom) - 16usize];
    ["Offset of field: ConfigDev::cd_BoardAddr"]
        [::core::mem::offset_of!(ConfigDev, cd_BoardAddr) - 32usize];
    ["Offset of field: ConfigDev::cd_BoardSize"]
        [::core::mem::offset_of!(ConfigDev, cd_BoardSize) - 36usize];
    ["Offset of field: ConfigDev::cd_SlotAddr"]
        [::core::mem::offset_of!(ConfigDev, cd_SlotAddr) - 40usize];
    ["Offset of field: ConfigDev::cd_SlotSize"]
        [::core::mem::offset_of!(ConfigDev, cd_SlotSize) - 42usize];
    ["Offset of field: ConfigDev::cd_Driver"]
        [::core::mem::offset_of!(ConfigDev, cd_Driver) - 44usize];
    ["Offset of field: ConfigDev::cd_NextCD"]
        [::core::mem::offset_of!(ConfigDev, cd_NextCD) - 48usize];
    ["Offset of field: ConfigDev::cd_Unused"]
        [::core::mem::offset_of!(ConfigDev, cd_Unused) - 52usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CurrentBinding {
    pub cb_ConfigDev: *mut ConfigDev,
    pub cb_FileName: STRPTR,
    pub cb_ProductString: STRPTR,
    pub cb_ToolTypes: *mut STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CurrentBinding"][::core::mem::size_of::<CurrentBinding>() - 16usize];
    ["Alignment of CurrentBinding"][::core::mem::align_of::<CurrentBinding>() - 2usize];
    ["Offset of field: CurrentBinding::cb_ConfigDev"]
        [::core::mem::offset_of!(CurrentBinding, cb_ConfigDev) - 0usize];
    ["Offset of field: CurrentBinding::cb_FileName"]
        [::core::mem::offset_of!(CurrentBinding, cb_FileName) - 4usize];
    ["Offset of field: CurrentBinding::cb_ProductString"]
        [::core::mem::offset_of!(CurrentBinding, cb_ProductString) - 8usize];
    ["Offset of field: CurrentBinding::cb_ToolTypes"]
        [::core::mem::offset_of!(CurrentBinding, cb_ToolTypes) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BootNode {
    pub bn_Node: Node,
    pub bn_Flags: UWORD,
    pub bn_DeviceNode: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BootNode"][::core::mem::size_of::<BootNode>() - 20usize];
    ["Alignment of BootNode"][::core::mem::align_of::<BootNode>() - 2usize];
    ["Offset of field: BootNode::bn_Node"][::core::mem::offset_of!(BootNode, bn_Node) - 0usize];
    ["Offset of field: BootNode::bn_Flags"][::core::mem::offset_of!(BootNode, bn_Flags) - 14usize];
    ["Offset of field: BootNode::bn_DeviceNode"]
        [::core::mem::offset_of!(BootNode, bn_DeviceNode) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ExpansionBase {
    pub LibNode: Library,
    pub Flags: UBYTE,
    pub eb_Private01: UBYTE,
    pub eb_Private02: ULONG,
    pub eb_Private03: ULONG,
    pub eb_Private04: CurrentBinding,
    pub eb_Private05: List,
    pub MountList: List,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExpansionBase"][::core::mem::size_of::<ExpansionBase>() - 88usize];
    ["Alignment of ExpansionBase"][::core::mem::align_of::<ExpansionBase>() - 2usize];
    ["Offset of field: ExpansionBase::LibNode"]
        [::core::mem::offset_of!(ExpansionBase, LibNode) - 0usize];
    ["Offset of field: ExpansionBase::Flags"]
        [::core::mem::offset_of!(ExpansionBase, Flags) - 34usize];
    ["Offset of field: ExpansionBase::eb_Private01"]
        [::core::mem::offset_of!(ExpansionBase, eb_Private01) - 35usize];
    ["Offset of field: ExpansionBase::eb_Private02"]
        [::core::mem::offset_of!(ExpansionBase, eb_Private02) - 36usize];
    ["Offset of field: ExpansionBase::eb_Private03"]
        [::core::mem::offset_of!(ExpansionBase, eb_Private03) - 40usize];
    ["Offset of field: ExpansionBase::eb_Private04"]
        [::core::mem::offset_of!(ExpansionBase, eb_Private04) - 44usize];
    ["Offset of field: ExpansionBase::eb_Private05"]
        [::core::mem::offset_of!(ExpansionBase, eb_Private05) - 60usize];
    ["Offset of field: ExpansionBase::MountList"]
        [::core::mem::offset_of!(ExpansionBase, MountList) - 74usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NewGadget {
    pub ng_LeftEdge: WORD,
    pub ng_TopEdge: WORD,
    pub ng_Width: WORD,
    pub ng_Height: WORD,
    pub ng_GadgetText: CONST_STRPTR,
    pub ng_TextAttr: *const TextAttr,
    pub ng_GadgetID: UWORD,
    pub ng_Flags: ULONG,
    pub ng_VisualInfo: APTR,
    pub ng_UserData: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NewGadget"][::core::mem::size_of::<NewGadget>() - 30usize];
    ["Alignment of NewGadget"][::core::mem::align_of::<NewGadget>() - 2usize];
    ["Offset of field: NewGadget::ng_LeftEdge"]
        [::core::mem::offset_of!(NewGadget, ng_LeftEdge) - 0usize];
    ["Offset of field: NewGadget::ng_TopEdge"]
        [::core::mem::offset_of!(NewGadget, ng_TopEdge) - 2usize];
    ["Offset of field: NewGadget::ng_Width"][::core::mem::offset_of!(NewGadget, ng_Width) - 4usize];
    ["Offset of field: NewGadget::ng_Height"]
        [::core::mem::offset_of!(NewGadget, ng_Height) - 6usize];
    ["Offset of field: NewGadget::ng_GadgetText"]
        [::core::mem::offset_of!(NewGadget, ng_GadgetText) - 8usize];
    ["Offset of field: NewGadget::ng_TextAttr"]
        [::core::mem::offset_of!(NewGadget, ng_TextAttr) - 12usize];
    ["Offset of field: NewGadget::ng_GadgetID"]
        [::core::mem::offset_of!(NewGadget, ng_GadgetID) - 16usize];
    ["Offset of field: NewGadget::ng_Flags"]
        [::core::mem::offset_of!(NewGadget, ng_Flags) - 18usize];
    ["Offset of field: NewGadget::ng_VisualInfo"]
        [::core::mem::offset_of!(NewGadget, ng_VisualInfo) - 22usize];
    ["Offset of field: NewGadget::ng_UserData"]
        [::core::mem::offset_of!(NewGadget, ng_UserData) - 26usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NewMenu {
    pub nm_Type: UBYTE,
    pub nm_Label: CONST_STRPTR,
    pub nm_CommKey: CONST_STRPTR,
    pub nm_Flags: UWORD,
    pub nm_MutualExclude: LONG,
    pub nm_UserData: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NewMenu"][::core::mem::size_of::<NewMenu>() - 20usize];
    ["Alignment of NewMenu"][::core::mem::align_of::<NewMenu>() - 2usize];
    ["Offset of field: NewMenu::nm_Type"][::core::mem::offset_of!(NewMenu, nm_Type) - 0usize];
    ["Offset of field: NewMenu::nm_Label"][::core::mem::offset_of!(NewMenu, nm_Label) - 2usize];
    ["Offset of field: NewMenu::nm_CommKey"][::core::mem::offset_of!(NewMenu, nm_CommKey) - 6usize];
    ["Offset of field: NewMenu::nm_Flags"][::core::mem::offset_of!(NewMenu, nm_Flags) - 10usize];
    ["Offset of field: NewMenu::nm_MutualExclude"]
        [::core::mem::offset_of!(NewMenu, nm_MutualExclude) - 12usize];
    ["Offset of field: NewMenu::nm_UserData"]
        [::core::mem::offset_of!(NewMenu, nm_UserData) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct LVDrawMsg {
    pub lvdm_MethodID: ULONG,
    pub lvdm_RastPort: *mut RastPort,
    pub lvdm_DrawInfo: *mut DrawInfo,
    pub lvdm_Bounds: Rectangle,
    pub lvdm_State: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LVDrawMsg"][::core::mem::size_of::<LVDrawMsg>() - 24usize];
    ["Alignment of LVDrawMsg"][::core::mem::align_of::<LVDrawMsg>() - 2usize];
    ["Offset of field: LVDrawMsg::lvdm_MethodID"]
        [::core::mem::offset_of!(LVDrawMsg, lvdm_MethodID) - 0usize];
    ["Offset of field: LVDrawMsg::lvdm_RastPort"]
        [::core::mem::offset_of!(LVDrawMsg, lvdm_RastPort) - 4usize];
    ["Offset of field: LVDrawMsg::lvdm_DrawInfo"]
        [::core::mem::offset_of!(LVDrawMsg, lvdm_DrawInfo) - 8usize];
    ["Offset of field: LVDrawMsg::lvdm_Bounds"]
        [::core::mem::offset_of!(LVDrawMsg, lvdm_Bounds) - 12usize];
    ["Offset of field: LVDrawMsg::lvdm_State"]
        [::core::mem::offset_of!(LVDrawMsg, lvdm_State) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LocaleBase {
    pub lb_LibNode: Library,
    pub lb_SysPatches: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LocaleBase"][::core::mem::size_of::<LocaleBase>() - 36usize];
    ["Alignment of LocaleBase"][::core::mem::align_of::<LocaleBase>() - 2usize];
    ["Offset of field: LocaleBase::lb_LibNode"]
        [::core::mem::offset_of!(LocaleBase, lb_LibNode) - 0usize];
    ["Offset of field: LocaleBase::lb_SysPatches"]
        [::core::mem::offset_of!(LocaleBase, lb_SysPatches) - 34usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Locale {
    pub loc_LocaleName: STRPTR,
    pub loc_LanguageName: STRPTR,
    pub loc_PrefLanguages: [STRPTR; 10usize],
    pub loc_Flags: ULONG,
    pub loc_CodeSet: ULONG,
    pub loc_CountryCode: ULONG,
    pub loc_TelephoneCode: ULONG,
    pub loc_GMTOffset: LONG,
    pub loc_MeasuringSystem: UBYTE,
    pub loc_CalendarType: UBYTE,
    pub loc_Reserved0: [UBYTE; 2usize],
    pub loc_DateTimeFormat: STRPTR,
    pub loc_DateFormat: STRPTR,
    pub loc_TimeFormat: STRPTR,
    pub loc_ShortDateTimeFormat: STRPTR,
    pub loc_ShortDateFormat: STRPTR,
    pub loc_ShortTimeFormat: STRPTR,
    pub loc_DecimalPoint: STRPTR,
    pub loc_GroupSeparator: STRPTR,
    pub loc_FracGroupSeparator: STRPTR,
    pub loc_Grouping: *mut UBYTE,
    pub loc_FracGrouping: *mut UBYTE,
    pub loc_MonDecimalPoint: STRPTR,
    pub loc_MonGroupSeparator: STRPTR,
    pub loc_MonFracGroupSeparator: STRPTR,
    pub loc_MonGrouping: *mut UBYTE,
    pub loc_MonFracGrouping: *mut UBYTE,
    pub loc_MonFracDigits: UBYTE,
    pub loc_MonIntFracDigits: UBYTE,
    pub loc_Reserved1: [UBYTE; 2usize],
    pub loc_MonCS: STRPTR,
    pub loc_MonSmallCS: STRPTR,
    pub loc_MonIntCS: STRPTR,
    pub loc_MonPositiveSign: STRPTR,
    pub loc_MonPositiveSpaceSep: UBYTE,
    pub loc_MonPositiveSignPos: UBYTE,
    pub loc_MonPositiveCSPos: UBYTE,
    pub loc_Reserved2: UBYTE,
    pub loc_MonNegativeSign: STRPTR,
    pub loc_MonNegativeSpaceSep: UBYTE,
    pub loc_MonNegativeSignPos: UBYTE,
    pub loc_MonNegativeCSPos: UBYTE,
    pub loc_Reserved3: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Locale"][::core::mem::size_of::<Locale>() - 168usize];
    ["Alignment of Locale"][::core::mem::align_of::<Locale>() - 2usize];
    ["Offset of field: Locale::loc_LocaleName"]
        [::core::mem::offset_of!(Locale, loc_LocaleName) - 0usize];
    ["Offset of field: Locale::loc_LanguageName"]
        [::core::mem::offset_of!(Locale, loc_LanguageName) - 4usize];
    ["Offset of field: Locale::loc_PrefLanguages"]
        [::core::mem::offset_of!(Locale, loc_PrefLanguages) - 8usize];
    ["Offset of field: Locale::loc_Flags"][::core::mem::offset_of!(Locale, loc_Flags) - 48usize];
    ["Offset of field: Locale::loc_CodeSet"]
        [::core::mem::offset_of!(Locale, loc_CodeSet) - 52usize];
    ["Offset of field: Locale::loc_CountryCode"]
        [::core::mem::offset_of!(Locale, loc_CountryCode) - 56usize];
    ["Offset of field: Locale::loc_TelephoneCode"]
        [::core::mem::offset_of!(Locale, loc_TelephoneCode) - 60usize];
    ["Offset of field: Locale::loc_GMTOffset"]
        [::core::mem::offset_of!(Locale, loc_GMTOffset) - 64usize];
    ["Offset of field: Locale::loc_MeasuringSystem"]
        [::core::mem::offset_of!(Locale, loc_MeasuringSystem) - 68usize];
    ["Offset of field: Locale::loc_CalendarType"]
        [::core::mem::offset_of!(Locale, loc_CalendarType) - 69usize];
    ["Offset of field: Locale::loc_Reserved0"]
        [::core::mem::offset_of!(Locale, loc_Reserved0) - 70usize];
    ["Offset of field: Locale::loc_DateTimeFormat"]
        [::core::mem::offset_of!(Locale, loc_DateTimeFormat) - 72usize];
    ["Offset of field: Locale::loc_DateFormat"]
        [::core::mem::offset_of!(Locale, loc_DateFormat) - 76usize];
    ["Offset of field: Locale::loc_TimeFormat"]
        [::core::mem::offset_of!(Locale, loc_TimeFormat) - 80usize];
    ["Offset of field: Locale::loc_ShortDateTimeFormat"]
        [::core::mem::offset_of!(Locale, loc_ShortDateTimeFormat) - 84usize];
    ["Offset of field: Locale::loc_ShortDateFormat"]
        [::core::mem::offset_of!(Locale, loc_ShortDateFormat) - 88usize];
    ["Offset of field: Locale::loc_ShortTimeFormat"]
        [::core::mem::offset_of!(Locale, loc_ShortTimeFormat) - 92usize];
    ["Offset of field: Locale::loc_DecimalPoint"]
        [::core::mem::offset_of!(Locale, loc_DecimalPoint) - 96usize];
    ["Offset of field: Locale::loc_GroupSeparator"]
        [::core::mem::offset_of!(Locale, loc_GroupSeparator) - 100usize];
    ["Offset of field: Locale::loc_FracGroupSeparator"]
        [::core::mem::offset_of!(Locale, loc_FracGroupSeparator) - 104usize];
    ["Offset of field: Locale::loc_Grouping"]
        [::core::mem::offset_of!(Locale, loc_Grouping) - 108usize];
    ["Offset of field: Locale::loc_FracGrouping"]
        [::core::mem::offset_of!(Locale, loc_FracGrouping) - 112usize];
    ["Offset of field: Locale::loc_MonDecimalPoint"]
        [::core::mem::offset_of!(Locale, loc_MonDecimalPoint) - 116usize];
    ["Offset of field: Locale::loc_MonGroupSeparator"]
        [::core::mem::offset_of!(Locale, loc_MonGroupSeparator) - 120usize];
    ["Offset of field: Locale::loc_MonFracGroupSeparator"]
        [::core::mem::offset_of!(Locale, loc_MonFracGroupSeparator) - 124usize];
    ["Offset of field: Locale::loc_MonGrouping"]
        [::core::mem::offset_of!(Locale, loc_MonGrouping) - 128usize];
    ["Offset of field: Locale::loc_MonFracGrouping"]
        [::core::mem::offset_of!(Locale, loc_MonFracGrouping) - 132usize];
    ["Offset of field: Locale::loc_MonFracDigits"]
        [::core::mem::offset_of!(Locale, loc_MonFracDigits) - 136usize];
    ["Offset of field: Locale::loc_MonIntFracDigits"]
        [::core::mem::offset_of!(Locale, loc_MonIntFracDigits) - 137usize];
    ["Offset of field: Locale::loc_Reserved1"]
        [::core::mem::offset_of!(Locale, loc_Reserved1) - 138usize];
    ["Offset of field: Locale::loc_MonCS"][::core::mem::offset_of!(Locale, loc_MonCS) - 140usize];
    ["Offset of field: Locale::loc_MonSmallCS"]
        [::core::mem::offset_of!(Locale, loc_MonSmallCS) - 144usize];
    ["Offset of field: Locale::loc_MonIntCS"]
        [::core::mem::offset_of!(Locale, loc_MonIntCS) - 148usize];
    ["Offset of field: Locale::loc_MonPositiveSign"]
        [::core::mem::offset_of!(Locale, loc_MonPositiveSign) - 152usize];
    ["Offset of field: Locale::loc_MonPositiveSpaceSep"]
        [::core::mem::offset_of!(Locale, loc_MonPositiveSpaceSep) - 156usize];
    ["Offset of field: Locale::loc_MonPositiveSignPos"]
        [::core::mem::offset_of!(Locale, loc_MonPositiveSignPos) - 157usize];
    ["Offset of field: Locale::loc_MonPositiveCSPos"]
        [::core::mem::offset_of!(Locale, loc_MonPositiveCSPos) - 158usize];
    ["Offset of field: Locale::loc_Reserved2"]
        [::core::mem::offset_of!(Locale, loc_Reserved2) - 159usize];
    ["Offset of field: Locale::loc_MonNegativeSign"]
        [::core::mem::offset_of!(Locale, loc_MonNegativeSign) - 160usize];
    ["Offset of field: Locale::loc_MonNegativeSpaceSep"]
        [::core::mem::offset_of!(Locale, loc_MonNegativeSpaceSep) - 164usize];
    ["Offset of field: Locale::loc_MonNegativeSignPos"]
        [::core::mem::offset_of!(Locale, loc_MonNegativeSignPos) - 165usize];
    ["Offset of field: Locale::loc_MonNegativeCSPos"]
        [::core::mem::offset_of!(Locale, loc_MonNegativeCSPos) - 166usize];
    ["Offset of field: Locale::loc_Reserved3"]
        [::core::mem::offset_of!(Locale, loc_Reserved3) - 167usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Catalog {
    pub cat_Link: Node,
    pub cat_Pad: UWORD,
    pub cat_Language: STRPTR,
    pub cat_CodeSet: ULONG,
    pub cat_Version: UWORD,
    pub cat_Revision: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Catalog"][::core::mem::size_of::<Catalog>() - 28usize];
    ["Alignment of Catalog"][::core::mem::align_of::<Catalog>() - 2usize];
    ["Offset of field: Catalog::cat_Link"][::core::mem::offset_of!(Catalog, cat_Link) - 0usize];
    ["Offset of field: Catalog::cat_Pad"][::core::mem::offset_of!(Catalog, cat_Pad) - 14usize];
    ["Offset of field: Catalog::cat_Language"]
        [::core::mem::offset_of!(Catalog, cat_Language) - 16usize];
    ["Offset of field: Catalog::cat_CodeSet"]
        [::core::mem::offset_of!(Catalog, cat_CodeSet) - 20usize];
    ["Offset of field: Catalog::cat_Version"]
        [::core::mem::offset_of!(Catalog, cat_Version) - 24usize];
    ["Offset of field: Catalog::cat_Revision"]
        [::core::mem::offset_of!(Catalog, cat_Revision) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KeyQuery {
    pub kq_KeyCode: UWORD,
    pub kq_Pressed: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KeyQuery"][::core::mem::size_of::<KeyQuery>() - 4usize];
    ["Alignment of KeyQuery"][::core::mem::align_of::<KeyQuery>() - 2usize];
    ["Offset of field: KeyQuery::kq_KeyCode"]
        [::core::mem::offset_of!(KeyQuery, kq_KeyCode) - 0usize];
    ["Offset of field: KeyQuery::kq_Pressed"]
        [::core::mem::offset_of!(KeyQuery, kq_Pressed) - 2usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MathIEEEBase {
    pub MathIEEEBase_LibNode: Library,
    pub MathIEEEBase_reserved: [::core::ffi::c_uchar; 18usize],
    pub MathIEEEBase_TaskOpenLib: FPTR,
    pub MathIEEEBase_TaskCloseLib: FPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MathIEEEBase"][::core::mem::size_of::<MathIEEEBase>() - 60usize];
    ["Alignment of MathIEEEBase"][::core::mem::align_of::<MathIEEEBase>() - 2usize];
    ["Offset of field: MathIEEEBase::MathIEEEBase_LibNode"]
        [::core::mem::offset_of!(MathIEEEBase, MathIEEEBase_LibNode) - 0usize];
    ["Offset of field: MathIEEEBase::MathIEEEBase_reserved"]
        [::core::mem::offset_of!(MathIEEEBase, MathIEEEBase_reserved) - 34usize];
    ["Offset of field: MathIEEEBase::MathIEEEBase_TaskOpenLib"]
        [::core::mem::offset_of!(MathIEEEBase, MathIEEEBase_TaskOpenLib) - 52usize];
    ["Offset of field: MathIEEEBase::MathIEEEBase_TaskCloseLib"]
        [::core::mem::offset_of!(MathIEEEBase, MathIEEEBase_TaskCloseLib) - 56usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct MathIEEEResource {
    pub MathIEEEResource_Node: Node,
    pub MathIEEEResource_Flags: ::core::ffi::c_ushort,
    pub MathIEEEResource_BaseAddr: *mut ::core::ffi::c_ushort,
    pub MathIEEEResource_DblBasInit: FPTR,
    pub MathIEEEResource_DblTransInit: FPTR,
    pub MathIEEEResource_SglBasInit: FPTR,
    pub MathIEEEResource_SglTransInit: FPTR,
    pub MathIEEEResource_ExtBasInit: FPTR,
    pub MathIEEEResource_ExtTransInit: FPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MathIEEEResource"][::core::mem::size_of::<MathIEEEResource>() - 44usize];
    ["Alignment of MathIEEEResource"][::core::mem::align_of::<MathIEEEResource>() - 2usize];
    ["Offset of field: MathIEEEResource::MathIEEEResource_Node"]
        [::core::mem::offset_of!(MathIEEEResource, MathIEEEResource_Node) - 0usize];
    ["Offset of field: MathIEEEResource::MathIEEEResource_Flags"]
        [::core::mem::offset_of!(MathIEEEResource, MathIEEEResource_Flags) - 14usize];
    ["Offset of field: MathIEEEResource::MathIEEEResource_BaseAddr"]
        [::core::mem::offset_of!(MathIEEEResource, MathIEEEResource_BaseAddr) - 16usize];
    ["Offset of field: MathIEEEResource::MathIEEEResource_DblBasInit"]
        [::core::mem::offset_of!(MathIEEEResource, MathIEEEResource_DblBasInit) - 20usize];
    ["Offset of field: MathIEEEResource::MathIEEEResource_DblTransInit"]
        [::core::mem::offset_of!(MathIEEEResource, MathIEEEResource_DblTransInit) - 24usize];
    ["Offset of field: MathIEEEResource::MathIEEEResource_SglBasInit"]
        [::core::mem::offset_of!(MathIEEEResource, MathIEEEResource_SglBasInit) - 28usize];
    ["Offset of field: MathIEEEResource::MathIEEEResource_SglTransInit"]
        [::core::mem::offset_of!(MathIEEEResource, MathIEEEResource_SglTransInit) - 32usize];
    ["Offset of field: MathIEEEResource::MathIEEEResource_ExtBasInit"]
        [::core::mem::offset_of!(MathIEEEResource, MathIEEEResource_ExtBasInit) - 36usize];
    ["Offset of field: MathIEEEResource::MathIEEEResource_ExtTransInit"]
        [::core::mem::offset_of!(MathIEEEResource, MathIEEEResource_ExtTransInit) - 40usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NVInfo {
    pub nvi_MaxStorage: ULONG,
    pub nvi_FreeStorage: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NVInfo"][::core::mem::size_of::<NVInfo>() - 8usize];
    ["Alignment of NVInfo"][::core::mem::align_of::<NVInfo>() - 2usize];
    ["Offset of field: NVInfo::nvi_MaxStorage"]
        [::core::mem::offset_of!(NVInfo, nvi_MaxStorage) - 0usize];
    ["Offset of field: NVInfo::nvi_FreeStorage"]
        [::core::mem::offset_of!(NVInfo, nvi_FreeStorage) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NVEntry {
    pub nve_Node: MinNode,
    pub nve_Name: STRPTR,
    pub nve_Size: ULONG,
    pub nve_Protection: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NVEntry"][::core::mem::size_of::<NVEntry>() - 20usize];
    ["Alignment of NVEntry"][::core::mem::align_of::<NVEntry>() - 2usize];
    ["Offset of field: NVEntry::nve_Node"][::core::mem::offset_of!(NVEntry, nve_Node) - 0usize];
    ["Offset of field: NVEntry::nve_Name"][::core::mem::offset_of!(NVEntry, nve_Name) - 8usize];
    ["Offset of field: NVEntry::nve_Size"][::core::mem::offset_of!(NVEntry, nve_Size) - 12usize];
    ["Offset of field: NVEntry::nve_Protection"]
        [::core::mem::offset_of!(NVEntry, nve_Protection) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Conductor {
    pub cdt_Link: Node,
    pub cdt_Reserved0: UWORD,
    pub cdt_Players: MinList,
    pub cdt_ClockTime: ULONG,
    pub cdt_StartTime: ULONG,
    pub cdt_ExternalTime: ULONG,
    pub cdt_MaxExternalTime: ULONG,
    pub cdt_Metronome: ULONG,
    pub cdt_Reserved1: UWORD,
    pub cdt_Flags: UWORD,
    pub cdt_State: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Conductor"][::core::mem::size_of::<Conductor>() - 54usize];
    ["Alignment of Conductor"][::core::mem::align_of::<Conductor>() - 2usize];
    ["Offset of field: Conductor::cdt_Link"][::core::mem::offset_of!(Conductor, cdt_Link) - 0usize];
    ["Offset of field: Conductor::cdt_Reserved0"]
        [::core::mem::offset_of!(Conductor, cdt_Reserved0) - 14usize];
    ["Offset of field: Conductor::cdt_Players"]
        [::core::mem::offset_of!(Conductor, cdt_Players) - 16usize];
    ["Offset of field: Conductor::cdt_ClockTime"]
        [::core::mem::offset_of!(Conductor, cdt_ClockTime) - 28usize];
    ["Offset of field: Conductor::cdt_StartTime"]
        [::core::mem::offset_of!(Conductor, cdt_StartTime) - 32usize];
    ["Offset of field: Conductor::cdt_ExternalTime"]
        [::core::mem::offset_of!(Conductor, cdt_ExternalTime) - 36usize];
    ["Offset of field: Conductor::cdt_MaxExternalTime"]
        [::core::mem::offset_of!(Conductor, cdt_MaxExternalTime) - 40usize];
    ["Offset of field: Conductor::cdt_Metronome"]
        [::core::mem::offset_of!(Conductor, cdt_Metronome) - 44usize];
    ["Offset of field: Conductor::cdt_Reserved1"]
        [::core::mem::offset_of!(Conductor, cdt_Reserved1) - 48usize];
    ["Offset of field: Conductor::cdt_Flags"]
        [::core::mem::offset_of!(Conductor, cdt_Flags) - 50usize];
    ["Offset of field: Conductor::cdt_State"]
        [::core::mem::offset_of!(Conductor, cdt_State) - 52usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Player {
    pub pl_Link: Node,
    pub pl_Reserved0: BYTE,
    pub pl_Reserved1: BYTE,
    pub pl_Hook: *mut Hook,
    pub pl_Source: *mut Conductor,
    pub pl_Task: *mut Task,
    pub pl_MetricTime: LONG,
    pub pl_AlarmTime: LONG,
    pub pl_UserData: *mut ::core::ffi::c_void,
    pub pl_PlayerID: UWORD,
    pub pl_Flags: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Player"][::core::mem::size_of::<Player>() - 44usize];
    ["Alignment of Player"][::core::mem::align_of::<Player>() - 2usize];
    ["Offset of field: Player::pl_Link"][::core::mem::offset_of!(Player, pl_Link) - 0usize];
    ["Offset of field: Player::pl_Reserved0"]
        [::core::mem::offset_of!(Player, pl_Reserved0) - 14usize];
    ["Offset of field: Player::pl_Reserved1"]
        [::core::mem::offset_of!(Player, pl_Reserved1) - 15usize];
    ["Offset of field: Player::pl_Hook"][::core::mem::offset_of!(Player, pl_Hook) - 16usize];
    ["Offset of field: Player::pl_Source"][::core::mem::offset_of!(Player, pl_Source) - 20usize];
    ["Offset of field: Player::pl_Task"][::core::mem::offset_of!(Player, pl_Task) - 24usize];
    ["Offset of field: Player::pl_MetricTime"]
        [::core::mem::offset_of!(Player, pl_MetricTime) - 28usize];
    ["Offset of field: Player::pl_AlarmTime"]
        [::core::mem::offset_of!(Player, pl_AlarmTime) - 32usize];
    ["Offset of field: Player::pl_UserData"]
        [::core::mem::offset_of!(Player, pl_UserData) - 36usize];
    ["Offset of field: Player::pl_PlayerID"]
        [::core::mem::offset_of!(Player, pl_PlayerID) - 40usize];
    ["Offset of field: Player::pl_Flags"][::core::mem::offset_of!(Player, pl_Flags) - 42usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pmTime {
    pub pmt_Method: ULONG,
    pub pmt_Time: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pmTime"][::core::mem::size_of::<pmTime>() - 8usize];
    ["Alignment of pmTime"][::core::mem::align_of::<pmTime>() - 2usize];
    ["Offset of field: pmTime::pmt_Method"][::core::mem::offset_of!(pmTime, pmt_Method) - 0usize];
    ["Offset of field: pmTime::pmt_Time"][::core::mem::offset_of!(pmTime, pmt_Time) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct pmState {
    pub pms_Method: ULONG,
    pub pms_OldState: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pmState"][::core::mem::size_of::<pmState>() - 8usize];
    ["Alignment of pmState"][::core::mem::align_of::<pmState>() - 2usize];
    ["Offset of field: pmState::pms_Method"][::core::mem::offset_of!(pmState, pms_Method) - 0usize];
    ["Offset of field: pmState::pms_OldState"]
        [::core::mem::offset_of!(pmState, pms_OldState) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct RealTimeBase {
    pub rtb_LibNode: Library,
    pub rtb_Reserved0: [UBYTE; 2usize],
    pub rtb_Time: ULONG,
    pub rtb_TimeFrac: ULONG,
    pub rtb_Reserved1: UWORD,
    pub rtb_TickErr: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RealTimeBase"][::core::mem::size_of::<RealTimeBase>() - 48usize];
    ["Alignment of RealTimeBase"][::core::mem::align_of::<RealTimeBase>() - 2usize];
    ["Offset of field: RealTimeBase::rtb_LibNode"]
        [::core::mem::offset_of!(RealTimeBase, rtb_LibNode) - 0usize];
    ["Offset of field: RealTimeBase::rtb_Reserved0"]
        [::core::mem::offset_of!(RealTimeBase, rtb_Reserved0) - 34usize];
    ["Offset of field: RealTimeBase::rtb_Time"]
        [::core::mem::offset_of!(RealTimeBase, rtb_Time) - 36usize];
    ["Offset of field: RealTimeBase::rtb_TimeFrac"]
        [::core::mem::offset_of!(RealTimeBase, rtb_TimeFrac) - 40usize];
    ["Offset of field: RealTimeBase::rtb_Reserved1"]
        [::core::mem::offset_of!(RealTimeBase, rtb_Reserved1) - 44usize];
    ["Offset of field: RealTimeBase::rtb_TickErr"]
        [::core::mem::offset_of!(RealTimeBase, rtb_TickErr) - 46usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AslPrefs {
    pub ap_Reserved: [LONG; 4usize],
    pub ap_SortBy: UBYTE,
    pub ap_SortDrawers: UBYTE,
    pub ap_SortOrder: UBYTE,
    pub ap_SizePosition: UBYTE,
    pub ap_RelativeLeft: WORD,
    pub ap_RelativeTop: WORD,
    pub ap_RelativeWidth: UBYTE,
    pub ap_RelativeHeight: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AslPrefs"][::core::mem::size_of::<AslPrefs>() - 26usize];
    ["Alignment of AslPrefs"][::core::mem::align_of::<AslPrefs>() - 2usize];
    ["Offset of field: AslPrefs::ap_Reserved"]
        [::core::mem::offset_of!(AslPrefs, ap_Reserved) - 0usize];
    ["Offset of field: AslPrefs::ap_SortBy"]
        [::core::mem::offset_of!(AslPrefs, ap_SortBy) - 16usize];
    ["Offset of field: AslPrefs::ap_SortDrawers"]
        [::core::mem::offset_of!(AslPrefs, ap_SortDrawers) - 17usize];
    ["Offset of field: AslPrefs::ap_SortOrder"]
        [::core::mem::offset_of!(AslPrefs, ap_SortOrder) - 18usize];
    ["Offset of field: AslPrefs::ap_SizePosition"]
        [::core::mem::offset_of!(AslPrefs, ap_SizePosition) - 19usize];
    ["Offset of field: AslPrefs::ap_RelativeLeft"]
        [::core::mem::offset_of!(AslPrefs, ap_RelativeLeft) - 20usize];
    ["Offset of field: AslPrefs::ap_RelativeTop"]
        [::core::mem::offset_of!(AslPrefs, ap_RelativeTop) - 22usize];
    ["Offset of field: AslPrefs::ap_RelativeWidth"]
        [::core::mem::offset_of!(AslPrefs, ap_RelativeWidth) - 24usize];
    ["Offset of field: AslPrefs::ap_RelativeHeight"]
        [::core::mem::offset_of!(AslPrefs, ap_RelativeHeight) - 25usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FontPrefs {
    pub fp_Reserved: [LONG; 3usize],
    pub fp_Reserved2: UWORD,
    pub fp_Type: UWORD,
    pub fp_FrontPen: UBYTE,
    pub fp_BackPen: UBYTE,
    pub fp_DrawMode: UBYTE,
    pub fp_SpecialDrawMode: UBYTE,
    pub fp_TextAttr: TextAttr,
    pub fp_Name: [BYTE; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FontPrefs"][::core::mem::size_of::<FontPrefs>() - 156usize];
    ["Alignment of FontPrefs"][::core::mem::align_of::<FontPrefs>() - 2usize];
    ["Offset of field: FontPrefs::fp_Reserved"]
        [::core::mem::offset_of!(FontPrefs, fp_Reserved) - 0usize];
    ["Offset of field: FontPrefs::fp_Reserved2"]
        [::core::mem::offset_of!(FontPrefs, fp_Reserved2) - 12usize];
    ["Offset of field: FontPrefs::fp_Type"][::core::mem::offset_of!(FontPrefs, fp_Type) - 14usize];
    ["Offset of field: FontPrefs::fp_FrontPen"]
        [::core::mem::offset_of!(FontPrefs, fp_FrontPen) - 16usize];
    ["Offset of field: FontPrefs::fp_BackPen"]
        [::core::mem::offset_of!(FontPrefs, fp_BackPen) - 17usize];
    ["Offset of field: FontPrefs::fp_DrawMode"]
        [::core::mem::offset_of!(FontPrefs, fp_DrawMode) - 18usize];
    ["Offset of field: FontPrefs::fp_SpecialDrawMode"]
        [::core::mem::offset_of!(FontPrefs, fp_SpecialDrawMode) - 19usize];
    ["Offset of field: FontPrefs::fp_TextAttr"]
        [::core::mem::offset_of!(FontPrefs, fp_TextAttr) - 20usize];
    ["Offset of field: FontPrefs::fp_Name"][::core::mem::offset_of!(FontPrefs, fp_Name) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IControlPrefs {
    pub ic_Reserved: [LONG; 4usize],
    pub ic_TimeOut: UWORD,
    pub ic_MetaDrag: WORD,
    pub ic_Flags: ULONG,
    pub ic_WBtoFront: UBYTE,
    pub ic_FrontToBack: UBYTE,
    pub ic_ReqTrue: UBYTE,
    pub ic_ReqFalse: UBYTE,
    pub ic_Version: UWORD,
    pub ic_VersionMagic: UWORD,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ic_Pad: UBYTE,
    pub ic_GUIGeometry: [UBYTE; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IControlPrefs"][::core::mem::size_of::<IControlPrefs>() - 38usize];
    ["Alignment of IControlPrefs"][::core::mem::align_of::<IControlPrefs>() - 2usize];
    ["Offset of field: IControlPrefs::ic_Reserved"]
        [::core::mem::offset_of!(IControlPrefs, ic_Reserved) - 0usize];
    ["Offset of field: IControlPrefs::ic_TimeOut"]
        [::core::mem::offset_of!(IControlPrefs, ic_TimeOut) - 16usize];
    ["Offset of field: IControlPrefs::ic_MetaDrag"]
        [::core::mem::offset_of!(IControlPrefs, ic_MetaDrag) - 18usize];
    ["Offset of field: IControlPrefs::ic_Flags"]
        [::core::mem::offset_of!(IControlPrefs, ic_Flags) - 20usize];
    ["Offset of field: IControlPrefs::ic_WBtoFront"]
        [::core::mem::offset_of!(IControlPrefs, ic_WBtoFront) - 24usize];
    ["Offset of field: IControlPrefs::ic_FrontToBack"]
        [::core::mem::offset_of!(IControlPrefs, ic_FrontToBack) - 25usize];
    ["Offset of field: IControlPrefs::ic_ReqTrue"]
        [::core::mem::offset_of!(IControlPrefs, ic_ReqTrue) - 26usize];
    ["Offset of field: IControlPrefs::ic_ReqFalse"]
        [::core::mem::offset_of!(IControlPrefs, ic_ReqFalse) - 27usize];
    ["Offset of field: IControlPrefs::ic_Version"]
        [::core::mem::offset_of!(IControlPrefs, ic_Version) - 28usize];
    ["Offset of field: IControlPrefs::ic_VersionMagic"]
        [::core::mem::offset_of!(IControlPrefs, ic_VersionMagic) - 30usize];
    ["Offset of field: IControlPrefs::ic_Pad"]
        [::core::mem::offset_of!(IControlPrefs, ic_Pad) - 33usize];
    ["Offset of field: IControlPrefs::ic_GUIGeometry"]
        [::core::mem::offset_of!(IControlPrefs, ic_GUIGeometry) - 34usize];
};
impl IControlPrefs {
    #[inline]
    pub fn ic_HoverSlugishness(&self) -> UBYTE {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_ic_HoverSlugishness(&mut self, val: UBYTE) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ic_HoverSlugishness_raw(this: *const Self) -> UBYTE {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_ic_HoverSlugishness_raw(this: *mut Self, val: UBYTE) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ic_HoverFlags(&self) -> UBYTE {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_ic_HoverFlags(&mut self, val: UBYTE) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ic_HoverFlags_raw(this: *const Self) -> UBYTE {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                5u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_ic_HoverFlags_raw(this: *mut Self, val: UBYTE) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ic_HoverSlugishness: UBYTE,
        ic_HoverFlags: UBYTE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let ic_HoverSlugishness: u8 = unsafe { ::core::mem::transmute(ic_HoverSlugishness) };
            ic_HoverSlugishness as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let ic_HoverFlags: u8 = unsafe { ::core::mem::transmute(ic_HoverFlags) };
            ic_HoverFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct IExceptionPrefs {
    pub ie_Tags: __IncompleteArrayField<TagItem>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IExceptionPrefs"][::core::mem::size_of::<IExceptionPrefs>() - 0usize];
    ["Alignment of IExceptionPrefs"][::core::mem::align_of::<IExceptionPrefs>() - 2usize];
    ["Offset of field: IExceptionPrefs::ie_Tags"]
        [::core::mem::offset_of!(IExceptionPrefs, ie_Tags) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputPrefs {
    pub ip_Keymap: [::core::ffi::c_char; 16usize],
    pub ip_PointerTicks: UWORD,
    pub ip_DoubleClick: TimeVal_Type,
    pub ip_KeyRptDelay: TimeVal_Type,
    pub ip_KeyRptSpeed: TimeVal_Type,
    pub ip_MouseAccel: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InputPrefs"][::core::mem::size_of::<InputPrefs>() - 44usize];
    ["Alignment of InputPrefs"][::core::mem::align_of::<InputPrefs>() - 2usize];
    ["Offset of field: InputPrefs::ip_Keymap"]
        [::core::mem::offset_of!(InputPrefs, ip_Keymap) - 0usize];
    ["Offset of field: InputPrefs::ip_PointerTicks"]
        [::core::mem::offset_of!(InputPrefs, ip_PointerTicks) - 16usize];
    ["Offset of field: InputPrefs::ip_DoubleClick"]
        [::core::mem::offset_of!(InputPrefs, ip_DoubleClick) - 18usize];
    ["Offset of field: InputPrefs::ip_KeyRptDelay"]
        [::core::mem::offset_of!(InputPrefs, ip_KeyRptDelay) - 26usize];
    ["Offset of field: InputPrefs::ip_KeyRptSpeed"]
        [::core::mem::offset_of!(InputPrefs, ip_KeyRptSpeed) - 34usize];
    ["Offset of field: InputPrefs::ip_MouseAccel"]
        [::core::mem::offset_of!(InputPrefs, ip_MouseAccel) - 42usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CountryPrefs {
    pub cp_Reserved: [ULONG; 4usize],
    pub cp_CountryCode: ULONG,
    pub cp_TelephoneCode: ULONG,
    pub cp_MeasuringSystem: UBYTE,
    pub cp_DateTimeFormat: [::core::ffi::c_char; 80usize],
    pub cp_DateFormat: [::core::ffi::c_char; 40usize],
    pub cp_TimeFormat: [::core::ffi::c_char; 40usize],
    pub cp_ShortDateTimeFormat: [::core::ffi::c_char; 80usize],
    pub cp_ShortDateFormat: [::core::ffi::c_char; 40usize],
    pub cp_ShortTimeFormat: [::core::ffi::c_char; 40usize],
    pub cp_DecimalPoint: [::core::ffi::c_char; 10usize],
    pub cp_GroupSeparator: [::core::ffi::c_char; 10usize],
    pub cp_FracGroupSeparator: [::core::ffi::c_char; 10usize],
    pub cp_Grouping: [UBYTE; 10usize],
    pub cp_FracGrouping: [UBYTE; 10usize],
    pub cp_MonDecimalPoint: [::core::ffi::c_char; 10usize],
    pub cp_MonGroupSeparator: [::core::ffi::c_char; 10usize],
    pub cp_MonFracGroupSeparator: [::core::ffi::c_char; 10usize],
    pub cp_MonGrouping: [UBYTE; 10usize],
    pub cp_MonFracGrouping: [UBYTE; 10usize],
    pub cp_MonFracDigits: UBYTE,
    pub cp_MonIntFracDigits: UBYTE,
    pub cp_MonCS: [::core::ffi::c_char; 10usize],
    pub cp_MonSmallCS: [::core::ffi::c_char; 10usize],
    pub cp_MonIntCS: [::core::ffi::c_char; 10usize],
    pub cp_MonPositiveSign: [::core::ffi::c_char; 10usize],
    pub cp_MonPositiveSpaceSep: UBYTE,
    pub cp_MonPositiveSignPos: UBYTE,
    pub cp_MonPositiveCSPos: UBYTE,
    pub cp_MonNegativeSign: [::core::ffi::c_char; 10usize],
    pub cp_MonNegativeSpaceSep: UBYTE,
    pub cp_MonNegativeSignPos: UBYTE,
    pub cp_MonNegativeCSPos: UBYTE,
    pub cp_CalendarType: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CountryPrefs"][::core::mem::size_of::<CountryPrefs>() - 504usize];
    ["Alignment of CountryPrefs"][::core::mem::align_of::<CountryPrefs>() - 2usize];
    ["Offset of field: CountryPrefs::cp_Reserved"]
        [::core::mem::offset_of!(CountryPrefs, cp_Reserved) - 0usize];
    ["Offset of field: CountryPrefs::cp_CountryCode"]
        [::core::mem::offset_of!(CountryPrefs, cp_CountryCode) - 16usize];
    ["Offset of field: CountryPrefs::cp_TelephoneCode"]
        [::core::mem::offset_of!(CountryPrefs, cp_TelephoneCode) - 20usize];
    ["Offset of field: CountryPrefs::cp_MeasuringSystem"]
        [::core::mem::offset_of!(CountryPrefs, cp_MeasuringSystem) - 24usize];
    ["Offset of field: CountryPrefs::cp_DateTimeFormat"]
        [::core::mem::offset_of!(CountryPrefs, cp_DateTimeFormat) - 25usize];
    ["Offset of field: CountryPrefs::cp_DateFormat"]
        [::core::mem::offset_of!(CountryPrefs, cp_DateFormat) - 105usize];
    ["Offset of field: CountryPrefs::cp_TimeFormat"]
        [::core::mem::offset_of!(CountryPrefs, cp_TimeFormat) - 145usize];
    ["Offset of field: CountryPrefs::cp_ShortDateTimeFormat"]
        [::core::mem::offset_of!(CountryPrefs, cp_ShortDateTimeFormat) - 185usize];
    ["Offset of field: CountryPrefs::cp_ShortDateFormat"]
        [::core::mem::offset_of!(CountryPrefs, cp_ShortDateFormat) - 265usize];
    ["Offset of field: CountryPrefs::cp_ShortTimeFormat"]
        [::core::mem::offset_of!(CountryPrefs, cp_ShortTimeFormat) - 305usize];
    ["Offset of field: CountryPrefs::cp_DecimalPoint"]
        [::core::mem::offset_of!(CountryPrefs, cp_DecimalPoint) - 345usize];
    ["Offset of field: CountryPrefs::cp_GroupSeparator"]
        [::core::mem::offset_of!(CountryPrefs, cp_GroupSeparator) - 355usize];
    ["Offset of field: CountryPrefs::cp_FracGroupSeparator"]
        [::core::mem::offset_of!(CountryPrefs, cp_FracGroupSeparator) - 365usize];
    ["Offset of field: CountryPrefs::cp_Grouping"]
        [::core::mem::offset_of!(CountryPrefs, cp_Grouping) - 375usize];
    ["Offset of field: CountryPrefs::cp_FracGrouping"]
        [::core::mem::offset_of!(CountryPrefs, cp_FracGrouping) - 385usize];
    ["Offset of field: CountryPrefs::cp_MonDecimalPoint"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonDecimalPoint) - 395usize];
    ["Offset of field: CountryPrefs::cp_MonGroupSeparator"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonGroupSeparator) - 405usize];
    ["Offset of field: CountryPrefs::cp_MonFracGroupSeparator"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonFracGroupSeparator) - 415usize];
    ["Offset of field: CountryPrefs::cp_MonGrouping"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonGrouping) - 425usize];
    ["Offset of field: CountryPrefs::cp_MonFracGrouping"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonFracGrouping) - 435usize];
    ["Offset of field: CountryPrefs::cp_MonFracDigits"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonFracDigits) - 445usize];
    ["Offset of field: CountryPrefs::cp_MonIntFracDigits"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonIntFracDigits) - 446usize];
    ["Offset of field: CountryPrefs::cp_MonCS"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonCS) - 447usize];
    ["Offset of field: CountryPrefs::cp_MonSmallCS"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonSmallCS) - 457usize];
    ["Offset of field: CountryPrefs::cp_MonIntCS"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonIntCS) - 467usize];
    ["Offset of field: CountryPrefs::cp_MonPositiveSign"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonPositiveSign) - 477usize];
    ["Offset of field: CountryPrefs::cp_MonPositiveSpaceSep"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonPositiveSpaceSep) - 487usize];
    ["Offset of field: CountryPrefs::cp_MonPositiveSignPos"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonPositiveSignPos) - 488usize];
    ["Offset of field: CountryPrefs::cp_MonPositiveCSPos"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonPositiveCSPos) - 489usize];
    ["Offset of field: CountryPrefs::cp_MonNegativeSign"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonNegativeSign) - 490usize];
    ["Offset of field: CountryPrefs::cp_MonNegativeSpaceSep"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonNegativeSpaceSep) - 500usize];
    ["Offset of field: CountryPrefs::cp_MonNegativeSignPos"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonNegativeSignPos) - 501usize];
    ["Offset of field: CountryPrefs::cp_MonNegativeCSPos"]
        [::core::mem::offset_of!(CountryPrefs, cp_MonNegativeCSPos) - 502usize];
    ["Offset of field: CountryPrefs::cp_CalendarType"]
        [::core::mem::offset_of!(CountryPrefs, cp_CalendarType) - 503usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct LocalePrefs {
    pub lp_Reserved: [ULONG; 4usize],
    pub lp_CountryName: [::core::ffi::c_char; 32usize],
    pub lp_PreferredLanguages: [[::core::ffi::c_char; 30usize]; 10usize],
    pub lp_GMTOffset: LONG,
    pub lp_Flags: ULONG,
    pub lp_CountryData: CountryPrefs,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LocalePrefs"][::core::mem::size_of::<LocalePrefs>() - 860usize];
    ["Alignment of LocalePrefs"][::core::mem::align_of::<LocalePrefs>() - 2usize];
    ["Offset of field: LocalePrefs::lp_Reserved"]
        [::core::mem::offset_of!(LocalePrefs, lp_Reserved) - 0usize];
    ["Offset of field: LocalePrefs::lp_CountryName"]
        [::core::mem::offset_of!(LocalePrefs, lp_CountryName) - 16usize];
    ["Offset of field: LocalePrefs::lp_PreferredLanguages"]
        [::core::mem::offset_of!(LocalePrefs, lp_PreferredLanguages) - 48usize];
    ["Offset of field: LocalePrefs::lp_GMTOffset"]
        [::core::mem::offset_of!(LocalePrefs, lp_GMTOffset) - 348usize];
    ["Offset of field: LocalePrefs::lp_Flags"]
        [::core::mem::offset_of!(LocalePrefs, lp_Flags) - 352usize];
    ["Offset of field: LocalePrefs::lp_CountryData"]
        [::core::mem::offset_of!(LocalePrefs, lp_CountryData) - 356usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct OverscanPrefs {
    pub os_Reserved: ULONG,
    pub os_Magic: ULONG,
    pub os_HStart: UWORD,
    pub os_HStop: UWORD,
    pub os_VStart: UWORD,
    pub os_VStop: UWORD,
    pub os_DisplayID: ULONG,
    pub os_ViewPos: Point,
    pub os_Text: Point,
    pub os_Standard: Rectangle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OverscanPrefs"][::core::mem::size_of::<OverscanPrefs>() - 36usize];
    ["Alignment of OverscanPrefs"][::core::mem::align_of::<OverscanPrefs>() - 2usize];
    ["Offset of field: OverscanPrefs::os_Reserved"]
        [::core::mem::offset_of!(OverscanPrefs, os_Reserved) - 0usize];
    ["Offset of field: OverscanPrefs::os_Magic"]
        [::core::mem::offset_of!(OverscanPrefs, os_Magic) - 4usize];
    ["Offset of field: OverscanPrefs::os_HStart"]
        [::core::mem::offset_of!(OverscanPrefs, os_HStart) - 8usize];
    ["Offset of field: OverscanPrefs::os_HStop"]
        [::core::mem::offset_of!(OverscanPrefs, os_HStop) - 10usize];
    ["Offset of field: OverscanPrefs::os_VStart"]
        [::core::mem::offset_of!(OverscanPrefs, os_VStart) - 12usize];
    ["Offset of field: OverscanPrefs::os_VStop"]
        [::core::mem::offset_of!(OverscanPrefs, os_VStop) - 14usize];
    ["Offset of field: OverscanPrefs::os_DisplayID"]
        [::core::mem::offset_of!(OverscanPrefs, os_DisplayID) - 16usize];
    ["Offset of field: OverscanPrefs::os_ViewPos"]
        [::core::mem::offset_of!(OverscanPrefs, os_ViewPos) - 20usize];
    ["Offset of field: OverscanPrefs::os_Text"]
        [::core::mem::offset_of!(OverscanPrefs, os_Text) - 24usize];
    ["Offset of field: OverscanPrefs::os_Standard"]
        [::core::mem::offset_of!(OverscanPrefs, os_Standard) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PalettePrefs {
    pub pap_Reserved: [LONG; 4usize],
    pub pap_4ColorPens: [UWORD; 32usize],
    pub pap_8ColorPens: [UWORD; 32usize],
    pub pap_Colors: [ColorSpec; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PalettePrefs"][::core::mem::size_of::<PalettePrefs>() - 400usize];
    ["Alignment of PalettePrefs"][::core::mem::align_of::<PalettePrefs>() - 2usize];
    ["Offset of field: PalettePrefs::pap_Reserved"]
        [::core::mem::offset_of!(PalettePrefs, pap_Reserved) - 0usize];
    ["Offset of field: PalettePrefs::pap_4ColorPens"]
        [::core::mem::offset_of!(PalettePrefs, pap_4ColorPens) - 16usize];
    ["Offset of field: PalettePrefs::pap_8ColorPens"]
        [::core::mem::offset_of!(PalettePrefs, pap_8ColorPens) - 80usize];
    ["Offset of field: PalettePrefs::pap_Colors"]
        [::core::mem::offset_of!(PalettePrefs, pap_Colors) - 144usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PointerPrefs {
    pub pp_Reserved: [ULONG; 4usize],
    pub pp_Which: UWORD,
    pub pp_Size: UWORD,
    pub pp_Width: UWORD,
    pub pp_Height: UWORD,
    pub pp_Depth: UWORD,
    pub pp_YSize: UWORD,
    pub pp_X: WORD,
    pub pp_Y: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PointerPrefs"][::core::mem::size_of::<PointerPrefs>() - 32usize];
    ["Alignment of PointerPrefs"][::core::mem::align_of::<PointerPrefs>() - 2usize];
    ["Offset of field: PointerPrefs::pp_Reserved"]
        [::core::mem::offset_of!(PointerPrefs, pp_Reserved) - 0usize];
    ["Offset of field: PointerPrefs::pp_Which"]
        [::core::mem::offset_of!(PointerPrefs, pp_Which) - 16usize];
    ["Offset of field: PointerPrefs::pp_Size"]
        [::core::mem::offset_of!(PointerPrefs, pp_Size) - 18usize];
    ["Offset of field: PointerPrefs::pp_Width"]
        [::core::mem::offset_of!(PointerPrefs, pp_Width) - 20usize];
    ["Offset of field: PointerPrefs::pp_Height"]
        [::core::mem::offset_of!(PointerPrefs, pp_Height) - 22usize];
    ["Offset of field: PointerPrefs::pp_Depth"]
        [::core::mem::offset_of!(PointerPrefs, pp_Depth) - 24usize];
    ["Offset of field: PointerPrefs::pp_YSize"]
        [::core::mem::offset_of!(PointerPrefs, pp_YSize) - 26usize];
    ["Offset of field: PointerPrefs::pp_X"][::core::mem::offset_of!(PointerPrefs, pp_X) - 28usize];
    ["Offset of field: PointerPrefs::pp_Y"][::core::mem::offset_of!(PointerPrefs, pp_Y) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
#[repr(align(2))]
pub struct RGBTable {
    pub t_Red: UBYTE,
    pub t_Green: UBYTE,
    pub t_Blue: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RGBTable"][::core::mem::size_of::<RGBTable>() - 4usize];
    ["Alignment of RGBTable"][::core::mem::align_of::<RGBTable>() - 2usize];
    ["Offset of field: RGBTable::t_Red"][::core::mem::offset_of!(RGBTable, t_Red) - 0usize];
    ["Offset of field: RGBTable::t_Green"][::core::mem::offset_of!(RGBTable, t_Green) - 1usize];
    ["Offset of field: RGBTable::t_Blue"][::core::mem::offset_of!(RGBTable, t_Blue) - 2usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrefHeader {
    pub ph_Version: UBYTE,
    pub ph_Type: UBYTE,
    pub ph_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrefHeader"][::core::mem::size_of::<PrefHeader>() - 6usize];
    ["Alignment of PrefHeader"][::core::mem::align_of::<PrefHeader>() - 2usize];
    ["Offset of field: PrefHeader::ph_Version"]
        [::core::mem::offset_of!(PrefHeader, ph_Version) - 0usize];
    ["Offset of field: PrefHeader::ph_Type"][::core::mem::offset_of!(PrefHeader, ph_Type) - 1usize];
    ["Offset of field: PrefHeader::ph_Flags"]
        [::core::mem::offset_of!(PrefHeader, ph_Flags) - 2usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrinterGfxPrefs {
    pub pg_Reserved: [LONG; 4usize],
    pub pg_Aspect: UWORD,
    pub pg_Shade: UWORD,
    pub pg_Image: UWORD,
    pub pg_Threshold: WORD,
    pub pg_ColorCorrect: UBYTE,
    pub pg_Dimensions: UBYTE,
    pub pg_Dithering: UBYTE,
    pub pg_GraphicFlags: UWORD,
    pub pg_PrintDensity: UBYTE,
    pub pg_PrintMaxWidth: UWORD,
    pub pg_PrintMaxHeight: UWORD,
    pub pg_PrintXOffset: UBYTE,
    pub pg_PrintYOffset: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterGfxPrefs"][::core::mem::size_of::<PrinterGfxPrefs>() - 38usize];
    ["Alignment of PrinterGfxPrefs"][::core::mem::align_of::<PrinterGfxPrefs>() - 2usize];
    ["Offset of field: PrinterGfxPrefs::pg_Reserved"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_Reserved) - 0usize];
    ["Offset of field: PrinterGfxPrefs::pg_Aspect"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_Aspect) - 16usize];
    ["Offset of field: PrinterGfxPrefs::pg_Shade"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_Shade) - 18usize];
    ["Offset of field: PrinterGfxPrefs::pg_Image"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_Image) - 20usize];
    ["Offset of field: PrinterGfxPrefs::pg_Threshold"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_Threshold) - 22usize];
    ["Offset of field: PrinterGfxPrefs::pg_ColorCorrect"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_ColorCorrect) - 24usize];
    ["Offset of field: PrinterGfxPrefs::pg_Dimensions"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_Dimensions) - 25usize];
    ["Offset of field: PrinterGfxPrefs::pg_Dithering"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_Dithering) - 26usize];
    ["Offset of field: PrinterGfxPrefs::pg_GraphicFlags"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_GraphicFlags) - 28usize];
    ["Offset of field: PrinterGfxPrefs::pg_PrintDensity"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_PrintDensity) - 30usize];
    ["Offset of field: PrinterGfxPrefs::pg_PrintMaxWidth"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_PrintMaxWidth) - 32usize];
    ["Offset of field: PrinterGfxPrefs::pg_PrintMaxHeight"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_PrintMaxHeight) - 34usize];
    ["Offset of field: PrinterGfxPrefs::pg_PrintXOffset"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_PrintXOffset) - 36usize];
    ["Offset of field: PrinterGfxPrefs::pg_PrintYOffset"]
        [::core::mem::offset_of!(PrinterGfxPrefs, pg_PrintYOffset) - 37usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrinterPSPrefs {
    pub ps_Reserved: [LONG; 4usize],
    pub ps_DriverMode: UBYTE,
    pub ps_PaperFormat: UBYTE,
    pub ps_Reserved1: [UBYTE; 2usize],
    pub ps_Copies: LONG,
    pub ps_PaperWidth: LONG,
    pub ps_PaperHeight: LONG,
    pub ps_HorizontalDPI: LONG,
    pub ps_VerticalDPI: LONG,
    pub ps_Font: UBYTE,
    pub ps_Pitch: UBYTE,
    pub ps_Orientation: UBYTE,
    pub ps_Tab: UBYTE,
    pub ps_Reserved2: [UBYTE; 8usize],
    pub ps_LeftMargin: LONG,
    pub ps_RightMargin: LONG,
    pub ps_TopMargin: LONG,
    pub ps_BottomMargin: LONG,
    pub ps_FontPointSize: LONG,
    pub ps_Leading: LONG,
    pub ps_Reserved3: [UBYTE; 8usize],
    pub ps_LeftEdge: LONG,
    pub ps_TopEdge: LONG,
    pub ps_Width: LONG,
    pub ps_Height: LONG,
    pub ps_Image: UBYTE,
    pub ps_Shading: UBYTE,
    pub ps_Dithering: UBYTE,
    pub ps_Reserved4: [UBYTE; 9usize],
    pub ps_Aspect: UBYTE,
    pub ps_ScalingType: UBYTE,
    pub ps_Reserved5: UBYTE,
    pub ps_Centering: UBYTE,
    pub ps_Reserved6: [UBYTE; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterPSPrefs"][::core::mem::size_of::<PrinterPSPrefs>() - 124usize];
    ["Alignment of PrinterPSPrefs"][::core::mem::align_of::<PrinterPSPrefs>() - 2usize];
    ["Offset of field: PrinterPSPrefs::ps_Reserved"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Reserved) - 0usize];
    ["Offset of field: PrinterPSPrefs::ps_DriverMode"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_DriverMode) - 16usize];
    ["Offset of field: PrinterPSPrefs::ps_PaperFormat"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_PaperFormat) - 17usize];
    ["Offset of field: PrinterPSPrefs::ps_Reserved1"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Reserved1) - 18usize];
    ["Offset of field: PrinterPSPrefs::ps_Copies"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Copies) - 20usize];
    ["Offset of field: PrinterPSPrefs::ps_PaperWidth"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_PaperWidth) - 24usize];
    ["Offset of field: PrinterPSPrefs::ps_PaperHeight"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_PaperHeight) - 28usize];
    ["Offset of field: PrinterPSPrefs::ps_HorizontalDPI"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_HorizontalDPI) - 32usize];
    ["Offset of field: PrinterPSPrefs::ps_VerticalDPI"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_VerticalDPI) - 36usize];
    ["Offset of field: PrinterPSPrefs::ps_Font"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Font) - 40usize];
    ["Offset of field: PrinterPSPrefs::ps_Pitch"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Pitch) - 41usize];
    ["Offset of field: PrinterPSPrefs::ps_Orientation"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Orientation) - 42usize];
    ["Offset of field: PrinterPSPrefs::ps_Tab"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Tab) - 43usize];
    ["Offset of field: PrinterPSPrefs::ps_Reserved2"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Reserved2) - 44usize];
    ["Offset of field: PrinterPSPrefs::ps_LeftMargin"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_LeftMargin) - 52usize];
    ["Offset of field: PrinterPSPrefs::ps_RightMargin"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_RightMargin) - 56usize];
    ["Offset of field: PrinterPSPrefs::ps_TopMargin"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_TopMargin) - 60usize];
    ["Offset of field: PrinterPSPrefs::ps_BottomMargin"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_BottomMargin) - 64usize];
    ["Offset of field: PrinterPSPrefs::ps_FontPointSize"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_FontPointSize) - 68usize];
    ["Offset of field: PrinterPSPrefs::ps_Leading"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Leading) - 72usize];
    ["Offset of field: PrinterPSPrefs::ps_Reserved3"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Reserved3) - 76usize];
    ["Offset of field: PrinterPSPrefs::ps_LeftEdge"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_LeftEdge) - 84usize];
    ["Offset of field: PrinterPSPrefs::ps_TopEdge"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_TopEdge) - 88usize];
    ["Offset of field: PrinterPSPrefs::ps_Width"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Width) - 92usize];
    ["Offset of field: PrinterPSPrefs::ps_Height"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Height) - 96usize];
    ["Offset of field: PrinterPSPrefs::ps_Image"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Image) - 100usize];
    ["Offset of field: PrinterPSPrefs::ps_Shading"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Shading) - 101usize];
    ["Offset of field: PrinterPSPrefs::ps_Dithering"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Dithering) - 102usize];
    ["Offset of field: PrinterPSPrefs::ps_Reserved4"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Reserved4) - 103usize];
    ["Offset of field: PrinterPSPrefs::ps_Aspect"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Aspect) - 112usize];
    ["Offset of field: PrinterPSPrefs::ps_ScalingType"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_ScalingType) - 113usize];
    ["Offset of field: PrinterPSPrefs::ps_Reserved5"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Reserved5) - 114usize];
    ["Offset of field: PrinterPSPrefs::ps_Centering"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Centering) - 115usize];
    ["Offset of field: PrinterPSPrefs::ps_Reserved6"]
        [::core::mem::offset_of!(PrinterPSPrefs, ps_Reserved6) - 116usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrinterTxtPrefs {
    pub pt_Reserved: [LONG; 4usize],
    pub pt_Driver: [TEXT; 30usize],
    pub pt_Port: UBYTE,
    pub pt_PaperType: UWORD,
    pub pt_PaperSize: UWORD,
    pub pt_PaperLength: UWORD,
    pub pt_Pitch: UWORD,
    pub pt_Spacing: UWORD,
    pub pt_LeftMargin: UWORD,
    pub pt_RightMargin: UWORD,
    pub pt_Quality: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterTxtPrefs"][::core::mem::size_of::<PrinterTxtPrefs>() - 64usize];
    ["Alignment of PrinterTxtPrefs"][::core::mem::align_of::<PrinterTxtPrefs>() - 2usize];
    ["Offset of field: PrinterTxtPrefs::pt_Reserved"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_Reserved) - 0usize];
    ["Offset of field: PrinterTxtPrefs::pt_Driver"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_Driver) - 16usize];
    ["Offset of field: PrinterTxtPrefs::pt_Port"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_Port) - 46usize];
    ["Offset of field: PrinterTxtPrefs::pt_PaperType"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_PaperType) - 48usize];
    ["Offset of field: PrinterTxtPrefs::pt_PaperSize"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_PaperSize) - 50usize];
    ["Offset of field: PrinterTxtPrefs::pt_PaperLength"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_PaperLength) - 52usize];
    ["Offset of field: PrinterTxtPrefs::pt_Pitch"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_Pitch) - 54usize];
    ["Offset of field: PrinterTxtPrefs::pt_Spacing"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_Spacing) - 56usize];
    ["Offset of field: PrinterTxtPrefs::pt_LeftMargin"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_LeftMargin) - 58usize];
    ["Offset of field: PrinterTxtPrefs::pt_RightMargin"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_RightMargin) - 60usize];
    ["Offset of field: PrinterTxtPrefs::pt_Quality"]
        [::core::mem::offset_of!(PrinterTxtPrefs, pt_Quality) - 62usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrinterUnitPrefs {
    pub pu_Reserved: [LONG; 4usize],
    pub pu_UnitNum: LONG,
    pub pu_OpenDeviceFlags: ULONG,
    pub pu_DeviceName: [TEXT; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterUnitPrefs"][::core::mem::size_of::<PrinterUnitPrefs>() - 56usize];
    ["Alignment of PrinterUnitPrefs"][::core::mem::align_of::<PrinterUnitPrefs>() - 2usize];
    ["Offset of field: PrinterUnitPrefs::pu_Reserved"]
        [::core::mem::offset_of!(PrinterUnitPrefs, pu_Reserved) - 0usize];
    ["Offset of field: PrinterUnitPrefs::pu_UnitNum"]
        [::core::mem::offset_of!(PrinterUnitPrefs, pu_UnitNum) - 16usize];
    ["Offset of field: PrinterUnitPrefs::pu_OpenDeviceFlags"]
        [::core::mem::offset_of!(PrinterUnitPrefs, pu_OpenDeviceFlags) - 20usize];
    ["Offset of field: PrinterUnitPrefs::pu_DeviceName"]
        [::core::mem::offset_of!(PrinterUnitPrefs, pu_DeviceName) - 24usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PrinterDeviceUnitPrefs {
    pub pd_Reserved: [LONG; 4usize],
    pub pd_UnitNum: LONG,
    pub pd_UnitName: [TEXT; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrinterDeviceUnitPrefs"][::core::mem::size_of::<PrinterDeviceUnitPrefs>() - 52usize];
    ["Alignment of PrinterDeviceUnitPrefs"]
        [::core::mem::align_of::<PrinterDeviceUnitPrefs>() - 2usize];
    ["Offset of field: PrinterDeviceUnitPrefs::pd_Reserved"]
        [::core::mem::offset_of!(PrinterDeviceUnitPrefs, pd_Reserved) - 0usize];
    ["Offset of field: PrinterDeviceUnitPrefs::pd_UnitNum"]
        [::core::mem::offset_of!(PrinterDeviceUnitPrefs, pd_UnitNum) - 16usize];
    ["Offset of field: PrinterDeviceUnitPrefs::pd_UnitName"]
        [::core::mem::offset_of!(PrinterDeviceUnitPrefs, pd_UnitName) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReactionPrefs {
    pub rp_BevelType: UWORD,
    pub rp_GlyphType: UWORD,
    pub rp_LayoutSpacing: UWORD,
    pub rp_3DProp: BOOL,
    pub rp_LabelPen: UWORD,
    pub rp_LabelPlace: UWORD,
    pub rp_3DLabel: BOOL,
    pub rp_SimpleRefresh: BOOL,
    pub rp_3DLook: BOOL,
    pub rp_FallbackAttr: TextAttr,
    pub rp_LabelAttr: TextAttr,
    pub rp_FallbackName: [UBYTE; 128usize],
    pub rp_LabelName: [UBYTE; 128usize],
    pub rp_Pattern: [UBYTE; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ReactionPrefs"][::core::mem::size_of::<ReactionPrefs>() - 546usize];
    ["Alignment of ReactionPrefs"][::core::mem::align_of::<ReactionPrefs>() - 2usize];
    ["Offset of field: ReactionPrefs::rp_BevelType"]
        [::core::mem::offset_of!(ReactionPrefs, rp_BevelType) - 0usize];
    ["Offset of field: ReactionPrefs::rp_GlyphType"]
        [::core::mem::offset_of!(ReactionPrefs, rp_GlyphType) - 2usize];
    ["Offset of field: ReactionPrefs::rp_LayoutSpacing"]
        [::core::mem::offset_of!(ReactionPrefs, rp_LayoutSpacing) - 4usize];
    ["Offset of field: ReactionPrefs::rp_3DProp"]
        [::core::mem::offset_of!(ReactionPrefs, rp_3DProp) - 6usize];
    ["Offset of field: ReactionPrefs::rp_LabelPen"]
        [::core::mem::offset_of!(ReactionPrefs, rp_LabelPen) - 8usize];
    ["Offset of field: ReactionPrefs::rp_LabelPlace"]
        [::core::mem::offset_of!(ReactionPrefs, rp_LabelPlace) - 10usize];
    ["Offset of field: ReactionPrefs::rp_3DLabel"]
        [::core::mem::offset_of!(ReactionPrefs, rp_3DLabel) - 12usize];
    ["Offset of field: ReactionPrefs::rp_SimpleRefresh"]
        [::core::mem::offset_of!(ReactionPrefs, rp_SimpleRefresh) - 14usize];
    ["Offset of field: ReactionPrefs::rp_3DLook"]
        [::core::mem::offset_of!(ReactionPrefs, rp_3DLook) - 16usize];
    ["Offset of field: ReactionPrefs::rp_FallbackAttr"]
        [::core::mem::offset_of!(ReactionPrefs, rp_FallbackAttr) - 18usize];
    ["Offset of field: ReactionPrefs::rp_LabelAttr"]
        [::core::mem::offset_of!(ReactionPrefs, rp_LabelAttr) - 26usize];
    ["Offset of field: ReactionPrefs::rp_FallbackName"]
        [::core::mem::offset_of!(ReactionPrefs, rp_FallbackName) - 34usize];
    ["Offset of field: ReactionPrefs::rp_LabelName"]
        [::core::mem::offset_of!(ReactionPrefs, rp_LabelName) - 162usize];
    ["Offset of field: ReactionPrefs::rp_Pattern"]
        [::core::mem::offset_of!(ReactionPrefs, rp_Pattern) - 290usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ScreenModePrefs {
    pub smp_Reserved: [ULONG; 4usize],
    pub smp_DisplayID: ULONG,
    pub smp_Width: UWORD,
    pub smp_Height: UWORD,
    pub smp_Depth: UWORD,
    pub smp_Control: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ScreenModePrefs"][::core::mem::size_of::<ScreenModePrefs>() - 28usize];
    ["Alignment of ScreenModePrefs"][::core::mem::align_of::<ScreenModePrefs>() - 2usize];
    ["Offset of field: ScreenModePrefs::smp_Reserved"]
        [::core::mem::offset_of!(ScreenModePrefs, smp_Reserved) - 0usize];
    ["Offset of field: ScreenModePrefs::smp_DisplayID"]
        [::core::mem::offset_of!(ScreenModePrefs, smp_DisplayID) - 16usize];
    ["Offset of field: ScreenModePrefs::smp_Width"]
        [::core::mem::offset_of!(ScreenModePrefs, smp_Width) - 20usize];
    ["Offset of field: ScreenModePrefs::smp_Height"]
        [::core::mem::offset_of!(ScreenModePrefs, smp_Height) - 22usize];
    ["Offset of field: ScreenModePrefs::smp_Depth"]
        [::core::mem::offset_of!(ScreenModePrefs, smp_Depth) - 24usize];
    ["Offset of field: ScreenModePrefs::smp_Control"]
        [::core::mem::offset_of!(ScreenModePrefs, smp_Control) - 26usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SerialPrefs {
    pub sp_Reserved: [LONG; 3usize],
    pub sp_Unit0Map: ULONG,
    pub sp_BaudRate: ULONG,
    pub sp_InputBuffer: ULONG,
    pub sp_OutputBuffer: ULONG,
    pub sp_InputHandshake: UBYTE,
    pub sp_OutputHandshake: UBYTE,
    pub sp_Parity: UBYTE,
    pub sp_BitsPerChar: UBYTE,
    pub sp_StopBits: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SerialPrefs"][::core::mem::size_of::<SerialPrefs>() - 34usize];
    ["Alignment of SerialPrefs"][::core::mem::align_of::<SerialPrefs>() - 2usize];
    ["Offset of field: SerialPrefs::sp_Reserved"]
        [::core::mem::offset_of!(SerialPrefs, sp_Reserved) - 0usize];
    ["Offset of field: SerialPrefs::sp_Unit0Map"]
        [::core::mem::offset_of!(SerialPrefs, sp_Unit0Map) - 12usize];
    ["Offset of field: SerialPrefs::sp_BaudRate"]
        [::core::mem::offset_of!(SerialPrefs, sp_BaudRate) - 16usize];
    ["Offset of field: SerialPrefs::sp_InputBuffer"]
        [::core::mem::offset_of!(SerialPrefs, sp_InputBuffer) - 20usize];
    ["Offset of field: SerialPrefs::sp_OutputBuffer"]
        [::core::mem::offset_of!(SerialPrefs, sp_OutputBuffer) - 24usize];
    ["Offset of field: SerialPrefs::sp_InputHandshake"]
        [::core::mem::offset_of!(SerialPrefs, sp_InputHandshake) - 28usize];
    ["Offset of field: SerialPrefs::sp_OutputHandshake"]
        [::core::mem::offset_of!(SerialPrefs, sp_OutputHandshake) - 29usize];
    ["Offset of field: SerialPrefs::sp_Parity"]
        [::core::mem::offset_of!(SerialPrefs, sp_Parity) - 30usize];
    ["Offset of field: SerialPrefs::sp_BitsPerChar"]
        [::core::mem::offset_of!(SerialPrefs, sp_BitsPerChar) - 31usize];
    ["Offset of field: SerialPrefs::sp_StopBits"]
        [::core::mem::offset_of!(SerialPrefs, sp_StopBits) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SoundPrefs {
    pub sop_Reserved: [LONG; 4usize],
    pub sop_DisplayQueue: BOOL,
    pub sop_AudioQueue: BOOL,
    pub sop_AudioType: UWORD,
    pub sop_AudioVolume: UWORD,
    pub sop_AudioPeriod: UWORD,
    pub sop_AudioDuration: UWORD,
    pub sop_AudioFileName: [TEXT; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SoundPrefs"][::core::mem::size_of::<SoundPrefs>() - 284usize];
    ["Alignment of SoundPrefs"][::core::mem::align_of::<SoundPrefs>() - 2usize];
    ["Offset of field: SoundPrefs::sop_Reserved"]
        [::core::mem::offset_of!(SoundPrefs, sop_Reserved) - 0usize];
    ["Offset of field: SoundPrefs::sop_DisplayQueue"]
        [::core::mem::offset_of!(SoundPrefs, sop_DisplayQueue) - 16usize];
    ["Offset of field: SoundPrefs::sop_AudioQueue"]
        [::core::mem::offset_of!(SoundPrefs, sop_AudioQueue) - 18usize];
    ["Offset of field: SoundPrefs::sop_AudioType"]
        [::core::mem::offset_of!(SoundPrefs, sop_AudioType) - 20usize];
    ["Offset of field: SoundPrefs::sop_AudioVolume"]
        [::core::mem::offset_of!(SoundPrefs, sop_AudioVolume) - 22usize];
    ["Offset of field: SoundPrefs::sop_AudioPeriod"]
        [::core::mem::offset_of!(SoundPrefs, sop_AudioPeriod) - 24usize];
    ["Offset of field: SoundPrefs::sop_AudioDuration"]
        [::core::mem::offset_of!(SoundPrefs, sop_AudioDuration) - 26usize];
    ["Offset of field: SoundPrefs::sop_AudioFileName"]
        [::core::mem::offset_of!(SoundPrefs, sop_AudioFileName) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct WBPatternPrefs {
    pub wbp_Reserved: [ULONG; 4usize],
    pub wbp_Which: UWORD,
    pub wbp_Flags: UWORD,
    pub wbp_Revision: BYTE,
    pub wbp_Depth: BYTE,
    pub wbp_DataLength: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WBPatternPrefs"][::core::mem::size_of::<WBPatternPrefs>() - 24usize];
    ["Alignment of WBPatternPrefs"][::core::mem::align_of::<WBPatternPrefs>() - 2usize];
    ["Offset of field: WBPatternPrefs::wbp_Reserved"]
        [::core::mem::offset_of!(WBPatternPrefs, wbp_Reserved) - 0usize];
    ["Offset of field: WBPatternPrefs::wbp_Which"]
        [::core::mem::offset_of!(WBPatternPrefs, wbp_Which) - 16usize];
    ["Offset of field: WBPatternPrefs::wbp_Flags"]
        [::core::mem::offset_of!(WBPatternPrefs, wbp_Flags) - 18usize];
    ["Offset of field: WBPatternPrefs::wbp_Revision"]
        [::core::mem::offset_of!(WBPatternPrefs, wbp_Revision) - 20usize];
    ["Offset of field: WBPatternPrefs::wbp_Depth"]
        [::core::mem::offset_of!(WBPatternPrefs, wbp_Depth) - 21usize];
    ["Offset of field: WBPatternPrefs::wbp_DataLength"]
        [::core::mem::offset_of!(WBPatternPrefs, wbp_DataLength) - 22usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct WorkbenchPrefs {
    pub wbp_DefaultStackSize: ULONG,
    pub wbp_TypeRestartTime: ULONG,
    pub wbp_IconPrecision: ULONG,
    pub wbp_EmbossRect: Rectangle,
    pub wbp_Borderless: BOOL,
    pub wbp_MaxNameLength: LONG,
    pub wbp_NewIconsSupport: BOOL,
    pub wbp_ColorIconSupport: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WorkbenchPrefs"][::core::mem::size_of::<WorkbenchPrefs>() - 30usize];
    ["Alignment of WorkbenchPrefs"][::core::mem::align_of::<WorkbenchPrefs>() - 2usize];
    ["Offset of field: WorkbenchPrefs::wbp_DefaultStackSize"]
        [::core::mem::offset_of!(WorkbenchPrefs, wbp_DefaultStackSize) - 0usize];
    ["Offset of field: WorkbenchPrefs::wbp_TypeRestartTime"]
        [::core::mem::offset_of!(WorkbenchPrefs, wbp_TypeRestartTime) - 4usize];
    ["Offset of field: WorkbenchPrefs::wbp_IconPrecision"]
        [::core::mem::offset_of!(WorkbenchPrefs, wbp_IconPrecision) - 8usize];
    ["Offset of field: WorkbenchPrefs::wbp_EmbossRect"]
        [::core::mem::offset_of!(WorkbenchPrefs, wbp_EmbossRect) - 12usize];
    ["Offset of field: WorkbenchPrefs::wbp_Borderless"]
        [::core::mem::offset_of!(WorkbenchPrefs, wbp_Borderless) - 20usize];
    ["Offset of field: WorkbenchPrefs::wbp_MaxNameLength"]
        [::core::mem::offset_of!(WorkbenchPrefs, wbp_MaxNameLength) - 22usize];
    ["Offset of field: WorkbenchPrefs::wbp_NewIconsSupport"]
        [::core::mem::offset_of!(WorkbenchPrefs, wbp_NewIconsSupport) - 26usize];
    ["Offset of field: WorkbenchPrefs::wbp_ColorIconSupport"]
        [::core::mem::offset_of!(WorkbenchPrefs, wbp_ColorIconSupport) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct WorkbenchExtendedPrefs {
    pub wbe_BasicPrefs: WorkbenchPrefs,
    pub wbe_IconMemoryType: ULONG,
    pub wbe_LockPens: BOOL,
    pub wbe_DisableTitleBar: BOOL,
    pub wbe_DisableVolumeGauge: BOOL,
    pub wbe_TitleUpdateDelay: UWORD,
    pub wbe_CopyBufferSize: ULONG,
    pub wbe_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WorkbenchExtendedPrefs"][::core::mem::size_of::<WorkbenchExtendedPrefs>() - 50usize];
    ["Alignment of WorkbenchExtendedPrefs"]
        [::core::mem::align_of::<WorkbenchExtendedPrefs>() - 2usize];
    ["Offset of field: WorkbenchExtendedPrefs::wbe_BasicPrefs"]
        [::core::mem::offset_of!(WorkbenchExtendedPrefs, wbe_BasicPrefs) - 0usize];
    ["Offset of field: WorkbenchExtendedPrefs::wbe_IconMemoryType"]
        [::core::mem::offset_of!(WorkbenchExtendedPrefs, wbe_IconMemoryType) - 30usize];
    ["Offset of field: WorkbenchExtendedPrefs::wbe_LockPens"]
        [::core::mem::offset_of!(WorkbenchExtendedPrefs, wbe_LockPens) - 34usize];
    ["Offset of field: WorkbenchExtendedPrefs::wbe_DisableTitleBar"]
        [::core::mem::offset_of!(WorkbenchExtendedPrefs, wbe_DisableTitleBar) - 36usize];
    ["Offset of field: WorkbenchExtendedPrefs::wbe_DisableVolumeGauge"]
        [::core::mem::offset_of!(WorkbenchExtendedPrefs, wbe_DisableVolumeGauge) - 38usize];
    ["Offset of field: WorkbenchExtendedPrefs::wbe_TitleUpdateDelay"]
        [::core::mem::offset_of!(WorkbenchExtendedPrefs, wbe_TitleUpdateDelay) - 40usize];
    ["Offset of field: WorkbenchExtendedPrefs::wbe_CopyBufferSize"]
        [::core::mem::offset_of!(WorkbenchExtendedPrefs, wbe_CopyBufferSize) - 42usize];
    ["Offset of field: WorkbenchExtendedPrefs::wbe_Flags"]
        [::core::mem::offset_of!(WorkbenchExtendedPrefs, wbe_Flags) - 46usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct WorkbenchHiddenDevicePrefs {
    pub whdp_Name: __IncompleteArrayField<TEXT>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WorkbenchHiddenDevicePrefs"]
        [::core::mem::size_of::<WorkbenchHiddenDevicePrefs>() - 0usize];
    ["Alignment of WorkbenchHiddenDevicePrefs"]
        [::core::mem::align_of::<WorkbenchHiddenDevicePrefs>() - 1usize];
    ["Offset of field: WorkbenchHiddenDevicePrefs::whdp_Name"]
        [::core::mem::offset_of!(WorkbenchHiddenDevicePrefs, whdp_Name) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct WorkbenchTitleFormatPrefs {
    pub wtfp_Format: __IncompleteArrayField<TEXT>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WorkbenchTitleFormatPrefs"]
        [::core::mem::size_of::<WorkbenchTitleFormatPrefs>() - 0usize];
    ["Alignment of WorkbenchTitleFormatPrefs"]
        [::core::mem::align_of::<WorkbenchTitleFormatPrefs>() - 1usize];
    ["Offset of field: WorkbenchTitleFormatPrefs::wtfp_Format"]
        [::core::mem::offset_of!(WorkbenchTitleFormatPrefs, wtfp_Format) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct UIExtPens {
    pub extp_Version: WORD,
    pub extp_DarkPen: LONG,
    pub extp_LightPen: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UIExtPens"][::core::mem::size_of::<UIExtPens>() - 10usize];
    ["Alignment of UIExtPens"][::core::mem::align_of::<UIExtPens>() - 2usize];
    ["Offset of field: UIExtPens::extp_Version"]
        [::core::mem::offset_of!(UIExtPens, extp_Version) - 0usize];
    ["Offset of field: UIExtPens::extp_DarkPen"]
        [::core::mem::offset_of!(UIExtPens, extp_DarkPen) - 2usize];
    ["Offset of field: UIExtPens::extp_LightPen"]
        [::core::mem::offset_of!(UIExtPens, extp_LightPen) - 6usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SpecialPens {
    pub sp_Version: WORD,
    pub sp_DarkPen: LONG,
    pub sp_LightPen: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpecialPens"][::core::mem::size_of::<SpecialPens>() - 10usize];
    ["Alignment of SpecialPens"][::core::mem::align_of::<SpecialPens>() - 2usize];
    ["Offset of field: SpecialPens::sp_Version"]
        [::core::mem::offset_of!(SpecialPens, sp_Version) - 0usize];
    ["Offset of field: SpecialPens::sp_DarkPen"]
        [::core::mem::offset_of!(SpecialPens, sp_DarkPen) - 2usize];
    ["Offset of field: SpecialPens::sp_LightPen"]
        [::core::mem::offset_of!(SpecialPens, sp_LightPen) - 6usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct gpClipRect {
    pub MethodID: ULONG,
    pub gpc_GInfo: *mut GadgetInfo,
    pub gpc_ClipRect: *mut Rectangle,
    pub gpc_Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gpClipRect"][::core::mem::size_of::<gpClipRect>() - 16usize];
    ["Alignment of gpClipRect"][::core::mem::align_of::<gpClipRect>() - 2usize];
    ["Offset of field: gpClipRect::MethodID"]
        [::core::mem::offset_of!(gpClipRect, MethodID) - 0usize];
    ["Offset of field: gpClipRect::gpc_GInfo"]
        [::core::mem::offset_of!(gpClipRect, gpc_GInfo) - 4usize];
    ["Offset of field: gpClipRect::gpc_ClipRect"]
        [::core::mem::offset_of!(gpClipRect, gpc_ClipRect) - 8usize];
    ["Offset of field: gpClipRect::gpc_Flags"]
        [::core::mem::offset_of!(gpClipRect, gpc_Flags) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct UIPrefs {
    pub cap_Semaphore: SignalSemaphore,
    pub cap_PrefsVersion: UWORD,
    pub cap_PrefsSize: UWORD,
    pub cap_BevelType: UBYTE,
    pub cap_LayoutSpacing: UWORD,
    pub cap_3DLook: BOOL,
    pub cap_LabelPen: UWORD,
    pub cap_LabelPlace: UBYTE,
    pub cap_3DLabel: UBYTE,
    pub cap_Reserved1: *mut ULONG,
    pub cap_SimpleRefresh: BOOL,
    pub cap_Pattern: [UBYTE; 256usize],
    pub cap_Reserved2: *mut ULONG,
    pub cap_3DProp: BOOL,
    pub cap_Reserved3: BOOL,
    pub cap_GlyphType: UBYTE,
    pub cap_Reserved4: UBYTE,
    pub cap_FallbackAttr: *mut TextAttr,
    pub cap_LabelAttr: *mut TextAttr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UIPrefs"][::core::mem::size_of::<UIPrefs>() - 340usize];
    ["Alignment of UIPrefs"][::core::mem::align_of::<UIPrefs>() - 2usize];
    ["Offset of field: UIPrefs::cap_Semaphore"]
        [::core::mem::offset_of!(UIPrefs, cap_Semaphore) - 0usize];
    ["Offset of field: UIPrefs::cap_PrefsVersion"]
        [::core::mem::offset_of!(UIPrefs, cap_PrefsVersion) - 46usize];
    ["Offset of field: UIPrefs::cap_PrefsSize"]
        [::core::mem::offset_of!(UIPrefs, cap_PrefsSize) - 48usize];
    ["Offset of field: UIPrefs::cap_BevelType"]
        [::core::mem::offset_of!(UIPrefs, cap_BevelType) - 50usize];
    ["Offset of field: UIPrefs::cap_LayoutSpacing"]
        [::core::mem::offset_of!(UIPrefs, cap_LayoutSpacing) - 52usize];
    ["Offset of field: UIPrefs::cap_3DLook"]
        [::core::mem::offset_of!(UIPrefs, cap_3DLook) - 54usize];
    ["Offset of field: UIPrefs::cap_LabelPen"]
        [::core::mem::offset_of!(UIPrefs, cap_LabelPen) - 56usize];
    ["Offset of field: UIPrefs::cap_LabelPlace"]
        [::core::mem::offset_of!(UIPrefs, cap_LabelPlace) - 58usize];
    ["Offset of field: UIPrefs::cap_3DLabel"]
        [::core::mem::offset_of!(UIPrefs, cap_3DLabel) - 59usize];
    ["Offset of field: UIPrefs::cap_Reserved1"]
        [::core::mem::offset_of!(UIPrefs, cap_Reserved1) - 60usize];
    ["Offset of field: UIPrefs::cap_SimpleRefresh"]
        [::core::mem::offset_of!(UIPrefs, cap_SimpleRefresh) - 64usize];
    ["Offset of field: UIPrefs::cap_Pattern"]
        [::core::mem::offset_of!(UIPrefs, cap_Pattern) - 66usize];
    ["Offset of field: UIPrefs::cap_Reserved2"]
        [::core::mem::offset_of!(UIPrefs, cap_Reserved2) - 322usize];
    ["Offset of field: UIPrefs::cap_3DProp"]
        [::core::mem::offset_of!(UIPrefs, cap_3DProp) - 326usize];
    ["Offset of field: UIPrefs::cap_Reserved3"]
        [::core::mem::offset_of!(UIPrefs, cap_Reserved3) - 328usize];
    ["Offset of field: UIPrefs::cap_GlyphType"]
        [::core::mem::offset_of!(UIPrefs, cap_GlyphType) - 330usize];
    ["Offset of field: UIPrefs::cap_Reserved4"]
        [::core::mem::offset_of!(UIPrefs, cap_Reserved4) - 331usize];
    ["Offset of field: UIPrefs::cap_FallbackAttr"]
        [::core::mem::offset_of!(UIPrefs, cap_FallbackAttr) - 332usize];
    ["Offset of field: UIPrefs::cap_LabelAttr"]
        [::core::mem::offset_of!(UIPrefs, cap_LabelAttr) - 336usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CardHandle {
    pub cah_CardNode: Node,
    pub cah_CardRemoved: *mut Interrupt,
    pub cah_CardInserted: *mut Interrupt,
    pub cah_CardStatus: *mut Interrupt,
    pub cah_CardFlags: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CardHandle"][::core::mem::size_of::<CardHandle>() - 28usize];
    ["Alignment of CardHandle"][::core::mem::align_of::<CardHandle>() - 2usize];
    ["Offset of field: CardHandle::cah_CardNode"]
        [::core::mem::offset_of!(CardHandle, cah_CardNode) - 0usize];
    ["Offset of field: CardHandle::cah_CardRemoved"]
        [::core::mem::offset_of!(CardHandle, cah_CardRemoved) - 14usize];
    ["Offset of field: CardHandle::cah_CardInserted"]
        [::core::mem::offset_of!(CardHandle, cah_CardInserted) - 18usize];
    ["Offset of field: CardHandle::cah_CardStatus"]
        [::core::mem::offset_of!(CardHandle, cah_CardStatus) - 22usize];
    ["Offset of field: CardHandle::cah_CardFlags"]
        [::core::mem::offset_of!(CardHandle, cah_CardFlags) - 26usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DeviceTData {
    pub dtd_DTsize: ULONG,
    pub dtd_DTspeed: ULONG,
    pub dtd_DTtype: UBYTE,
    pub dtd_DTflags: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DeviceTData"][::core::mem::size_of::<DeviceTData>() - 10usize];
    ["Alignment of DeviceTData"][::core::mem::align_of::<DeviceTData>() - 2usize];
    ["Offset of field: DeviceTData::dtd_DTsize"]
        [::core::mem::offset_of!(DeviceTData, dtd_DTsize) - 0usize];
    ["Offset of field: DeviceTData::dtd_DTspeed"]
        [::core::mem::offset_of!(DeviceTData, dtd_DTspeed) - 4usize];
    ["Offset of field: DeviceTData::dtd_DTtype"]
        [::core::mem::offset_of!(DeviceTData, dtd_DTtype) - 8usize];
    ["Offset of field: DeviceTData::dtd_DTflags"]
        [::core::mem::offset_of!(DeviceTData, dtd_DTflags) - 9usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CardMemoryMap {
    pub cmm_CommonMemory: *mut UBYTE,
    pub cmm_AttributeMemory: *mut UBYTE,
    pub cmm_IOMemory: *mut UBYTE,
    pub cmm_CommonMemSize: ULONG,
    pub cmm_AttributeMemSize: ULONG,
    pub cmm_IOMemSize: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CardMemoryMap"][::core::mem::size_of::<CardMemoryMap>() - 24usize];
    ["Alignment of CardMemoryMap"][::core::mem::align_of::<CardMemoryMap>() - 2usize];
    ["Offset of field: CardMemoryMap::cmm_CommonMemory"]
        [::core::mem::offset_of!(CardMemoryMap, cmm_CommonMemory) - 0usize];
    ["Offset of field: CardMemoryMap::cmm_AttributeMemory"]
        [::core::mem::offset_of!(CardMemoryMap, cmm_AttributeMemory) - 4usize];
    ["Offset of field: CardMemoryMap::cmm_IOMemory"]
        [::core::mem::offset_of!(CardMemoryMap, cmm_IOMemory) - 8usize];
    ["Offset of field: CardMemoryMap::cmm_CommonMemSize"]
        [::core::mem::offset_of!(CardMemoryMap, cmm_CommonMemSize) - 12usize];
    ["Offset of field: CardMemoryMap::cmm_AttributeMemSize"]
        [::core::mem::offset_of!(CardMemoryMap, cmm_AttributeMemSize) - 16usize];
    ["Offset of field: CardMemoryMap::cmm_IOMemSize"]
        [::core::mem::offset_of!(CardMemoryMap, cmm_IOMemSize) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TP_AmigaXIP {
    pub TPL_CODE: UBYTE,
    pub TPL_LINK: UBYTE,
    pub TP_XIPLOC: [UBYTE; 4usize],
    pub TP_XIPFLAGS: UBYTE,
    pub TP_XIPRESRV: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TP_AmigaXIP"][::core::mem::size_of::<TP_AmigaXIP>() - 8usize];
    ["Alignment of TP_AmigaXIP"][::core::mem::align_of::<TP_AmigaXIP>() - 1usize];
    ["Offset of field: TP_AmigaXIP::TPL_CODE"]
        [::core::mem::offset_of!(TP_AmigaXIP, TPL_CODE) - 0usize];
    ["Offset of field: TP_AmigaXIP::TPL_LINK"]
        [::core::mem::offset_of!(TP_AmigaXIP, TPL_LINK) - 1usize];
    ["Offset of field: TP_AmigaXIP::TP_XIPLOC"]
        [::core::mem::offset_of!(TP_AmigaXIP, TP_XIPLOC) - 2usize];
    ["Offset of field: TP_AmigaXIP::TP_XIPFLAGS"]
        [::core::mem::offset_of!(TP_AmigaXIP, TP_XIPFLAGS) - 6usize];
    ["Offset of field: TP_AmigaXIP::TP_XIPRESRV"]
        [::core::mem::offset_of!(TP_AmigaXIP, TP_XIPRESRV) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DiscResourceUnit {
    pub dru_Message: Message,
    pub dru_DiscBlock: Interrupt,
    pub dru_DiscSync: Interrupt,
    pub dru_Index: Interrupt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DiscResourceUnit"][::core::mem::size_of::<DiscResourceUnit>() - 86usize];
    ["Alignment of DiscResourceUnit"][::core::mem::align_of::<DiscResourceUnit>() - 2usize];
    ["Offset of field: DiscResourceUnit::dru_Message"]
        [::core::mem::offset_of!(DiscResourceUnit, dru_Message) - 0usize];
    ["Offset of field: DiscResourceUnit::dru_DiscBlock"]
        [::core::mem::offset_of!(DiscResourceUnit, dru_DiscBlock) - 20usize];
    ["Offset of field: DiscResourceUnit::dru_DiscSync"]
        [::core::mem::offset_of!(DiscResourceUnit, dru_DiscSync) - 42usize];
    ["Offset of field: DiscResourceUnit::dru_Index"]
        [::core::mem::offset_of!(DiscResourceUnit, dru_Index) - 64usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DiscResource {
    pub dr_Library: Library,
    pub dr_Current: *mut DiscResourceUnit,
    pub dr_Flags: UBYTE,
    pub dr_UnitInit: UBYTE,
    pub dr_SysLib: *mut Library,
    pub dr_CiaResource: *mut Library,
    pub dr_UnitID: [ULONG; 4usize],
    pub dr_Waiting: List,
    pub dr_DiscBlock: Interrupt,
    pub dr_DiscSync: Interrupt,
    pub dr_Index: Interrupt,
    pub dr_CurrTask: *mut Task,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DiscResource"][::core::mem::size_of::<DiscResource>() - 148usize];
    ["Alignment of DiscResource"][::core::mem::align_of::<DiscResource>() - 2usize];
    ["Offset of field: DiscResource::dr_Library"]
        [::core::mem::offset_of!(DiscResource, dr_Library) - 0usize];
    ["Offset of field: DiscResource::dr_Current"]
        [::core::mem::offset_of!(DiscResource, dr_Current) - 34usize];
    ["Offset of field: DiscResource::dr_Flags"]
        [::core::mem::offset_of!(DiscResource, dr_Flags) - 38usize];
    ["Offset of field: DiscResource::dr_UnitInit"]
        [::core::mem::offset_of!(DiscResource, dr_UnitInit) - 39usize];
    ["Offset of field: DiscResource::dr_SysLib"]
        [::core::mem::offset_of!(DiscResource, dr_SysLib) - 40usize];
    ["Offset of field: DiscResource::dr_CiaResource"]
        [::core::mem::offset_of!(DiscResource, dr_CiaResource) - 44usize];
    ["Offset of field: DiscResource::dr_UnitID"]
        [::core::mem::offset_of!(DiscResource, dr_UnitID) - 48usize];
    ["Offset of field: DiscResource::dr_Waiting"]
        [::core::mem::offset_of!(DiscResource, dr_Waiting) - 64usize];
    ["Offset of field: DiscResource::dr_DiscBlock"]
        [::core::mem::offset_of!(DiscResource, dr_DiscBlock) - 78usize];
    ["Offset of field: DiscResource::dr_DiscSync"]
        [::core::mem::offset_of!(DiscResource, dr_DiscSync) - 100usize];
    ["Offset of field: DiscResource::dr_Index"]
        [::core::mem::offset_of!(DiscResource, dr_Index) - 122usize];
    ["Offset of field: DiscResource::dr_CurrTask"]
        [::core::mem::offset_of!(DiscResource, dr_CurrTask) - 144usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FileSysResource {
    pub fsr_Node: Node,
    pub fsr_Creator: *mut ::core::ffi::c_char,
    pub fsr_FileSysEntries: List,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileSysResource"][::core::mem::size_of::<FileSysResource>() - 32usize];
    ["Alignment of FileSysResource"][::core::mem::align_of::<FileSysResource>() - 2usize];
    ["Offset of field: FileSysResource::fsr_Node"]
        [::core::mem::offset_of!(FileSysResource, fsr_Node) - 0usize];
    ["Offset of field: FileSysResource::fsr_Creator"]
        [::core::mem::offset_of!(FileSysResource, fsr_Creator) - 14usize];
    ["Offset of field: FileSysResource::fsr_FileSysEntries"]
        [::core::mem::offset_of!(FileSysResource, fsr_FileSysEntries) - 18usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FileSysEntry {
    pub fse_Node: Node,
    pub fse_DosType: ULONG,
    pub fse_Version: ULONG,
    pub fse_PatchFlags: ULONG,
    pub fse_Type: ULONG,
    pub fse_Task: CPTR,
    pub fse_Lock: BPTR,
    pub fse_Handler: BSTR,
    pub fse_StackSize: ULONG,
    pub fse_Priority: LONG,
    pub fse_Startup: BPTR,
    pub fse_SegList: BPTR,
    pub fse_GlobalVec: BPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileSysEntry"][::core::mem::size_of::<FileSysEntry>() - 62usize];
    ["Alignment of FileSysEntry"][::core::mem::align_of::<FileSysEntry>() - 2usize];
    ["Offset of field: FileSysEntry::fse_Node"]
        [::core::mem::offset_of!(FileSysEntry, fse_Node) - 0usize];
    ["Offset of field: FileSysEntry::fse_DosType"]
        [::core::mem::offset_of!(FileSysEntry, fse_DosType) - 14usize];
    ["Offset of field: FileSysEntry::fse_Version"]
        [::core::mem::offset_of!(FileSysEntry, fse_Version) - 18usize];
    ["Offset of field: FileSysEntry::fse_PatchFlags"]
        [::core::mem::offset_of!(FileSysEntry, fse_PatchFlags) - 22usize];
    ["Offset of field: FileSysEntry::fse_Type"]
        [::core::mem::offset_of!(FileSysEntry, fse_Type) - 26usize];
    ["Offset of field: FileSysEntry::fse_Task"]
        [::core::mem::offset_of!(FileSysEntry, fse_Task) - 30usize];
    ["Offset of field: FileSysEntry::fse_Lock"]
        [::core::mem::offset_of!(FileSysEntry, fse_Lock) - 34usize];
    ["Offset of field: FileSysEntry::fse_Handler"]
        [::core::mem::offset_of!(FileSysEntry, fse_Handler) - 38usize];
    ["Offset of field: FileSysEntry::fse_StackSize"]
        [::core::mem::offset_of!(FileSysEntry, fse_StackSize) - 42usize];
    ["Offset of field: FileSysEntry::fse_Priority"]
        [::core::mem::offset_of!(FileSysEntry, fse_Priority) - 46usize];
    ["Offset of field: FileSysEntry::fse_Startup"]
        [::core::mem::offset_of!(FileSysEntry, fse_Startup) - 50usize];
    ["Offset of field: FileSysEntry::fse_SegList"]
        [::core::mem::offset_of!(FileSysEntry, fse_SegList) - 54usize];
    ["Offset of field: FileSysEntry::fse_GlobalVec"]
        [::core::mem::offset_of!(FileSysEntry, fse_GlobalVec) - 58usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IoBuff {
    pub iobNode: RexxRsrc,
    pub iobRpt: APTR,
    pub iobRct: LONG,
    pub iobDFH: LONG,
    pub iobLock: APTR,
    pub iobBct: LONG,
    pub iobArea: [BYTE; 204usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IoBuff"][::core::mem::size_of::<IoBuff>() - 256usize];
    ["Alignment of IoBuff"][::core::mem::align_of::<IoBuff>() - 2usize];
    ["Offset of field: IoBuff::iobNode"][::core::mem::offset_of!(IoBuff, iobNode) - 0usize];
    ["Offset of field: IoBuff::iobRpt"][::core::mem::offset_of!(IoBuff, iobRpt) - 32usize];
    ["Offset of field: IoBuff::iobRct"][::core::mem::offset_of!(IoBuff, iobRct) - 36usize];
    ["Offset of field: IoBuff::iobDFH"][::core::mem::offset_of!(IoBuff, iobDFH) - 40usize];
    ["Offset of field: IoBuff::iobLock"][::core::mem::offset_of!(IoBuff, iobLock) - 44usize];
    ["Offset of field: IoBuff::iobBct"][::core::mem::offset_of!(IoBuff, iobBct) - 48usize];
    ["Offset of field: IoBuff::iobArea"][::core::mem::offset_of!(IoBuff, iobArea) - 52usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RexxMsgPort {
    pub rmp_Node: RexxRsrc,
    pub rmp_Port: MsgPort,
    pub rmp_ReplyList: List,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RexxMsgPort"][::core::mem::size_of::<RexxMsgPort>() - 80usize];
    ["Alignment of RexxMsgPort"][::core::mem::align_of::<RexxMsgPort>() - 2usize];
    ["Offset of field: RexxMsgPort::rmp_Node"]
        [::core::mem::offset_of!(RexxMsgPort, rmp_Node) - 0usize];
    ["Offset of field: RexxMsgPort::rmp_Port"]
        [::core::mem::offset_of!(RexxMsgPort, rmp_Port) - 32usize];
    ["Offset of field: RexxMsgPort::rmp_ReplyList"]
        [::core::mem::offset_of!(RexxMsgPort, rmp_ReplyList) - 66usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClockData {
    pub sec: UWORD,
    pub min: UWORD,
    pub hour: UWORD,
    pub mday: UWORD,
    pub month: UWORD,
    pub year: UWORD,
    pub wday: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ClockData"][::core::mem::size_of::<ClockData>() - 14usize];
    ["Alignment of ClockData"][::core::mem::align_of::<ClockData>() - 2usize];
    ["Offset of field: ClockData::sec"][::core::mem::offset_of!(ClockData, sec) - 0usize];
    ["Offset of field: ClockData::min"][::core::mem::offset_of!(ClockData, min) - 2usize];
    ["Offset of field: ClockData::hour"][::core::mem::offset_of!(ClockData, hour) - 4usize];
    ["Offset of field: ClockData::mday"][::core::mem::offset_of!(ClockData, mday) - 6usize];
    ["Offset of field: ClockData::month"][::core::mem::offset_of!(ClockData, month) - 8usize];
    ["Offset of field: ClockData::year"][::core::mem::offset_of!(ClockData, year) - 10usize];
    ["Offset of field: ClockData::wday"][::core::mem::offset_of!(ClockData, wday) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct NamedObject {
    pub no_Object: APTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NamedObject"][::core::mem::size_of::<NamedObject>() - 4usize];
    ["Alignment of NamedObject"][::core::mem::align_of::<NamedObject>() - 2usize];
    ["Offset of field: NamedObject::no_Object"]
        [::core::mem::offset_of!(NamedObject, no_Object) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UtilityBase {
    pub ub_LibNode: Library,
    pub ub_Language: UBYTE,
    pub ub_Reserved: UBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UtilityBase"][::core::mem::size_of::<UtilityBase>() - 36usize];
    ["Alignment of UtilityBase"][::core::mem::align_of::<UtilityBase>() - 2usize];
    ["Offset of field: UtilityBase::ub_LibNode"]
        [::core::mem::offset_of!(UtilityBase, ub_LibNode) - 0usize];
    ["Offset of field: UtilityBase::ub_Language"]
        [::core::mem::offset_of!(UtilityBase, ub_Language) - 34usize];
    ["Offset of field: UtilityBase::ub_Reserved"]
        [::core::mem::offset_of!(UtilityBase, ub_Reserved) - 35usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IconIdentifyMsg {
    pub iim_SysBase: *mut Library,
    pub iim_DOSBase: *mut Library,
    pub iim_UtilityBase: *mut Library,
    pub iim_IconBase: *mut Library,
    pub iim_FileLock: BPTR,
    pub iim_ParentLock: BPTR,
    pub iim_FIB: *mut FileInfoBlock,
    pub iim_FileHandle: BPTR,
    pub iim_Tags: *mut TagItem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IconIdentifyMsg"][::core::mem::size_of::<IconIdentifyMsg>() - 36usize];
    ["Alignment of IconIdentifyMsg"][::core::mem::align_of::<IconIdentifyMsg>() - 2usize];
    ["Offset of field: IconIdentifyMsg::iim_SysBase"]
        [::core::mem::offset_of!(IconIdentifyMsg, iim_SysBase) - 0usize];
    ["Offset of field: IconIdentifyMsg::iim_DOSBase"]
        [::core::mem::offset_of!(IconIdentifyMsg, iim_DOSBase) - 4usize];
    ["Offset of field: IconIdentifyMsg::iim_UtilityBase"]
        [::core::mem::offset_of!(IconIdentifyMsg, iim_UtilityBase) - 8usize];
    ["Offset of field: IconIdentifyMsg::iim_IconBase"]
        [::core::mem::offset_of!(IconIdentifyMsg, iim_IconBase) - 12usize];
    ["Offset of field: IconIdentifyMsg::iim_FileLock"]
        [::core::mem::offset_of!(IconIdentifyMsg, iim_FileLock) - 16usize];
    ["Offset of field: IconIdentifyMsg::iim_ParentLock"]
        [::core::mem::offset_of!(IconIdentifyMsg, iim_ParentLock) - 20usize];
    ["Offset of field: IconIdentifyMsg::iim_FIB"]
        [::core::mem::offset_of!(IconIdentifyMsg, iim_FIB) - 24usize];
    ["Offset of field: IconIdentifyMsg::iim_FileHandle"]
        [::core::mem::offset_of!(IconIdentifyMsg, iim_FileHandle) - 28usize];
    ["Offset of field: IconIdentifyMsg::iim_Tags"]
        [::core::mem::offset_of!(IconIdentifyMsg, iim_Tags) - 32usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct OldDrawerData {
    pub dd_NewWindow: NewWindow,
    pub dd_CurrentX: LONG,
    pub dd_CurrentY: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OldDrawerData"][::core::mem::size_of::<OldDrawerData>() - 56usize];
    ["Alignment of OldDrawerData"][::core::mem::align_of::<OldDrawerData>() - 2usize];
    ["Offset of field: OldDrawerData::dd_NewWindow"]
        [::core::mem::offset_of!(OldDrawerData, dd_NewWindow) - 0usize];
    ["Offset of field: OldDrawerData::dd_CurrentX"]
        [::core::mem::offset_of!(OldDrawerData, dd_CurrentX) - 48usize];
    ["Offset of field: OldDrawerData::dd_CurrentY"]
        [::core::mem::offset_of!(OldDrawerData, dd_CurrentY) - 52usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DrawerData {
    pub dd_NewWindow: NewWindow,
    pub dd_CurrentX: LONG,
    pub dd_CurrentY: LONG,
    pub dd_Flags: ULONG,
    pub dd_ViewModes: UWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DrawerData"][::core::mem::size_of::<DrawerData>() - 62usize];
    ["Alignment of DrawerData"][::core::mem::align_of::<DrawerData>() - 2usize];
    ["Offset of field: DrawerData::dd_NewWindow"]
        [::core::mem::offset_of!(DrawerData, dd_NewWindow) - 0usize];
    ["Offset of field: DrawerData::dd_CurrentX"]
        [::core::mem::offset_of!(DrawerData, dd_CurrentX) - 48usize];
    ["Offset of field: DrawerData::dd_CurrentY"]
        [::core::mem::offset_of!(DrawerData, dd_CurrentY) - 52usize];
    ["Offset of field: DrawerData::dd_Flags"]
        [::core::mem::offset_of!(DrawerData, dd_Flags) - 56usize];
    ["Offset of field: DrawerData::dd_ViewModes"]
        [::core::mem::offset_of!(DrawerData, dd_ViewModes) - 60usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DiskObject {
    pub do_Magic: UWORD,
    pub do_Version: UWORD,
    pub do_Gadget: Gadget,
    pub do_Type: UBYTE,
    pub do_DefaultTool: STRPTR,
    pub do_ToolTypes: *mut STRPTR,
    pub do_CurrentX: LONG,
    pub do_CurrentY: LONG,
    pub do_DrawerData: *mut DrawerData,
    pub do_ToolWindow: STRPTR,
    pub do_StackSize: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DiskObject"][::core::mem::size_of::<DiskObject>() - 78usize];
    ["Alignment of DiskObject"][::core::mem::align_of::<DiskObject>() - 2usize];
    ["Offset of field: DiskObject::do_Magic"]
        [::core::mem::offset_of!(DiskObject, do_Magic) - 0usize];
    ["Offset of field: DiskObject::do_Version"]
        [::core::mem::offset_of!(DiskObject, do_Version) - 2usize];
    ["Offset of field: DiskObject::do_Gadget"]
        [::core::mem::offset_of!(DiskObject, do_Gadget) - 4usize];
    ["Offset of field: DiskObject::do_Type"]
        [::core::mem::offset_of!(DiskObject, do_Type) - 48usize];
    ["Offset of field: DiskObject::do_DefaultTool"]
        [::core::mem::offset_of!(DiskObject, do_DefaultTool) - 50usize];
    ["Offset of field: DiskObject::do_ToolTypes"]
        [::core::mem::offset_of!(DiskObject, do_ToolTypes) - 54usize];
    ["Offset of field: DiskObject::do_CurrentX"]
        [::core::mem::offset_of!(DiskObject, do_CurrentX) - 58usize];
    ["Offset of field: DiskObject::do_CurrentY"]
        [::core::mem::offset_of!(DiskObject, do_CurrentY) - 62usize];
    ["Offset of field: DiskObject::do_DrawerData"]
        [::core::mem::offset_of!(DiskObject, do_DrawerData) - 66usize];
    ["Offset of field: DiskObject::do_ToolWindow"]
        [::core::mem::offset_of!(DiskObject, do_ToolWindow) - 70usize];
    ["Offset of field: DiskObject::do_StackSize"]
        [::core::mem::offset_of!(DiskObject, do_StackSize) - 74usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FreeList {
    pub fl_NumFree: WORD,
    pub fl_MemList: List,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FreeList"][::core::mem::size_of::<FreeList>() - 16usize];
    ["Alignment of FreeList"][::core::mem::align_of::<FreeList>() - 2usize];
    ["Offset of field: FreeList::fl_NumFree"]
        [::core::mem::offset_of!(FreeList, fl_NumFree) - 0usize];
    ["Offset of field: FreeList::fl_MemList"]
        [::core::mem::offset_of!(FreeList, fl_MemList) - 2usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AppMessage {
    pub am_Message: Message,
    pub am_Type: UWORD,
    pub am_UserData: ULONG,
    pub am_ID: ULONG,
    pub am_NumArgs: LONG,
    pub am_ArgList: *mut WBArg,
    pub am_Version: UWORD,
    pub am_Class: UWORD,
    pub am_MouseX: WORD,
    pub am_MouseY: WORD,
    pub am_Seconds: ULONG,
    pub am_Micros: ULONG,
    pub am_Reserved: [ULONG; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AppMessage"][::core::mem::size_of::<AppMessage>() - 86usize];
    ["Alignment of AppMessage"][::core::mem::align_of::<AppMessage>() - 2usize];
    ["Offset of field: AppMessage::am_Message"]
        [::core::mem::offset_of!(AppMessage, am_Message) - 0usize];
    ["Offset of field: AppMessage::am_Type"]
        [::core::mem::offset_of!(AppMessage, am_Type) - 20usize];
    ["Offset of field: AppMessage::am_UserData"]
        [::core::mem::offset_of!(AppMessage, am_UserData) - 22usize];
    ["Offset of field: AppMessage::am_ID"][::core::mem::offset_of!(AppMessage, am_ID) - 26usize];
    ["Offset of field: AppMessage::am_NumArgs"]
        [::core::mem::offset_of!(AppMessage, am_NumArgs) - 30usize];
    ["Offset of field: AppMessage::am_ArgList"]
        [::core::mem::offset_of!(AppMessage, am_ArgList) - 34usize];
    ["Offset of field: AppMessage::am_Version"]
        [::core::mem::offset_of!(AppMessage, am_Version) - 38usize];
    ["Offset of field: AppMessage::am_Class"]
        [::core::mem::offset_of!(AppMessage, am_Class) - 40usize];
    ["Offset of field: AppMessage::am_MouseX"]
        [::core::mem::offset_of!(AppMessage, am_MouseX) - 42usize];
    ["Offset of field: AppMessage::am_MouseY"]
        [::core::mem::offset_of!(AppMessage, am_MouseY) - 44usize];
    ["Offset of field: AppMessage::am_Seconds"]
        [::core::mem::offset_of!(AppMessage, am_Seconds) - 46usize];
    ["Offset of field: AppMessage::am_Micros"]
        [::core::mem::offset_of!(AppMessage, am_Micros) - 50usize];
    ["Offset of field: AppMessage::am_Reserved"]
        [::core::mem::offset_of!(AppMessage, am_Reserved) - 54usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AppWindow {
    pub aw_PRIVATE: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AppWindow"][::core::mem::size_of::<AppWindow>() - 4usize];
    ["Alignment of AppWindow"][::core::mem::align_of::<AppWindow>() - 2usize];
    ["Offset of field: AppWindow::aw_PRIVATE"]
        [::core::mem::offset_of!(AppWindow, aw_PRIVATE) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AppWindowDropZone {
    pub awdz_PRIVATE: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AppWindowDropZone"][::core::mem::size_of::<AppWindowDropZone>() - 4usize];
    ["Alignment of AppWindowDropZone"][::core::mem::align_of::<AppWindowDropZone>() - 2usize];
    ["Offset of field: AppWindowDropZone::awdz_PRIVATE"]
        [::core::mem::offset_of!(AppWindowDropZone, awdz_PRIVATE) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AppIcon {
    pub ai_PRIVATE: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AppIcon"][::core::mem::size_of::<AppIcon>() - 4usize];
    ["Alignment of AppIcon"][::core::mem::align_of::<AppIcon>() - 2usize];
    ["Offset of field: AppIcon::ai_PRIVATE"][::core::mem::offset_of!(AppIcon, ai_PRIVATE) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AppMenuItem {
    pub ami_PRIVATE: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AppMenuItem"][::core::mem::size_of::<AppMenuItem>() - 4usize];
    ["Alignment of AppMenuItem"][::core::mem::align_of::<AppMenuItem>() - 2usize];
    ["Offset of field: AppMenuItem::ami_PRIVATE"]
        [::core::mem::offset_of!(AppMenuItem, ami_PRIVATE) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AppMenu {
    pub am_PRIVATE: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AppMenu"][::core::mem::size_of::<AppMenu>() - 4usize];
    ["Alignment of AppMenu"][::core::mem::align_of::<AppMenu>() - 2usize];
    ["Offset of field: AppMenu::am_PRIVATE"][::core::mem::offset_of!(AppMenu, am_PRIVATE) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct SetupCleanupHookMsg {
    pub schm_Length: ULONG,
    pub schm_State: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SetupCleanupHookMsg"][::core::mem::size_of::<SetupCleanupHookMsg>() - 8usize];
    ["Alignment of SetupCleanupHookMsg"][::core::mem::align_of::<SetupCleanupHookMsg>() - 2usize];
    ["Offset of field: SetupCleanupHookMsg::schm_Length"]
        [::core::mem::offset_of!(SetupCleanupHookMsg, schm_Length) - 0usize];
    ["Offset of field: SetupCleanupHookMsg::schm_State"]
        [::core::mem::offset_of!(SetupCleanupHookMsg, schm_State) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AppIconRenderMsg {
    pub arm_RastPort: *mut RastPort,
    pub arm_Icon: *mut DiskObject,
    pub arm_Label: STRPTR,
    pub arm_Tags: *mut TagItem,
    pub arm_Left: WORD,
    pub arm_Top: WORD,
    pub arm_Width: WORD,
    pub arm_Height: WORD,
    pub arm_State: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AppIconRenderMsg"][::core::mem::size_of::<AppIconRenderMsg>() - 28usize];
    ["Alignment of AppIconRenderMsg"][::core::mem::align_of::<AppIconRenderMsg>() - 2usize];
    ["Offset of field: AppIconRenderMsg::arm_RastPort"]
        [::core::mem::offset_of!(AppIconRenderMsg, arm_RastPort) - 0usize];
    ["Offset of field: AppIconRenderMsg::arm_Icon"]
        [::core::mem::offset_of!(AppIconRenderMsg, arm_Icon) - 4usize];
    ["Offset of field: AppIconRenderMsg::arm_Label"]
        [::core::mem::offset_of!(AppIconRenderMsg, arm_Label) - 8usize];
    ["Offset of field: AppIconRenderMsg::arm_Tags"]
        [::core::mem::offset_of!(AppIconRenderMsg, arm_Tags) - 12usize];
    ["Offset of field: AppIconRenderMsg::arm_Left"]
        [::core::mem::offset_of!(AppIconRenderMsg, arm_Left) - 16usize];
    ["Offset of field: AppIconRenderMsg::arm_Top"]
        [::core::mem::offset_of!(AppIconRenderMsg, arm_Top) - 18usize];
    ["Offset of field: AppIconRenderMsg::arm_Width"]
        [::core::mem::offset_of!(AppIconRenderMsg, arm_Width) - 20usize];
    ["Offset of field: AppIconRenderMsg::arm_Height"]
        [::core::mem::offset_of!(AppIconRenderMsg, arm_Height) - 22usize];
    ["Offset of field: AppIconRenderMsg::arm_State"]
        [::core::mem::offset_of!(AppIconRenderMsg, arm_State) - 24usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AppWindowDropZoneMsg {
    pub adzm_RastPort: *mut RastPort,
    pub adzm_DropZoneBox: IBox,
    pub adzm_ID: ULONG,
    pub adzm_UserData: ULONG,
    pub adzm_Action: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AppWindowDropZoneMsg"][::core::mem::size_of::<AppWindowDropZoneMsg>() - 24usize];
    ["Alignment of AppWindowDropZoneMsg"][::core::mem::align_of::<AppWindowDropZoneMsg>() - 2usize];
    ["Offset of field: AppWindowDropZoneMsg::adzm_RastPort"]
        [::core::mem::offset_of!(AppWindowDropZoneMsg, adzm_RastPort) - 0usize];
    ["Offset of field: AppWindowDropZoneMsg::adzm_DropZoneBox"]
        [::core::mem::offset_of!(AppWindowDropZoneMsg, adzm_DropZoneBox) - 4usize];
    ["Offset of field: AppWindowDropZoneMsg::adzm_ID"]
        [::core::mem::offset_of!(AppWindowDropZoneMsg, adzm_ID) - 12usize];
    ["Offset of field: AppWindowDropZoneMsg::adzm_UserData"]
        [::core::mem::offset_of!(AppWindowDropZoneMsg, adzm_UserData) - 16usize];
    ["Offset of field: AppWindowDropZoneMsg::adzm_Action"]
        [::core::mem::offset_of!(AppWindowDropZoneMsg, adzm_Action) - 20usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IconSelectMsg {
    pub ism_Length: ULONG,
    pub ism_Drawer: BPTR,
    pub ism_Name: STRPTR,
    pub ism_Type: UWORD,
    pub ism_Selected: BOOL,
    pub ism_Tags: *mut TagItem,
    pub ism_DrawerWindow: *mut Window,
    pub ism_ParentWindow: *mut Window,
    pub ism_Left: WORD,
    pub ism_Top: WORD,
    pub ism_Width: WORD,
    pub ism_Height: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IconSelectMsg"][::core::mem::size_of::<IconSelectMsg>() - 36usize];
    ["Alignment of IconSelectMsg"][::core::mem::align_of::<IconSelectMsg>() - 2usize];
    ["Offset of field: IconSelectMsg::ism_Length"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Length) - 0usize];
    ["Offset of field: IconSelectMsg::ism_Drawer"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Drawer) - 4usize];
    ["Offset of field: IconSelectMsg::ism_Name"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Name) - 8usize];
    ["Offset of field: IconSelectMsg::ism_Type"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Type) - 12usize];
    ["Offset of field: IconSelectMsg::ism_Selected"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Selected) - 14usize];
    ["Offset of field: IconSelectMsg::ism_Tags"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Tags) - 16usize];
    ["Offset of field: IconSelectMsg::ism_DrawerWindow"]
        [::core::mem::offset_of!(IconSelectMsg, ism_DrawerWindow) - 20usize];
    ["Offset of field: IconSelectMsg::ism_ParentWindow"]
        [::core::mem::offset_of!(IconSelectMsg, ism_ParentWindow) - 24usize];
    ["Offset of field: IconSelectMsg::ism_Left"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Left) - 28usize];
    ["Offset of field: IconSelectMsg::ism_Top"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Top) - 30usize];
    ["Offset of field: IconSelectMsg::ism_Width"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Width) - 32usize];
    ["Offset of field: IconSelectMsg::ism_Height"]
        [::core::mem::offset_of!(IconSelectMsg, ism_Height) - 34usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CopyBeginMsg {
    pub cbm_Length: ULONG,
    pub cbm_Action: LONG,
    pub cbm_SourceDrawer: BPTR,
    pub cbm_DestinationDrawer: BPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CopyBeginMsg"][::core::mem::size_of::<CopyBeginMsg>() - 16usize];
    ["Alignment of CopyBeginMsg"][::core::mem::align_of::<CopyBeginMsg>() - 2usize];
    ["Offset of field: CopyBeginMsg::cbm_Length"]
        [::core::mem::offset_of!(CopyBeginMsg, cbm_Length) - 0usize];
    ["Offset of field: CopyBeginMsg::cbm_Action"]
        [::core::mem::offset_of!(CopyBeginMsg, cbm_Action) - 4usize];
    ["Offset of field: CopyBeginMsg::cbm_SourceDrawer"]
        [::core::mem::offset_of!(CopyBeginMsg, cbm_SourceDrawer) - 8usize];
    ["Offset of field: CopyBeginMsg::cbm_DestinationDrawer"]
        [::core::mem::offset_of!(CopyBeginMsg, cbm_DestinationDrawer) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CopyDataMsg {
    pub cdm_Length: ULONG,
    pub cdm_Action: LONG,
    pub cdm_SourceLock: BPTR,
    pub cdm_SourceName: STRPTR,
    pub cdm_DestinationLock: BPTR,
    pub cdm_DestinationName: STRPTR,
    pub cdm_DestinationX: LONG,
    pub cdm_DestinationY: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CopyDataMsg"][::core::mem::size_of::<CopyDataMsg>() - 32usize];
    ["Alignment of CopyDataMsg"][::core::mem::align_of::<CopyDataMsg>() - 2usize];
    ["Offset of field: CopyDataMsg::cdm_Length"]
        [::core::mem::offset_of!(CopyDataMsg, cdm_Length) - 0usize];
    ["Offset of field: CopyDataMsg::cdm_Action"]
        [::core::mem::offset_of!(CopyDataMsg, cdm_Action) - 4usize];
    ["Offset of field: CopyDataMsg::cdm_SourceLock"]
        [::core::mem::offset_of!(CopyDataMsg, cdm_SourceLock) - 8usize];
    ["Offset of field: CopyDataMsg::cdm_SourceName"]
        [::core::mem::offset_of!(CopyDataMsg, cdm_SourceName) - 12usize];
    ["Offset of field: CopyDataMsg::cdm_DestinationLock"]
        [::core::mem::offset_of!(CopyDataMsg, cdm_DestinationLock) - 16usize];
    ["Offset of field: CopyDataMsg::cdm_DestinationName"]
        [::core::mem::offset_of!(CopyDataMsg, cdm_DestinationName) - 20usize];
    ["Offset of field: CopyDataMsg::cdm_DestinationX"]
        [::core::mem::offset_of!(CopyDataMsg, cdm_DestinationX) - 24usize];
    ["Offset of field: CopyDataMsg::cdm_DestinationY"]
        [::core::mem::offset_of!(CopyDataMsg, cdm_DestinationY) - 28usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct CopyEndMsg {
    pub cem_Length: ULONG,
    pub cem_Action: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CopyEndMsg"][::core::mem::size_of::<CopyEndMsg>() - 8usize];
    ["Alignment of CopyEndMsg"][::core::mem::align_of::<CopyEndMsg>() - 2usize];
    ["Offset of field: CopyEndMsg::cem_Length"]
        [::core::mem::offset_of!(CopyEndMsg, cem_Length) - 0usize];
    ["Offset of field: CopyEndMsg::cem_Action"]
        [::core::mem::offset_of!(CopyEndMsg, cem_Action) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DeleteBeginMsg {
    pub dbm_Length: ULONG,
    pub dbm_Action: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DeleteBeginMsg"][::core::mem::size_of::<DeleteBeginMsg>() - 8usize];
    ["Alignment of DeleteBeginMsg"][::core::mem::align_of::<DeleteBeginMsg>() - 2usize];
    ["Offset of field: DeleteBeginMsg::dbm_Length"]
        [::core::mem::offset_of!(DeleteBeginMsg, dbm_Length) - 0usize];
    ["Offset of field: DeleteBeginMsg::dbm_Action"]
        [::core::mem::offset_of!(DeleteBeginMsg, dbm_Action) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DeleteDataMsg {
    pub ddm_Length: ULONG,
    pub ddm_Action: LONG,
    pub ddm_Lock: BPTR,
    pub ddm_Name: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DeleteDataMsg"][::core::mem::size_of::<DeleteDataMsg>() - 16usize];
    ["Alignment of DeleteDataMsg"][::core::mem::align_of::<DeleteDataMsg>() - 2usize];
    ["Offset of field: DeleteDataMsg::ddm_Length"]
        [::core::mem::offset_of!(DeleteDataMsg, ddm_Length) - 0usize];
    ["Offset of field: DeleteDataMsg::ddm_Action"]
        [::core::mem::offset_of!(DeleteDataMsg, ddm_Action) - 4usize];
    ["Offset of field: DeleteDataMsg::ddm_Lock"]
        [::core::mem::offset_of!(DeleteDataMsg, ddm_Lock) - 8usize];
    ["Offset of field: DeleteDataMsg::ddm_Name"]
        [::core::mem::offset_of!(DeleteDataMsg, ddm_Name) - 12usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DeleteEndMsg {
    pub dem_Length: ULONG,
    pub dem_Action: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DeleteEndMsg"][::core::mem::size_of::<DeleteEndMsg>() - 8usize];
    ["Alignment of DeleteEndMsg"][::core::mem::align_of::<DeleteEndMsg>() - 2usize];
    ["Offset of field: DeleteEndMsg::dem_Length"]
        [::core::mem::offset_of!(DeleteEndMsg, dem_Length) - 0usize];
    ["Offset of field: DeleteEndMsg::dem_Action"]
        [::core::mem::offset_of!(DeleteEndMsg, dem_Action) - 4usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TextInputMsg {
    pub tim_Length: ULONG,
    pub tim_Action: LONG,
    pub tim_Prompt: STRPTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TextInputMsg"][::core::mem::size_of::<TextInputMsg>() - 12usize];
    ["Alignment of TextInputMsg"][::core::mem::align_of::<TextInputMsg>() - 2usize];
    ["Offset of field: TextInputMsg::tim_Length"]
        [::core::mem::offset_of!(TextInputMsg, tim_Length) - 0usize];
    ["Offset of field: TextInputMsg::tim_Action"]
        [::core::mem::offset_of!(TextInputMsg, tim_Action) - 4usize];
    ["Offset of field: TextInputMsg::tim_Prompt"]
        [::core::mem::offset_of!(TextInputMsg, tim_Prompt) - 8usize];
};
/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn LockAmigaGuideBase(AmigaGuideBase: *mut Library, handle: APTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") handle,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn UnlockAmigaGuideBase(AmigaGuideBase: *mut Library, key: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("d0") key,
        );
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn OpenAmigaGuideA(
    AmigaGuideBase: *mut Library,
    nag: *mut NewAmigaGuide,
    attrs: *const TagItem,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") nag,
            in("a1") attrs,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn OpenAmigaGuideAsyncA(
    AmigaGuideBase: *mut Library,
    nag: *mut NewAmigaGuide,
    attrs: *const TagItem,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") nag,
            in("d0") attrs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn CloseAmigaGuide(AmigaGuideBase: *mut Library, cl: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") cl,
        );
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn AmigaGuideSignal(AmigaGuideBase: *mut Library, cl: APTR) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") cl,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn GetAmigaGuideMsg(AmigaGuideBase: *mut Library, cl: APTR) -> *mut AmigaGuideMsg {
    let asm_ret_value: *mut AmigaGuideMsg;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") cl,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn ReplyAmigaGuideMsg(AmigaGuideBase: *mut Library, amsg: *mut AmigaGuideMsg) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") amsg,
        );
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn SetAmigaGuideContextA(
    AmigaGuideBase: *mut Library,
    cl: APTR,
    id: ULONG,
    attrs: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") cl,
            in("d0") id,
            in("d1") attrs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn SendAmigaGuideContextA(
    AmigaGuideBase: *mut Library,
    cl: APTR,
    attrs: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") cl,
            in("d0") attrs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn SendAmigaGuideCmdA(
    AmigaGuideBase: *mut Library,
    cl: APTR,
    cmd: STRPTR,
    attrs: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") cl,
            in("d0") cmd,
            in("d1") attrs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn SetAmigaGuideAttrsA(
    AmigaGuideBase: *mut Library,
    cl: APTR,
    attrs: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") cl,
            in("a1") attrs,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn GetAmigaGuideAttr(
    AmigaGuideBase: *mut Library,
    tag1: Tag,
    cl: APTR,
    storage: *mut ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("d0") tag1,
            in("a0") cl,
            in("a1") storage,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn LoadXRef(AmigaGuideBase: *mut Library, lock: BPTR, name: STRPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") lock,
            in("a1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn ExpungeXRef(AmigaGuideBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
        );
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn AddAmigaGuideHostA(
    AmigaGuideBase: *mut Library,
    h: *mut Hook,
    name: CONST_STRPTR,
    attrs: *const TagItem,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") h,
            in("d0") name,
            in("a1") attrs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn RemoveAmigaGuideHostA(
    AmigaGuideBase: *mut Library,
    hh: APTR,
    attrs: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("a0") hh,
            in("a1") attrs,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "amigaguide.library" (V40) (Kickstart 3.1)
pub unsafe fn GetAmigaGuideString(AmigaGuideBase: *mut Library, id: LONG) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -210(a6)
            ".short -210",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AmigaGuideBase,
            in("d0") id,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "arexx.class" (V40) (Kickstart 3.1)
pub unsafe fn AREXX_GetClass(ARexxBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ARexxBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "asl.library" (V36) (Kickstart 2.0)
pub unsafe fn AllocFileRequest(AslBase: *mut Library) -> *mut FileRequester {
    let asm_ret_value: *mut FileRequester;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AslBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "asl.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeFileRequest(AslBase: *mut Library, fileReq: *mut FileRequester) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) AslBase,
            in("a0") fileReq,
        );
    }
}

/// libname: "asl.library" (V36) (Kickstart 2.0)
pub unsafe fn RequestFile(AslBase: *mut Library, fileReq: *mut FileRequester) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AslBase,
            in("a0") fileReq,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "asl.library" (V36) (Kickstart 2.0)
pub unsafe fn AllocAslRequest(
    AslBase: *mut Library,
    reqType: ULONG,
    tagList: *const TagItem,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AslBase,
            in("d0") reqType,
            in("a0") tagList,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "asl.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeAslRequest(AslBase: *mut Library, requester: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) AslBase,
            in("a0") requester,
        );
    }
}

/// libname: "asl.library" (V36) (Kickstart 2.0)
pub unsafe fn AslRequest(AslBase: *mut Library, requester: APTR, tagList: *const TagItem) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) AslBase,
            in("a0") requester,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "asl.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn AbortAslRequest(AslBase: *mut Library, requester: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) AslBase,
            in("a0") requester,
        );
    }
}

/// libname: "asl.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn ActivateAslRequest(AslBase: *mut Library, requester: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) AslBase,
            in("a0") requester,
        );
    }
}

/// libname: "battclock.resource" (V36) (Kickstart 2.0)
pub unsafe fn ResetBattClock(BattClockBase: *mut ::core::ffi::c_void) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -6(a6)
            ".short -6",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) BattClockBase,
        );
    }
}

/// libname: "battclock.resource" (V36) (Kickstart 2.0)
pub unsafe fn ReadBattClock(BattClockBase: *mut ::core::ffi::c_void) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -12(a6)
            ".short -12",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) BattClockBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "battclock.resource" (V36) (Kickstart 2.0)
pub unsafe fn WriteBattClock(BattClockBase: *mut ::core::ffi::c_void, time: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -18(a6)
            ".short -18",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) BattClockBase,
            in("d0") time,
        );
    }
}

/// libname: "battmem.resource" (V36) (Kickstart 2.0)
pub unsafe fn ObtainBattSemaphore(BattMemBase: *mut ::core::ffi::c_void) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -6(a6)
            ".short -6",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) BattMemBase,
        );
    }
}

/// libname: "battmem.resource" (V36) (Kickstart 2.0)
pub unsafe fn ReleaseBattSemaphore(BattMemBase: *mut ::core::ffi::c_void) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -12(a6)
            ".short -12",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) BattMemBase,
        );
    }
}

/// libname: "battmem.resource" (V36) (Kickstart 2.0)
pub unsafe fn ReadBattMem(
    BattMemBase: *mut ::core::ffi::c_void,
    buffer: APTR,
    offset: ULONG,
    length: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -18(a6)
            ".short -18",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) BattMemBase,
            in("a0") buffer,
            in("d0") offset,
            in("d1") length,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "battmem.resource" (V36) (Kickstart 2.0)
pub unsafe fn WriteBattMem(
    BattMemBase: *mut ::core::ffi::c_void,
    buffer: CONST_APTR,
    offset: ULONG,
    length: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -24(a6)
            ".short -24",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) BattMemBase,
            in("a0") buffer,
            in("d0") offset,
            in("d1") length,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "bevel.image" (V40) (Kickstart 3.1)
pub unsafe fn BEVEL_GetClass(BevelBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) BevelBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "bitmap.image" (V40) (Kickstart 3.1)
pub unsafe fn BITMAP_GetClass(BitMapBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) BitMapBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "bullet.library" (V38) (Kickstart 2.1)
pub unsafe fn OpenEngine(BulletBase: *mut Library) -> *mut GlyphEngine {
    let asm_ret_value: *mut GlyphEngine;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) BulletBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "bullet.library" (V38) (Kickstart 2.1)
pub unsafe fn CloseEngine(BulletBase: *mut Library, glyphEngine: *mut GlyphEngine) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) BulletBase,
            in("a0") glyphEngine,
        );
    }
}

/// libname: "bullet.library" (V38) (Kickstart 2.1)
pub unsafe fn SetInfoA(
    BulletBase: *mut Library,
    glyphEngine: *mut GlyphEngine,
    tagList: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) BulletBase,
            in("a0") glyphEngine,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "bullet.library" (V38) (Kickstart 2.1)
pub unsafe fn ObtainInfoA(
    BulletBase: *mut Library,
    glyphEngine: *mut GlyphEngine,
    tagList: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) BulletBase,
            in("a0") glyphEngine,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "bullet.library" (V38) (Kickstart 2.1)
pub unsafe fn ReleaseInfoA(
    BulletBase: *mut Library,
    glyphEngine: *mut GlyphEngine,
    tagList: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) BulletBase,
            in("a0") glyphEngine,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "button.gadget" (V40) (Kickstart 3.1)
pub unsafe fn BUTTON_GetClass(ButtonBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ButtonBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn OwnCard(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
) -> *mut CardHandle {
    let asm_ret_value: *mut CardHandle;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -6(a6)
            ".short -6",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn ReleaseCard(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
    flags: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -12(a6)
            ".short -12",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            in("d0") flags,
        );
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn GetCardMap(CardResource: *mut ::core::ffi::c_void) -> *mut CardMemoryMap {
    let asm_ret_value: *mut CardMemoryMap;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -18(a6)
            ".short -18",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn BeginCardAccess(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -24(a6)
            ".short -24",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn EndCardAccess(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn ReadCardStatus(CardResource: *mut ::core::ffi::c_void) -> UBYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "and.w #0x00ff, %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            out("d0") asm_ret_value,
        );
        return asm_ret_value as u8;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn CardResetRemove(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
    flag: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            in("d0") flag,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn CardMiscControl(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
    control_bits: ULONG,
) -> UBYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "and.w #0x00ff, %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            in("d1") control_bits,
            out("d0") asm_ret_value,
        );
        return asm_ret_value as u8;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn CardAccessSpeed(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
    nanoseconds: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            in("d0") nanoseconds,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn CardProgramVoltage(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
    voltage: ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            in("d0") voltage,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn CardResetCard(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn CopyTuple(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
    buffer: *mut UBYTE,
    tuplecode: ULONG,
    size: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a1") handle,
            in("a0") buffer,
            in("d1") tuplecode,
            in("d0") size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn DeviceTuple(
    CardResource: *mut ::core::ffi::c_void,
    tuple_data: *const UBYTE,
    storage: *mut DeviceTData,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a0") tuple_data,
            in("a1") storage,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn IfAmigaXIP(
    CardResource: *mut ::core::ffi::c_void,
    handle: *mut CardHandle,
) -> *mut Resident {
    let asm_ret_value: *mut Resident;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            in("a2") handle,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn CardForceChange(CardResource: *mut ::core::ffi::c_void) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn CardChangeCount(CardResource: *mut ::core::ffi::c_void) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "card.resource" (V40) (Kickstart 3.1)
pub unsafe fn CardInterface(CardResource: *mut ::core::ffi::c_void) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CardResource,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "checkbox.gadget" (V40) (Kickstart 3.1)
pub unsafe fn CHECKBOX_GetClass(CheckBoxBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CheckBoxBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "chooser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn CHOOSER_GetClass(ChooserBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ChooserBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "chooser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn AllocChooserNodeA(
    ChooserBase: *mut ::core::ffi::c_void,
    tags: *mut TagItem,
) -> *mut Node {
    let asm_ret_value: *mut Node;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ChooserBase,
            in("a0") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "chooser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn FreeChooserNode(ChooserBase: *mut ::core::ffi::c_void, node: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ChooserBase,
            in("a0") node,
        );
    }
}

/// libname: "chooser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SetChooserNodeAttrsA(
    ChooserBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ChooserBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "chooser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn GetChooserNodeAttrsA(
    ChooserBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ChooserBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "chooser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn ShowChooser(
    ChooserBase: *mut ::core::ffi::c_void,
    o: *mut Object,
    w: *mut Window,
    xpos: ULONG,
    ypos: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ChooserBase,
            in("a0") o,
            in("a1") w,
            in("d0") xpos,
            in("d1") ypos,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "chooser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn HideChooser(ChooserBase: *mut ::core::ffi::c_void, o: *mut Object, w: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ChooserBase,
            in("a0") o,
            in("a1") w,
        );
    }
}

/// libname: "ciaa.resource|ciab.resource"
pub unsafe fn AddICRVector(
    resource: *mut Library,
    iCRBit: LONG,
    interrupt: *mut Interrupt,
) -> *mut Interrupt {
    let asm_ret_value: *mut Interrupt;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -6(a6)
            ".short -6",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) resource,
            in("d0") iCRBit,
            in("a1") interrupt,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "ciaa.resource|ciab.resource"
pub unsafe fn RemICRVector(resource: *mut Library, iCRBit: LONG, interrupt: *mut Interrupt) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -12(a6)
            ".short -12",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) resource,
            in("d0") iCRBit,
            in("a1") interrupt,
        );
    }
}

/// libname: "ciaa.resource|ciab.resource"
pub unsafe fn AbleICR(resource: *mut Library, mask: LONG) -> WORD {
    let asm_ret_value: WORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -18(a6)
            ".short -18",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) resource,
            in("d0") mask,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "ciaa.resource|ciab.resource"
pub unsafe fn SetICR(resource: *mut Library, mask: LONG) -> WORD {
    let asm_ret_value: WORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -24(a6)
            ".short -24",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) resource,
            in("d0") mask,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "clicktab.gadget" (V40) (Kickstart 3.1)
pub unsafe fn CLICKTAB_GetClass(ClickTabBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ClickTabBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "clicktab.gadget" (V40) (Kickstart 3.1)
pub unsafe fn AllocClickTabNodeA(
    ClickTabBase: *mut ::core::ffi::c_void,
    tags: *mut TagItem,
) -> *mut Node {
    let asm_ret_value: *mut Node;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ClickTabBase,
            in("a0") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "clicktab.gadget" (V40) (Kickstart 3.1)
pub unsafe fn FreeClickTabNode(ClickTabBase: *mut ::core::ffi::c_void, node: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ClickTabBase,
            in("a0") node,
        );
    }
}

/// libname: "clicktab.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SetClickTabNodeAttrsA(
    ClickTabBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ClickTabBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "clicktab.gadget" (V40) (Kickstart 3.1)
pub unsafe fn GetClickTabNodeAttrsA(
    ClickTabBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ClickTabBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "colorwheel.gadget" (V39) (Kickstart 3.0)
pub unsafe fn ConvertHSBToRGB(
    ColorWheelBase: *mut ::core::ffi::c_void,
    hsb: *const ColorWheelHSB,
    rgb: *mut ColorWheelRGB,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ColorWheelBase,
            in("a0") hsb,
            in("a1") rgb,
        );
    }
}

/// libname: "colorwheel.gadget" (V39) (Kickstart 3.0)
pub unsafe fn ConvertRGBToHSB(
    ColorWheelBase: *mut ::core::ffi::c_void,
    rgb: *const ColorWheelRGB,
    hsb: *mut ColorWheelHSB,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ColorWheelBase,
            in("a0") rgb,
            in("a1") hsb,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateCxObj(
    CxBase: *mut Library,
    type_: ULONG,
    arg1: LONG,
    arg2: LONG,
) -> *mut CxObj {
    let asm_ret_value: *mut CxObj;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("d0") type_,
            in("a0") arg1,
            in("a1") arg2,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn CxBroker(CxBase: *mut Library, nb: *const NewBroker, error: *mut LONG) -> *mut CxObj {
    let asm_ret_value: *mut CxObj;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") nb,
            in("d0") error,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn ActivateCxObj(CxBase: *mut Library, co: *mut CxObj, flag: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") co,
            in("d0") flag,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn DeleteCxObj(CxBase: *mut Library, co: *mut CxObj) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") co,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn DeleteCxObjAll(CxBase: *mut Library, co: *mut CxObj) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") co,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn CxObjType(CxBase: *mut Library, co: *const CxObj) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") co,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn CxObjError(CxBase: *mut Library, co: *const CxObj) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") co,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn ClearCxObjError(CxBase: *mut Library, co: *mut CxObj) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") co,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn SetCxObjPri(CxBase: *mut Library, co: *mut CxObj, pri: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") co,
            in("d0") pri,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn AttachCxObj(CxBase: *mut Library, headObj: *mut CxObj, co: *mut CxObj) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") headObj,
            in("a1") co,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn EnqueueCxObj(CxBase: *mut Library, headObj: *mut CxObj, co: *mut CxObj) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") headObj,
            in("a1") co,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn InsertCxObj(
    CxBase: *mut Library,
    headObj: *mut CxObj,
    co: *mut CxObj,
    pred: *mut CxObj,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") headObj,
            in("a1") co,
            in("a2") pred,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn RemoveCxObj(CxBase: *mut Library, co: *mut CxObj) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") co,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn SetTranslate(CxBase: *mut Library, translator: *mut CxObj, events: *mut InputEvent) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") translator,
            in("a1") events,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn SetFilter(CxBase: *mut Library, filter: *mut CxObj, text: CONST_STRPTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") filter,
            in("a1") text,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn SetFilterIX(CxBase: *mut Library, filter: *mut CxObj, ix: *const IX) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") filter,
            in("a1") ix,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn ParseIX(CxBase: *mut Library, description: CONST_STRPTR, ix: *mut IX) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") description,
            in("a1") ix,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn CxMsgType(CxBase: *mut Library, cxm: *const CxMsg) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") cxm,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn CxMsgData(CxBase: *mut Library, cxm: *const CxMsg) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") cxm,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn CxMsgID(CxBase: *mut Library, cxm: *const CxMsg) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") cxm,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn DivertCxMsg(
    CxBase: *mut Library,
    cxm: *mut CxMsg,
    headObj: *mut CxObj,
    returnObj: *mut CxObj,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") cxm,
            in("a1") headObj,
            in("a2") returnObj,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn RouteCxMsg(CxBase: *mut Library, cxm: *mut CxMsg, co: *mut CxObj) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") cxm,
            in("a1") co,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn DisposeCxMsg(CxBase: *mut Library, cxm: *mut CxMsg) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -168(a6)
            ".short -168",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") cxm,
        );
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn InvertKeyMap(
    CxBase: *mut Library,
    ansiCode: ULONG,
    event: *mut InputEvent,
    km: *const KeyMap,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("d0") ansiCode,
            in("a0") event,
            in("a1") km,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "commodities.library" (V36) (Kickstart 2.0)
pub unsafe fn AddIEvents(CxBase: *mut Library, events: *mut InputEvent) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") events,
        );
    }
}

/// libname: "commodities.library" (V38) (Kickstart 2.1)
pub unsafe fn MatchIX(CxBase: *mut Library, event: *const InputEvent, ix: *const IX) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -204(a6)
            ".short -204",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) CxBase,
            in("a0") event,
            in("a1") ix,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "console.device"
pub unsafe fn CDInputHandler(
    ConsoleDevice: *mut ::core::ffi::c_void,
    events: *const InputEvent,
    consoleDevice: *mut Library,
) -> *mut InputEvent {
    let asm_ret_value: *mut InputEvent;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ConsoleDevice,
            in("a0") events,
            in("a1") consoleDevice,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "console.device"
pub unsafe fn RawKeyConvert(
    ConsoleDevice: *mut ::core::ffi::c_void,
    events: *const InputEvent,
    buffer: STRPTR,
    length: LONG,
    keyMap: *const KeyMap,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ConsoleDevice,
            in("a0") events,
            in("a1") buffer,
            in("d1") length,
            in("a2") keyMap,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn ObtainDataTypeA(
    DataTypesBase: *mut Library,
    type_: ULONG,
    handle: APTR,
    attrs: *const TagItem,
) -> *mut DataType {
    let asm_ret_value: *mut DataType;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("d0") type_,
            in("a0") handle,
            in("a1") attrs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn ReleaseDataType(DataTypesBase: *mut Library, dt: *mut DataType) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") dt,
        );
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn NewDTObjectA(
    DataTypesBase: *mut Library,
    name: CONST_STRPTR,
    attrs: *const TagItem,
) -> *mut Object {
    let asm_ret_value: *mut Object;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("d0") name,
            in("a0") attrs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn DisposeDTObject(DataTypesBase: *mut Library, o: *mut Object) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") o,
        );
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn SetDTAttrsA(
    DataTypesBase: *mut Library,
    o: *mut Object,
    win: *mut Window,
    req: *mut Requester,
    attrs: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") o,
            in("a1") win,
            in("a2") req,
            in("a3") attrs,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn GetDTAttrsA(
    DataTypesBase: *mut Library,
    o: *mut Object,
    attrs: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") o,
            in("a2") attrs,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn AddDTObject(
    DataTypesBase: *mut Library,
    win: *mut Window,
    req: *mut Requester,
    o: *mut Object,
    pos: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") win,
            in("a1") req,
            in("a2") o,
            in("d0") pos,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn RefreshDTObjectA(
    DataTypesBase: *mut Library,
    o: *mut Object,
    win: *mut Window,
    req: *mut Requester,
    attrs: *const TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") o,
            in("a1") win,
            in("a2") req,
            in("a3") attrs,
        );
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn DoAsyncLayout(
    DataTypesBase: *mut Library,
    o: *mut Object,
    gpl: *mut gpLayout,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") o,
            in("a1") gpl,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn DoDTMethodA(
    DataTypesBase: *mut Library,
    o: *mut Object,
    win: *mut Window,
    req: *mut Requester,
    msg: Msg,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") o,
            in("a1") win,
            in("a2") req,
            in("a3") msg,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn RemoveDTObject(
    DataTypesBase: *mut Library,
    win: *mut Window,
    o: *mut Object,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") win,
            in("a1") o,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn GetDTMethods(DataTypesBase: *mut Library, object: *const Object) -> *mut ULONG {
    let asm_ret_value: *mut ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") object,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn GetDTTriggerMethods(
    DataTypesBase: *mut Library,
    object: *mut Object,
) -> *mut DTMethod {
    let asm_ret_value: *mut DTMethod;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") object,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn PrintDTObjectA(
    DataTypesBase: *mut Library,
    o: *mut Object,
    w: *mut Window,
    r: *mut Requester,
    msg: *mut dtPrint,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") o,
            in("a1") w,
            in("a2") r,
            in("a3") msg,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V40) (Kickstart 3.1)
pub unsafe fn GetDTString(DataTypesBase: *mut Library, id: ULONG) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("d0") id,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn FindMethod(
    DataTypesBase: *mut Library,
    methods: *const ULONG,
    searchmethodid: ULONG,
) -> *mut ULONG {
    let asm_ret_value: *mut ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -258(a6)
            ".short -258",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") methods,
            in("a1") searchmethodid,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn FindTriggerMethod(
    DataTypesBase: *mut Library,
    dtm: *const DTMethod,
    command: CONST_STRPTR,
    method: ULONG,
) -> *mut DTMethod {
    let asm_ret_value: *mut DTMethod;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -264(a6)
            ".short -264",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") dtm,
            in("a1") command,
            in("d0") method,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn CopyDTMethods(
    DataTypesBase: *mut Library,
    methods: *const ULONG,
    include: *const ULONG,
    exclude: *const ULONG,
) -> *mut ULONG {
    let asm_ret_value: *mut ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -270(a6)
            ".short -270",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") methods,
            in("a1") include,
            in("a2") exclude,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn CopyDTTriggerMethods(
    DataTypesBase: *mut Library,
    methods: *const DTMethod,
    include: *const DTMethod,
    exclude: *const DTMethod,
) -> *mut DTMethod {
    let asm_ret_value: *mut DTMethod;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -276(a6)
            ".short -276",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") methods,
            in("a1") include,
            in("a2") exclude,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn FreeDTMethods(
    DataTypesBase: *mut Library,
    methods: APTR,
) -> *mut ::core::ffi::c_void {
    let asm_ret_value: *mut ::core::ffi::c_void;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -282(a6)
            ".short -282",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") methods,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn GetDTTriggerMethodDataFlags(
    DataTypesBase: *mut Library,
    triggermethod: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -288(a6)
            ".short -288",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("d0") triggermethod,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn SaveDTObjectA(
    DataTypesBase: *mut Library,
    o: *mut Object,
    win: *mut Window,
    req: *mut Requester,
    file: CONST_STRPTR,
    mode: ULONG,
    saveicon: LONG,
    attrs: *mut TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l %a4, -(%sp)",
            "move.l {basereg}, %a6",
            "move.l {a4reg}, %a4",
            ".short 0x4eae", // jsr -294(a6)
            ".short -294",
            "move.l (%sp)+, %a4",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") o,
            in("a1") win,
            in("a2") req,
            in("a3") file,
            in("d0") mode,
            in("d1") saveicon,
            a4reg = in(reg) attrs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datatypes.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn StartDragSelect(DataTypesBase: *mut Library, o: *mut Object) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -300(a6)
            ".short -300",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DataTypesBase,
            in("a0") o,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datebrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn DATEBROWSER_GetClass(DateBrowserBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DateBrowserBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datebrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn JulianWeekDay(
    DateBrowserBase: *mut ::core::ffi::c_void,
    day: ULONG,
    month: ULONG,
    year: LONG,
) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DateBrowserBase,
            in("d0") day,
            in("d1") month,
            in("d2") year,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datebrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn JulianMonthDays(
    DateBrowserBase: *mut ::core::ffi::c_void,
    month: ULONG,
    year: LONG,
) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DateBrowserBase,
            in("d0") month,
            in("d1") year,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "datebrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn JulianLeapYear(DateBrowserBase: *mut ::core::ffi::c_void, year: LONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DateBrowserBase,
            in("d0") year,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "disk.resource"
pub unsafe fn AllocUnit(DiskBase: *mut ::core::ffi::c_void, unitNum: LONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -6(a6)
            ".short -6",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskBase,
            in("d0") unitNum,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "disk.resource"
pub unsafe fn FreeUnit(DiskBase: *mut ::core::ffi::c_void, unitNum: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -12(a6)
            ".short -12",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DiskBase,
            in("d0") unitNum,
        );
    }
}

/// libname: "disk.resource"
pub unsafe fn GetUnit(
    DiskBase: *mut ::core::ffi::c_void,
    unitPointer: *mut DiscResourceUnit,
) -> *mut DiscResourceUnit {
    let asm_ret_value: *mut DiscResourceUnit;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -18(a6)
            ".short -18",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskBase,
            in("a1") unitPointer,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "disk.resource"
pub unsafe fn GiveUnit(DiskBase: *mut ::core::ffi::c_void) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -24(a6)
            ".short -24",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DiskBase,
        );
    }
}

/// libname: "disk.resource"
pub unsafe fn GetUnitID(DiskBase: *mut ::core::ffi::c_void, unitNum: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskBase,
            in("d0") unitNum,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "disk.resource" (V37) (Kickstart 2.04)
pub unsafe fn ReadUnitID(DiskBase: *mut ::core::ffi::c_void, unitNum: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskBase,
            in("d0") unitNum,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library"
pub unsafe fn OpenDiskFont(DiskfontBase: *mut Library, textAttr: *mut TextAttr) -> *mut TextFont {
    let asm_ret_value: *mut TextFont;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") textAttr,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library"
pub unsafe fn AvailFonts(
    DiskfontBase: *mut Library,
    buffer: *mut AvailFontsHeader,
    bufBytes: LONG,
    flags: ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") buffer,
            in("d0") bufBytes,
            in("d1") flags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V34) (Kickstart 1.3)
pub unsafe fn NewFontContents(
    DiskfontBase: *mut Library,
    fontsLock: BPTR,
    fontName: CONST_STRPTR,
) -> *mut FontContentsHeader {
    let asm_ret_value: *mut FontContentsHeader;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") fontsLock,
            in("a1") fontName,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V34) (Kickstart 1.3)
pub unsafe fn DisposeFontContents(
    DiskfontBase: *mut Library,
    fontContentsHeader: *mut FontContentsHeader,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a1") fontContentsHeader,
        );
    }
}

/// libname: "diskfont.library" (V36) (Kickstart 2.0)
pub unsafe fn NewScaledDiskFont(
    DiskfontBase: *mut Library,
    sourceFont: *mut TextFont,
    destTextAttr: *mut TextAttr,
) -> *mut DiskFontHeader {
    let asm_ret_value: *mut DiskFontHeader;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") sourceFont,
            in("a1") destTextAttr,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V45) (Kickstart 3.9 / 2000)
pub unsafe fn GetDiskFontCtrl(DiskfontBase: *mut Library, tagid: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("d0") tagid,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V45) (Kickstart 3.9 / 2000)
pub unsafe fn SetDiskFontCtrlA(DiskfontBase: *mut Library, taglist: *const TagItem) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") taglist,
        );
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn EOpenEngine(DiskfontBase: *mut Library, eEngine: *mut EGlyphEngine) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") eEngine,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn ECloseEngine(DiskfontBase: *mut Library, eEngine: *mut EGlyphEngine) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") eEngine,
        );
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn ESetInfoA(
    DiskfontBase: *mut Library,
    eEngine: *mut EGlyphEngine,
    taglist: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") eEngine,
            in("a1") taglist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn EObtainInfoA(
    DiskfontBase: *mut Library,
    eEngine: *mut EGlyphEngine,
    taglist: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") eEngine,
            in("a1") taglist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn EReleaseInfoA(
    DiskfontBase: *mut Library,
    eEngine: *mut EGlyphEngine,
    taglist: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") eEngine,
            in("a1") taglist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn OpenOutlineFont(
    DiskfontBase: *mut Library,
    name: CONST_STRPTR,
    list: *mut List,
    flags: ULONG,
) -> *mut OutlineFont {
    let asm_ret_value: *mut OutlineFont;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") name,
            in("a1") list,
            in("d0") flags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn CloseOutlineFont(DiskfontBase: *mut Library, olf: *mut OutlineFont, list: *mut List) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") olf,
            in("a1") list,
        );
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn WriteFontContents(
    DiskfontBase: *mut Library,
    fontsLock: BPTR,
    fontName: CONST_STRPTR,
    fontContentsHeader: *const FontContentsHeader,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") fontsLock,
            in("a1") fontName,
            in("a2") fontContentsHeader,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn WriteDiskFontHeaderA(
    DiskfontBase: *mut Library,
    font: *const TextFont,
    fileName: CONST_STRPTR,
    tagList: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("a0") font,
            in("a1") fileName,
            in("a2") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "diskfont.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn ObtainCharsetInfo(
    DiskfontBase: *mut Library,
    knownTag: ULONG,
    knownValue: ULONG,
    wantedTag: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DiskfontBase,
            in("d0") knownTag,
            in("d1") knownValue,
            in("d2") wantedTag,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Open(DOSBase: *mut Library, name: CONST_STRPTR, accessMode: LONG) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") accessMode,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Close(DOSBase: *mut Library, file: BPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") file,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Read(DOSBase: *mut Library, file: BPTR, buffer: APTR, length: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") file,
            in("d2") buffer,
            in("d3") length,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Write(DOSBase: *mut Library, file: BPTR, buffer: CONST_APTR, length: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") file,
            in("d2") buffer,
            in("d3") length,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Input(DOSBase: *mut Library) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Output(DOSBase: *mut Library) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Seek(DOSBase: *mut Library, file: BPTR, position: LONG, offset: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") file,
            in("d2") position,
            in("d3") offset,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn DeleteFile(DOSBase: *mut Library, name: CONST_STRPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Rename(DOSBase: *mut Library, oldName: CONST_STRPTR, newName: CONST_STRPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") oldName,
            in("d2") newName,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Lock(DOSBase: *mut Library, name: CONST_STRPTR, type_: LONG) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") type_,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn UnLock(DOSBase: *mut Library, lock: BPTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
        );
    }
}

/// libname: "dos.library"
pub unsafe fn DupLock(DOSBase: *mut Library, lock: BPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Examine(
    DOSBase: *mut Library,
    lock: BPTR,
    fileInfoBlock: *mut FileInfoBlock,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            in("d2") fileInfoBlock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn ExNext(DOSBase: *mut Library, lock: BPTR, fileInfoBlock: *mut FileInfoBlock) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            in("d2") fileInfoBlock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Info(DOSBase: *mut Library, lock: BPTR, parameterBlock: *mut InfoData) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            in("d2") parameterBlock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn CreateDir(DOSBase: *mut Library, name: CONST_STRPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn CurrentDir(DOSBase: *mut Library, lock: BPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn IoErr(DOSBase: *mut Library) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn CreateProc(
    DOSBase: *mut Library,
    name: CONST_STRPTR,
    pri: LONG,
    segList: BPTR,
    stackSize: LONG,
) -> *mut MsgPort {
    let asm_ret_value: *mut MsgPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") pri,
            in("d3") segList,
            in("d4") stackSize,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Exit(DOSBase: *mut Library, returnCode: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") returnCode,
        );
    }
}

/// libname: "dos.library"
pub unsafe fn LoadSeg(DOSBase: *mut Library, name: CONST_STRPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn UnLoadSeg(DOSBase: *mut Library, seglist: BPTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") seglist,
        );
    }
}

/// libname: "dos.library"
pub unsafe fn DeviceProc(DOSBase: *mut Library, name: CONST_STRPTR) -> *mut MsgPort {
    let asm_ret_value: *mut MsgPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn SetComment(DOSBase: *mut Library, name: CONST_STRPTR, comment: CONST_STRPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") comment,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn SetProtection(DOSBase: *mut Library, name: CONST_STRPTR, protect: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -186(a6)
            ".short -186",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") protect,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn DateStamp(DOSBase: *mut Library, date: *mut DateStamp) -> *mut DateStamp {
    let asm_ret_value: *mut DateStamp;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -192(a6)
            ".short -192",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") date,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Delay(DOSBase: *mut Library, timeout: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -198(a6)
            ".short -198",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") timeout,
        );
    }
}

/// libname: "dos.library"
pub unsafe fn WaitForChar(DOSBase: *mut Library, file: BPTR, timeout: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -204(a6)
            ".short -204",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") file,
            in("d2") timeout,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn ParentDir(DOSBase: *mut Library, lock: BPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -210(a6)
            ".short -210",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn IsInteractive(DOSBase: *mut Library, file: BPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -216(a6)
            ".short -216",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") file,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library"
pub unsafe fn Execute(
    DOSBase: *mut Library,
    string: CONST_STRPTR,
    file: BPTR,
    file2: BPTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -222(a6)
            ".short -222",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") string,
            in("d2") file,
            in("d3") file2,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AllocDosObject(DOSBase: *mut Library, type_: ULONG, tags: *const TagItem) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -228(a6)
            ".short -228",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") type_,
            in("d2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AllocDosObjectTagList(
    DOSBase: *mut Library,
    type_: ULONG,
    tags: *const TagItem,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -228(a6)
            ".short -228",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") type_,
            in("d2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeDosObject(DOSBase: *mut Library, type_: ULONG, ptr: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -234(a6)
            ".short -234",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") type_,
            in("d2") ptr,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn DoPkt(
    DOSBase: *mut Library,
    port: *mut MsgPort,
    action: LONG,
    arg1: LONG,
    arg2: LONG,
    arg3: LONG,
    arg4: LONG,
    arg5: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") port,
            in("d2") action,
            in("d3") arg1,
            in("d4") arg2,
            in("d5") arg3,
            in("d6") arg4,
            in("d7") arg5,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn DoPkt0(DOSBase: *mut Library, port: *mut MsgPort, action: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") port,
            in("d2") action,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn DoPkt1(DOSBase: *mut Library, port: *mut MsgPort, action: LONG, arg1: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") port,
            in("d2") action,
            in("d3") arg1,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn DoPkt2(
    DOSBase: *mut Library,
    port: *mut MsgPort,
    action: LONG,
    arg1: LONG,
    arg2: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") port,
            in("d2") action,
            in("d3") arg1,
            in("d4") arg2,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn DoPkt3(
    DOSBase: *mut Library,
    port: *mut MsgPort,
    action: LONG,
    arg1: LONG,
    arg2: LONG,
    arg3: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") port,
            in("d2") action,
            in("d3") arg1,
            in("d4") arg2,
            in("d5") arg3,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn DoPkt4(
    DOSBase: *mut Library,
    port: *mut MsgPort,
    action: LONG,
    arg1: LONG,
    arg2: LONG,
    arg3: LONG,
    arg4: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") port,
            in("d2") action,
            in("d3") arg1,
            in("d4") arg2,
            in("d5") arg3,
            in("d6") arg4,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SendPkt(
    DOSBase: *mut Library,
    dp: *mut DosPacket,
    port: *mut MsgPort,
    replyport: *mut MsgPort,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -246(a6)
            ".short -246",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") dp,
            in("d2") port,
            in("d3") replyport,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn WaitPkt(DOSBase: *mut Library) -> *mut DosPacket {
    let asm_ret_value: *mut DosPacket;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -252(a6)
            ".short -252",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ReplyPkt(DOSBase: *mut Library, dp: *mut DosPacket, res1: LONG, res2: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -258(a6)
            ".short -258",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") dp,
            in("d2") res1,
            in("d3") res2,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AbortPkt(DOSBase: *mut Library, port: *mut MsgPort, pkt: *mut DosPacket) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -264(a6)
            ".short -264",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") port,
            in("d2") pkt,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn LockRecord(
    DOSBase: *mut Library,
    fh: BPTR,
    offset: ULONG,
    length: ULONG,
    mode: ULONG,
    timeout: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -270(a6)
            ".short -270",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") offset,
            in("d3") length,
            in("d4") mode,
            in("d5") timeout,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn LockRecords(
    DOSBase: *mut Library,
    recArray: *const RecordLock,
    timeout: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -276(a6)
            ".short -276",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") recArray,
            in("d2") timeout,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn UnLockRecord(DOSBase: *mut Library, fh: BPTR, offset: ULONG, length: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -282(a6)
            ".short -282",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") offset,
            in("d3") length,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn UnLockRecords(DOSBase: *mut Library, recArray: *const RecordLock) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -288(a6)
            ".short -288",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") recArray,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SelectInput(DOSBase: *mut Library, fh: BPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -294(a6)
            ".short -294",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SelectOutput(DOSBase: *mut Library, fh: BPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -300(a6)
            ".short -300",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FGetC(DOSBase: *mut Library, fh: BPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -306(a6)
            ".short -306",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FPutC(DOSBase: *mut Library, fh: BPTR, ch: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -312(a6)
            ".short -312",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") ch,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn UnGetC(DOSBase: *mut Library, fh: BPTR, character: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -318(a6)
            ".short -318",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") character,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FRead(
    DOSBase: *mut Library,
    fh: BPTR,
    block: APTR,
    blocklen: ULONG,
    number: ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -324(a6)
            ".short -324",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") block,
            in("d3") blocklen,
            in("d4") number,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FWrite(
    DOSBase: *mut Library,
    fh: BPTR,
    block: CONST_APTR,
    blocklen: ULONG,
    number: ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -330(a6)
            ".short -330",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") block,
            in("d3") blocklen,
            in("d4") number,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FGets(DOSBase: *mut Library, fh: BPTR, buf: STRPTR, buflen: ULONG) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -336(a6)
            ".short -336",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") buf,
            in("d3") buflen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FPuts(DOSBase: *mut Library, fh: BPTR, str_: CONST_STRPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -342(a6)
            ".short -342",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") str_,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn VFWritef(
    DOSBase: *mut Library,
    fh: BPTR,
    format: CONST_STRPTR,
    argarray: *const LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -348(a6)
            ".short -348",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") format,
            in("d3") argarray,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn VFPrintf(
    DOSBase: *mut Library,
    fh: BPTR,
    format: CONST_STRPTR,
    argarray: CONST_APTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -354(a6)
            ".short -354",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") format,
            in("d3") argarray,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn Flush(DOSBase: *mut Library, fh: BPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -360(a6)
            ".short -360",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetVBuf(
    DOSBase: *mut Library,
    fh: BPTR,
    buff: STRPTR,
    type_: LONG,
    size: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -366(a6)
            ".short -366",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") buff,
            in("d3") type_,
            in("d4") size,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn DupLockFromFH(DOSBase: *mut Library, fh: BPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -372(a6)
            ".short -372",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn OpenFromLock(DOSBase: *mut Library, lock: BPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -378(a6)
            ".short -378",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ParentOfFH(DOSBase: *mut Library, fh: BPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -384(a6)
            ".short -384",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ExamineFH(DOSBase: *mut Library, fh: BPTR, fib: *mut FileInfoBlock) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -390(a6)
            ".short -390",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") fib,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetFileDate(
    DOSBase: *mut Library,
    name: CONST_STRPTR,
    date: *const DateStamp,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -396(a6)
            ".short -396",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") date,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn NameFromLock(DOSBase: *mut Library, lock: BPTR, buffer: STRPTR, len: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -402(a6)
            ".short -402",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            in("d2") buffer,
            in("d3") len,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn NameFromFH(DOSBase: *mut Library, fh: BPTR, buffer: STRPTR, len: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -408(a6)
            ".short -408",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") buffer,
            in("d3") len,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SplitName(
    DOSBase: *mut Library,
    name: CONST_STRPTR,
    separator: ULONG,
    buf: STRPTR,
    oldpos: LONG,
    size: LONG,
) -> WORD {
    let asm_ret_value: WORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -414(a6)
            ".short -414",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") separator,
            in("d3") buf,
            in("d4") oldpos,
            in("d5") size,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SameLock(DOSBase: *mut Library, lock1: BPTR, lock2: BPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -420(a6)
            ".short -420",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock1,
            in("d2") lock2,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetMode(DOSBase: *mut Library, fh: BPTR, mode: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -426(a6)
            ".short -426",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") mode,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ExAll(
    DOSBase: *mut Library,
    lock: BPTR,
    buffer: *mut ExAllData,
    size: LONG,
    data: LONG,
    control: *mut ExAllControl,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -432(a6)
            ".short -432",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            in("d2") buffer,
            in("d3") size,
            in("d4") data,
            in("d5") control,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ReadLink(
    DOSBase: *mut Library,
    port: *mut MsgPort,
    lock: BPTR,
    path: CONST_STRPTR,
    buffer: STRPTR,
    size: ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -438(a6)
            ".short -438",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") port,
            in("d2") lock,
            in("d3") path,
            in("d4") buffer,
            in("d5") size,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn MakeLink(DOSBase: *mut Library, name: CONST_STRPTR, dest: LONG, soft: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -444(a6)
            ".short -444",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") dest,
            in("d3") soft,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ChangeMode(DOSBase: *mut Library, type_: LONG, fh: BPTR, newmode: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -450(a6)
            ".short -450",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") type_,
            in("d2") fh,
            in("d3") newmode,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetFileSize(DOSBase: *mut Library, fh: BPTR, pos: LONG, mode: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -456(a6)
            ".short -456",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            in("d2") pos,
            in("d3") mode,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetIoErr(DOSBase: *mut Library, result: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -462(a6)
            ".short -462",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") result,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn Fault(
    DOSBase: *mut Library,
    code: LONG,
    header: CONST_STRPTR,
    buffer: STRPTR,
    len: LONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -468(a6)
            ".short -468",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") code,
            in("d2") header,
            in("d3") buffer,
            in("d4") len,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn PrintFault(DOSBase: *mut Library, code: LONG, header: CONST_STRPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -474(a6)
            ".short -474",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") code,
            in("d2") header,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ErrorReport(
    DOSBase: *mut Library,
    code: LONG,
    type_: LONG,
    arg1: ULONG,
    device: *mut MsgPort,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -480(a6)
            ".short -480",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") code,
            in("d2") type_,
            in("d3") arg1,
            in("d4") device,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn Cli(DOSBase: *mut Library) -> *mut CommandLineInterface {
    let asm_ret_value: *mut CommandLineInterface;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -492(a6)
            ".short -492",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateNewProc(DOSBase: *mut Library, tags: *const TagItem) -> *mut Process {
    let asm_ret_value: *mut Process;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -498(a6)
            ".short -498",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateNewProcTagList(DOSBase: *mut Library, tags: *const TagItem) -> *mut Process {
    let asm_ret_value: *mut Process;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -498(a6)
            ".short -498",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn RunCommand(
    DOSBase: *mut Library,
    seg: BPTR,
    stack: LONG,
    paramptr: CONST_STRPTR,
    paramlen: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -504(a6)
            ".short -504",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") seg,
            in("d2") stack,
            in("d3") paramptr,
            in("d4") paramlen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn GetConsoleTask(DOSBase: *mut Library) -> *mut MsgPort {
    let asm_ret_value: *mut MsgPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -510(a6)
            ".short -510",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetConsoleTask(DOSBase: *mut Library, task: *mut MsgPort) -> *mut MsgPort {
    let asm_ret_value: *mut MsgPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -516(a6)
            ".short -516",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") task,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn GetFileSysTask(DOSBase: *mut Library) -> *mut MsgPort {
    let asm_ret_value: *mut MsgPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -522(a6)
            ".short -522",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetFileSysTask(DOSBase: *mut Library, task: *mut MsgPort) -> *mut MsgPort {
    let asm_ret_value: *mut MsgPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -528(a6)
            ".short -528",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") task,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn GetArgStr(DOSBase: *mut Library) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -534(a6)
            ".short -534",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetArgStr(DOSBase: *mut Library, string: STRPTR) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -540(a6)
            ".short -540",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") string,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FindCliProc(DOSBase: *mut Library, num: ULONG) -> *mut Process {
    let asm_ret_value: *mut Process;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -546(a6)
            ".short -546",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") num,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn MaxCli(DOSBase: *mut Library) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -552(a6)
            ".short -552",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetCurrentDirName(DOSBase: *mut Library, name: CONST_STRPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -558(a6)
            ".short -558",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn GetCurrentDirName(DOSBase: *mut Library, buf: STRPTR, len: LONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -564(a6)
            ".short -564",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") buf,
            in("d2") len,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetProgramName(DOSBase: *mut Library, name: CONST_STRPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -570(a6)
            ".short -570",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn GetProgramName(DOSBase: *mut Library, buf: STRPTR, len: LONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -576(a6)
            ".short -576",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") buf,
            in("d2") len,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetPrompt(DOSBase: *mut Library, name: CONST_STRPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -582(a6)
            ".short -582",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn GetPrompt(DOSBase: *mut Library, buf: STRPTR, len: LONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -588(a6)
            ".short -588",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") buf,
            in("d2") len,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetProgramDir(DOSBase: *mut Library, lock: BPTR) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -594(a6)
            ".short -594",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn GetProgramDir(DOSBase: *mut Library) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -600(a6)
            ".short -600",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SystemTagList(
    DOSBase: *mut Library,
    command: CONST_STRPTR,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -606(a6)
            ".short -606",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") command,
            in("d2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn System(DOSBase: *mut Library, command: CONST_STRPTR, tags: *const TagItem) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -606(a6)
            ".short -606",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") command,
            in("d2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AssignLock(DOSBase: *mut Library, name: CONST_STRPTR, lock: BPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -612(a6)
            ".short -612",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") lock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AssignLate(DOSBase: *mut Library, name: CONST_STRPTR, path: CONST_STRPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -618(a6)
            ".short -618",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") path,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AssignPath(DOSBase: *mut Library, name: CONST_STRPTR, path: CONST_STRPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -624(a6)
            ".short -624",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") path,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AssignAdd(DOSBase: *mut Library, name: CONST_STRPTR, lock: BPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -630(a6)
            ".short -630",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") lock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn RemAssignList(DOSBase: *mut Library, name: CONST_STRPTR, lock: BPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -636(a6)
            ".short -636",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") lock,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn GetDeviceProc(
    DOSBase: *mut Library,
    name: CONST_STRPTR,
    dp: *mut DevProc,
) -> *mut DevProc {
    let asm_ret_value: *mut DevProc;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -642(a6)
            ".short -642",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") dp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeDeviceProc(DOSBase: *mut Library, dp: *mut DevProc) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -648(a6)
            ".short -648",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") dp,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn LockDosList(DOSBase: *mut Library, flags: ULONG) -> *mut DosList {
    let asm_ret_value: *mut DosList;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -654(a6)
            ".short -654",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") flags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn UnLockDosList(DOSBase: *mut Library, flags: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -660(a6)
            ".short -660",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") flags,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AttemptLockDosList(DOSBase: *mut Library, flags: ULONG) -> *mut DosList {
    let asm_ret_value: *mut DosList;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -666(a6)
            ".short -666",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") flags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn RemDosEntry(DOSBase: *mut Library, dlist: *mut DosList) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -672(a6)
            ".short -672",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") dlist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AddDosEntry(DOSBase: *mut Library, dlist: *mut DosList) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -678(a6)
            ".short -678",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") dlist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FindDosEntry(
    DOSBase: *mut Library,
    dlist: *const DosList,
    name: CONST_STRPTR,
    flags: ULONG,
) -> *mut DosList {
    let asm_ret_value: *mut DosList;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -684(a6)
            ".short -684",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") dlist,
            in("d2") name,
            in("d3") flags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn NextDosEntry(
    DOSBase: *mut Library,
    dlist: *const DosList,
    flags: ULONG,
) -> *mut DosList {
    let asm_ret_value: *mut DosList;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -690(a6)
            ".short -690",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") dlist,
            in("d2") flags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn MakeDosEntry(DOSBase: *mut Library, name: CONST_STRPTR, type_: LONG) -> *mut DosList {
    let asm_ret_value: *mut DosList;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -696(a6)
            ".short -696",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") type_,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeDosEntry(DOSBase: *mut Library, dlist: *mut DosList) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -702(a6)
            ".short -702",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") dlist,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn IsFileSystem(DOSBase: *mut Library, name: CONST_STRPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -708(a6)
            ".short -708",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn Format(
    DOSBase: *mut Library,
    filesystem: CONST_STRPTR,
    volumename: CONST_STRPTR,
    dostype: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -714(a6)
            ".short -714",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") filesystem,
            in("d2") volumename,
            in("d3") dostype,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn Relabel(DOSBase: *mut Library, drive: CONST_STRPTR, newname: CONST_STRPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -720(a6)
            ".short -720",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") drive,
            in("d2") newname,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn Inhibit(DOSBase: *mut Library, name: CONST_STRPTR, onoff: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -726(a6)
            ".short -726",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") onoff,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AddBuffers(DOSBase: *mut Library, name: CONST_STRPTR, number: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -732(a6)
            ".short -732",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") number,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn CompareDates(
    DOSBase: *mut Library,
    date1: *const DateStamp,
    date2: *const DateStamp,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -738(a6)
            ".short -738",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") date1,
            in("d2") date2,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn DateToStr(DOSBase: *mut Library, datetime: *mut DateTime) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -744(a6)
            ".short -744",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") datetime,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn StrToDate(DOSBase: *mut Library, datetime: *mut DateTime) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -750(a6)
            ".short -750",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") datetime,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn InternalLoadSeg(
    DOSBase: *mut Library,
    fh: BPTR,
    table: BPTR,
    funcarray: *const LONG,
    stack: *mut LONG,
) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -756(a6)
            ".short -756",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d0") fh,
            in("a0") table,
            in("a1") funcarray,
            in("a2") stack,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn InternalUnLoadSeg(DOSBase: *mut Library, seglist: BPTR, freefunc: FPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -762(a6)
            ".short -762",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") seglist,
            in("a1") freefunc,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn NewLoadSeg(DOSBase: *mut Library, file: CONST_STRPTR, tags: *const TagItem) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -768(a6)
            ".short -768",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") file,
            in("d2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn NewLoadSegTagList(
    DOSBase: *mut Library,
    file: CONST_STRPTR,
    tags: *const TagItem,
) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -768(a6)
            ".short -768",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") file,
            in("d2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AddSegment(
    DOSBase: *mut Library,
    name: CONST_STRPTR,
    seg: BPTR,
    system: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -774(a6)
            ".short -774",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") seg,
            in("d3") system,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FindSegment(
    DOSBase: *mut Library,
    name: CONST_STRPTR,
    seg: *const Segment,
    system: LONG,
) -> *mut Segment {
    let asm_ret_value: *mut Segment;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -780(a6)
            ".short -780",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") seg,
            in("d3") system,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn RemSegment(DOSBase: *mut Library, seg: *mut Segment) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -786(a6)
            ".short -786",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") seg,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn CheckSignal(DOSBase: *mut Library, mask: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -792(a6)
            ".short -792",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") mask,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ReadArgs(
    DOSBase: *mut Library,
    arg_template: CONST_STRPTR,
    array: *mut LONG,
    args: *mut RDArgs,
) -> *mut RDArgs {
    let asm_ret_value: *mut RDArgs;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -798(a6)
            ".short -798",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") arg_template,
            in("d2") array,
            in("d3") args,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FindArg(
    DOSBase: *mut Library,
    keyword: CONST_STRPTR,
    arg_template: CONST_STRPTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -804(a6)
            ".short -804",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") keyword,
            in("d2") arg_template,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ReadItem(
    DOSBase: *mut Library,
    name: CONST_STRPTR,
    maxchars: LONG,
    cSource: *mut CSource,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -810(a6)
            ".short -810",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") maxchars,
            in("d3") cSource,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn StrToLong(DOSBase: *mut Library, string: CONST_STRPTR, value: *mut LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -816(a6)
            ".short -816",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") string,
            in("d2") value,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn MatchFirst(
    DOSBase: *mut Library,
    pat: CONST_STRPTR,
    anchor: *mut AnchorPath,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -822(a6)
            ".short -822",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") pat,
            in("d2") anchor,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn MatchNext(DOSBase: *mut Library, anchor: *mut AnchorPath) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -828(a6)
            ".short -828",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") anchor,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn MatchEnd(DOSBase: *mut Library, anchor: *mut AnchorPath) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -834(a6)
            ".short -834",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") anchor,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn ParsePattern(
    DOSBase: *mut Library,
    pat: CONST_STRPTR,
    patbuf: *mut UBYTE,
    patbuflen: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -840(a6)
            ".short -840",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") pat,
            in("d2") patbuf,
            in("d3") patbuflen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn MatchPattern(
    DOSBase: *mut Library,
    patbuf: *const UBYTE,
    str_: CONST_STRPTR,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -846(a6)
            ".short -846",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") patbuf,
            in("d2") str_,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeArgs(DOSBase: *mut Library, args: *mut RDArgs) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -858(a6)
            ".short -858",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") args,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FilePart(DOSBase: *mut Library, path: CONST_STRPTR) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -870(a6)
            ".short -870",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") path,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn PathPart(DOSBase: *mut Library, path: CONST_STRPTR) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -876(a6)
            ".short -876",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") path,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn AddPart(
    DOSBase: *mut Library,
    dirname: STRPTR,
    filename: CONST_STRPTR,
    size: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -882(a6)
            ".short -882",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") dirname,
            in("d2") filename,
            in("d3") size,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn StartNotify(DOSBase: *mut Library, notify: *mut NotifyRequest) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -888(a6)
            ".short -888",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") notify,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn EndNotify(DOSBase: *mut Library, notify: *mut NotifyRequest) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -894(a6)
            ".short -894",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") notify,
        );
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn SetVar(
    DOSBase: *mut Library,
    name: CONST_STRPTR,
    buffer: CONST_STRPTR,
    size: LONG,
    flags: LONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -900(a6)
            ".short -900",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") buffer,
            in("d3") size,
            in("d4") flags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn GetVar(
    DOSBase: *mut Library,
    name: CONST_STRPTR,
    buffer: STRPTR,
    size: LONG,
    flags: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -906(a6)
            ".short -906",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") buffer,
            in("d3") size,
            in("d4") flags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn DeleteVar(DOSBase: *mut Library, name: CONST_STRPTR, flags: ULONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -912(a6)
            ".short -912",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") flags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn FindVar(DOSBase: *mut Library, name: CONST_STRPTR, type_: ULONG) -> *mut LocalVar {
    let asm_ret_value: *mut LocalVar;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -918(a6)
            ".short -918",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") type_,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn CliInitNewcli(DOSBase: *mut Library, dp: *mut DosPacket) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -930(a6)
            ".short -930",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("a0") dp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn CliInitRun(DOSBase: *mut Library, dp: *mut DosPacket) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -936(a6)
            ".short -936",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("a0") dp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn WriteChars(DOSBase: *mut Library, buf: CONST_STRPTR, buflen: ULONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -942(a6)
            ".short -942",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") buf,
            in("d2") buflen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn PutStr(DOSBase: *mut Library, str_: CONST_STRPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -948(a6)
            ".short -948",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") str_,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V36) (Kickstart 2.0)
pub unsafe fn VPrintf(DOSBase: *mut Library, format: CONST_STRPTR, argarray: CONST_APTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -954(a6)
            ".short -954",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") format,
            in("d2") argarray,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V37) (Kickstart 2.04)
pub unsafe fn ParsePatternNoCase(
    DOSBase: *mut Library,
    pat: CONST_STRPTR,
    patbuf: *mut UBYTE,
    patbuflen: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -966(a6)
            ".short -966",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") pat,
            in("d2") patbuf,
            in("d3") patbuflen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V37) (Kickstart 2.04)
pub unsafe fn MatchPatternNoCase(
    DOSBase: *mut Library,
    patbuf: *const UBYTE,
    str_: CONST_STRPTR,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -972(a6)
            ".short -972",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") patbuf,
            in("d2") str_,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V37) (Kickstart 2.04)
pub unsafe fn SameDevice(DOSBase: *mut Library, lock1: BPTR, lock2: BPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -984(a6)
            ".short -984",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock1,
            in("d2") lock2,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V39) (Kickstart 3.0)
pub unsafe fn ExAllEnd(
    DOSBase: *mut Library,
    lock: BPTR,
    buffer: *mut ExAllData,
    size: LONG,
    data: LONG,
    control: *mut ExAllControl,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -990(a6)
            ".short -990",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") lock,
            in("d2") buffer,
            in("d3") size,
            in("d4") data,
            in("d5") control,
        );
    }
}

/// libname: "dos.library" (V39) (Kickstart 3.0)
pub unsafe fn SetOwner(DOSBase: *mut Library, name: CONST_STRPTR, owner_info: LONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -996(a6)
            ".short -996",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") name,
            in("d2") owner_info,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn VolumeRequestHook(DOSBase: *mut Library, vol: CONST_STRPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1014(a6)
            ".short -1014",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") vol,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn GetCurrentDir(DOSBase: *mut Library) -> BPTR {
    let asm_ret_value: BPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1026(a6)
            ".short -1026",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn PutErrStr(DOSBase: *mut Library, str_: CONST_STRPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1128(a6)
            ".short -1128",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") str_,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn ErrorOutput(DOSBase: *mut Library) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1134(a6)
            ".short -1134",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn SelectError(DOSBase: *mut Library, fh: BPTR) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1140(a6)
            ".short -1140",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") fh,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn DoShellMethodTagList(
    DOSBase: *mut Library,
    method: ULONG,
    tags: *const TagItem,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1152(a6)
            ".short -1152",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d0") method,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "dos.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn ScanStackToken(DOSBase: *mut Library, seg: BPTR, defaultstack: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1158(a6)
            ".short -1158",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DOSBase,
            in("d1") seg,
            in("d2") defaultstack,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "drawlist.image" (V40) (Kickstart 3.1)
pub unsafe fn DRAWLIST_GetClass(DrawListBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) DrawListBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn Supervisor(SysBase: *mut Library, userFunction: FPTR) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l %a5, -(%sp)",
            "move.l {basereg}, %a6",
            "move.l {a5reg}, %a5",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a5",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            a5reg = in(reg) userFunction,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn InitCode(SysBase: *mut Library, startClass: ULONG, version: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") startClass,
            in("d1") version,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn InitStruct(SysBase: *mut Library, initTable: CONST_APTR, memory: APTR, size: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") initTable,
            in("a2") memory,
            in("d0") size,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn MakeLibrary(
    SysBase: *mut Library,
    funcInit: CONST_APTR,
    structInit: CONST_APTR,
    libInit: FPTR,
    dataSize: ULONG,
    segList: ULONG,
) -> *mut Library {
    let asm_ret_value: *mut Library;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") funcInit,
            in("a1") structInit,
            in("a2") libInit,
            in("d0") dataSize,
            in("d1") segList,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn MakeFunctions(
    SysBase: *mut Library,
    target: APTR,
    functionArray: CONST_APTR,
    funcDispBase: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") target,
            in("a1") functionArray,
            in("a2") funcDispBase,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn FindResident(SysBase: *mut Library, name: CONST_STRPTR) -> *mut Resident {
    let asm_ret_value: *mut Resident;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn InitResident(
    SysBase: *mut Library,
    resident: *const Resident,
    segList: ULONG,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") resident,
            in("d1") segList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn Alert(SysBase: *mut Library, alertNum: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d7") alertNum,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn Debug(SysBase: *mut Library, flags: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") flags,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn Disable(SysBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn Enable(SysBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn Forbid(SysBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn Permit(SysBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn SetSR(SysBase: *mut Library, newSR: ULONG, mask: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") newSR,
            in("d1") mask,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn SuperState(SysBase: *mut Library) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn UserState(SysBase: *mut Library, sysStack: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") sysStack,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn SetIntVector(
    SysBase: *mut Library,
    intNumber: LONG,
    interrupt: *mut Interrupt,
) -> *mut Interrupt {
    let asm_ret_value: *mut Interrupt;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") intNumber,
            in("a1") interrupt,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn AddIntServer(SysBase: *mut Library, intNumber: LONG, interrupt: *mut Interrupt) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -168(a6)
            ".short -168",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") intNumber,
            in("a1") interrupt,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn RemIntServer(SysBase: *mut Library, intNumber: LONG, interrupt: *mut Interrupt) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") intNumber,
            in("a1") interrupt,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn Cause(SysBase: *mut Library, interrupt: *const Interrupt) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") interrupt,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn Allocate(SysBase: *mut Library, freeList: *mut MemHeader, byteSize: ULONG) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -186(a6)
            ".short -186",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") freeList,
            in("d0") byteSize,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn Deallocate(
    SysBase: *mut Library,
    freeList: *mut MemHeader,
    memoryBlock: APTR,
    byteSize: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -192(a6)
            ".short -192",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") freeList,
            in("a1") memoryBlock,
            in("d0") byteSize,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn AllocMem(SysBase: *mut Library, byteSize: ULONG, requirements: ULONG) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -198(a6)
            ".short -198",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") byteSize,
            in("d1") requirements,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn AllocAbs(SysBase: *mut Library, byteSize: ULONG, location: APTR) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -204(a6)
            ".short -204",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") byteSize,
            in("a1") location,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn FreeMem(SysBase: *mut Library, memoryBlock: APTR, byteSize: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -210(a6)
            ".short -210",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") memoryBlock,
            in("d0") byteSize,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn AvailMem(SysBase: *mut Library, requirements: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -216(a6)
            ".short -216",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d1") requirements,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn AllocEntry(SysBase: *mut Library, entry: *const MemList) -> *mut MemList {
    let asm_ret_value: *mut MemList;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -222(a6)
            ".short -222",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") entry,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn FreeEntry(SysBase: *mut Library, entry: *mut MemList) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -228(a6)
            ".short -228",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") entry,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn Insert(SysBase: *mut Library, list: *mut List, node: *mut Node, pred: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -234(a6)
            ".short -234",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") list,
            in("a1") node,
            in("a2") pred,
        );
    }
}

/// libname: "exec.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn InsertMinNode(
    SysBase: *mut Library,
    minlist: *mut MinList,
    minnode: *mut MinNode,
    minpred: *mut MinNode,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -234(a6)
            ".short -234",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") minlist,
            in("a1") minnode,
            in("a2") minpred,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn AddHead(SysBase: *mut Library, list: *mut List, node: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") list,
            in("a1") node,
        );
    }
}

/// libname: "exec.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn AddHeadMinList(SysBase: *mut Library, minlist: *mut MinList, minnode: *mut MinNode) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") minlist,
            in("a1") minnode,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn AddTail(SysBase: *mut Library, list: *mut List, node: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -246(a6)
            ".short -246",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") list,
            in("a1") node,
        );
    }
}

/// libname: "exec.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn AddTailMinList(SysBase: *mut Library, minlist: *mut MinList, minnode: *mut MinNode) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -246(a6)
            ".short -246",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") minlist,
            in("a1") minnode,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn Remove(SysBase: *mut Library, node: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -252(a6)
            ".short -252",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") node,
        );
    }
}

/// libname: "exec.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn RemoveMinNode(SysBase: *mut Library, minnode: *mut MinNode) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -252(a6)
            ".short -252",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") minnode,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn RemHead(SysBase: *mut Library, list: *mut List) -> *mut Node {
    let asm_ret_value: *mut Node;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -258(a6)
            ".short -258",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") list,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn RemHeadMinList(SysBase: *mut Library, minlist: *mut MinList) -> *mut MinNode {
    let asm_ret_value: *mut MinNode;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -258(a6)
            ".short -258",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") minlist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn RemTail(SysBase: *mut Library, list: *mut List) -> *mut Node {
    let asm_ret_value: *mut Node;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -264(a6)
            ".short -264",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") list,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn RemTailMinList(SysBase: *mut Library, minlist: *mut MinList) -> *mut MinNode {
    let asm_ret_value: *mut MinNode;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -264(a6)
            ".short -264",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") minlist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn Enqueue(SysBase: *mut Library, list: *mut List, node: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -270(a6)
            ".short -270",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") list,
            in("a1") node,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn FindName(SysBase: *mut Library, list: *mut List, name: CONST_STRPTR) -> *mut Node {
    let asm_ret_value: *mut Node;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -276(a6)
            ".short -276",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") list,
            in("a1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn AddTask(SysBase: *mut Library, task: *mut Task, initPC: APTR, finalPC: APTR) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -282(a6)
            ".short -282",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") task,
            in("a2") initPC,
            in("a3") finalPC,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn RemTask(SysBase: *mut Library, task: *mut Task) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -288(a6)
            ".short -288",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") task,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn FindTask(SysBase: *mut Library, name: CONST_STRPTR) -> *mut Task {
    let asm_ret_value: *mut Task;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -294(a6)
            ".short -294",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn SetTaskPri(SysBase: *mut Library, task: *mut Task, priority: LONG) -> BYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -300(a6)
            ".short -300",
            "ext.w %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") task,
            in("d0") priority,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value as i8;
    }
}

/// libname: "exec.library"
pub unsafe fn SetSignal(SysBase: *mut Library, newSignals: ULONG, signalSet: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -306(a6)
            ".short -306",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") newSignals,
            in("d1") signalSet,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn SetExcept(SysBase: *mut Library, newSignals: ULONG, signalSet: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -312(a6)
            ".short -312",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") newSignals,
            in("d1") signalSet,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn Wait(SysBase: *mut Library, signalSet: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -318(a6)
            ".short -318",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") signalSet,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn Signal(SysBase: *mut Library, task: *mut Task, signalSet: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -324(a6)
            ".short -324",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") task,
            in("d0") signalSet,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn AllocSignal(SysBase: *mut Library, signalNum: LONG) -> BYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -330(a6)
            ".short -330",
            "ext.w %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") signalNum,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value as i8;
    }
}

/// libname: "exec.library"
pub unsafe fn FreeSignal(SysBase: *mut Library, signalNum: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -336(a6)
            ".short -336",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") signalNum,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn AllocTrap(SysBase: *mut Library, trapNum: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -342(a6)
            ".short -342",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") trapNum,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn FreeTrap(SysBase: *mut Library, trapNum: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -348(a6)
            ".short -348",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") trapNum,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn AddPort(SysBase: *mut Library, port: *mut MsgPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -354(a6)
            ".short -354",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") port,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn RemPort(SysBase: *mut Library, port: *mut MsgPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -360(a6)
            ".short -360",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") port,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn PutMsg(SysBase: *mut Library, port: *mut MsgPort, message: *mut Message) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -366(a6)
            ".short -366",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") port,
            in("a1") message,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn GetMsg(SysBase: *mut Library, port: *mut MsgPort) -> *mut Message {
    let asm_ret_value: *mut Message;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -372(a6)
            ".short -372",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") port,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn ReplyMsg(SysBase: *mut Library, message: *mut Message) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -378(a6)
            ".short -378",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") message,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn WaitPort(SysBase: *mut Library, port: *mut MsgPort) -> *mut Message {
    let asm_ret_value: *mut Message;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -384(a6)
            ".short -384",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") port,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn FindPort(SysBase: *mut Library, name: CONST_STRPTR) -> *mut MsgPort {
    let asm_ret_value: *mut MsgPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -390(a6)
            ".short -390",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn AddLibrary(SysBase: *mut Library, library: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -396(a6)
            ".short -396",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") library,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn RemLibrary(SysBase: *mut Library, library: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -402(a6)
            ".short -402",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") library,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn OldOpenLibrary(SysBase: *mut Library, libName: CONST_STRPTR) -> *mut Library {
    let asm_ret_value: *mut Library;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -408(a6)
            ".short -408",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") libName,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn CloseLibrary(SysBase: *mut Library, library: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -414(a6)
            ".short -414",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") library,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn SetFunction(
    SysBase: *mut Library,
    library: *mut Library,
    funcOffset: LONG,
    newFunction: FPTR,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -420(a6)
            ".short -420",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") library,
            in("a0") funcOffset,
            in("d0") newFunction,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn SumLibrary(SysBase: *mut Library, library: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -426(a6)
            ".short -426",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") library,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn AddDevice(SysBase: *mut Library, device: *mut Device) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -432(a6)
            ".short -432",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") device,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn RemDevice(SysBase: *mut Library, device: *mut Device) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -438(a6)
            ".short -438",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") device,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn OpenDevice(
    SysBase: *mut Library,
    devName: CONST_STRPTR,
    unit: ULONG,
    ioRequest: *mut IORequest,
    flags: ULONG,
) -> BYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -444(a6)
            ".short -444",
            "ext.w %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") devName,
            in("d0") unit,
            in("a1") ioRequest,
            in("d1") flags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value as i8;
    }
}

/// libname: "exec.library"
pub unsafe fn CloseDevice(SysBase: *mut Library, ioRequest: *mut IORequest) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -450(a6)
            ".short -450",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") ioRequest,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn DoIO(SysBase: *mut Library, ioRequest: *mut IORequest) -> BYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -456(a6)
            ".short -456",
            "ext.w %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") ioRequest,
            out("d0") asm_ret_value,
        );
        return asm_ret_value as i8;
    }
}

/// libname: "exec.library"
pub unsafe fn SendIO(SysBase: *mut Library, ioRequest: *mut IORequest) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -462(a6)
            ".short -462",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") ioRequest,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn CheckIO(SysBase: *mut Library, ioRequest: *const IORequest) -> *mut IORequest {
    let asm_ret_value: *mut IORequest;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -468(a6)
            ".short -468",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") ioRequest,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn WaitIO(SysBase: *mut Library, ioRequest: *mut IORequest) -> BYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -474(a6)
            ".short -474",
            "ext.w %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") ioRequest,
            out("d0") asm_ret_value,
        );
        return asm_ret_value as i8;
    }
}

/// libname: "exec.library"
pub unsafe fn AbortIO(SysBase: *mut Library, ioRequest: *mut IORequest) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -480(a6)
            ".short -480",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") ioRequest,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn AddResource(SysBase: *mut Library, resource: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -486(a6)
            ".short -486",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") resource,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn RemResource(SysBase: *mut Library, resource: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -492(a6)
            ".short -492",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") resource,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn OpenResource(SysBase: *mut Library, resName: CONST_STRPTR) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -498(a6)
            ".short -498",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") resName,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn RawDoFmt(
    SysBase: *mut Library,
    formatString: CONST_STRPTR,
    dataStream: APTR,
    putChProc: FPTR,
    putChData: APTR,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -522(a6)
            ".short -522",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") formatString,
            in("a1") dataStream,
            in("a2") putChProc,
            in("a3") putChData,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn GetCC(SysBase: *mut Library) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -528(a6)
            ".short -528",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn TypeOfMem(SysBase: *mut Library, address: CONST_APTR) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -534(a6)
            ".short -534",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") address,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn Procure(
    SysBase: *mut Library,
    sigSem: *mut SignalSemaphore,
    bidMsg: *mut SemaphoreMessage,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -540(a6)
            ".short -540",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
            in("a1") bidMsg,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library"
pub unsafe fn Vacate(
    SysBase: *mut Library,
    sigSem: *mut SignalSemaphore,
    bidMsg: *mut SemaphoreMessage,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -546(a6)
            ".short -546",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
            in("a1") bidMsg,
        );
    }
}

/// libname: "exec.library"
pub unsafe fn OpenLibrary(
    SysBase: *mut Library,
    libName: CONST_STRPTR,
    version: ULONG,
) -> *mut Library {
    let asm_ret_value: *mut Library;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -552(a6)
            ".short -552",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") libName,
            in("d0") version,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn InitSemaphore(SysBase: *mut Library, sigSem: *mut SignalSemaphore) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -558(a6)
            ".short -558",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
        );
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn ObtainSemaphore(SysBase: *mut Library, sigSem: *mut SignalSemaphore) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -564(a6)
            ".short -564",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
        );
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn ReleaseSemaphore(SysBase: *mut Library, sigSem: *mut SignalSemaphore) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -570(a6)
            ".short -570",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
        );
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn AttemptSemaphore(SysBase: *mut Library, sigSem: *mut SignalSemaphore) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -576(a6)
            ".short -576",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn ObtainSemaphoreList(SysBase: *mut Library, sigSem: *mut List) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -582(a6)
            ".short -582",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
        );
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn ReleaseSemaphoreList(SysBase: *mut Library, sigSem: *mut List) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -588(a6)
            ".short -588",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
        );
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn FindSemaphore(SysBase: *mut Library, name: CONST_STRPTR) -> *mut SignalSemaphore {
    let asm_ret_value: *mut SignalSemaphore;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -594(a6)
            ".short -594",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn AddSemaphore(SysBase: *mut Library, sigSem: *mut SignalSemaphore) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -600(a6)
            ".short -600",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") sigSem,
        );
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn RemSemaphore(SysBase: *mut Library, sigSem: *mut SignalSemaphore) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -606(a6)
            ".short -606",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") sigSem,
        );
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn SumKickData(SysBase: *mut Library) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -612(a6)
            ".short -612",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn AddMemList(
    SysBase: *mut Library,
    size: ULONG,
    attributes: ULONG,
    pri: LONG,
    base: APTR,
    name: STRPTR,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -618(a6)
            ".short -618",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") size,
            in("d1") attributes,
            in("d2") pri,
            in("a0") base,
            in("a1") name,
        );
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn CopyMem(SysBase: *mut Library, source: CONST_APTR, dest: APTR, size: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -624(a6)
            ".short -624",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") source,
            in("a1") dest,
            in("d0") size,
        );
    }
}

/// libname: "exec.library" (V33) (Kickstart 1.2)
pub unsafe fn CopyMemQuick(SysBase: *mut Library, source: CONST_APTR, dest: APTR, size: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -630(a6)
            ".short -630",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") source,
            in("a1") dest,
            in("d0") size,
        );
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn CacheClearU(SysBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -636(a6)
            ".short -636",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
        );
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn CacheClearE(SysBase: *mut Library, address: APTR, length: ULONG, caches: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -642(a6)
            ".short -642",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") address,
            in("d0") length,
            in("d1") caches,
        );
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn CacheControl(SysBase: *mut Library, cacheBits: ULONG, cacheMask: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -648(a6)
            ".short -648",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") cacheBits,
            in("d1") cacheMask,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateIORequest(SysBase: *mut Library, port: *mut MsgPort, size: ULONG) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -654(a6)
            ".short -654",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") port,
            in("d0") size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn DeleteIORequest(SysBase: *mut Library, iorequest: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -660(a6)
            ".short -660",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") iorequest,
        );
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateMsgPort(SysBase: *mut Library) -> *mut MsgPort {
    let asm_ret_value: *mut MsgPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -666(a6)
            ".short -666",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn DeleteMsgPort(SysBase: *mut Library, port: *mut MsgPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -672(a6)
            ".short -672",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") port,
        );
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn ObtainSemaphoreShared(SysBase: *mut Library, sigSem: *mut SignalSemaphore) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -678(a6)
            ".short -678",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
        );
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn AllocVec(SysBase: *mut Library, byteSize: ULONG, requirements: ULONG) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -684(a6)
            ".short -684",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") byteSize,
            in("d1") requirements,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeVec(SysBase: *mut Library, memoryBlock: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -690(a6)
            ".short -690",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") memoryBlock,
        );
    }
}

/// libname: "exec.library" (V39) (Kickstart 3.0)
pub unsafe fn CreatePool(
    SysBase: *mut Library,
    requirements: ULONG,
    puddleSize: ULONG,
    threshSize: ULONG,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -696(a6)
            ".short -696",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("d0") requirements,
            in("d1") puddleSize,
            in("d2") threshSize,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V39) (Kickstart 3.0)
pub unsafe fn DeletePool(SysBase: *mut Library, poolHeader: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -702(a6)
            ".short -702",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") poolHeader,
        );
    }
}

/// libname: "exec.library" (V39) (Kickstart 3.0)
pub unsafe fn AllocPooled(SysBase: *mut Library, poolHeader: APTR, memSize: ULONG) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -708(a6)
            ".short -708",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") poolHeader,
            in("d0") memSize,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V39) (Kickstart 3.0)
pub unsafe fn FreePooled(SysBase: *mut Library, poolHeader: APTR, memory: APTR, memSize: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -714(a6)
            ".short -714",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") poolHeader,
            in("a1") memory,
            in("d0") memSize,
        );
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn AttemptSemaphoreShared(SysBase: *mut Library, sigSem: *mut SignalSemaphore) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -720(a6)
            ".short -720",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") sigSem,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn ColdReboot(SysBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -726(a6)
            ".short -726",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
        );
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn StackSwap(SysBase: *mut Library, newStack: *mut StackSwapStruct) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -732(a6)
            ".short -732",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") newStack,
        );
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn CachePreDMA(
    SysBase: *mut Library,
    address: CONST_APTR,
    length: *mut ULONG,
    flags: ULONG,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -762(a6)
            ".short -762",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") address,
            in("a1") length,
            in("d0") flags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V36) (Kickstart 2.0)
pub unsafe fn CachePostDMA(
    SysBase: *mut Library,
    address: CONST_APTR,
    length: *mut ULONG,
    flags: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -768(a6)
            ".short -768",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") address,
            in("a1") length,
            in("d0") flags,
        );
    }
}

/// libname: "exec.library" (V39) (Kickstart 3.0)
pub unsafe fn AddMemHandler(SysBase: *mut Library, memhand: *mut Interrupt) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -774(a6)
            ".short -774",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") memhand,
        );
    }
}

/// libname: "exec.library" (V39) (Kickstart 3.0)
pub unsafe fn RemMemHandler(SysBase: *mut Library, memhand: *mut Interrupt) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -780(a6)
            ".short -780",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a1") memhand,
        );
    }
}

/// libname: "exec.library" (V39) (Kickstart 3.0)
pub unsafe fn ObtainQuickVector(SysBase: *mut Library, interruptCode: APTR) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -786(a6)
            ".short -786",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") interruptCode,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "exec.library" (V45) (Kickstart 3.9 / 2000)
pub unsafe fn NewMinList(SysBase: *mut Library, minlist: *mut MinList) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -828(a6)
            ".short -828",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SysBase,
            in("a0") minlist,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn AddConfigDev(ExpansionBase: *mut Library, configDev: *mut ConfigDev) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") configDev,
        );
    }
}

/// libname: "expansion.library" (V36) (Kickstart 2.0)
pub unsafe fn AddBootNode(
    ExpansionBase: *mut Library,
    bootPri: LONG,
    flags: ULONG,
    deviceNode: *mut DeviceNode,
    configDev: *mut ConfigDev,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("d0") bootPri,
            in("d1") flags,
            in("a0") deviceNode,
            in("a1") configDev,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn AllocBoardMem(ExpansionBase: *mut Library, slotSpec: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("d0") slotSpec,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn AllocConfigDev(ExpansionBase: *mut Library) -> *mut ConfigDev {
    let asm_ret_value: *mut ConfigDev;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn AllocExpansionMem(
    ExpansionBase: *mut Library,
    numSlots: ULONG,
    slotAlign: ULONG,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("d0") numSlots,
            in("d1") slotAlign,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn ConfigBoard(ExpansionBase: *mut Library, board: APTR, configDev: *mut ConfigDev) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") board,
            in("a1") configDev,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn ConfigChain(ExpansionBase: *mut Library, baseAddr: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") baseAddr,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn FindConfigDev(
    ExpansionBase: *mut Library,
    oldConfigDev: *const ConfigDev,
    manufacturer: LONG,
    product: LONG,
) -> *mut ConfigDev {
    let asm_ret_value: *mut ConfigDev;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") oldConfigDev,
            in("d0") manufacturer,
            in("d1") product,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn FreeBoardMem(ExpansionBase: *mut Library, startSlot: ULONG, slotSpec: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("d0") startSlot,
            in("d1") slotSpec,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn FreeConfigDev(ExpansionBase: *mut Library, configDev: *mut ConfigDev) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") configDev,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn FreeExpansionMem(ExpansionBase: *mut Library, startSlot: ULONG, numSlots: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("d0") startSlot,
            in("d1") numSlots,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn ReadExpansionByte(
    ExpansionBase: *mut Library,
    board: CONST_APTR,
    offset: ULONG,
) -> UBYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "and.w #0x00ff, %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") board,
            in("d0") offset,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value as u8;
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn ReadExpansionRom(
    ExpansionBase: *mut Library,
    board: CONST_APTR,
    configDev: *mut ConfigDev,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") board,
            in("a1") configDev,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn RemConfigDev(ExpansionBase: *mut Library, configDev: *mut ConfigDev) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") configDev,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn WriteExpansionByte(
    ExpansionBase: *mut Library,
    board: APTR,
    offset: ULONG,
    byte: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") board,
            in("d0") offset,
            in("d1") byte,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn ObtainConfigBinding(ExpansionBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn ReleaseConfigBinding(ExpansionBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn SetCurrentBinding(
    ExpansionBase: *mut Library,
    currentBinding: *mut CurrentBinding,
    bindingSize: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") currentBinding,
            in("d0") bindingSize,
        );
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn GetCurrentBinding(
    ExpansionBase: *mut Library,
    currentBinding: *const CurrentBinding,
    bindingSize: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") currentBinding,
            in("d0") bindingSize,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn MakeDosNode(ExpansionBase: *mut Library, parmPacket: CONST_APTR) -> *mut DeviceNode {
    let asm_ret_value: *mut DeviceNode;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("a0") parmPacket,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "expansion.library" (V33) (Kickstart 1.2)
pub unsafe fn AddDosNode(
    ExpansionBase: *mut Library,
    bootPri: LONG,
    flags: ULONG,
    deviceNode: *mut DeviceNode,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ExpansionBase,
            in("d0") bootPri,
            in("d1") flags,
            in("a0") deviceNode,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "fuelgauge.gadget" (V40) (Kickstart 3.1)
pub unsafe fn FUELGAUGE_GetClass(FuelGaugeBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) FuelGaugeBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateGadgetA(
    GadToolsBase: *mut Library,
    kind: ULONG,
    gad: *mut Gadget,
    ng: *mut NewGadget,
    taglist: *const TagItem,
) -> *mut Gadget {
    let asm_ret_value: *mut Gadget;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("d0") kind,
            in("a0") gad,
            in("a1") ng,
            in("a2") taglist,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeGadgets(GadToolsBase: *mut Library, gad: *mut Gadget) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") gad,
        );
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn GT_SetGadgetAttrsA(
    GadToolsBase: *mut Library,
    gad: *mut Gadget,
    win: *mut Window,
    req: *mut Requester,
    taglist: *const TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") gad,
            in("a1") win,
            in("a2") req,
            in("a3") taglist,
        );
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateMenusA(
    GadToolsBase: *mut Library,
    newmenu: *const NewMenu,
    taglist: *mut TagItem,
) -> *mut Menu {
    let asm_ret_value: *mut Menu;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") newmenu,
            in("a1") taglist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeMenus(GadToolsBase: *mut Library, menu: *mut Menu) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") menu,
        );
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn LayoutMenuItemsA(
    GadToolsBase: *mut Library,
    firstitem: *mut MenuItem,
    vi: APTR,
    taglist: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") firstitem,
            in("a1") vi,
            in("a2") taglist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn LayoutMenusA(
    GadToolsBase: *mut Library,
    firstmenu: *mut Menu,
    vi: APTR,
    taglist: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") firstmenu,
            in("a1") vi,
            in("a2") taglist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn GT_GetIMsg(GadToolsBase: *mut Library, iport: *mut MsgPort) -> *mut IntuiMessage {
    let asm_ret_value: *mut IntuiMessage;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") iport,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn GT_ReplyIMsg(GadToolsBase: *mut Library, imsg: *mut IntuiMessage) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a1") imsg,
        );
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn GT_RefreshWindow(GadToolsBase: *mut Library, win: *mut Window, req: *mut Requester) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") win,
            in("a1") req,
        );
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn GT_BeginRefresh(GadToolsBase: *mut Library, win: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") win,
        );
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn GT_EndRefresh(GadToolsBase: *mut Library, win: *mut Window, complete: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") win,
            in("d0") complete,
        );
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn GT_FilterIMsg(
    GadToolsBase: *mut Library,
    imsg: *const IntuiMessage,
) -> *mut IntuiMessage {
    let asm_ret_value: *mut IntuiMessage;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a1") imsg,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn GT_PostFilterIMsg(
    GadToolsBase: *mut Library,
    imsg: *mut IntuiMessage,
) -> *mut IntuiMessage {
    let asm_ret_value: *mut IntuiMessage;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a1") imsg,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateContext(GadToolsBase: *mut Library, glistptr: *mut *mut Gadget) -> *mut Gadget {
    let asm_ret_value: *mut Gadget;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") glistptr,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn DrawBevelBoxA(
    GadToolsBase: *mut Library,
    rport: *mut RastPort,
    left: LONG,
    top: LONG,
    width: LONG,
    height: LONG,
    taglist: *const TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") rport,
            in("d0") left,
            in("d1") top,
            in("d2") width,
            in("d3") height,
            in("a1") taglist,
        );
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn GetVisualInfoA(
    GadToolsBase: *mut Library,
    screen: *mut Screen,
    taglist: *const TagItem,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") screen,
            in("a1") taglist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeVisualInfo(GadToolsBase: *mut Library, vi: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") vi,
        );
    }
}

/// libname: "gadtools.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn SetDesignFontA(
    GadToolsBase: *mut Library,
    vi: APTR,
    tattr: *mut TextAttr,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") vi,
            in("a1") tattr,
            in("a2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn ScaleGadgetRectA(
    GadToolsBase: *mut Library,
    ng: *mut NewGadget,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") ng,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "gadtools.library" (V39) (Kickstart 3.0)
pub unsafe fn GT_GetGadgetAttrsA(
    GadToolsBase: *mut Library,
    gad: *mut Gadget,
    win: *mut Window,
    req: *mut Requester,
    taglist: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GadToolsBase,
            in("a0") gad,
            in("a1") win,
            in("a2") req,
            in("a3") taglist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "getcolor.gadget" (V40) (Kickstart 3.1)
pub unsafe fn GETCOLOR_GetClass(GetColorBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GetColorBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "getfile.gadget" (V40) (Kickstart 3.1)
pub unsafe fn GETFILE_GetClass(GetFileBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GetFileBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "getfont.gadget" (V40) (Kickstart 3.1)
pub unsafe fn GETFONT_GetClass(GetFontBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GetFontBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "getscreenmode.gadget" (V40) (Kickstart 3.1)
pub unsafe fn GETSCREENMODE_GetClass(GetScreenModeBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GetScreenModeBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "glyph.image" (V40) (Kickstart 3.1)
pub unsafe fn GLYPH_GetClass(GlyphBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GlyphBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn BltBitMap(
    GfxBase: *mut Library,
    srcBitMap: *const BitMap,
    xSrc: LONG,
    ySrc: LONG,
    destBitMap: *mut BitMap,
    xDest: LONG,
    yDest: LONG,
    xSize: LONG,
    ySize: LONG,
    minterm: ULONG,
    mask: ULONG,
    tempA: PLANEPTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") srcBitMap,
            in("d0") xSrc,
            in("d1") ySrc,
            in("a1") destBitMap,
            in("d2") xDest,
            in("d3") yDest,
            in("d4") xSize,
            in("d5") ySize,
            in("d6") minterm,
            in("d7") mask,
            in("a2") tempA,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn BltTemplate(
    GfxBase: *mut Library,
    source: PLANEPTR,
    xSrc: LONG,
    srcMod: LONG,
    destRP: *mut RastPort,
    xDest: LONG,
    yDest: LONG,
    xSize: LONG,
    ySize: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") source,
            in("d0") xSrc,
            in("d1") srcMod,
            in("a1") destRP,
            in("d2") xDest,
            in("d3") yDest,
            in("d4") xSize,
            in("d5") ySize,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn ClearEOL(GfxBase: *mut Library, rp: *mut RastPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn ClearScreen(GfxBase: *mut Library, rp: *mut RastPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn TextLength(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    string: CONST_STRPTR,
    count: ULONG,
) -> WORD {
    let asm_ret_value: WORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("a0") string,
            in("d0") count,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn Text(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    string: CONST_STRPTR,
    count: ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("a0") string,
            in("d0") count,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn SetFont(GfxBase: *mut Library, rp: *mut RastPort, textFont: *mut TextFont) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("a0") textFont,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn OpenFont(GfxBase: *mut Library, textAttr: *const TextAttr) -> *mut TextFont {
    let asm_ret_value: *mut TextFont;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") textAttr,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn CloseFont(GfxBase: *mut Library, textFont: *mut TextFont) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") textFont,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn AskSoftStyle(GfxBase: *mut Library, rp: *mut RastPort) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn SetSoftStyle(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    style: ULONG,
    enable: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") style,
            in("d1") enable,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn AddBob(GfxBase: *mut Library, bob: *mut Bob, rp: *mut RastPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") bob,
            in("a1") rp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn AddVSprite(GfxBase: *mut Library, vSprite: *mut VSprite, rp: *mut RastPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vSprite,
            in("a1") rp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn DoCollision(GfxBase: *mut Library, rp: *mut RastPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn DrawGList(GfxBase: *mut Library, rp: *mut RastPort, vp: *mut ViewPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("a0") vp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn InitGels(
    GfxBase: *mut Library,
    head: *mut VSprite,
    tail: *mut VSprite,
    gelsInfo: *mut GelsInfo,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") head,
            in("a1") tail,
            in("a2") gelsInfo,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn InitMasks(GfxBase: *mut Library, vSprite: *mut VSprite) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vSprite,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn RemIBob(GfxBase: *mut Library, bob: *mut Bob, rp: *mut RastPort, vp: *mut ViewPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") bob,
            in("a1") rp,
            in("a2") vp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn RemVSprite(GfxBase: *mut Library, vSprite: *mut VSprite) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vSprite,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn SetCollision(
    GfxBase: *mut Library,
    num: ULONG,
    routine: FPTR,
    gelsInfo: *mut GelsInfo,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") num,
            in("a0") routine,
            in("a1") gelsInfo,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn SortGList(GfxBase: *mut Library, rp: *mut RastPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn AddAnimOb(
    GfxBase: *mut Library,
    anOb: *mut AnimOb,
    anKey: *mut *mut AnimOb,
    rp: *mut RastPort,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") anOb,
            in("a1") anKey,
            in("a2") rp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn Animate(GfxBase: *mut Library, anKey: *mut *mut AnimOb, rp: *mut RastPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") anKey,
            in("a1") rp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn GetGBuffers(
    GfxBase: *mut Library,
    anOb: *mut AnimOb,
    rp: *mut RastPort,
    flag: LONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -168(a6)
            ".short -168",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") anOb,
            in("a1") rp,
            in("d0") flag,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn InitGMasks(GfxBase: *mut Library, anOb: *mut AnimOb) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") anOb,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn DrawEllipse(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    xCenter: LONG,
    yCenter: LONG,
    a: LONG,
    b: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") xCenter,
            in("d1") yCenter,
            in("d2") a,
            in("d3") b,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn AreaEllipse(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    xCenter: LONG,
    yCenter: LONG,
    a: LONG,
    b: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -186(a6)
            ".short -186",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") xCenter,
            in("d1") yCenter,
            in("d2") a,
            in("d3") b,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn LoadRGB4(
    GfxBase: *mut Library,
    vp: *mut ViewPort,
    colors: *const UWORD,
    count: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -192(a6)
            ".short -192",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            in("a1") colors,
            in("d0") count,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn InitRastPort(GfxBase: *mut Library, rp: *mut RastPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -198(a6)
            ".short -198",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn InitVPort(GfxBase: *mut Library, vp: *mut ViewPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -204(a6)
            ".short -204",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn MrgCop(GfxBase: *mut Library, view: *mut View) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -210(a6)
            ".short -210",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") view,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn MakeVPort(GfxBase: *mut Library, view: *mut View, vp: *mut ViewPort) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -216(a6)
            ".short -216",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") view,
            in("a1") vp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn LoadView(GfxBase: *mut Library, view: *mut View) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -222(a6)
            ".short -222",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") view,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn WaitBlit(GfxBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -228(a6)
            ".short -228",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn SetRast(GfxBase: *mut Library, rp: *mut RastPort, pen: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -234(a6)
            ".short -234",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") pen,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn Move(GfxBase: *mut Library, rp: *mut RastPort, x: LONG, y: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") x,
            in("d1") y,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn Draw(GfxBase: *mut Library, rp: *mut RastPort, x: LONG, y: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -246(a6)
            ".short -246",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") x,
            in("d1") y,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn AreaMove(GfxBase: *mut Library, rp: *mut RastPort, x: LONG, y: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -252(a6)
            ".short -252",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") x,
            in("d1") y,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn AreaDraw(GfxBase: *mut Library, rp: *mut RastPort, x: LONG, y: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -258(a6)
            ".short -258",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") x,
            in("d1") y,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn AreaEnd(GfxBase: *mut Library, rp: *mut RastPort) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -264(a6)
            ".short -264",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn WaitTOF(GfxBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -270(a6)
            ".short -270",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn QBlit(GfxBase: *mut Library, blit: *mut bltnode) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -276(a6)
            ".short -276",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") blit,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn InitArea(
    GfxBase: *mut Library,
    areaInfo: *mut AreaInfo,
    vectorBuffer: APTR,
    maxVectors: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -282(a6)
            ".short -282",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") areaInfo,
            in("a1") vectorBuffer,
            in("d0") maxVectors,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn SetRGB4(
    GfxBase: *mut Library,
    vp: *mut ViewPort,
    index: LONG,
    red: ULONG,
    green: ULONG,
    blue: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -288(a6)
            ".short -288",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            in("d0") index,
            in("d1") red,
            in("d2") green,
            in("d3") blue,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn QBSBlit(GfxBase: *mut Library, blit: *mut bltnode) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -294(a6)
            ".short -294",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") blit,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn BltClear(GfxBase: *mut Library, memBlock: PLANEPTR, byteCount: ULONG, flags: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -300(a6)
            ".short -300",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") memBlock,
            in("d0") byteCount,
            in("d1") flags,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn RectFill(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    xMin: LONG,
    yMin: LONG,
    xMax: LONG,
    yMax: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -306(a6)
            ".short -306",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") xMin,
            in("d1") yMin,
            in("d2") xMax,
            in("d3") yMax,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn BltPattern(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    mask: PLANEPTR,
    xMin: LONG,
    yMin: LONG,
    xMax: LONG,
    yMax: LONG,
    maskBPR: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -312(a6)
            ".short -312",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("a0") mask,
            in("d0") xMin,
            in("d1") yMin,
            in("d2") xMax,
            in("d3") yMax,
            in("d4") maskBPR,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn ReadPixel(GfxBase: *mut Library, rp: *mut RastPort, x: LONG, y: LONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -318(a6)
            ".short -318",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") x,
            in("d1") y,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn WritePixel(GfxBase: *mut Library, rp: *mut RastPort, x: LONG, y: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -324(a6)
            ".short -324",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") x,
            in("d1") y,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn Flood(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    mode: ULONG,
    x: LONG,
    y: LONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -330(a6)
            ".short -330",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d2") mode,
            in("d0") x,
            in("d1") y,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn PolyDraw(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    count: LONG,
    polyTable: *const WORD,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -336(a6)
            ".short -336",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") count,
            in("a0") polyTable,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn SetAPen(GfxBase: *mut Library, rp: *mut RastPort, pen: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -342(a6)
            ".short -342",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") pen,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn SetBPen(GfxBase: *mut Library, rp: *mut RastPort, pen: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -348(a6)
            ".short -348",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") pen,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn SetDrMd(GfxBase: *mut Library, rp: *mut RastPort, drawMode: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -354(a6)
            ".short -354",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") drawMode,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn InitView(GfxBase: *mut Library, view: *mut View) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -360(a6)
            ".short -360",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") view,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn CBump(GfxBase: *mut Library, copList: *mut UCopList) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -366(a6)
            ".short -366",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") copList,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn CMove(
    GfxBase: *mut Library,
    copList: *mut UCopList,
    destination: APTR,
    data: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -372(a6)
            ".short -372",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") copList,
            in("d0") destination,
            in("d1") data,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn CWait(GfxBase: *mut Library, copList: *mut UCopList, v: LONG, h: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -378(a6)
            ".short -378",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") copList,
            in("d0") v,
            in("d1") h,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn VBeamPos(GfxBase: *mut Library) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -384(a6)
            ".short -384",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn InitBitMap(
    GfxBase: *mut Library,
    bitMap: *mut BitMap,
    depth: LONG,
    width: LONG,
    height: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -390(a6)
            ".short -390",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") bitMap,
            in("d0") depth,
            in("d1") width,
            in("d2") height,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn ScrollRaster(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    dx: LONG,
    dy: LONG,
    xMin: LONG,
    yMin: LONG,
    xMax: LONG,
    yMax: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -396(a6)
            ".short -396",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") dx,
            in("d1") dy,
            in("d2") xMin,
            in("d3") yMin,
            in("d4") xMax,
            in("d5") yMax,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn WaitBOVP(GfxBase: *mut Library, vp: *mut ViewPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -402(a6)
            ".short -402",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn GetSprite(GfxBase: *mut Library, sprite: *mut SimpleSprite, num: LONG) -> WORD {
    let asm_ret_value: WORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -408(a6)
            ".short -408",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") sprite,
            in("d0") num,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn FreeSprite(GfxBase: *mut Library, num: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -414(a6)
            ".short -414",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") num,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn ChangeSprite(
    GfxBase: *mut Library,
    vp: *mut ViewPort,
    sprite: *mut SimpleSprite,
    newData: *mut UWORD,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -420(a6)
            ".short -420",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            in("a1") sprite,
            in("a2") newData,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn MoveSprite(
    GfxBase: *mut Library,
    vp: *mut ViewPort,
    sprite: *mut SimpleSprite,
    x: LONG,
    y: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -426(a6)
            ".short -426",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            in("a1") sprite,
            in("d0") x,
            in("d1") y,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn LockLayerRom(GfxBase: *mut Library, layer: *mut Layer) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l %a5, -(%sp)",
            "move.l {basereg}, %a6",
            "move.l {a5reg}, %a5",
            ".short 0x4eae", // jsr -432(a6)
            ".short -432",
            "move.l (%sp)+, %a5",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            a5reg = in(reg) layer,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn UnlockLayerRom(GfxBase: *mut Library, layer: *mut Layer) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l %a5, -(%sp)",
            "move.l {basereg}, %a6",
            "move.l {a5reg}, %a5",
            ".short 0x4eae", // jsr -438(a6)
            ".short -438",
            "move.l (%sp)+, %a5",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            a5reg = in(reg) layer,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn SyncSBitMap(GfxBase: *mut Library, layer: *mut Layer) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -444(a6)
            ".short -444",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") layer,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn CopySBitMap(GfxBase: *mut Library, layer: *mut Layer) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -450(a6)
            ".short -450",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") layer,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn OwnBlitter(GfxBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -456(a6)
            ".short -456",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn DisownBlitter(GfxBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -462(a6)
            ".short -462",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn InitTmpRas(
    GfxBase: *mut Library,
    tmpRas: *mut TmpRas,
    buffer: PLANEPTR,
    size: LONG,
) -> *mut TmpRas {
    let asm_ret_value: *mut TmpRas;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -468(a6)
            ".short -468",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") tmpRas,
            in("a1") buffer,
            in("d0") size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn AskFont(GfxBase: *mut Library, rp: *mut RastPort, textAttr: *mut TextAttr) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -474(a6)
            ".short -474",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("a0") textAttr,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn AddFont(GfxBase: *mut Library, textFont: *mut TextFont) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -480(a6)
            ".short -480",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") textFont,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn RemFont(GfxBase: *mut Library, textFont: *mut TextFont) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -486(a6)
            ".short -486",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") textFont,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn AllocRaster(GfxBase: *mut Library, width: ULONG, height: ULONG) -> PLANEPTR {
    let asm_ret_value: PLANEPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -492(a6)
            ".short -492",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") width,
            in("d1") height,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn FreeRaster(GfxBase: *mut Library, p: PLANEPTR, width: ULONG, height: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -498(a6)
            ".short -498",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") p,
            in("d0") width,
            in("d1") height,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn AndRectRegion(
    GfxBase: *mut Library,
    region: *mut Region,
    rectangle: *const Rectangle,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -504(a6)
            ".short -504",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") region,
            in("a1") rectangle,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn OrRectRegion(
    GfxBase: *mut Library,
    region: *mut Region,
    rectangle: *const Rectangle,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -510(a6)
            ".short -510",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") region,
            in("a1") rectangle,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn NewRegion(GfxBase: *mut Library) -> *mut Region {
    let asm_ret_value: *mut Region;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -516(a6)
            ".short -516",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn ClearRectRegion(
    GfxBase: *mut Library,
    region: *mut Region,
    rectangle: *const Rectangle,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -522(a6)
            ".short -522",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") region,
            in("a1") rectangle,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn ClearRegion(GfxBase: *mut Library, region: *mut Region) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -528(a6)
            ".short -528",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") region,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn DisposeRegion(GfxBase: *mut Library, region: *mut Region) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -534(a6)
            ".short -534",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") region,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn FreeVPortCopLists(GfxBase: *mut Library, vp: *mut ViewPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -540(a6)
            ".short -540",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn FreeCopList(GfxBase: *mut Library, copList: *mut CopList) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -546(a6)
            ".short -546",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") copList,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn ClipBlit(
    GfxBase: *mut Library,
    srcRP: *mut RastPort,
    xSrc: LONG,
    ySrc: LONG,
    destRP: *mut RastPort,
    xDest: LONG,
    yDest: LONG,
    xSize: LONG,
    ySize: LONG,
    minterm: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -552(a6)
            ".short -552",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") srcRP,
            in("d0") xSrc,
            in("d1") ySrc,
            in("a1") destRP,
            in("d2") xDest,
            in("d3") yDest,
            in("d4") xSize,
            in("d5") ySize,
            in("d6") minterm,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn XorRectRegion(
    GfxBase: *mut Library,
    region: *mut Region,
    rectangle: *const Rectangle,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -558(a6)
            ".short -558",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") region,
            in("a1") rectangle,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn FreeCprList(GfxBase: *mut Library, cprList: *mut cprlist) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -564(a6)
            ".short -564",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") cprList,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn GetColorMap(GfxBase: *mut Library, entries: LONG) -> *mut ColorMap {
    let asm_ret_value: *mut ColorMap;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -570(a6)
            ".short -570",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") entries,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn FreeColorMap(GfxBase: *mut Library, colorMap: *mut ColorMap) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -576(a6)
            ".short -576",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") colorMap,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn GetRGB4(GfxBase: *mut Library, colorMap: *mut ColorMap, entry: LONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -582(a6)
            ".short -582",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") colorMap,
            in("d0") entry,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn ScrollVPort(GfxBase: *mut Library, vp: *mut ViewPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -588(a6)
            ".short -588",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn UCopperListInit(
    GfxBase: *mut Library,
    uCopList: *mut UCopList,
    n: LONG,
) -> *mut CopList {
    let asm_ret_value: *mut CopList;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -594(a6)
            ".short -594",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") uCopList,
            in("d0") n,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn FreeGBuffers(
    GfxBase: *mut Library,
    anOb: *mut AnimOb,
    rp: *mut RastPort,
    flag: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -600(a6)
            ".short -600",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") anOb,
            in("a1") rp,
            in("d0") flag,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn BltBitMapRastPort(
    GfxBase: *mut Library,
    srcBitMap: *const BitMap,
    xSrc: LONG,
    ySrc: LONG,
    destRP: *mut RastPort,
    xDest: LONG,
    yDest: LONG,
    xSize: LONG,
    ySize: LONG,
    minterm: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -606(a6)
            ".short -606",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") srcBitMap,
            in("d0") xSrc,
            in("d1") ySrc,
            in("a1") destRP,
            in("d2") xDest,
            in("d3") yDest,
            in("d4") xSize,
            in("d5") ySize,
            in("d6") minterm,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn OrRegionRegion(
    GfxBase: *mut Library,
    srcRegion: *const Region,
    destRegion: *mut Region,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -612(a6)
            ".short -612",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") srcRegion,
            in("a1") destRegion,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn XorRegionRegion(
    GfxBase: *mut Library,
    srcRegion: *const Region,
    destRegion: *mut Region,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -618(a6)
            ".short -618",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") srcRegion,
            in("a1") destRegion,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn AndRegionRegion(
    GfxBase: *mut Library,
    srcRegion: *const Region,
    destRegion: *mut Region,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -624(a6)
            ".short -624",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") srcRegion,
            in("a1") destRegion,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library"
pub unsafe fn SetRGB4CM(
    GfxBase: *mut Library,
    colorMap: *mut ColorMap,
    index: LONG,
    red: ULONG,
    green: ULONG,
    blue: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -630(a6)
            ".short -630",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") colorMap,
            in("d0") index,
            in("d1") red,
            in("d2") green,
            in("d3") blue,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn BltMaskBitMapRastPort(
    GfxBase: *mut Library,
    srcBitMap: *const BitMap,
    xSrc: LONG,
    ySrc: LONG,
    destRP: *mut RastPort,
    xDest: LONG,
    yDest: LONG,
    xSize: LONG,
    ySize: LONG,
    minterm: ULONG,
    bltMask: PLANEPTR,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -636(a6)
            ".short -636",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") srcBitMap,
            in("d0") xSrc,
            in("d1") ySrc,
            in("a1") destRP,
            in("d2") xDest,
            in("d3") yDest,
            in("d4") xSize,
            in("d5") ySize,
            in("d6") minterm,
            in("a2") bltMask,
        );
    }
}

/// libname: "graphics.library"
pub unsafe fn AttemptLockLayerRom(GfxBase: *mut Library, layer: *mut Layer) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l %a5, -(%sp)",
            "move.l {basereg}, %a6",
            "move.l {a5reg}, %a5",
            ".short 0x4eae", // jsr -654(a6)
            ".short -654",
            "move.l (%sp)+, %a5",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            a5reg = in(reg) layer,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn GfxNew(GfxBase: *mut Library, gfxNodeType: ULONG) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -660(a6)
            ".short -660",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") gfxNodeType,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn GfxFree(GfxBase: *mut Library, gfxNodePtr: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -666(a6)
            ".short -666",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") gfxNodePtr,
        );
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn GfxAssociate(GfxBase: *mut Library, associateNode: APTR, gfxNodePtr: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -672(a6)
            ".short -672",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") associateNode,
            in("a1") gfxNodePtr,
        );
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn BitMapScale(GfxBase: *mut Library, bitScaleArgs: *mut BitScaleArgs) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -678(a6)
            ".short -678",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") bitScaleArgs,
        );
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn ScalerDiv(
    GfxBase: *mut Library,
    factor: ULONG,
    numerator: ULONG,
    denominator: ULONG,
) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -684(a6)
            ".short -684",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") factor,
            in("d1") numerator,
            in("d2") denominator,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn TextExtent(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    string: CONST_STRPTR,
    count: LONG,
    textExtent: *mut TextExtent,
) -> WORD {
    let asm_ret_value: WORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -690(a6)
            ".short -690",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("a0") string,
            in("d0") count,
            in("a2") textExtent,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn TextFit(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    string: CONST_STRPTR,
    strLen: ULONG,
    textExtent: *const TextExtent,
    constrainingExtent: *const TextExtent,
    strDirection: LONG,
    constrainingBitWidth: ULONG,
    constrainingBitHeight: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -696(a6)
            ".short -696",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("a0") string,
            in("d0") strLen,
            in("a2") textExtent,
            in("a3") constrainingExtent,
            in("d1") strDirection,
            in("d2") constrainingBitWidth,
            in("d3") constrainingBitHeight,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn GfxLookUp(GfxBase: *mut Library, associateNode: CONST_APTR) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -702(a6)
            ".short -702",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") associateNode,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn VideoControl(
    GfxBase: *mut Library,
    colorMap: *mut ColorMap,
    tagarray: *mut TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -708(a6)
            ".short -708",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") colorMap,
            in("a1") tagarray,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn OpenMonitor(
    GfxBase: *mut Library,
    monitorName: CONST_STRPTR,
    displayID: ULONG,
) -> *mut MonitorSpec {
    let asm_ret_value: *mut MonitorSpec;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -714(a6)
            ".short -714",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") monitorName,
            in("d0") displayID,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn CloseMonitor(GfxBase: *mut Library, monitorSpec: *mut MonitorSpec) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -720(a6)
            ".short -720",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") monitorSpec,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn FindDisplayInfo(GfxBase: *mut Library, displayID: ULONG) -> DisplayInfoHandle {
    let asm_ret_value: DisplayInfoHandle;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -726(a6)
            ".short -726",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") displayID,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn NextDisplayInfo(GfxBase: *mut Library, displayID: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -732(a6)
            ".short -732",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") displayID,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn GetDisplayInfoData(
    GfxBase: *mut Library,
    handle: DisplayInfoHandle,
    buf: APTR,
    size: ULONG,
    tagID: ULONG,
    displayID: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -756(a6)
            ".short -756",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") handle,
            in("a1") buf,
            in("d0") size,
            in("d1") tagID,
            in("d2") displayID,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn FontExtent(
    GfxBase: *mut Library,
    font: *const TextFont,
    fontExtent: *mut TextExtent,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -762(a6)
            ".short -762",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") font,
            in("a1") fontExtent,
        );
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn ReadPixelLine8(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    xstart: ULONG,
    ystart: ULONG,
    width: ULONG,
    array: *mut UBYTE,
    tempRP: *mut RastPort,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -768(a6)
            ".short -768",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("d0") xstart,
            in("d1") ystart,
            in("d2") width,
            in("a2") array,
            in("a1") tempRP,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn WritePixelLine8(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    xstart: ULONG,
    ystart: ULONG,
    width: ULONG,
    array: *mut UBYTE,
    tempRP: *mut RastPort,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -774(a6)
            ".short -774",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("d0") xstart,
            in("d1") ystart,
            in("d2") width,
            in("a2") array,
            in("a1") tempRP,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn ReadPixelArray8(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    xstart: ULONG,
    ystart: ULONG,
    xstop: ULONG,
    ystop: ULONG,
    array: *mut UBYTE,
    temprp: *mut RastPort,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -780(a6)
            ".short -780",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("d0") xstart,
            in("d1") ystart,
            in("d2") xstop,
            in("d3") ystop,
            in("a2") array,
            in("a1") temprp,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn WritePixelArray8(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    xstart: ULONG,
    ystart: ULONG,
    xstop: ULONG,
    ystop: ULONG,
    array: *mut UBYTE,
    temprp: *mut RastPort,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -786(a6)
            ".short -786",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("d0") xstart,
            in("d1") ystart,
            in("d2") xstop,
            in("d3") ystop,
            in("a2") array,
            in("a1") temprp,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn GetVPModeID(GfxBase: *mut Library, vp: *const ViewPort) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -792(a6)
            ".short -792",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn ModeNotAvailable(GfxBase: *mut Library, modeID: ULONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -798(a6)
            ".short -798",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") modeID,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn WeighTAMatch(
    GfxBase: *mut Library,
    reqTextAttr: *const TextAttr,
    targetTextAttr: *const TextAttr,
    targetTags: *const TagItem,
) -> WORD {
    let asm_ret_value: WORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -804(a6)
            ".short -804",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") reqTextAttr,
            in("a1") targetTextAttr,
            in("a2") targetTags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn EraseRect(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    xMin: LONG,
    yMin: LONG,
    xMax: LONG,
    yMax: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -810(a6)
            ".short -810",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") xMin,
            in("d1") yMin,
            in("d2") xMax,
            in("d3") yMax,
        );
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn ExtendFont(
    GfxBase: *mut Library,
    font: *mut TextFont,
    fontTags: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -816(a6)
            ".short -816",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") font,
            in("a1") fontTags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V36) (Kickstart 2.0)
pub unsafe fn StripFont(GfxBase: *mut Library, font: *mut TextFont) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -822(a6)
            ".short -822",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") font,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn CalcIVG(GfxBase: *mut Library, v: *mut View, vp: *mut ViewPort) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -828(a6)
            ".short -828",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") v,
            in("a1") vp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn AttachPalExtra(GfxBase: *mut Library, cm: *mut ColorMap, vp: *mut ViewPort) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -834(a6)
            ".short -834",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") cm,
            in("a1") vp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn ObtainBestPenA(
    GfxBase: *mut Library,
    cm: *mut ColorMap,
    r: ULONG,
    g: ULONG,
    b: ULONG,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -840(a6)
            ".short -840",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") cm,
            in("d1") r,
            in("d2") g,
            in("d3") b,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn SetRGB32(
    GfxBase: *mut Library,
    vp: *mut ViewPort,
    n: ULONG,
    r: ULONG,
    g: ULONG,
    b: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -852(a6)
            ".short -852",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            in("d0") n,
            in("d1") r,
            in("d2") g,
            in("d3") b,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn GetAPen(GfxBase: *mut Library, rp: *mut RastPort) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -858(a6)
            ".short -858",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn GetBPen(GfxBase: *mut Library, rp: *mut RastPort) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -864(a6)
            ".short -864",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn GetDrMd(GfxBase: *mut Library, rp: *mut RastPort) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -870(a6)
            ".short -870",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn GetOutlinePen(GfxBase: *mut Library, rp: *mut RastPort) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -876(a6)
            ".short -876",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn LoadRGB32(GfxBase: *mut Library, vp: *mut ViewPort, table: *const ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -882(a6)
            ".short -882",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            in("a1") table,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn SetChipRev(GfxBase: *mut Library, want: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -888(a6)
            ".short -888",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") want,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn SetABPenDrMd(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    apen: ULONG,
    bpen: ULONG,
    drawmode: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -894(a6)
            ".short -894",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") apen,
            in("d1") bpen,
            in("d2") drawmode,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn GetRGB32(
    GfxBase: *mut Library,
    cm: *const ColorMap,
    firstcolor: ULONG,
    ncolors: ULONG,
    table: *mut ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -900(a6)
            ".short -900",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") cm,
            in("d0") firstcolor,
            in("d1") ncolors,
            in("a1") table,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn AllocBitMap(
    GfxBase: *mut Library,
    sizex: ULONG,
    sizey: ULONG,
    depth: ULONG,
    flags: ULONG,
    friend_bitmap: *const BitMap,
) -> *mut BitMap {
    let asm_ret_value: *mut BitMap;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -918(a6)
            ".short -918",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("d0") sizex,
            in("d1") sizey,
            in("d2") depth,
            in("d3") flags,
            in("a0") friend_bitmap,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn FreeBitMap(GfxBase: *mut Library, bm: *mut BitMap) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -924(a6)
            ".short -924",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") bm,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn GetExtSpriteA(
    GfxBase: *mut Library,
    ss: *mut ExtSprite,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -930(a6)
            ".short -930",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a2") ss,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn CoerceMode(
    GfxBase: *mut Library,
    vp: *mut ViewPort,
    monitorid: ULONG,
    flags: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -936(a6)
            ".short -936",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            in("d0") monitorid,
            in("d1") flags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn ChangeVPBitMap(
    GfxBase: *mut Library,
    vp: *mut ViewPort,
    bm: *mut BitMap,
    db: *mut DBufInfo,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -942(a6)
            ".short -942",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            in("a1") bm,
            in("a2") db,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn ReleasePen(GfxBase: *mut Library, cm: *mut ColorMap, n: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -948(a6)
            ".short -948",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") cm,
            in("d0") n,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn ObtainPen(
    GfxBase: *mut Library,
    cm: *mut ColorMap,
    n: ULONG,
    r: ULONG,
    g: ULONG,
    b: ULONG,
    f: LONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -954(a6)
            ".short -954",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") cm,
            in("d0") n,
            in("d1") r,
            in("d2") g,
            in("d3") b,
            in("d4") f,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn GetBitMapAttr(GfxBase: *mut Library, bm: *const BitMap, attrnum: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -960(a6)
            ".short -960",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") bm,
            in("d1") attrnum,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn AllocDBufInfo(GfxBase: *mut Library, vp: *mut ViewPort) -> *mut DBufInfo {
    let asm_ret_value: *mut DBufInfo;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -966(a6)
            ".short -966",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn FreeDBufInfo(GfxBase: *mut Library, dbi: *mut DBufInfo) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -972(a6)
            ".short -972",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") dbi,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn SetOutlinePen(GfxBase: *mut Library, rp: *mut RastPort, pen: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -978(a6)
            ".short -978",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("d0") pen,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn SetWriteMask(GfxBase: *mut Library, rp: *mut RastPort, msk: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -984(a6)
            ".short -984",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("d0") msk,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn SetMaxPen(GfxBase: *mut Library, rp: *mut RastPort, maxpen: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -990(a6)
            ".short -990",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("d0") maxpen,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn SetRGB32CM(
    GfxBase: *mut Library,
    cm: *mut ColorMap,
    n: ULONG,
    r: ULONG,
    g: ULONG,
    b: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -996(a6)
            ".short -996",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") cm,
            in("d0") n,
            in("d1") r,
            in("d2") g,
            in("d3") b,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn ScrollRasterBF(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    dx: LONG,
    dy: LONG,
    xMin: LONG,
    yMin: LONG,
    xMax: LONG,
    yMax: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1002(a6)
            ".short -1002",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a1") rp,
            in("d0") dx,
            in("d1") dy,
            in("d2") xMin,
            in("d3") yMin,
            in("d4") xMax,
            in("d5") yMax,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn FindColor(
    GfxBase: *mut Library,
    cm: *mut ColorMap,
    r: ULONG,
    g: ULONG,
    b: ULONG,
    maxcolor: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1008(a6)
            ".short -1008",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a3") cm,
            in("d1") r,
            in("d2") g,
            in("d3") b,
            in("d4") maxcolor,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn AllocSpriteDataA(
    GfxBase: *mut Library,
    bm: *const BitMap,
    tags: *const TagItem,
) -> *mut ExtSprite {
    let asm_ret_value: *mut ExtSprite;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1020(a6)
            ".short -1020",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a2") bm,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn ChangeExtSpriteA(
    GfxBase: *mut Library,
    vp: *mut ViewPort,
    oldsprite: *mut ExtSprite,
    newsprite: *mut ExtSprite,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1026(a6)
            ".short -1026",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") vp,
            in("a1") oldsprite,
            in("a2") newsprite,
            in("a3") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn FreeSpriteData(GfxBase: *mut Library, sp: *mut ExtSprite) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1032(a6)
            ".short -1032",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a2") sp,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn SetRPAttrsA(GfxBase: *mut Library, rp: *mut RastPort, tags: *const TagItem) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1038(a6)
            ".short -1038",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("a1") tags,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn GetRPAttrsA(GfxBase: *mut Library, rp: *mut RastPort, tags: *const TagItem) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1044(a6)
            ".short -1044",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("a1") tags,
        );
    }
}

/// libname: "graphics.library" (V39) (Kickstart 3.0)
pub unsafe fn BestModeIDA(GfxBase: *mut Library, tags: *const TagItem) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1050(a6)
            ".short -1050",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "graphics.library" (V40) (Kickstart 3.1)
pub unsafe fn WriteChunkyPixels(
    GfxBase: *mut Library,
    rp: *mut RastPort,
    xstart: ULONG,
    ystart: ULONG,
    xstop: ULONG,
    ystop: ULONG,
    array: *mut UBYTE,
    bytesperrow: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1056(a6)
            ".short -1056",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) GfxBase,
            in("a0") rp,
            in("d0") xstart,
            in("d1") ystart,
            in("d2") xstop,
            in("d3") ystop,
            in("a2") array,
            in("d4") bytesperrow,
        );
    }
}

/// libname: "icon.library"
pub unsafe fn FreeFreeList(IconBase: *mut Library, freelist: *mut FreeList) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") freelist,
        );
    }
}

/// libname: "icon.library"
pub unsafe fn AddFreeList(
    IconBase: *mut Library,
    freelist: *mut FreeList,
    mem: CONST_APTR,
    size: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") freelist,
            in("a1") mem,
            in("a2") size,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library"
pub unsafe fn GetDiskObject(IconBase: *mut Library, name: CONST_STRPTR) -> *mut DiskObject {
    let asm_ret_value: *mut DiskObject;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library"
pub unsafe fn PutDiskObject(
    IconBase: *mut Library,
    name: CONST_STRPTR,
    diskobj: *const DiskObject,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") name,
            in("a1") diskobj,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library"
pub unsafe fn FreeDiskObject(IconBase: *mut Library, diskobj: *mut DiskObject) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") diskobj,
        );
    }
}

/// libname: "icon.library"
pub unsafe fn FindToolType(
    IconBase: *mut Library,
    toolTypeArray: *mut CONST_STRPTR,
    typeName: CONST_STRPTR,
) -> *mut UBYTE {
    let asm_ret_value: *mut UBYTE;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") toolTypeArray,
            in("a1") typeName,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library"
pub unsafe fn MatchToolValue(
    IconBase: *mut Library,
    typeString: CONST_STRPTR,
    value: CONST_STRPTR,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") typeString,
            in("a1") value,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library"
pub unsafe fn BumpRevision(
    IconBase: *mut Library,
    newname: STRPTR,
    oldname: CONST_STRPTR,
) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") newname,
            in("a1") oldname,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeAlloc(
    IconBase: *mut Library,
    free: *mut FreeList,
    len: ULONG,
    type_: ULONG,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") free,
            in("a1") len,
            in("a2") type_,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V36) (Kickstart 2.0)
pub unsafe fn GetDefDiskObject(IconBase: *mut Library, type_: LONG) -> *mut DiskObject {
    let asm_ret_value: *mut DiskObject;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("d0") type_,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V36) (Kickstart 2.0)
pub unsafe fn PutDefDiskObject(IconBase: *mut Library, diskObject: *const DiskObject) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") diskObject,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V36) (Kickstart 2.0)
pub unsafe fn GetDiskObjectNew(IconBase: *mut Library, name: CONST_STRPTR) -> *mut DiskObject {
    let asm_ret_value: *mut DiskObject;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V37) (Kickstart 2.04)
pub unsafe fn DeleteDiskObject(IconBase: *mut Library, name: CONST_STRPTR) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn FreeFree(IconBase: *mut Library, fl: *mut FreeList, address: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") fl,
            in("a1") address,
        );
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn DupDiskObjectA(
    IconBase: *mut Library,
    diskObject: *const DiskObject,
    tags: *const TagItem,
) -> *mut DiskObject {
    let asm_ret_value: *mut DiskObject;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") diskObject,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn IconControlA(
    IconBase: *mut Library,
    icon: *mut DiskObject,
    tags: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") icon,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn DrawIconStateA(
    IconBase: *mut Library,
    rp: *mut RastPort,
    icon: *const DiskObject,
    label: CONST_STRPTR,
    leftOffset: LONG,
    topOffset: LONG,
    state: ULONG,
    tags: *const TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") rp,
            in("a1") icon,
            in("a2") label,
            in("d0") leftOffset,
            in("d1") topOffset,
            in("d2") state,
            in("a3") tags,
        );
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn GetIconRectangleA(
    IconBase: *mut Library,
    rp: *mut RastPort,
    icon: *const DiskObject,
    label: CONST_STRPTR,
    rect: *mut Rectangle,
    tags: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l %a4, -(%sp)",
            "move.l {basereg}, %a6",
            "move.l {a4reg}, %a4",
            ".short 0x4eae", // jsr -168(a6)
            ".short -168",
            "move.l (%sp)+, %a4",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") rp,
            in("a1") icon,
            in("a2") label,
            in("a3") rect,
            a4reg = in(reg) tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn NewDiskObject(IconBase: *mut Library, type_: LONG) -> *mut DiskObject {
    let asm_ret_value: *mut DiskObject;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("d0") type_,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn GetIconTagList(
    IconBase: *mut Library,
    name: CONST_STRPTR,
    tags: *const TagItem,
) -> *mut DiskObject {
    let asm_ret_value: *mut DiskObject;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") name,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn PutIconTagList(
    IconBase: *mut Library,
    name: CONST_STRPTR,
    icon: *const DiskObject,
    tags: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -186(a6)
            ".short -186",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") name,
            in("a1") icon,
            in("a2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn LayoutIconA(
    IconBase: *mut Library,
    icon: *mut DiskObject,
    screen: *mut Screen,
    tags: *mut TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -192(a6)
            ".short -192",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") icon,
            in("a1") screen,
            in("a2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "icon.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn ChangeToSelectedIconColor(IconBase: *mut Library, cr: *mut ColorRegister) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -198(a6)
            ".short -198",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") cr,
        );
    }
}

/// libname: "icon.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn BumpRevisionLength(
    IconBase: *mut Library,
    newname: STRPTR,
    oldname: CONST_STRPTR,
    maxLength: ULONG,
) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -204(a6)
            ".short -204",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IconBase,
            in("a0") newname,
            in("a1") oldname,
            in("d0") maxLength,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn AllocIFF(IFFParseBase: *mut Library) -> *mut IFFHandle {
    let asm_ret_value: *mut IFFHandle;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn OpenIFF(IFFParseBase: *mut Library, iff: *mut IFFHandle, rwMode: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") rwMode,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn ParseIFF(IFFParseBase: *mut Library, iff: *mut IFFHandle, control: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") control,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn CloseIFF(IFFParseBase: *mut Library, iff: *mut IFFHandle) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
        );
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeIFF(IFFParseBase: *mut Library, iff: *mut IFFHandle) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
        );
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn ReadChunkBytes(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    buf: APTR,
    numBytes: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("a1") buf,
            in("d0") numBytes,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn WriteChunkBytes(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    buf: CONST_APTR,
    numBytes: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("a1") buf,
            in("d0") numBytes,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn ReadChunkRecords(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    buf: APTR,
    bytesPerRecord: LONG,
    numRecords: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("a1") buf,
            in("d0") bytesPerRecord,
            in("d1") numRecords,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn WriteChunkRecords(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    buf: CONST_APTR,
    bytesPerRecord: LONG,
    numRecords: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("a1") buf,
            in("d0") bytesPerRecord,
            in("d1") numRecords,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn PushChunk(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
    size: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            in("d2") size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn PopChunk(IFFParseBase: *mut Library, iff: *mut IFFHandle) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn EntryHandler(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
    position: LONG,
    handler: *mut Hook,
    object: APTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            in("d2") position,
            in("a1") handler,
            in("a2") object,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn ExitHandler(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
    position: LONG,
    handler: *mut Hook,
    object: APTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            in("d2") position,
            in("a1") handler,
            in("a2") object,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn PropChunk(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn PropChunks(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    propArray: *const LONG,
    numPairs: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("a1") propArray,
            in("d0") numPairs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn StopChunk(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn StopChunks(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    propArray: *const LONG,
    numPairs: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("a1") propArray,
            in("d0") numPairs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn CollectionChunk(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn CollectionChunks(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    propArray: *const LONG,
    numPairs: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("a1") propArray,
            in("d0") numPairs,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn StopOnExit(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn FindProp(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
) -> *mut StoredProperty {
    let asm_ret_value: *mut StoredProperty;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn FindCollection(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
) -> *mut CollectionItem {
    let asm_ret_value: *mut CollectionItem;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn FindPropContext(IFFParseBase: *mut Library, iff: *mut IFFHandle) -> *mut ContextNode {
    let asm_ret_value: *mut ContextNode;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -168(a6)
            ".short -168",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn CurrentChunk(IFFParseBase: *mut Library, iff: *mut IFFHandle) -> *mut ContextNode {
    let asm_ret_value: *mut ContextNode;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn ParentChunk(
    IFFParseBase: *mut Library,
    contextNode: *mut ContextNode,
) -> *mut ContextNode {
    let asm_ret_value: *mut ContextNode;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") contextNode,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn AllocLocalItem(
    IFFParseBase: *mut Library,
    type_: LONG,
    id: LONG,
    ident: LONG,
    dataSize: LONG,
) -> *mut LocalContextItem {
    let asm_ret_value: *mut LocalContextItem;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -186(a6)
            ".short -186",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("d0") type_,
            in("d1") id,
            in("d2") ident,
            in("d3") dataSize,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn LocalItemData(IFFParseBase: *mut Library, localItem: *mut LocalContextItem) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -192(a6)
            ".short -192",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") localItem,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn SetLocalItemPurge(
    IFFParseBase: *mut Library,
    localItem: *mut LocalContextItem,
    purgeHook: *mut Hook,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -198(a6)
            ".short -198",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") localItem,
            in("a1") purgeHook,
        );
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeLocalItem(IFFParseBase: *mut Library, localItem: *mut LocalContextItem) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -204(a6)
            ".short -204",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") localItem,
        );
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn FindLocalItem(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    type_: LONG,
    id: LONG,
    ident: LONG,
) -> *mut LocalContextItem {
    let asm_ret_value: *mut LocalContextItem;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -210(a6)
            ".short -210",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") type_,
            in("d1") id,
            in("d2") ident,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn StoreLocalItem(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    localItem: *mut LocalContextItem,
    position: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -216(a6)
            ".short -216",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("a1") localItem,
            in("d0") position,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn StoreItemInContext(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    localItem: *mut LocalContextItem,
    contextNode: *mut ContextNode,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -222(a6)
            ".short -222",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("a1") localItem,
            in("a2") contextNode,
        );
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn InitIFF(
    IFFParseBase: *mut Library,
    iff: *mut IFFHandle,
    flags: LONG,
    streamHook: *mut Hook,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -228(a6)
            ".short -228",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
            in("d0") flags,
            in("a1") streamHook,
        );
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn InitIFFasDOS(IFFParseBase: *mut Library, iff: *mut IFFHandle) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -234(a6)
            ".short -234",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
        );
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn InitIFFasClip(IFFParseBase: *mut Library, iff: *mut IFFHandle) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") iff,
        );
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn OpenClipboard(IFFParseBase: *mut Library, unitNumber: LONG) -> *mut ClipboardHandle {
    let asm_ret_value: *mut ClipboardHandle;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -246(a6)
            ".short -246",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("d0") unitNumber,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn CloseClipboard(IFFParseBase: *mut Library, clipHandle: *mut ClipboardHandle) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -252(a6)
            ".short -252",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("a0") clipHandle,
        );
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn GoodID(IFFParseBase: *mut Library, id: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -258(a6)
            ".short -258",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("d0") id,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn GoodType(IFFParseBase: *mut Library, type_: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -264(a6)
            ".short -264",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("d0") type_,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "iffparse.library" (V36) (Kickstart 2.0)
pub unsafe fn IDtoStr(IFFParseBase: *mut Library, id: LONG, buf: STRPTR) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -270(a6)
            ".short -270",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IFFParseBase,
            in("d0") id,
            in("a0") buf,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "input.device" (V36) (Kickstart 2.0)
pub unsafe fn PeekQualifier(InputBase: *mut ::core::ffi::c_void) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) InputBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "integer.gadget" (V40) (Kickstart 3.1)
pub unsafe fn INTEGER_GetClass(IntegerBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntegerBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn OpenIntuition(IntuitionBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn Intuition(IntuitionBase: *mut Library, iEvent: *mut InputEvent) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") iEvent,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn AddGadget(
    IntuitionBase: *mut Library,
    window: *mut Window,
    gadget: *mut Gadget,
    position: ULONG,
) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") gadget,
            in("d0") position,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn ClearDMRequest(IntuitionBase: *mut Library, window: *mut Window) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn ClearMenuStrip(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn ClearPointer(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn CloseScreen(IntuitionBase: *mut Library, screen: *mut Screen) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn CloseWindow(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn CloseWorkBench(IntuitionBase: *mut Library) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn CurrentTime(IntuitionBase: *mut Library, seconds: *mut ULONG, micros: *mut ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") seconds,
            in("a1") micros,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn DisplayAlert(
    IntuitionBase: *mut Library,
    alertNumber: ULONG,
    string: CONST_STRPTR,
    height: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("d0") alertNumber,
            in("a0") string,
            in("d1") height,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn DisplayBeep(IntuitionBase: *mut Library, screen: *mut Screen) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn DoubleClick(
    IntuitionBase: *mut Library,
    sSeconds: ULONG,
    sMicros: ULONG,
    cSeconds: ULONG,
    cMicros: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("d0") sSeconds,
            in("d1") sMicros,
            in("d2") cSeconds,
            in("d3") cMicros,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn DrawBorder(
    IntuitionBase: *mut Library,
    rp: *mut RastPort,
    border: *const Border,
    leftOffset: LONG,
    topOffset: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") rp,
            in("a1") border,
            in("d0") leftOffset,
            in("d1") topOffset,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn DrawImage(
    IntuitionBase: *mut Library,
    rp: *mut RastPort,
    image: *const Image,
    leftOffset: LONG,
    topOffset: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") rp,
            in("a1") image,
            in("d0") leftOffset,
            in("d1") topOffset,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn EndRequest(
    IntuitionBase: *mut Library,
    requester: *mut Requester,
    window: *mut Window,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") requester,
            in("a1") window,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn GetDefPrefs(
    IntuitionBase: *mut Library,
    preferences: *mut Preferences,
    size: LONG,
) -> *mut Preferences {
    let asm_ret_value: *mut Preferences;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") preferences,
            in("d0") size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn GetPrefs(
    IntuitionBase: *mut Library,
    preferences: *mut Preferences,
    size: LONG,
) -> *mut Preferences {
    let asm_ret_value: *mut Preferences;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") preferences,
            in("d0") size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn InitRequester(IntuitionBase: *mut Library, requester: *mut Requester) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") requester,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn ItemAddress(
    IntuitionBase: *mut Library,
    menuStrip: *const Menu,
    menuNumber: ULONG,
) -> *mut MenuItem {
    let asm_ret_value: *mut MenuItem;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") menuStrip,
            in("d0") menuNumber,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn ModifyIDCMP(IntuitionBase: *mut Library, window: *mut Window, flags: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") flags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn ModifyProp(
    IntuitionBase: *mut Library,
    gadget: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
    flags: ULONG,
    horizPot: ULONG,
    vertPot: ULONG,
    horizBody: ULONG,
    vertBody: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gadget,
            in("a1") window,
            in("a2") requester,
            in("d0") flags,
            in("d1") horizPot,
            in("d2") vertPot,
            in("d3") horizBody,
            in("d4") vertBody,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn MoveScreen(IntuitionBase: *mut Library, screen: *mut Screen, dx: LONG, dy: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            in("d0") dx,
            in("d1") dy,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn MoveWindow(IntuitionBase: *mut Library, window: *mut Window, dx: LONG, dy: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -168(a6)
            ".short -168",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") dx,
            in("d1") dy,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn OffGadget(
    IntuitionBase: *mut Library,
    gadget: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gadget,
            in("a1") window,
            in("a2") requester,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn OffMenu(IntuitionBase: *mut Library, window: *mut Window, menuNumber: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") menuNumber,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn OnGadget(
    IntuitionBase: *mut Library,
    gadget: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -186(a6)
            ".short -186",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gadget,
            in("a1") window,
            in("a2") requester,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn OnMenu(IntuitionBase: *mut Library, window: *mut Window, menuNumber: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -192(a6)
            ".short -192",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") menuNumber,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn OpenScreen(IntuitionBase: *mut Library, newScreen: *const NewScreen) -> *mut Screen {
    let asm_ret_value: *mut Screen;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -198(a6)
            ".short -198",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") newScreen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn OpenWindow(IntuitionBase: *mut Library, newWindow: *const NewWindow) -> *mut Window {
    let asm_ret_value: *mut Window;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -204(a6)
            ".short -204",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") newWindow,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn OpenWorkBench(IntuitionBase: *mut Library) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -210(a6)
            ".short -210",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn PrintIText(
    IntuitionBase: *mut Library,
    rp: *mut RastPort,
    iText: *const IntuiText,
    left: LONG,
    top: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -216(a6)
            ".short -216",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") rp,
            in("a1") iText,
            in("d0") left,
            in("d1") top,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn RefreshGadgets(
    IntuitionBase: *mut Library,
    gadgets: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -222(a6)
            ".short -222",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gadgets,
            in("a1") window,
            in("a2") requester,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn RemoveGadget(
    IntuitionBase: *mut Library,
    window: *mut Window,
    gadget: *mut Gadget,
) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -228(a6)
            ".short -228",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") gadget,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn ReportMouse(IntuitionBase: *mut Library, flag: LONG, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -234(a6)
            ".short -234",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("d0") flag,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn ReportMouse1(IntuitionBase: *mut Library, window: *mut Window, flag: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -234(a6)
            ".short -234",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") flag,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn Request(
    IntuitionBase: *mut Library,
    requester: *mut Requester,
    window: *mut Window,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") requester,
            in("a1") window,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn ScreenToBack(IntuitionBase: *mut Library, screen: *mut Screen) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -246(a6)
            ".short -246",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn ScreenToFront(IntuitionBase: *mut Library, screen: *mut Screen) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -252(a6)
            ".short -252",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn SetDMRequest(
    IntuitionBase: *mut Library,
    window: *mut Window,
    requester: *mut Requester,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -258(a6)
            ".short -258",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") requester,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn SetMenuStrip(
    IntuitionBase: *mut Library,
    window: *mut Window,
    menu: *mut Menu,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -264(a6)
            ".short -264",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") menu,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn SetPointer(
    IntuitionBase: *mut Library,
    window: *mut Window,
    pointer: *mut UWORD,
    height: LONG,
    width: LONG,
    xOffset: LONG,
    yOffset: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -270(a6)
            ".short -270",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") pointer,
            in("d0") height,
            in("d1") width,
            in("d2") xOffset,
            in("d3") yOffset,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn SetWindowTitles(
    IntuitionBase: *mut Library,
    window: *mut Window,
    windowTitle: CONST_STRPTR,
    screenTitle: CONST_STRPTR,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -276(a6)
            ".short -276",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") windowTitle,
            in("a2") screenTitle,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn ShowTitle(IntuitionBase: *mut Library, screen: *mut Screen, showIt: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -282(a6)
            ".short -282",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            in("d0") showIt,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn SizeWindow(IntuitionBase: *mut Library, window: *mut Window, dx: LONG, dy: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -288(a6)
            ".short -288",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") dx,
            in("d1") dy,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn ViewAddress(IntuitionBase: *mut Library) -> *mut View {
    let asm_ret_value: *mut View;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -294(a6)
            ".short -294",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn ViewPortAddress(IntuitionBase: *mut Library, window: *const Window) -> *mut ViewPort {
    let asm_ret_value: *mut ViewPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -300(a6)
            ".short -300",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn WindowToBack(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -306(a6)
            ".short -306",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn WindowToFront(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -312(a6)
            ".short -312",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn WindowLimits(
    IntuitionBase: *mut Library,
    window: *mut Window,
    widthMin: LONG,
    heightMin: LONG,
    widthMax: ULONG,
    heightMax: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -318(a6)
            ".short -318",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") widthMin,
            in("d1") heightMin,
            in("d2") widthMax,
            in("d3") heightMax,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn SetPrefs(
    IntuitionBase: *mut Library,
    preferences: *const Preferences,
    size: LONG,
    inform: LONG,
) -> *mut Preferences {
    let asm_ret_value: *mut Preferences;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -324(a6)
            ".short -324",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") preferences,
            in("d0") size,
            in("d1") inform,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn IntuiTextLength(IntuitionBase: *mut Library, iText: *const IntuiText) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -330(a6)
            ".short -330",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") iText,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn WBenchToBack(IntuitionBase: *mut Library) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -336(a6)
            ".short -336",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn WBenchToFront(IntuitionBase: *mut Library) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -342(a6)
            ".short -342",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn AutoRequest(
    IntuitionBase: *mut Library,
    window: *mut Window,
    body: *const IntuiText,
    posText: *const IntuiText,
    negText: *const IntuiText,
    pFlag: ULONG,
    nFlag: ULONG,
    width: ULONG,
    height: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -348(a6)
            ".short -348",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") body,
            in("a2") posText,
            in("a3") negText,
            in("d0") pFlag,
            in("d1") nFlag,
            in("d2") width,
            in("d3") height,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn BeginRefresh(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -354(a6)
            ".short -354",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn BuildSysRequest(
    IntuitionBase: *mut Library,
    window: *mut Window,
    body: *const IntuiText,
    posText: *const IntuiText,
    negText: *const IntuiText,
    flags: ULONG,
    width: ULONG,
    height: ULONG,
) -> *mut Window {
    let asm_ret_value: *mut Window;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -360(a6)
            ".short -360",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") body,
            in("a2") posText,
            in("a3") negText,
            in("d0") flags,
            in("d1") width,
            in("d2") height,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn EndRefresh(IntuitionBase: *mut Library, window: *mut Window, complete: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -366(a6)
            ".short -366",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") complete,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn FreeSysRequest(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -372(a6)
            ".short -372",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn MakeScreen(IntuitionBase: *mut Library, screen: *mut Screen) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -378(a6)
            ".short -378",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn RemakeDisplay(IntuitionBase: *mut Library) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -384(a6)
            ".short -384",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn RethinkDisplay(IntuitionBase: *mut Library) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -390(a6)
            ".short -390",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn AllocRemember(
    IntuitionBase: *mut Library,
    rememberKey: *mut *mut Remember,
    size: ULONG,
    flags: ULONG,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -396(a6)
            ".short -396",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") rememberKey,
            in("d0") size,
            in("d1") flags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn AlohaWorkbench(IntuitionBase: *mut Library, wbport: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -402(a6)
            ".short -402",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") wbport,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn FreeRemember(
    IntuitionBase: *mut Library,
    rememberKey: *mut *mut Remember,
    reallyForget: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -408(a6)
            ".short -408",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") rememberKey,
            in("d0") reallyForget,
        );
    }
}

/// libname: "intuition.library"
pub unsafe fn LockIBase(IntuitionBase: *mut Library, dontknow: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -414(a6)
            ".short -414",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("d0") dontknow,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library"
pub unsafe fn UnlockIBase(IntuitionBase: *mut Library, ibLock: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -420(a6)
            ".short -420",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") ibLock,
        );
    }
}

/// libname: "intuition.library" (V33) (Kickstart 1.2)
pub unsafe fn GetScreenData(
    IntuitionBase: *mut Library,
    buffer: APTR,
    size: ULONG,
    type_: ULONG,
    screen: *const Screen,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -426(a6)
            ".short -426",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") buffer,
            in("d0") size,
            in("d1") type_,
            in("a1") screen,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V33) (Kickstart 1.2)
pub unsafe fn RefreshGList(
    IntuitionBase: *mut Library,
    gadgets: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
    numGad: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -432(a6)
            ".short -432",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gadgets,
            in("a1") window,
            in("a2") requester,
            in("d0") numGad,
        );
    }
}

/// libname: "intuition.library" (V33) (Kickstart 1.2)
pub unsafe fn AddGList(
    IntuitionBase: *mut Library,
    window: *mut Window,
    gadget: *mut Gadget,
    position: ULONG,
    numGad: LONG,
    requester: *mut Requester,
) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -438(a6)
            ".short -438",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") gadget,
            in("d0") position,
            in("d1") numGad,
            in("a2") requester,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V33) (Kickstart 1.2)
pub unsafe fn RemoveGList(
    IntuitionBase: *mut Library,
    remPtr: *mut Window,
    gadget: *mut Gadget,
    numGad: LONG,
) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -444(a6)
            ".short -444",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") remPtr,
            in("a1") gadget,
            in("d0") numGad,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V33) (Kickstart 1.2)
pub unsafe fn ActivateWindow(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -450(a6)
            ".short -450",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library" (V33) (Kickstart 1.2)
pub unsafe fn RefreshWindowFrame(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -456(a6)
            ".short -456",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library" (V33) (Kickstart 1.2)
pub unsafe fn ActivateGadget(
    IntuitionBase: *mut Library,
    gadgets: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -462(a6)
            ".short -462",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gadgets,
            in("a1") window,
            in("a2") requester,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V33) (Kickstart 1.2)
pub unsafe fn NewModifyProp(
    IntuitionBase: *mut Library,
    gadget: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
    flags: ULONG,
    horizPot: ULONG,
    vertPot: ULONG,
    horizBody: ULONG,
    vertBody: ULONG,
    numGad: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -468(a6)
            ".short -468",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gadget,
            in("a1") window,
            in("a2") requester,
            in("d0") flags,
            in("d1") horizPot,
            in("d2") vertPot,
            in("d3") horizBody,
            in("d4") vertBody,
            in("d5") numGad,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn QueryOverscan(
    IntuitionBase: *mut Library,
    displayID: ULONG,
    rect: *mut Rectangle,
    oScanType: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -474(a6)
            ".short -474",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") displayID,
            in("a1") rect,
            in("d0") oScanType,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn MoveWindowInFrontOf(
    IntuitionBase: *mut Library,
    window: *mut Window,
    behindWindow: *mut Window,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -480(a6)
            ".short -480",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") behindWindow,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn ChangeWindowBox(
    IntuitionBase: *mut Library,
    window: *mut Window,
    left: LONG,
    top: LONG,
    width: LONG,
    height: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -486(a6)
            ".short -486",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") left,
            in("d1") top,
            in("d2") width,
            in("d3") height,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn SetEditHook(IntuitionBase: *mut Library, hook: *mut Hook) -> *mut Hook {
    let asm_ret_value: *mut Hook;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -492(a6)
            ".short -492",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") hook,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn SetMouseQueue(
    IntuitionBase: *mut Library,
    window: *mut Window,
    queueLength: ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -498(a6)
            ".short -498",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("d0") queueLength,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn ZipWindow(IntuitionBase: *mut Library, window: *mut Window) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -504(a6)
            ".short -504",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn LockPubScreen(IntuitionBase: *mut Library, name: CONST_STRPTR) -> *mut Screen {
    let asm_ret_value: *mut Screen;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -510(a6)
            ".short -510",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn UnlockPubScreen(
    IntuitionBase: *mut Library,
    name: CONST_STRPTR,
    screen: *mut Screen,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -516(a6)
            ".short -516",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") name,
            in("a1") screen,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn LockPubScreenList(IntuitionBase: *mut Library) -> *mut List {
    let asm_ret_value: *mut List;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -522(a6)
            ".short -522",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn UnlockPubScreenList(IntuitionBase: *mut Library) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -528(a6)
            ".short -528",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn NextPubScreen(
    IntuitionBase: *mut Library,
    screen: *const Screen,
    namebuf: STRPTR,
) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -534(a6)
            ".short -534",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            in("a1") namebuf,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn SetDefaultPubScreen(IntuitionBase: *mut Library, name: CONST_STRPTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -540(a6)
            ".short -540",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") name,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn SetPubScreenModes(IntuitionBase: *mut Library, modes: ULONG) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -546(a6)
            ".short -546",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("d0") modes,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn PubScreenStatus(
    IntuitionBase: *mut Library,
    screen: *mut Screen,
    statusFlags: ULONG,
) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -552(a6)
            ".short -552",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            in("d0") statusFlags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn ObtainGIRPort(IntuitionBase: *mut Library, gInfo: *mut GadgetInfo) -> *mut RastPort {
    let asm_ret_value: *mut RastPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -558(a6)
            ".short -558",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gInfo,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn ReleaseGIRPort(IntuitionBase: *mut Library, rp: *mut RastPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -564(a6)
            ".short -564",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") rp,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn GadgetMouse(
    IntuitionBase: *mut Library,
    gadget: *mut Gadget,
    gInfo: *mut GadgetInfo,
    mousePoint: *mut WORD,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -570(a6)
            ".short -570",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gadget,
            in("a1") gInfo,
            in("a2") mousePoint,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn GetDefaultPubScreen(IntuitionBase: *mut Library, nameBuffer: STRPTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -582(a6)
            ".short -582",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") nameBuffer,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn EasyRequestArgs(
    IntuitionBase: *mut Library,
    window: *mut Window,
    easyStruct: *const EasyStruct,
    idcmpPtr: *mut ULONG,
    args: CONST_APTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -588(a6)
            ".short -588",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") easyStruct,
            in("a2") idcmpPtr,
            in("a3") args,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn BuildEasyRequestArgs(
    IntuitionBase: *mut Library,
    window: *mut Window,
    easyStruct: *const EasyStruct,
    idcmp: ULONG,
    args: CONST_APTR,
) -> *mut Window {
    let asm_ret_value: *mut Window;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -594(a6)
            ".short -594",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") easyStruct,
            in("d0") idcmp,
            in("a3") args,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn SysReqHandler(
    IntuitionBase: *mut Library,
    window: *mut Window,
    idcmpPtr: *mut ULONG,
    waitInput: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -600(a6)
            ".short -600",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") idcmpPtr,
            in("d0") waitInput,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn OpenWindowTagList(
    IntuitionBase: *mut Library,
    newWindow: *const NewWindow,
    tagList: *const TagItem,
) -> *mut Window {
    let asm_ret_value: *mut Window;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -606(a6)
            ".short -606",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") newWindow,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn OpenScreenTagList(
    IntuitionBase: *mut Library,
    newScreen: *const NewScreen,
    tagList: *const TagItem,
) -> *mut Screen {
    let asm_ret_value: *mut Screen;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -612(a6)
            ".short -612",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") newScreen,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn DrawImageState(
    IntuitionBase: *mut Library,
    rp: *mut RastPort,
    image: *const Image,
    leftOffset: LONG,
    topOffset: LONG,
    state: ULONG,
    drawInfo: *mut DrawInfo,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -618(a6)
            ".short -618",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") rp,
            in("a1") image,
            in("d0") leftOffset,
            in("d1") topOffset,
            in("d2") state,
            in("a2") drawInfo,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn PointInImage(IntuitionBase: *mut Library, point: ULONG, image: *const Image) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -624(a6)
            ".short -624",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("d0") point,
            in("a0") image,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn EraseImage(
    IntuitionBase: *mut Library,
    rp: *mut RastPort,
    image: *const Image,
    leftOffset: LONG,
    topOffset: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -630(a6)
            ".short -630",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") rp,
            in("a1") image,
            in("d0") leftOffset,
            in("d1") topOffset,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn NewObjectA(
    IntuitionBase: *mut Library,
    classPtr: *mut IClass,
    classID: CONST_STRPTR,
    tagList: *const TagItem,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -636(a6)
            ".short -636",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") classPtr,
            in("a1") classID,
            in("a2") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn DisposeObject(IntuitionBase: *mut Library, object: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -642(a6)
            ".short -642",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") object,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn SetAttrsA(
    IntuitionBase: *mut Library,
    object: APTR,
    tagList: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -648(a6)
            ".short -648",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") object,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn GetAttr(
    IntuitionBase: *mut Library,
    attrID: ULONG,
    object: APTR,
    storagePtr: *mut ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -654(a6)
            ".short -654",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("d0") attrID,
            in("a0") object,
            in("a1") storagePtr,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn SetGadgetAttrsA(
    IntuitionBase: *mut Library,
    gadget: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
    tagList: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -660(a6)
            ".short -660",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gadget,
            in("a1") window,
            in("a2") requester,
            in("a3") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn NextObject(IntuitionBase: *mut Library, objectPtrPtr: CONST_APTR) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -666(a6)
            ".short -666",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") objectPtrPtr,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn MakeClass(
    IntuitionBase: *mut Library,
    classID: CONST_STRPTR,
    superClassID: CONST_STRPTR,
    superClassPtr: *const IClass,
    instanceSize: ULONG,
    flags: ULONG,
) -> *mut IClass {
    let asm_ret_value: *mut IClass;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -678(a6)
            ".short -678",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") classID,
            in("a1") superClassID,
            in("a2") superClassPtr,
            in("d0") instanceSize,
            in("d1") flags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn AddClass(IntuitionBase: *mut Library, classPtr: *mut IClass) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -684(a6)
            ".short -684",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") classPtr,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn GetScreenDrawInfo(IntuitionBase: *mut Library, screen: *mut Screen) -> *mut DrawInfo {
    let asm_ret_value: *mut DrawInfo;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -690(a6)
            ".short -690",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeScreenDrawInfo(
    IntuitionBase: *mut Library,
    screen: *mut Screen,
    drawInfo: *mut DrawInfo,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -696(a6)
            ".short -696",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            in("a1") drawInfo,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn ResetMenuStrip(
    IntuitionBase: *mut Library,
    window: *mut Window,
    menu: *mut Menu,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -702(a6)
            ".short -702",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") menu,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn RemoveClass(IntuitionBase: *mut Library, classPtr: *mut IClass) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -708(a6)
            ".short -708",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") classPtr,
        );
    }
}

/// libname: "intuition.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeClass(IntuitionBase: *mut Library, classPtr: *mut IClass) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -714(a6)
            ".short -714",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") classPtr,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn AllocScreenBuffer(
    IntuitionBase: *mut Library,
    sc: *mut Screen,
    bm: *mut BitMap,
    flags: ULONG,
) -> *mut ScreenBuffer {
    let asm_ret_value: *mut ScreenBuffer;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -768(a6)
            ".short -768",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") sc,
            in("a1") bm,
            in("d0") flags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn FreeScreenBuffer(
    IntuitionBase: *mut Library,
    sc: *mut Screen,
    sb: *mut ScreenBuffer,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -774(a6)
            ".short -774",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") sc,
            in("a1") sb,
        );
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn ChangeScreenBuffer(
    IntuitionBase: *mut Library,
    sc: *mut Screen,
    sb: *mut ScreenBuffer,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -780(a6)
            ".short -780",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") sc,
            in("a1") sb,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn ScreenDepth(
    IntuitionBase: *mut Library,
    screen: *mut Screen,
    flags: ULONG,
    reserved: APTR,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -786(a6)
            ".short -786",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            in("d0") flags,
            in("a1") reserved,
        );
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn ScreenPosition(
    IntuitionBase: *mut Library,
    screen: *mut Screen,
    flags: ULONG,
    x1: LONG,
    y1: LONG,
    x2: LONG,
    y2: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -792(a6)
            ".short -792",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") screen,
            in("d0") flags,
            in("d1") x1,
            in("d2") y1,
            in("d3") x2,
            in("d4") y2,
        );
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn ScrollWindowRaster(
    IntuitionBase: *mut Library,
    win: *mut Window,
    dx: LONG,
    dy: LONG,
    xMin: LONG,
    yMin: LONG,
    xMax: LONG,
    yMax: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -798(a6)
            ".short -798",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a1") win,
            in("d0") dx,
            in("d1") dy,
            in("d2") xMin,
            in("d3") yMin,
            in("d4") xMax,
            in("d5") yMax,
        );
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn LendMenus(
    IntuitionBase: *mut Library,
    fromwindow: *mut Window,
    towindow: *mut Window,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -804(a6)
            ".short -804",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") fromwindow,
            in("a1") towindow,
        );
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn DoGadgetMethodA(
    IntuitionBase: *mut Library,
    gad: *mut Gadget,
    win: *mut Window,
    req: *mut Requester,
    message: Msg,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -810(a6)
            ".short -810",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") gad,
            in("a1") win,
            in("a2") req,
            in("a3") message,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn SetWindowPointerA(
    IntuitionBase: *mut Library,
    win: *mut Window,
    taglist: *const TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -816(a6)
            ".short -816",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") win,
            in("a1") taglist,
        );
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn TimedDisplayAlert(
    IntuitionBase: *mut Library,
    alertNumber: ULONG,
    string: CONST_STRPTR,
    height: ULONG,
    time: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -822(a6)
            ".short -822",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("d0") alertNumber,
            in("a0") string,
            in("d1") height,
            in("a1") time,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V39) (Kickstart 3.0)
pub unsafe fn HelpControl(IntuitionBase: *mut Library, win: *mut Window, flags: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -828(a6)
            ".short -828",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") win,
            in("d0") flags,
        );
    }
}

/// libname: "intuition.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn ShowWindow(
    IntuitionBase: *mut Library,
    window: *mut Window,
    other: *mut Window,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -834(a6)
            ".short -834",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            in("a1") other,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn HideWindow(IntuitionBase: *mut Library, window: *mut Window) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -840(a6)
            ".short -840",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") window,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "intuition.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn IntuitionControlA(
    IntuitionBase: *mut Library,
    object: APTR,
    taglist: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -1212(a6)
            ".short -1212",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) IntuitionBase,
            in("a0") object,
            in("a1") taglist,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "keymap.library" (V36) (Kickstart 2.0)
pub unsafe fn SetKeyMapDefault(KeymapBase: *mut Library, keyMap: *mut KeyMap) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) KeymapBase,
            in("a0") keyMap,
        );
    }
}

/// libname: "keymap.library" (V36) (Kickstart 2.0)
pub unsafe fn AskKeyMapDefault(KeymapBase: *mut Library) -> *mut KeyMap {
    let asm_ret_value: *mut KeyMap;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) KeymapBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "keymap.library" (V36) (Kickstart 2.0)
pub unsafe fn MapRawKey(
    KeymapBase: *mut Library,
    event: *const InputEvent,
    buffer: STRPTR,
    length: LONG,
    keyMap: *const KeyMap,
) -> WORD {
    let asm_ret_value: WORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) KeymapBase,
            in("a0") event,
            in("a1") buffer,
            in("d1") length,
            in("a2") keyMap,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "keymap.library" (V36) (Kickstart 2.0)
pub unsafe fn MapANSI(
    KeymapBase: *mut Library,
    string: CONST_STRPTR,
    count: LONG,
    buffer: STRPTR,
    length: LONG,
    keyMap: *const KeyMap,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) KeymapBase,
            in("a0") string,
            in("d0") count,
            in("a1") buffer,
            in("d1") length,
            in("a2") keyMap,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "label.image" (V40) (Kickstart 3.1)
pub unsafe fn LABEL_GetClass(LabelBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LabelBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn InitLayers(LayersBase: *mut Library, li: *mut Layer_Info) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn CreateUpfrontLayer(
    LayersBase: *mut Library,
    li: *mut Layer_Info,
    bm: *mut BitMap,
    x0: LONG,
    y0: LONG,
    x1: LONG,
    y1: LONG,
    flags: LONG,
    bm2: *mut BitMap,
) -> *mut Layer {
    let asm_ret_value: *mut Layer;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
            in("a1") bm,
            in("d0") x0,
            in("d1") y0,
            in("d2") x1,
            in("d3") y1,
            in("d4") flags,
            in("a2") bm2,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn CreateBehindLayer(
    LayersBase: *mut Library,
    li: *mut Layer_Info,
    bm: *mut BitMap,
    x0: LONG,
    y0: LONG,
    x1: LONG,
    y1: LONG,
    flags: LONG,
    bm2: *mut BitMap,
) -> *mut Layer {
    let asm_ret_value: *mut Layer;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
            in("a1") bm,
            in("d0") x0,
            in("d1") y0,
            in("d2") x1,
            in("d3") y1,
            in("d4") flags,
            in("a2") bm2,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn UpfrontLayer(LayersBase: *mut Library, dummy: LONG, layer: *mut Layer) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") dummy,
            in("a1") layer,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn BehindLayer(LayersBase: *mut Library, dummy: LONG, layer: *mut Layer) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") dummy,
            in("a1") layer,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn MoveLayer(
    LayersBase: *mut Library,
    dummy: LONG,
    layer: *mut Layer,
    dx: LONG,
    dy: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") dummy,
            in("a1") layer,
            in("d0") dx,
            in("d1") dy,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn SizeLayer(
    LayersBase: *mut Library,
    dummy: LONG,
    layer: *mut Layer,
    dx: LONG,
    dy: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") dummy,
            in("a1") layer,
            in("d0") dx,
            in("d1") dy,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn ScrollLayer(
    LayersBase: *mut Library,
    dummy: LONG,
    layer: *mut Layer,
    dx: LONG,
    dy: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") dummy,
            in("a1") layer,
            in("d0") dx,
            in("d1") dy,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn BeginUpdate(LayersBase: *mut Library, l: *mut Layer) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") l,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn EndUpdate(LayersBase: *mut Library, layer: *mut Layer, flag: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer,
            in("d0") flag,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn DeleteLayer(LayersBase: *mut Library, dummy: LONG, layer: *mut Layer) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") dummy,
            in("a1") layer,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn LockLayer(LayersBase: *mut Library, dummy: LONG, layer: *mut Layer) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") dummy,
            in("a1") layer,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn UnlockLayer(LayersBase: *mut Library, layer: *mut Layer) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn LockLayers(LayersBase: *mut Library, li: *mut Layer_Info) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn UnlockLayers(LayersBase: *mut Library, li: *mut Layer_Info) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn LockLayerInfo(LayersBase: *mut Library, li: *mut Layer_Info) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn SwapBitsRastPortClipRect(
    LayersBase: *mut Library,
    rp: *mut RastPort,
    cr: *mut ClipRect,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") rp,
            in("a1") cr,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn WhichLayer(
    LayersBase: *mut Library,
    li: *mut Layer_Info,
    x: LONG,
    y: LONG,
) -> *mut Layer {
    let asm_ret_value: *mut Layer;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
            in("d0") x,
            in("d1") y,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn UnlockLayerInfo(LayersBase: *mut Library, li: *mut Layer_Info) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn NewLayerInfo(LayersBase: *mut Library) -> *mut Layer_Info {
    let asm_ret_value: *mut Layer_Info;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn DisposeLayerInfo(LayersBase: *mut Library, li: *mut Layer_Info) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn FattenLayerInfo(LayersBase: *mut Library, li: *mut Layer_Info) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn ThinLayerInfo(LayersBase: *mut Library, li: *mut Layer_Info) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
        );
    }
}

/// libname: "layers.library"
pub unsafe fn MoveLayerInFrontOf(
    LayersBase: *mut Library,
    layer_to_move: *mut Layer,
    other_layer: *mut Layer,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -168(a6)
            ".short -168",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer_to_move,
            in("a1") other_layer,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library"
pub unsafe fn InstallClipRegion(
    LayersBase: *mut Library,
    layer: *mut Layer,
    region: *mut Region,
) -> *mut Region {
    let asm_ret_value: *mut Region;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer,
            in("a1") region,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library" (V36) (Kickstart 2.0)
pub unsafe fn MoveSizeLayer(
    LayersBase: *mut Library,
    layer: *mut Layer,
    dx: LONG,
    dy: LONG,
    dw: LONG,
    dh: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer,
            in("d0") dx,
            in("d1") dy,
            in("d2") dw,
            in("d3") dh,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateUpfrontHookLayer(
    LayersBase: *mut Library,
    li: *mut Layer_Info,
    bm: *mut BitMap,
    x0: LONG,
    y0: LONG,
    x1: LONG,
    y1: LONG,
    flags: LONG,
    hook: *mut Hook,
    bm2: *mut BitMap,
) -> *mut Layer {
    let asm_ret_value: *mut Layer;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -186(a6)
            ".short -186",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
            in("a1") bm,
            in("d0") x0,
            in("d1") y0,
            in("d2") x1,
            in("d3") y1,
            in("d4") flags,
            in("a3") hook,
            in("a2") bm2,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateBehindHookLayer(
    LayersBase: *mut Library,
    li: *mut Layer_Info,
    bm: *mut BitMap,
    x0: LONG,
    y0: LONG,
    x1: LONG,
    y1: LONG,
    flags: LONG,
    hook: *mut Hook,
    bm2: *mut BitMap,
) -> *mut Layer {
    let asm_ret_value: *mut Layer;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -192(a6)
            ".short -192",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
            in("a1") bm,
            in("d0") x0,
            in("d1") y0,
            in("d2") x1,
            in("d3") y1,
            in("d4") flags,
            in("a3") hook,
            in("a2") bm2,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library" (V36) (Kickstart 2.0)
pub unsafe fn InstallLayerHook(
    LayersBase: *mut Library,
    layer: *mut Layer,
    hook: *mut Hook,
) -> *mut Hook {
    let asm_ret_value: *mut Hook;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -198(a6)
            ".short -198",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer,
            in("a1") hook,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library" (V39) (Kickstart 3.0)
pub unsafe fn InstallLayerInfoHook(
    LayersBase: *mut Library,
    li: *mut Layer_Info,
    hook: *mut Hook,
) -> *mut Hook {
    let asm_ret_value: *mut Hook;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -204(a6)
            ".short -204",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
            in("a1") hook,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library" (V39) (Kickstart 3.0)
pub unsafe fn SortLayerCR(LayersBase: *mut Library, layer: *mut Layer, dx: LONG, dy: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -210(a6)
            ".short -210",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer,
            in("d0") dx,
            in("d1") dy,
        );
    }
}

/// libname: "layers.library" (V39) (Kickstart 3.0)
pub unsafe fn DoHookClipRects(
    LayersBase: *mut Library,
    hook: *mut Hook,
    rport: *mut RastPort,
    rect: *const Rectangle,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -216(a6)
            ".short -216",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") hook,
            in("a1") rport,
            in("a2") rect,
        );
    }
}

/// libname: "layers.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn LayerOccluded(LayersBase: *mut Library, layer: *mut Layer) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -222(a6)
            ".short -222",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn HideLayer(LayersBase: *mut Library, layer: *mut Layer) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -228(a6)
            ".short -228",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn ShowLayer(
    LayersBase: *mut Library,
    layer: *mut Layer,
    in_front_of: *mut Layer,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -234(a6)
            ".short -234",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") layer,
            in("a1") in_front_of,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layers.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn SetLayerInfoBounds(
    LayersBase: *mut Library,
    li: *mut Layer_Info,
    bounds: *const Rectangle,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayersBase,
            in("a0") li,
            in("a1") bounds,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layout.gadget" (V40) (Kickstart 3.1)
pub unsafe fn LAYOUT_GetClass(LayoutBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayoutBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layout.gadget" (V40) (Kickstart 3.1)
pub unsafe fn ActivateLayoutGadget(
    LayoutBase: *mut ::core::ffi::c_void,
    gadget: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
    object: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayoutBase,
            in("a0") gadget,
            in("a1") window,
            in("a2") requester,
            in("d0") object,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layout.gadget" (V40) (Kickstart 3.1)
pub unsafe fn FlushLayoutDomainCache(LayoutBase: *mut ::core::ffi::c_void, gadget: *mut Gadget) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayoutBase,
            in("a0") gadget,
        );
    }
}

/// libname: "layout.gadget" (V40) (Kickstart 3.1)
pub unsafe fn RethinkLayout(
    LayoutBase: *mut ::core::ffi::c_void,
    gadget: *mut Gadget,
    window: *mut Window,
    requester: *mut Requester,
    refresh: LONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayoutBase,
            in("a0") gadget,
            in("a1") window,
            in("a2") requester,
            in("d0") refresh,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layout.gadget" (V40) (Kickstart 3.1)
pub unsafe fn LayoutLimits(
    LayoutBase: *mut ::core::ffi::c_void,
    gadget: *mut Gadget,
    limits: *mut LayoutLimits,
    font: *mut TextFont,
    screen: *mut Screen,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayoutBase,
            in("a0") gadget,
            in("a1") limits,
            in("a2") font,
            in("a3") screen,
        );
    }
}

/// libname: "layout.gadget" (V40) (Kickstart 3.1)
pub unsafe fn PAGE_GetClass(LayoutBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayoutBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layout.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SetPageGadgetAttrsA(
    LayoutBase: *mut ::core::ffi::c_void,
    gadget: *mut Gadget,
    object: *mut Object,
    window: *mut Window,
    requester: *mut Requester,
    tags: *mut TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l %a4, -(%sp)",
            "move.l {basereg}, %a6",
            "move.l {a4reg}, %a4",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a4",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LayoutBase,
            in("a0") gadget,
            in("a1") object,
            in("a2") window,
            in("a3") requester,
            a4reg = in(reg) tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "layout.gadget" (V40) (Kickstart 3.1)
pub unsafe fn RefreshPageGadget(
    LayoutBase: *mut ::core::ffi::c_void,
    gadget: *mut Gadget,
    object: *mut Object,
    window: *mut Window,
    requester: *mut Requester,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LayoutBase,
            in("a0") gadget,
            in("a1") object,
            in("a2") window,
            in("a3") requester,
        );
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn LISTBROWSER_GetClass(ListBrowserBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn AllocListBrowserNodeA(
    ListBrowserBase: *mut ::core::ffi::c_void,
    columns: ULONG,
    tags: *mut TagItem,
) -> *mut Node {
    let asm_ret_value: *mut Node;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("d0") columns,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn FreeListBrowserNode(ListBrowserBase: *mut ::core::ffi::c_void, node: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") node,
        );
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SetListBrowserNodeAttrsA(
    ListBrowserBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn GetListBrowserNodeAttrsA(
    ListBrowserBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn ListBrowserSelectAll(ListBrowserBase: *mut ::core::ffi::c_void, list: *mut List) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") list,
        );
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn ShowListBrowserNodeChildren(
    ListBrowserBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    depth: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") node,
            in("d0") depth,
        );
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn HideListBrowserNodeChildren(
    ListBrowserBase: *mut ::core::ffi::c_void,
    node: *mut Node,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") node,
        );
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn ShowAllListBrowserChildren(
    ListBrowserBase: *mut ::core::ffi::c_void,
    list: *mut List,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") list,
        );
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn HideAllListBrowserChildren(
    ListBrowserBase: *mut ::core::ffi::c_void,
    list: *mut List,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") list,
        );
    }
}

/// libname: "listbrowser.gadget" (V40) (Kickstart 3.1)
pub unsafe fn FreeListBrowserList(ListBrowserBase: *mut ::core::ffi::c_void, list: *mut List) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") list,
        );
    }
}

/// libname: "listbrowser.gadget" (V45) (Kickstart 3.9 / 2000)
pub unsafe fn AllocLBColumnInfoA(
    ListBrowserBase: *mut ::core::ffi::c_void,
    columns: ULONG,
    tags: *mut TagItem,
) -> *mut ColumnInfo {
    let asm_ret_value: *mut ColumnInfo;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("d0") columns,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "listbrowser.gadget" (V45) (Kickstart 3.9 / 2000)
pub unsafe fn SetLBColumnInfoAttrsA(
    ListBrowserBase: *mut ::core::ffi::c_void,
    columninfo: *mut ColumnInfo,
    tags: *mut TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a1") columninfo,
            in("a0") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "listbrowser.gadget" (V45) (Kickstart 3.9 / 2000)
pub unsafe fn GetLBColumnInfoAttrsA(
    ListBrowserBase: *mut ::core::ffi::c_void,
    columninfo: *mut ColumnInfo,
    tags: *mut TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a1") columninfo,
            in("a0") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "listbrowser.gadget" (V45) (Kickstart 3.9 / 2000)
pub unsafe fn FreeLBColumnInfo(
    ListBrowserBase: *mut ::core::ffi::c_void,
    columninfo: *mut ColumnInfo,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") columninfo,
        );
    }
}

/// libname: "listbrowser.gadget" (V45) (Kickstart 3.9 / 2000)
pub unsafe fn ListBrowserClearAll(ListBrowserBase: *mut ::core::ffi::c_void, list: *mut List) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) ListBrowserBase,
            in("a0") list,
        );
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn CloseCatalog(LocaleBase: *mut Library, catalog: *mut Catalog) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") catalog,
        );
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn CloseLocale(LocaleBase: *mut Library, locale: *mut Locale) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
        );
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn ConvToLower(
    LocaleBase: *mut Library,
    locale: *mut Locale,
    character: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn ConvToUpper(
    LocaleBase: *mut Library,
    locale: *mut Locale,
    character: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn FormatDate(
    LocaleBase: *mut Library,
    locale: *mut Locale,
    fmtTemplate: CONST_STRPTR,
    date: *const DateStamp,
    putCharFunc: *mut Hook,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("a1") fmtTemplate,
            in("a2") date,
            in("a3") putCharFunc,
        );
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn FormatString(
    LocaleBase: *mut Library,
    locale: *mut Locale,
    fmtTemplate: CONST_STRPTR,
    dataStream: APTR,
    putCharFunc: *mut Hook,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("a1") fmtTemplate,
            in("a2") dataStream,
            in("a3") putCharFunc,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn GetCatalogStr(
    LocaleBase: *mut Library,
    catalog: *const Catalog,
    stringNum: LONG,
    defaultString: CONST_STRPTR,
) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") catalog,
            in("d0") stringNum,
            in("a1") defaultString,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn GetLocaleStr(
    LocaleBase: *mut Library,
    locale: *mut Locale,
    stringNum: ULONG,
) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") stringNum,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsAlNum(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsAlpha(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsCntrl(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsDigit(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsGraph(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsLower(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsPrint(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsPunct(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsSpace(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsUpper(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn IsXDigit(LocaleBase: *mut Library, locale: *mut Locale, character: ULONG) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn OpenCatalogA(
    LocaleBase: *mut Library,
    locale: *mut Locale,
    name: CONST_STRPTR,
    tags: *const TagItem,
) -> *mut Catalog {
    let asm_ret_value: *mut Catalog;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("a1") name,
            in("a2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn OpenLocale(LocaleBase: *mut Library, name: CONST_STRPTR) -> *mut Locale {
    let asm_ret_value: *mut Locale;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn ParseDate(
    LocaleBase: *mut Library,
    locale: *const Locale,
    date: *mut DateStamp,
    fmtTemplate: CONST_STRPTR,
    getCharFunc: *mut Hook,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("a1") date,
            in("a2") fmtTemplate,
            in("a3") getCharFunc,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn StrConvert(
    LocaleBase: *mut Library,
    locale: *mut Locale,
    string: CONST_STRPTR,
    buffer: APTR,
    bufferSize: ULONG,
    type_: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("a1") string,
            in("a2") buffer,
            in("d0") bufferSize,
            in("d1") type_,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "locale.library" (V38) (Kickstart 2.1)
pub unsafe fn StrnCmp(
    LocaleBase: *mut Library,
    locale: *mut Locale,
    string1: CONST_STRPTR,
    string2: CONST_STRPTR,
    length: LONG,
    type_: ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LocaleBase,
            in("a0") locale,
            in("a1") string1,
            in("a2") string2,
            in("d0") length,
            in("d1") type_,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn ReadJoyPort(LowLevelBase: *mut Library, port: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("d0") port,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn GetLanguageSelection(LowLevelBase: *mut Library) -> UBYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "and.w #0x00ff, %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value as u8;
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn GetKey(LowLevelBase: *mut Library) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn QueryKeys(LowLevelBase: *mut Library, queryArray: *mut KeyQuery, arraySize: LONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a0") queryArray,
            in("d1") arraySize,
        );
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn AddKBInt(LowLevelBase: *mut Library, intRoutine: APTR, intData: APTR) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a0") intRoutine,
            in("a1") intData,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn RemKBInt(LowLevelBase: *mut Library, intHandle: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a1") intHandle,
        );
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn SystemControlA(LowLevelBase: *mut Library, tagList: *const TagItem) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn AddTimerInt(LowLevelBase: *mut Library, intRoutine: APTR, intData: APTR) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a0") intRoutine,
            in("a1") intData,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn RemTimerInt(LowLevelBase: *mut Library, intHandle: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a1") intHandle,
        );
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn StopTimerInt(LowLevelBase: *mut Library, intHandle: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a1") intHandle,
        );
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn StartTimerInt(
    LowLevelBase: *mut Library,
    intHandle: APTR,
    timeInterval: ULONG,
    continuous: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a1") intHandle,
            in("d0") timeInterval,
            in("d1") continuous,
        );
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn ElapsedTime(LowLevelBase: *mut Library, context: *mut EClockVal) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a0") context,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn AddVBlankInt(LowLevelBase: *mut Library, intRoutine: APTR, intData: APTR) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a0") intRoutine,
            in("a1") intData,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn RemVBlankInt(LowLevelBase: *mut Library, intHandle: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("a1") intHandle,
        );
    }
}

/// libname: "lowlevel.library" (V40) (Kickstart 3.1)
pub unsafe fn SetJoyPortAttrsA(
    LowLevelBase: *mut Library,
    portNumber: ULONG,
    tagList: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) LowLevelBase,
            in("d0") portNumber,
            in("a1") tagList,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPFix(MathBase: *mut Library, parm: FLOAT) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPFlt(MathBase: *mut Library, integer: LONG) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d0") integer,
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPCmp(MathBase: *mut Library, leftParm: FLOAT, rightParm: FLOAT) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d1") leftParm.to_bits(),
            in("d0") rightParm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPTst(MathBase: *mut Library, parm: FLOAT) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d1") parm.to_bits(),
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPAbs(MathBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPNeg(MathBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPAdd(MathBase: *mut Library, leftParm: FLOAT, rightParm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d1") leftParm.to_bits(),
            in("d0") rightParm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPSub(MathBase: *mut Library, leftParm: FLOAT, rightParm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d1") leftParm.to_bits(),
            in("d0") rightParm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPMul(MathBase: *mut Library, leftParm: FLOAT, rightParm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d1") leftParm.to_bits(),
            in("d0") rightParm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathffp.library"
pub unsafe fn SPDiv(MathBase: *mut Library, leftParm: FLOAT, rightParm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d1") leftParm.to_bits(),
            in("d0") rightParm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathffp.library" (V33) (Kickstart 1.2)
pub unsafe fn SPFloor(MathBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathffp.library" (V33) (Kickstart 1.2)
pub unsafe fn SPCeil(MathBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPFix(MathIeeeDoubBasBase: *mut Library, parm: DOUBLE) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPFlt(MathIeeeDoubBasBase: *mut Library, integer: LONG) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") integer,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPCmp(
    MathIeeeDoubBasBase: *mut Library,
    leftParm: DOUBLE,
    rightParm: DOUBLE,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (leftParm.to_bits() >> 32) as u32,
            in("d1") (leftParm.to_bits() & 0xffff_ffff) as u32,
            in("d2") (rightParm.to_bits() >> 32) as u32,
            in("d3") (rightParm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPTst(MathIeeeDoubBasBase: *mut Library, parm: DOUBLE) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPAbs(MathIeeeDoubBasBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPNeg(MathIeeeDoubBasBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPAdd(
    MathIeeeDoubBasBase: *mut Library,
    leftParm: DOUBLE,
    rightParm: DOUBLE,
) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (leftParm.to_bits() >> 32) as u32,
            in("d1") (leftParm.to_bits() & 0xffff_ffff) as u32,
            in("d2") (rightParm.to_bits() >> 32) as u32,
            in("d3") (rightParm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPSub(
    MathIeeeDoubBasBase: *mut Library,
    leftParm: DOUBLE,
    rightParm: DOUBLE,
) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (leftParm.to_bits() >> 32) as u32,
            in("d1") (leftParm.to_bits() & 0xffff_ffff) as u32,
            in("d2") (rightParm.to_bits() >> 32) as u32,
            in("d3") (rightParm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPMul(
    MathIeeeDoubBasBase: *mut Library,
    factor1: DOUBLE,
    factor2: DOUBLE,
) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (factor1.to_bits() >> 32) as u32,
            in("d1") (factor1.to_bits() & 0xffff_ffff) as u32,
            in("d2") (factor2.to_bits() >> 32) as u32,
            in("d3") (factor2.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubbas.library"
pub unsafe fn IEEEDPDiv(
    MathIeeeDoubBasBase: *mut Library,
    dividend: DOUBLE,
    divisor: DOUBLE,
) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (dividend.to_bits() >> 32) as u32,
            in("d1") (dividend.to_bits() & 0xffff_ffff) as u32,
            in("d2") (divisor.to_bits() >> 32) as u32,
            in("d3") (divisor.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubbas.library" (V33) (Kickstart 1.2)
pub unsafe fn IEEEDPFloor(MathIeeeDoubBasBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubbas.library" (V33) (Kickstart 1.2)
pub unsafe fn IEEEDPCeil(MathIeeeDoubBasBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubBasBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPAtan(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPSin(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPCos(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPTan(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPSincos(
    MathIeeeDoubTransBase: *mut Library,
    pf2: *mut DOUBLE,
    parm: DOUBLE,
) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("a0") pf2,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPSinh(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPCosh(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPTanh(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPExp(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPLog(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPPow(MathIeeeDoubTransBase: *mut Library, SPExp: DOUBLE, arg: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d2") (SPExp.to_bits() >> 32) as u32,
            in("d3") (SPExp.to_bits() & 0xffff_ffff) as u32,
            in("d0") (arg.to_bits() >> 32) as u32,
            in("d1") (arg.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPSqrt(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPTieee(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPFieee(MathIeeeDoubTransBase: *mut Library, single: FLOAT) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") single.to_bits(),
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPAsin(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPAcos(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeedoubtrans.library"
pub unsafe fn IEEEDPLog10(MathIeeeDoubTransBase: *mut Library, parm: DOUBLE) -> DOUBLE {
    let mut asm_ret_value: (u32, u32) = (0, 0);
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeDoubTransBase,
            in("d0") (parm.to_bits() >> 32) as u32,
            in("d1") (parm.to_bits() & 0xffff_ffff) as u32,
            lateout("d0") asm_ret_value.0,
            lateout("d1") asm_ret_value.1,
        );
        return f64::from_bits(((asm_ret_value.0 as u64) << 32) | asm_ret_value.1 as u64);
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPFix(MathIeeeSingBasBase: *mut Library, parm: FLOAT) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPFlt(MathIeeeSingBasBase: *mut Library, integer: LONG) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") integer,
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPCmp(
    MathIeeeSingBasBase: *mut Library,
    leftParm: FLOAT,
    rightParm: FLOAT,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") leftParm.to_bits(),
            in("d1") rightParm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPTst(MathIeeeSingBasBase: *mut Library, parm: FLOAT) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPAbs(MathIeeeSingBasBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPNeg(MathIeeeSingBasBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPAdd(
    MathIeeeSingBasBase: *mut Library,
    leftParm: FLOAT,
    rightParm: FLOAT,
) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") leftParm.to_bits(),
            in("d1") rightParm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPSub(
    MathIeeeSingBasBase: *mut Library,
    leftParm: FLOAT,
    rightParm: FLOAT,
) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") leftParm.to_bits(),
            in("d1") rightParm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPMul(
    MathIeeeSingBasBase: *mut Library,
    leftParm: FLOAT,
    rightParm: FLOAT,
) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") leftParm.to_bits(),
            in("d1") rightParm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPDiv(
    MathIeeeSingBasBase: *mut Library,
    dividend: FLOAT,
    divisor: FLOAT,
) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") dividend.to_bits(),
            in("d1") divisor.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPFloor(MathIeeeSingBasBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingbas.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPCeil(MathIeeeSingBasBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingBasBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPAtan(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPSin(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPCos(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPTan(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPSincos(
    MathIeeeSingTransBase: *mut Library,
    cosptr: *mut FLOAT,
    parm: FLOAT,
) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("a0") cosptr,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPSinh(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPCosh(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPTanh(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPExp(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPLog(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPPow(MathIeeeSingTransBase: *mut Library, SPExp: FLOAT, arg: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d1") SPExp.to_bits(),
            in("d0") arg.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPSqrt(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPTieee(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPFieee(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPAsin(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPAcos(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathieeesingtrans.library" (V36) (Kickstart 2.0)
pub unsafe fn IEEESPLog10(MathIeeeSingTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathIeeeSingTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPAtan(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPSin(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPCos(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPTan(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPSincos(MathTransBase: *mut Library, cosResult: *mut FLOAT, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d1") cosResult,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPSinh(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPCosh(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPTanh(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPExp(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPLog(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPPow(MathTransBase: *mut Library, power: FLOAT, arg: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d1") power.to_bits(),
            in("d0") arg.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPSqrt(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPTieee(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library"
pub unsafe fn SPFieee(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library" (V31) (Kickstart 1.1)
pub unsafe fn SPAsin(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library" (V31) (Kickstart 1.1)
pub unsafe fn SPAcos(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "mathtrans.library" (V31) (Kickstart 1.1)
pub unsafe fn SPLog10(MathTransBase: *mut Library, parm: FLOAT) -> FLOAT {
    let asm_ret_value: u32;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MathTransBase,
            in("d0") parm.to_bits(),
            lateout("d0") asm_ret_value,
        );
        return f32::from_bits(asm_ret_value);
    }
}

/// libname: "misc.resource"
pub unsafe fn AllocMiscResource(
    MiscBase: *mut ::core::ffi::c_void,
    unitNum: ULONG,
    name: CONST_STRPTR,
) -> *mut UBYTE {
    let asm_ret_value: *mut UBYTE;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -6(a6)
            ".short -6",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) MiscBase,
            in("d0") unitNum,
            in("a1") name,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "misc.resource"
pub unsafe fn FreeMiscResource(MiscBase: *mut ::core::ffi::c_void, unitNum: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -12(a6)
            ".short -12",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) MiscBase,
            in("d0") unitNum,
        );
    }
}

/// libname: "nonvolatile.library" (V40) (Kickstart 3.1)
pub unsafe fn GetCopyNV(
    NVBase: *mut Library,
    appName: CONST_STRPTR,
    itemName: CONST_STRPTR,
    killRequesters: LONG,
) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) NVBase,
            in("a0") appName,
            in("a1") itemName,
            in("d1") killRequesters,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "nonvolatile.library" (V40) (Kickstart 3.1)
pub unsafe fn FreeNVData(NVBase: *mut Library, data: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) NVBase,
            in("a0") data,
        );
    }
}

/// libname: "nonvolatile.library" (V40) (Kickstart 3.1)
pub unsafe fn StoreNV(
    NVBase: *mut Library,
    appName: CONST_STRPTR,
    itemName: CONST_STRPTR,
    data: CONST_APTR,
    length: ULONG,
    killRequesters: LONG,
) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) NVBase,
            in("a0") appName,
            in("a1") itemName,
            in("a2") data,
            in("d0") length,
            in("d1") killRequesters,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "nonvolatile.library" (V40) (Kickstart 3.1)
pub unsafe fn DeleteNV(
    NVBase: *mut Library,
    appName: CONST_STRPTR,
    itemName: CONST_STRPTR,
    killRequesters: LONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) NVBase,
            in("a0") appName,
            in("a1") itemName,
            in("d1") killRequesters,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "nonvolatile.library" (V40) (Kickstart 3.1)
pub unsafe fn GetNVInfo(NVBase: *mut Library, killRequesters: LONG) -> *mut NVInfo {
    let asm_ret_value: *mut NVInfo;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) NVBase,
            in("d1") killRequesters,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "nonvolatile.library" (V40) (Kickstart 3.1)
pub unsafe fn GetNVList(
    NVBase: *mut Library,
    appName: CONST_STRPTR,
    killRequesters: LONG,
) -> *mut MinList {
    let asm_ret_value: *mut MinList;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) NVBase,
            in("a0") appName,
            in("d1") killRequesters,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "nonvolatile.library" (V40) (Kickstart 3.1)
pub unsafe fn SetNVProtection(
    NVBase: *mut Library,
    appName: CONST_STRPTR,
    itemName: CONST_STRPTR,
    mask: LONG,
    killRequesters: LONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) NVBase,
            in("a0") appName,
            in("a1") itemName,
            in("d2") mask,
            in("d1") killRequesters,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "palette.gadget" (V40) (Kickstart 3.1)
pub unsafe fn PALETTE_GetClass(PaletteBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) PaletteBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "penmap.image" (V40) (Kickstart 3.1)
pub unsafe fn PENMAP_GetClass(PenMapBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) PenMapBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "potgo.resource"
pub unsafe fn AllocPotBits(PotgoBase: *mut ::core::ffi::c_void, bits: ULONG) -> UWORD {
    let asm_ret_value: UWORD;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -6(a6)
            ".short -6",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) PotgoBase,
            in("d0") bits,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "potgo.resource"
pub unsafe fn FreePotBits(PotgoBase: *mut ::core::ffi::c_void, bits: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -12(a6)
            ".short -12",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) PotgoBase,
            in("d0") bits,
        );
    }
}

/// libname: "potgo.resource"
pub unsafe fn WritePotgo(PotgoBase: *mut ::core::ffi::c_void, word: ULONG, mask: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -18(a6)
            ".short -18",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) PotgoBase,
            in("d0") word,
            in("d1") mask,
        );
    }
}

/// libname: "radiobutton.gadget" (V40) (Kickstart 3.1)
pub unsafe fn RADIOBUTTON_GetClass(RadioButtonBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RadioButtonBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "radiobutton.gadget" (V40) (Kickstart 3.1)
pub unsafe fn AllocRadioButtonNodeA(
    RadioButtonBase: *mut ::core::ffi::c_void,
    columns: ULONG,
    tags: *mut TagItem,
) -> *mut Node {
    let asm_ret_value: *mut Node;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RadioButtonBase,
            in("d0") columns,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "radiobutton.gadget" (V40) (Kickstart 3.1)
pub unsafe fn FreeRadioButtonNode(RadioButtonBase: *mut ::core::ffi::c_void, node: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RadioButtonBase,
            in("a0") node,
        );
    }
}

/// libname: "radiobutton.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SetRadioButtonNodeAttrsA(
    RadioButtonBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RadioButtonBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "radiobutton.gadget" (V40) (Kickstart 3.1)
pub unsafe fn GetRadioButtonNodeAttrsA(
    RadioButtonBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RadioButtonBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "ramdrive.device" (V34) (Kickstart 1.3)
pub unsafe fn KillRAD0(RamdriveDevice: *mut ::core::ffi::c_void) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RamdriveDevice,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "ramdrive.device" (V36) (Kickstart 2.0)
pub unsafe fn KillRAD(RamdriveDevice: *mut ::core::ffi::c_void, unit: ULONG) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RamdriveDevice,
            in("d0") unit,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn LockRealTime(RealTimeBase: *mut Library, lockType: ULONG) -> APTR {
    let asm_ret_value: APTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("d0") lockType,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn UnlockRealTime(RealTimeBase: *mut Library, lock: APTR) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("a0") lock,
        );
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn CreatePlayerA(RealTimeBase: *mut Library, tagList: *const TagItem) -> *mut Player {
    let asm_ret_value: *mut Player;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("a0") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn DeletePlayer(RealTimeBase: *mut Library, player: *mut Player) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("a0") player,
        );
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn SetPlayerAttrsA(
    RealTimeBase: *mut Library,
    player: *mut Player,
    tagList: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("a0") player,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn SetConductorState(
    RealTimeBase: *mut Library,
    player: *mut Player,
    state: ULONG,
    time: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("a0") player,
            in("d0") state,
            in("d1") time,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn ExternalSync(
    RealTimeBase: *mut Library,
    player: *mut Player,
    minTime: LONG,
    maxTime: LONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("a0") player,
            in("d0") minTime,
            in("d1") maxTime,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn NextConductor(
    RealTimeBase: *mut Library,
    previousConductor: *const Conductor,
) -> *mut Conductor {
    let asm_ret_value: *mut Conductor;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("a0") previousConductor,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn FindConductor(RealTimeBase: *mut Library, name: CONST_STRPTR) -> *mut Conductor {
    let asm_ret_value: *mut Conductor;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("a0") name,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "realtime.library" (V37) (Kickstart 2.04)
pub unsafe fn GetPlayerAttrsA(
    RealTimeBase: *mut Library,
    player: *mut Player,
    tagList: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RealTimeBase,
            in("a0") player,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "requester.class" (V40) (Kickstart 3.1)
pub unsafe fn REQUESTER_GetClass(RequesterBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RequesterBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateArgstring(
    RexxSysBase: *mut Library,
    string: CONST_STRPTR,
    length: ULONG,
) -> *mut UBYTE {
    let asm_ret_value: *mut UBYTE;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") string,
            in("d0") length,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn DeleteArgstring(RexxSysBase: *mut Library, argstring: *mut UBYTE) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") argstring,
        );
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn LengthArgstring(RexxSysBase: *mut Library, argstring: *const UBYTE) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") argstring,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn CreateRexxMsg(
    RexxSysBase: *mut Library,
    port: *mut MsgPort,
    extension: CONST_STRPTR,
    host: CONST_STRPTR,
) -> *mut RexxMsg {
    let asm_ret_value: *mut RexxMsg;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") port,
            in("a1") extension,
            in("d0") host,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn DeleteRexxMsg(RexxSysBase: *mut Library, packet: *mut RexxMsg) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") packet,
        );
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn ClearRexxMsg(RexxSysBase: *mut Library, msgptr: *mut RexxMsg, count: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") msgptr,
            in("d0") count,
        );
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn FillRexxMsg(
    RexxSysBase: *mut Library,
    msgptr: *mut RexxMsg,
    count: ULONG,
    mask: ULONG,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") msgptr,
            in("d0") count,
            in("d1") mask,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn IsRexxMsg(RexxSysBase: *mut Library, msgptr: *const RexxMsg) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -168(a6)
            ".short -168",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") msgptr,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn LockRexxBase(RexxSysBase: *mut Library, resource: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -450(a6)
            ".short -450",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("d0") resource,
        );
    }
}

/// libname: "rexxsyslib.library" (V36) (Kickstart 2.0)
pub unsafe fn UnlockRexxBase(RexxSysBase: *mut Library, resource: ULONG) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -456(a6)
            ".short -456",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("d0") resource,
        );
    }
}

/// libname: "rexxsyslib.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn CreateRexxHostPort(
    RexxSysBase: *mut Library,
    basename: CONST_STRPTR,
) -> *mut MsgPort {
    let asm_ret_value: *mut MsgPort;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -480(a6)
            ".short -480",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") basename,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn DeleteRexxHostPort(RexxSysBase: *mut Library, port: *mut MsgPort) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -486(a6)
            ".short -486",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") port,
        );
    }
}

/// libname: "rexxsyslib.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn GetRexxVarFromMsg(
    RexxSysBase: *mut Library,
    var: CONST_STRPTR,
    msgptr: *const RexxMsg,
    value: STRPTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -492(a6)
            ".short -492",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") var,
            in("a2") msgptr,
            in("a1") value,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn SetRexxVarFromMsg(
    RexxSysBase: *mut Library,
    var: CONST_STRPTR,
    msgptr: *mut RexxMsg,
    value: CONST_STRPTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -498(a6)
            ".short -498",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") var,
            in("a2") msgptr,
            in("a1") value,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn LaunchRexxScript(
    RexxSysBase: *mut Library,
    script: CONST_STRPTR,
    replyport: *mut MsgPort,
    extension: CONST_STRPTR,
    input: BPTR,
    output: BPTR,
) -> *mut RexxMsg {
    let asm_ret_value: *mut RexxMsg;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -504(a6)
            ".short -504",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") script,
            in("a1") replyport,
            in("a2") extension,
            in("d1") input,
            in("d2") output,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "rexxsyslib.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn FreeRexxMsg(RexxSysBase: *mut Library, msgptr: *mut RexxMsg) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -510(a6)
            ".short -510",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") msgptr,
        );
    }
}

/// libname: "rexxsyslib.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn GetRexxBufferFromMsg(
    RexxSysBase: *mut Library,
    var: CONST_STRPTR,
    msgptr: *const RexxMsg,
    buffer: STRPTR,
    buffer_size: ULONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -516(a6)
            ".short -516",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) RexxSysBase,
            in("a0") var,
            in("a2") msgptr,
            in("a1") buffer,
            in("d0") buffer_size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "scroller.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SCROLLER_GetClass(ScrollerBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ScrollerBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "sketchboard.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SKETCHBOARD_GetClass(SketchBoardBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SketchBoardBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "slider.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SLIDER_GetClass(SliderBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SliderBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "space.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SPACE_GetClass(SpaceBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SpaceBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "speedbar.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SPEEDBAR_GetClass(SpeedBarBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SpeedBarBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "speedbar.gadget" (V40) (Kickstart 3.1)
pub unsafe fn AllocSpeedButtonNodeA(
    SpeedBarBase: *mut ::core::ffi::c_void,
    number: ULONG,
    tags: *mut TagItem,
) -> *mut Node {
    let asm_ret_value: *mut Node;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) SpeedBarBase,
            in("d0") number,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "speedbar.gadget" (V40) (Kickstart 3.1)
pub unsafe fn FreeSpeedButtonNode(SpeedBarBase: *mut ::core::ffi::c_void, node: *mut Node) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SpeedBarBase,
            in("a0") node,
        );
    }
}

/// libname: "speedbar.gadget" (V40) (Kickstart 3.1)
pub unsafe fn SetSpeedButtonNodeAttrsA(
    SpeedBarBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SpeedBarBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "speedbar.gadget" (V40) (Kickstart 3.1)
pub unsafe fn GetSpeedButtonNodeAttrsA(
    SpeedBarBase: *mut ::core::ffi::c_void,
    node: *mut Node,
    tags: *mut TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) SpeedBarBase,
            in("a0") node,
            in("a1") tags,
        );
    }
}

/// libname: "string.gadget" (V40) (Kickstart 3.1)
pub unsafe fn STRING_GetClass(StringBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) StringBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "texteditor.gadget" (V40) (Kickstart 3.1)
pub unsafe fn TEXTEDITOR_GetClass(TextFieldBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TextFieldBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "texteditor.gadget" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn HighlightSetFormat(
    TextFieldBase: *mut ::core::ffi::c_void,
    object: APTR,
    pos: ULONG,
    end: ULONG,
    style: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) TextFieldBase,
            in("a0") object,
            in("d0") pos,
            in("d1") end,
            in("d2") style,
        );
    }
}

/// libname: "timer.device"
pub unsafe fn AddTime(
    TimerBase: *mut ::core::ffi::c_void,
    dest: *mut TimeVal_Type,
    src: *const TimeVal_Type,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) TimerBase,
            in("a0") dest,
            in("a1") src,
        );
    }
}

/// libname: "timer.device"
pub unsafe fn SubTime(
    TimerBase: *mut ::core::ffi::c_void,
    dest: *mut TimeVal_Type,
    src: *const TimeVal_Type,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) TimerBase,
            in("a0") dest,
            in("a1") src,
        );
    }
}

/// libname: "timer.device"
pub unsafe fn CmpTime(
    TimerBase: *mut ::core::ffi::c_void,
    dest: *const TimeVal_Type,
    src: *const TimeVal_Type,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TimerBase,
            in("a0") dest,
            in("a1") src,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "timer.device" (V36) (Kickstart 2.0)
pub unsafe fn ReadEClock(TimerBase: *mut ::core::ffi::c_void, dest: *mut EClockVal) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TimerBase,
            in("a0") dest,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "timer.device" (V36) (Kickstart 2.0)
pub unsafe fn GetSysTime(TimerBase: *mut ::core::ffi::c_void, dest: *mut TimeVal_Type) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) TimerBase,
            in("a0") dest,
        );
    }
}

/// libname: "trackfile.device" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn TFStartUnitTagList(
    TrackFileBase: *mut ::core::ffi::c_void,
    which_unit: LONG,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TrackFileBase,
            in("d0") which_unit,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "trackfile.device" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn TFStopUnitTagList(
    TrackFileBase: *mut ::core::ffi::c_void,
    which_unit: LONG,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TrackFileBase,
            in("d0") which_unit,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "trackfile.device" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn TFInsertMediaTagList(
    TrackFileBase: *mut ::core::ffi::c_void,
    which_unit: LONG,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TrackFileBase,
            in("d0") which_unit,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "trackfile.device" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn TFEjectMediaTagList(
    TrackFileBase: *mut ::core::ffi::c_void,
    which_unit: LONG,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TrackFileBase,
            in("d0") which_unit,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "trackfile.device" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn TFGetUnitData(
    TrackFileBase: *mut ::core::ffi::c_void,
    which_unit: LONG,
) -> *mut TrackFileUnitData {
    let asm_ret_value: *mut TrackFileUnitData;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TrackFileBase,
            in("d0") which_unit,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "trackfile.device" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn TFFreeUnitData(
    TrackFileBase: *mut ::core::ffi::c_void,
    tfud: *mut TrackFileUnitData,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) TrackFileBase,
            in("a0") tfud,
        );
    }
}

/// libname: "trackfile.device" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn TFChangeUnitTagList(
    TrackFileBase: *mut ::core::ffi::c_void,
    which_unit: LONG,
    tags: *const TagItem,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TrackFileBase,
            in("d0") which_unit,
            in("a0") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "trackfile.device" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn TFExamineFileSize(TrackFileBase: *mut ::core::ffi::c_void, file_size: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TrackFileBase,
            in("d0") file_size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "translator.library"
pub unsafe fn Translate(
    TranslatorBase: *mut Library,
    inputString: CONST_STRPTR,
    inputLength: LONG,
    outputBuffer: STRPTR,
    bufferSize: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) TranslatorBase,
            in("a0") inputString,
            in("d0") inputLength,
            in("a1") outputBuffer,
            in("d1") bufferSize,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn FindTagItem(
    UtilityBase: *mut Library,
    tagVal: Tag,
    tagList: *const TagItem,
) -> *mut TagItem {
    let asm_ret_value: *mut TagItem;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") tagVal,
            in("a0") tagList,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn GetTagData(
    UtilityBase: *mut Library,
    tagValue: Tag,
    defaultVal: ULONG,
    tagList: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") tagValue,
            in("d1") defaultVal,
            in("a0") tagList,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn PackBoolTags(
    UtilityBase: *mut Library,
    initialFlags: ULONG,
    tagList: *const TagItem,
    boolMap: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") initialFlags,
            in("a0") tagList,
            in("a1") boolMap,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn NextTagItem(
    UtilityBase: *mut Library,
    tagListPtr: *mut *mut TagItem,
) -> *mut TagItem {
    let asm_ret_value: *mut TagItem;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") tagListPtr,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn FilterTagChanges(
    UtilityBase: *mut Library,
    changeList: *mut TagItem,
    originalList: *mut TagItem,
    apply: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") changeList,
            in("a1") originalList,
            in("d0") apply,
        );
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn MapTags(
    UtilityBase: *mut Library,
    tagList: *mut TagItem,
    mapList: *const TagItem,
    mapType: ULONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") tagList,
            in("a1") mapList,
            in("d0") mapType,
        );
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn AllocateTagItems(UtilityBase: *mut Library, numTags: ULONG) -> *mut TagItem {
    let asm_ret_value: *mut TagItem;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") numTags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn CloneTagItems(UtilityBase: *mut Library, tagList: *const TagItem) -> *mut TagItem {
    let asm_ret_value: *mut TagItem;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn FreeTagItems(UtilityBase: *mut Library, tagList: *mut TagItem) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") tagList,
        );
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn RefreshTagItemClones(
    UtilityBase: *mut Library,
    clone: *mut TagItem,
    original: *const TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -84(a6)
            ".short -84",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") clone,
            in("a1") original,
        );
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn TagInArray(UtilityBase: *mut Library, tagValue: Tag, tagArray: *const Tag) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") tagValue,
            in("a0") tagArray,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn FilterTagItems(
    UtilityBase: *mut Library,
    tagList: *mut TagItem,
    filterArray: *const Tag,
    logic: ULONG,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") tagList,
            in("a1") filterArray,
            in("d0") logic,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn CallHookPkt(
    UtilityBase: *mut Library,
    hook: *mut Hook,
    object: APTR,
    paramPacket: APTR,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") hook,
            in("a2") object,
            in("a1") paramPacket,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn Amiga2Date(UtilityBase: *mut Library, seconds: ULONG, result: *mut ClockData) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") seconds,
            in("a0") result,
        );
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn Date2Amiga(UtilityBase: *mut Library, date: *const ClockData) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") date,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn CheckDate(UtilityBase: *mut Library, date: *const ClockData) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") date,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn SMult32(UtilityBase: *mut Library, arg1: LONG, arg2: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") arg1,
            in("d1") arg2,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn UMult32(UtilityBase: *mut Library, arg1: ULONG, arg2: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -144(a6)
            ".short -144",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") arg1,
            in("d1") arg2,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn SDivMod32(UtilityBase: *mut Library, dividend: LONG, divisor: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -150(a6)
            ".short -150",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") dividend,
            in("d1") divisor,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V36) (Kickstart 2.0)
pub unsafe fn UDivMod32(UtilityBase: *mut Library, dividend: ULONG, divisor: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -156(a6)
            ".short -156",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") dividend,
            in("d1") divisor,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V37) (Kickstart 2.04)
pub unsafe fn Stricmp(
    UtilityBase: *mut Library,
    string1: CONST_STRPTR,
    string2: CONST_STRPTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -162(a6)
            ".short -162",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") string1,
            in("a1") string2,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V37) (Kickstart 2.04)
pub unsafe fn Strnicmp(
    UtilityBase: *mut Library,
    string1: CONST_STRPTR,
    string2: CONST_STRPTR,
    length: LONG,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -168(a6)
            ".short -168",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") string1,
            in("a1") string2,
            in("d0") length,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V37) (Kickstart 2.04)
pub unsafe fn ToUpper(UtilityBase: *mut Library, character: ULONG) -> UBYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -174(a6)
            ".short -174",
            "and.w #0x00ff, %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value as u8;
    }
}

/// libname: "utility.library" (V37) (Kickstart 2.04)
pub unsafe fn ToLower(UtilityBase: *mut Library, character: ULONG) -> UBYTE {
    let asm_ret_value: i16;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -180(a6)
            ".short -180",
            "and.w #0x00ff, %d0",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") character,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value as u8;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn ApplyTagChanges(
    UtilityBase: *mut Library,
    list: *mut TagItem,
    changeList: *const TagItem,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -186(a6)
            ".short -186",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") list,
            in("a1") changeList,
        );
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn SMult64(UtilityBase: *mut Library, arg1: LONG, arg2: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -198(a6)
            ".short -198",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") arg1,
            in("d1") arg2,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn UMult64(UtilityBase: *mut Library, arg1: ULONG, arg2: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -204(a6)
            ".short -204",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d0") arg1,
            in("d1") arg2,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn PackStructureTags(
    UtilityBase: *mut Library,
    pack: APTR,
    packTable: *const ULONG,
    tagList: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -210(a6)
            ".short -210",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") pack,
            in("a1") packTable,
            in("a2") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn UnpackStructureTags(
    UtilityBase: *mut Library,
    pack: CONST_APTR,
    packTable: *const ULONG,
    tagList: *mut TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -216(a6)
            ".short -216",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") pack,
            in("a1") packTable,
            in("a2") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn AddNamedObject(
    UtilityBase: *mut Library,
    nameSpace: *mut NamedObject,
    object: *mut NamedObject,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -222(a6)
            ".short -222",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") nameSpace,
            in("a1") object,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn AllocNamedObjectA(
    UtilityBase: *mut Library,
    name: CONST_STRPTR,
    tagList: *const TagItem,
) -> *mut NamedObject {
    let asm_ret_value: *mut NamedObject;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -228(a6)
            ".short -228",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") name,
            in("a1") tagList,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn AttemptRemNamedObject(UtilityBase: *mut Library, object: *mut NamedObject) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -234(a6)
            ".short -234",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") object,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn FindNamedObject(
    UtilityBase: *mut Library,
    nameSpace: *mut NamedObject,
    name: CONST_STRPTR,
    lastObject: *const NamedObject,
) -> *mut NamedObject {
    let asm_ret_value: *mut NamedObject;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -240(a6)
            ".short -240",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") nameSpace,
            in("a1") name,
            in("a2") lastObject,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn FreeNamedObject(UtilityBase: *mut Library, object: *mut NamedObject) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -246(a6)
            ".short -246",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") object,
        );
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn NamedObjectName(UtilityBase: *mut Library, object: *mut NamedObject) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -252(a6)
            ".short -252",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") object,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn ReleaseNamedObject(UtilityBase: *mut Library, object: *mut NamedObject) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -258(a6)
            ".short -258",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") object,
        );
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn RemNamedObject(
    UtilityBase: *mut Library,
    object: *mut NamedObject,
    message: *mut Message,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -264(a6)
            ".short -264",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") object,
            in("a1") message,
        );
    }
}

/// libname: "utility.library" (V39) (Kickstart 3.0)
pub unsafe fn GetUniqueID(UtilityBase: *mut Library) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -270(a6)
            ".short -270",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn VSNPrintf(
    UtilityBase: *mut Library,
    buffer: STRPTR,
    bufsize: ULONG,
    fmt: CONST_STRPTR,
    data: CONST_APTR,
) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -312(a6)
            ".short -312",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a0") buffer,
            in("d0") bufsize,
            in("a1") fmt,
            in("a2") data,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn Strncpy(
    UtilityBase: *mut Library,
    dst: STRPTR,
    src: CONST_STRPTR,
    size: ULONG,
) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -438(a6)
            ".short -438",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a1") dst,
            in("a0") src,
            in("d0") size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn Strncat(
    UtilityBase: *mut Library,
    dst: STRPTR,
    src: CONST_STRPTR,
    size: ULONG,
) -> STRPTR {
    let asm_ret_value: STRPTR;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -444(a6)
            ".short -444",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("a1") dst,
            in("a0") src,
            in("d0") size,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn SDivMod64(UtilityBase: *mut Library, hi: LONG, lo: LONG, divisor: LONG) -> LONG {
    let asm_ret_value: LONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -450(a6)
            ".short -450",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d1") hi,
            in("d0") lo,
            in("d2") divisor,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "utility.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn UDivMod64(UtilityBase: *mut Library, hi: ULONG, lo: ULONG, divisor: ULONG) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -456(a6)
            ".short -456",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) UtilityBase,
            in("d1") hi,
            in("d0") lo,
            in("d2") divisor,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "virtual.gadget" (V40) (Kickstart 3.1)
pub unsafe fn VIRTUAL_GetClass(VirtualBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) VirtualBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "virtual.gadget" (V40) (Kickstart 3.1)
pub unsafe fn RefreshVirtualGadget(
    VirtualBase: *mut ::core::ffi::c_void,
    gadget: *mut Gadget,
    obj: *mut Object,
    window: *mut Window,
    requester: *mut Requester,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -36(a6)
            ".short -36",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) VirtualBase,
            in("a0") gadget,
            in("a1") obj,
            in("a2") window,
            in("a3") requester,
        );
    }
}

/// libname: "virtual.gadget" (V40) (Kickstart 3.1)
pub unsafe fn RethinkVirtualSize(
    VirtualBase: *mut ::core::ffi::c_void,
    virt_obj: *mut Object,
    rootlayout: *mut Object,
    font: *mut TextFont,
    screen: *mut Screen,
    layoutlimits: *mut LayoutLimits,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -42(a6)
            ".short -42",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) VirtualBase,
            in("a0") virt_obj,
            in("a1") rootlayout,
            in("a2") font,
            in("a3") screen,
            in("d0") layoutlimits,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V36) (Kickstart 2.0)
pub unsafe fn UpdateWorkbench(
    WorkbenchBase: *mut Library,
    name: CONST_STRPTR,
    lock: BPTR,
    action: LONG,
) {
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d0-%d1/%a0-%a1, -(%sp)
            ".short 0xc0c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d0-%d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") name,
            in("a1") lock,
            in("d0") action,
        );
    }
}

/// libname: "workbench.library" (V36) (Kickstart 2.0)
pub unsafe fn AddAppWindowA(
    WorkbenchBase: *mut Library,
    id: ULONG,
    userdata: ULONG,
    window: *mut Window,
    msgport: *mut MsgPort,
    taglist: *const TagItem,
) -> *mut AppWindow {
    let asm_ret_value: *mut AppWindow;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -48(a6)
            ".short -48",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("d0") id,
            in("d1") userdata,
            in("a0") window,
            in("a1") msgport,
            in("a2") taglist,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V36) (Kickstart 2.0)
pub unsafe fn RemoveAppWindow(WorkbenchBase: *mut Library, appWindow: *mut AppWindow) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -54(a6)
            ".short -54",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") appWindow,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V36) (Kickstart 2.0)
pub unsafe fn AddAppIconA(
    WorkbenchBase: *mut Library,
    id: ULONG,
    userdata: ULONG,
    text: CONST_STRPTR,
    msgport: *mut MsgPort,
    lock: BPTR,
    diskobj: *mut DiskObject,
    taglist: *const TagItem,
) -> *mut AppIcon {
    let asm_ret_value: *mut AppIcon;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l %a4, -(%sp)",
            "move.l {basereg}, %a6",
            "move.l {a4reg}, %a4",
            ".short 0x4eae", // jsr -60(a6)
            ".short -60",
            "move.l (%sp)+, %a4",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("d0") id,
            in("d1") userdata,
            in("a0") text,
            in("a1") msgport,
            in("a2") lock,
            in("a3") diskobj,
            a4reg = in(reg) taglist,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V36) (Kickstart 2.0)
pub unsafe fn RemoveAppIcon(WorkbenchBase: *mut Library, appIcon: *mut AppIcon) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -66(a6)
            ".short -66",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") appIcon,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V36) (Kickstart 2.0)
pub unsafe fn AddAppMenuItemA(
    WorkbenchBase: *mut Library,
    id: ULONG,
    userdata: ULONG,
    text: CONST_STRPTR,
    msgport: *mut MsgPort,
    taglist: *const TagItem,
) -> *mut AppMenuItem {
    let asm_ret_value: *mut AppMenuItem;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -72(a6)
            ".short -72",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("d0") id,
            in("d1") userdata,
            in("a0") text,
            in("a1") msgport,
            in("a2") taglist,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V36) (Kickstart 2.0)
pub unsafe fn RemoveAppMenuItem(
    WorkbenchBase: *mut Library,
    appMenuItem: *mut AppMenuItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -78(a6)
            ".short -78",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") appMenuItem,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V39) (Kickstart 3.0)
pub unsafe fn WBInfo(
    WorkbenchBase: *mut Library,
    lock: BPTR,
    name: CONST_STRPTR,
    screen: *mut Screen,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -90(a6)
            ".short -90",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") lock,
            in("a1") name,
            in("a2") screen,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn OpenWorkbenchObjectA(
    WorkbenchBase: *mut Library,
    name: CONST_STRPTR,
    tags: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -96(a6)
            ".short -96",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") name,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn CloseWorkbenchObjectA(
    WorkbenchBase: *mut Library,
    name: CONST_STRPTR,
    tags: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -102(a6)
            ".short -102",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") name,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn WorkbenchControlA(
    WorkbenchBase: *mut Library,
    name: CONST_STRPTR,
    tags: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -108(a6)
            ".short -108",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") name,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn AddAppWindowDropZoneA(
    WorkbenchBase: *mut Library,
    aw: *mut AppWindow,
    id: ULONG,
    userdata: ULONG,
    tags: *const TagItem,
) -> *mut AppWindowDropZone {
    let asm_ret_value: *mut AppWindowDropZone;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -114(a6)
            ".short -114",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") aw,
            in("d0") id,
            in("d1") userdata,
            in("a1") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn RemoveAppWindowDropZone(
    WorkbenchBase: *mut Library,
    aw: *mut AppWindow,
    dropZone: *mut AppWindowDropZone,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -120(a6)
            ".short -120",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") aw,
            in("a1") dropZone,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn ChangeWorkbenchSelectionA(
    WorkbenchBase: *mut Library,
    name: CONST_STRPTR,
    hook: *mut Hook,
    tags: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -126(a6)
            ".short -126",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") name,
            in("a1") hook,
            in("a2") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V44) (Kickstart 3.5 / 1999)
pub unsafe fn MakeWorkbenchObjectVisibleA(
    WorkbenchBase: *mut Library,
    name: CONST_STRPTR,
    tags: *const TagItem,
) -> BOOL {
    let asm_ret_value: BOOL;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -132(a6)
            ".short -132",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") name,
            in("a1") tags,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "workbench.library" (V47) (Kickstart 3.2 / 2020)
pub unsafe fn WhichWorkbenchObjectA(
    WorkbenchBase: *mut Library,
    window: *mut Window,
    x: LONG,
    y: LONG,
    tags: *const TagItem,
) -> ULONG {
    let asm_ret_value: ULONG;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -138(a6)
            ".short -138",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WorkbenchBase,
            in("a0") window,
            in("d0") x,
            in("d1") y,
            in("a1") tags,
            lateout("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "window.class" (V40) (Kickstart 3.1)
pub unsafe fn WINDOW_GetClass(WindowBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) WindowBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

/// libname: "listview.gadget" (V40) (Kickstart 3.1)
pub unsafe fn LISTVIEW_GetClass(ListViewBase: *mut ::core::ffi::c_void) -> *mut Class {
    let asm_ret_value: *mut Class;
    unsafe {
        asm!(
            ".short 0x48e7", // movem.l %d1/%a0-%a1, -(%sp)
            ".short 0x40c0",
            "move.l %a6, -(%sp)",
            "move.l {basereg}, %a6",
            ".short 0x4eae", // jsr -30(a6)
            ".short -30",
            "move.l (%sp)+, %a6",
            "movem.l (%sp)+, %d1/%a0-%a1",
            basereg = in(reg) ListViewBase,
            out("d0") asm_ret_value,
        );
        return asm_ret_value;
    }
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrinterUnit {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DocFile {
    pub _address: u8,
}
